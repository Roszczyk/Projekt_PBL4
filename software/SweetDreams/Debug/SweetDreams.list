
SweetDreams.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab88  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800ac48  0800ac48  0001ac48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b154  0800b154  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b154  0800b154  0001b154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b15c  0800b15c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b15c  0800b15c  0001b15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b160  0800b160  0001b160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200001e0  0800b340  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  0800b340  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010502  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002691  00000000  00000000  00030706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  00032d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  00033c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014747  00000000  00000000  00034a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114aa  00000000  00000000  0004915f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a6e2  00000000  00000000  0005a609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4ceb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000465c  00000000  00000000  000d4d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ac30 	.word	0x0800ac30

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800ac30 	.word	0x0800ac30

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f827 	bl	8001490 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff77 	bl	8001340 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f819 	bl	8001490 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f80f 	bl	8001490 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff9f 	bl	80013c4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff95 	bl	80013c4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f001 febe 	bl	80022e4 <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f001 feb9 	bl	80022e4 <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	469b      	mov	fp, r3
 800057a:	d433      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057c:	465a      	mov	r2, fp
 800057e:	4653      	mov	r3, sl
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83a      	bhi.n	8000606 <__udivmoddi4+0xc2>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e078      	b.n	8000688 <__udivmoddi4+0x144>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e075      	b.n	800068e <__udivmoddi4+0x14a>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e028      	b.n	800060e <__udivmoddi4+0xca>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	4652      	mov	r2, sl
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	4641      	mov	r1, r8
 80005f0:	0013      	movs	r3, r2
 80005f2:	464a      	mov	r2, r9
 80005f4:	408a      	lsls	r2, r1
 80005f6:	0017      	movs	r7, r2
 80005f8:	4642      	mov	r2, r8
 80005fa:	431f      	orrs	r7, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	4093      	lsls	r3, r2
 8000600:	001e      	movs	r6, r3
 8000602:	42af      	cmp	r7, r5
 8000604:	d9c4      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000606:	2200      	movs	r2, #0
 8000608:	2300      	movs	r3, #0
 800060a:	9200      	str	r2, [sp, #0]
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	4643      	mov	r3, r8
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0d9      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000614:	07fb      	lsls	r3, r7, #31
 8000616:	0872      	lsrs	r2, r6, #1
 8000618:	431a      	orrs	r2, r3
 800061a:	4646      	mov	r6, r8
 800061c:	087b      	lsrs	r3, r7, #1
 800061e:	e00e      	b.n	800063e <__udivmoddi4+0xfa>
 8000620:	42ab      	cmp	r3, r5
 8000622:	d101      	bne.n	8000628 <__udivmoddi4+0xe4>
 8000624:	42a2      	cmp	r2, r4
 8000626:	d80c      	bhi.n	8000642 <__udivmoddi4+0xfe>
 8000628:	1aa4      	subs	r4, r4, r2
 800062a:	419d      	sbcs	r5, r3
 800062c:	2001      	movs	r0, #1
 800062e:	1924      	adds	r4, r4, r4
 8000630:	416d      	adcs	r5, r5
 8000632:	2100      	movs	r1, #0
 8000634:	3e01      	subs	r6, #1
 8000636:	1824      	adds	r4, r4, r0
 8000638:	414d      	adcs	r5, r1
 800063a:	2e00      	cmp	r6, #0
 800063c:	d006      	beq.n	800064c <__udivmoddi4+0x108>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d9ee      	bls.n	8000620 <__udivmoddi4+0xdc>
 8000642:	3e01      	subs	r6, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2e00      	cmp	r6, #0
 800064a:	d1f8      	bne.n	800063e <__udivmoddi4+0xfa>
 800064c:	9800      	ldr	r0, [sp, #0]
 800064e:	9901      	ldr	r1, [sp, #4]
 8000650:	465b      	mov	r3, fp
 8000652:	1900      	adds	r0, r0, r4
 8000654:	4169      	adcs	r1, r5
 8000656:	2b00      	cmp	r3, #0
 8000658:	db24      	blt.n	80006a4 <__udivmoddi4+0x160>
 800065a:	002b      	movs	r3, r5
 800065c:	465a      	mov	r2, fp
 800065e:	4644      	mov	r4, r8
 8000660:	40d3      	lsrs	r3, r2
 8000662:	002a      	movs	r2, r5
 8000664:	40e2      	lsrs	r2, r4
 8000666:	001c      	movs	r4, r3
 8000668:	465b      	mov	r3, fp
 800066a:	0015      	movs	r5, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	db2a      	blt.n	80006c6 <__udivmoddi4+0x182>
 8000670:	0026      	movs	r6, r4
 8000672:	409e      	lsls	r6, r3
 8000674:	0033      	movs	r3, r6
 8000676:	0026      	movs	r6, r4
 8000678:	4647      	mov	r7, r8
 800067a:	40be      	lsls	r6, r7
 800067c:	0032      	movs	r2, r6
 800067e:	1a80      	subs	r0, r0, r2
 8000680:	4199      	sbcs	r1, r3
 8000682:	9000      	str	r0, [sp, #0]
 8000684:	9101      	str	r1, [sp, #4]
 8000686:	e79f      	b.n	80005c8 <__udivmoddi4+0x84>
 8000688:	42a3      	cmp	r3, r4
 800068a:	d8bc      	bhi.n	8000606 <__udivmoddi4+0xc2>
 800068c:	e783      	b.n	8000596 <__udivmoddi4+0x52>
 800068e:	4642      	mov	r2, r8
 8000690:	2320      	movs	r3, #32
 8000692:	2100      	movs	r1, #0
 8000694:	1a9b      	subs	r3, r3, r2
 8000696:	2200      	movs	r2, #0
 8000698:	9100      	str	r1, [sp, #0]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	2201      	movs	r2, #1
 800069e:	40da      	lsrs	r2, r3
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	e786      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a4:	4642      	mov	r2, r8
 80006a6:	2320      	movs	r3, #32
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	4646      	mov	r6, r8
 80006ae:	409a      	lsls	r2, r3
 80006b0:	0023      	movs	r3, r4
 80006b2:	40f3      	lsrs	r3, r6
 80006b4:	4644      	mov	r4, r8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	002a      	movs	r2, r5
 80006ba:	40e2      	lsrs	r2, r4
 80006bc:	001c      	movs	r4, r3
 80006be:	465b      	mov	r3, fp
 80006c0:	0015      	movs	r5, r2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dad4      	bge.n	8000670 <__udivmoddi4+0x12c>
 80006c6:	4642      	mov	r2, r8
 80006c8:	002f      	movs	r7, r5
 80006ca:	2320      	movs	r3, #32
 80006cc:	0026      	movs	r6, r4
 80006ce:	4097      	lsls	r7, r2
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	40de      	lsrs	r6, r3
 80006d4:	003b      	movs	r3, r7
 80006d6:	4333      	orrs	r3, r6
 80006d8:	e7cd      	b.n	8000676 <__udivmoddi4+0x132>
 80006da:	46c0      	nop			; (mov r8, r8)

080006dc <__aeabi_dadd>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	464f      	mov	r7, r9
 80006e0:	4646      	mov	r6, r8
 80006e2:	46d6      	mov	lr, sl
 80006e4:	000d      	movs	r5, r1
 80006e6:	0004      	movs	r4, r0
 80006e8:	b5c0      	push	{r6, r7, lr}
 80006ea:	001f      	movs	r7, r3
 80006ec:	0011      	movs	r1, r2
 80006ee:	0328      	lsls	r0, r5, #12
 80006f0:	0f62      	lsrs	r2, r4, #29
 80006f2:	0a40      	lsrs	r0, r0, #9
 80006f4:	4310      	orrs	r0, r2
 80006f6:	007a      	lsls	r2, r7, #1
 80006f8:	0d52      	lsrs	r2, r2, #21
 80006fa:	00e3      	lsls	r3, r4, #3
 80006fc:	033c      	lsls	r4, r7, #12
 80006fe:	4691      	mov	r9, r2
 8000700:	0a64      	lsrs	r4, r4, #9
 8000702:	0ffa      	lsrs	r2, r7, #31
 8000704:	0f4f      	lsrs	r7, r1, #29
 8000706:	006e      	lsls	r6, r5, #1
 8000708:	4327      	orrs	r7, r4
 800070a:	4692      	mov	sl, r2
 800070c:	46b8      	mov	r8, r7
 800070e:	0d76      	lsrs	r6, r6, #21
 8000710:	0fed      	lsrs	r5, r5, #31
 8000712:	00c9      	lsls	r1, r1, #3
 8000714:	4295      	cmp	r5, r2
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x3e>
 8000718:	e099      	b.n	800084e <__aeabi_dadd+0x172>
 800071a:	464c      	mov	r4, r9
 800071c:	1b34      	subs	r4, r6, r4
 800071e:	46a4      	mov	ip, r4
 8000720:	2c00      	cmp	r4, #0
 8000722:	dc00      	bgt.n	8000726 <__aeabi_dadd+0x4a>
 8000724:	e07c      	b.n	8000820 <__aeabi_dadd+0x144>
 8000726:	464a      	mov	r2, r9
 8000728:	2a00      	cmp	r2, #0
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0x52>
 800072c:	e0b8      	b.n	80008a0 <__aeabi_dadd+0x1c4>
 800072e:	4ac5      	ldr	r2, [pc, #788]	; (8000a44 <__aeabi_dadd+0x368>)
 8000730:	4296      	cmp	r6, r2
 8000732:	d100      	bne.n	8000736 <__aeabi_dadd+0x5a>
 8000734:	e11c      	b.n	8000970 <__aeabi_dadd+0x294>
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	003c      	movs	r4, r7
 800073a:	0412      	lsls	r2, r2, #16
 800073c:	4314      	orrs	r4, r2
 800073e:	46a0      	mov	r8, r4
 8000740:	4662      	mov	r2, ip
 8000742:	2a38      	cmp	r2, #56	; 0x38
 8000744:	dd00      	ble.n	8000748 <__aeabi_dadd+0x6c>
 8000746:	e161      	b.n	8000a0c <__aeabi_dadd+0x330>
 8000748:	2a1f      	cmp	r2, #31
 800074a:	dd00      	ble.n	800074e <__aeabi_dadd+0x72>
 800074c:	e1cc      	b.n	8000ae8 <__aeabi_dadd+0x40c>
 800074e:	4664      	mov	r4, ip
 8000750:	2220      	movs	r2, #32
 8000752:	1b12      	subs	r2, r2, r4
 8000754:	4644      	mov	r4, r8
 8000756:	4094      	lsls	r4, r2
 8000758:	000f      	movs	r7, r1
 800075a:	46a1      	mov	r9, r4
 800075c:	4664      	mov	r4, ip
 800075e:	4091      	lsls	r1, r2
 8000760:	40e7      	lsrs	r7, r4
 8000762:	464c      	mov	r4, r9
 8000764:	1e4a      	subs	r2, r1, #1
 8000766:	4191      	sbcs	r1, r2
 8000768:	433c      	orrs	r4, r7
 800076a:	4642      	mov	r2, r8
 800076c:	4321      	orrs	r1, r4
 800076e:	4664      	mov	r4, ip
 8000770:	40e2      	lsrs	r2, r4
 8000772:	1a80      	subs	r0, r0, r2
 8000774:	1a5c      	subs	r4, r3, r1
 8000776:	42a3      	cmp	r3, r4
 8000778:	419b      	sbcs	r3, r3
 800077a:	425f      	negs	r7, r3
 800077c:	1bc7      	subs	r7, r0, r7
 800077e:	023b      	lsls	r3, r7, #8
 8000780:	d400      	bmi.n	8000784 <__aeabi_dadd+0xa8>
 8000782:	e0d0      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000784:	027f      	lsls	r7, r7, #9
 8000786:	0a7f      	lsrs	r7, r7, #9
 8000788:	2f00      	cmp	r7, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0xb2>
 800078c:	e0ff      	b.n	800098e <__aeabi_dadd+0x2b2>
 800078e:	0038      	movs	r0, r7
 8000790:	f001 fd8a 	bl	80022a8 <__clzsi2>
 8000794:	0001      	movs	r1, r0
 8000796:	3908      	subs	r1, #8
 8000798:	2320      	movs	r3, #32
 800079a:	0022      	movs	r2, r4
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	408f      	lsls	r7, r1
 80007a0:	40da      	lsrs	r2, r3
 80007a2:	408c      	lsls	r4, r1
 80007a4:	4317      	orrs	r7, r2
 80007a6:	42b1      	cmp	r1, r6
 80007a8:	da00      	bge.n	80007ac <__aeabi_dadd+0xd0>
 80007aa:	e0ff      	b.n	80009ac <__aeabi_dadd+0x2d0>
 80007ac:	1b89      	subs	r1, r1, r6
 80007ae:	1c4b      	adds	r3, r1, #1
 80007b0:	2b1f      	cmp	r3, #31
 80007b2:	dd00      	ble.n	80007b6 <__aeabi_dadd+0xda>
 80007b4:	e0a8      	b.n	8000908 <__aeabi_dadd+0x22c>
 80007b6:	2220      	movs	r2, #32
 80007b8:	0039      	movs	r1, r7
 80007ba:	1ad2      	subs	r2, r2, r3
 80007bc:	0020      	movs	r0, r4
 80007be:	4094      	lsls	r4, r2
 80007c0:	4091      	lsls	r1, r2
 80007c2:	40d8      	lsrs	r0, r3
 80007c4:	1e62      	subs	r2, r4, #1
 80007c6:	4194      	sbcs	r4, r2
 80007c8:	40df      	lsrs	r7, r3
 80007ca:	2600      	movs	r6, #0
 80007cc:	4301      	orrs	r1, r0
 80007ce:	430c      	orrs	r4, r1
 80007d0:	0763      	lsls	r3, r4, #29
 80007d2:	d009      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007d4:	230f      	movs	r3, #15
 80007d6:	4023      	ands	r3, r4
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d005      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007dc:	1d23      	adds	r3, r4, #4
 80007de:	42a3      	cmp	r3, r4
 80007e0:	41a4      	sbcs	r4, r4
 80007e2:	4264      	negs	r4, r4
 80007e4:	193f      	adds	r7, r7, r4
 80007e6:	001c      	movs	r4, r3
 80007e8:	023b      	lsls	r3, r7, #8
 80007ea:	d400      	bmi.n	80007ee <__aeabi_dadd+0x112>
 80007ec:	e09e      	b.n	800092c <__aeabi_dadd+0x250>
 80007ee:	4b95      	ldr	r3, [pc, #596]	; (8000a44 <__aeabi_dadd+0x368>)
 80007f0:	3601      	adds	r6, #1
 80007f2:	429e      	cmp	r6, r3
 80007f4:	d100      	bne.n	80007f8 <__aeabi_dadd+0x11c>
 80007f6:	e0b7      	b.n	8000968 <__aeabi_dadd+0x28c>
 80007f8:	4a93      	ldr	r2, [pc, #588]	; (8000a48 <__aeabi_dadd+0x36c>)
 80007fa:	08e4      	lsrs	r4, r4, #3
 80007fc:	4017      	ands	r7, r2
 80007fe:	077b      	lsls	r3, r7, #29
 8000800:	0571      	lsls	r1, r6, #21
 8000802:	027f      	lsls	r7, r7, #9
 8000804:	4323      	orrs	r3, r4
 8000806:	0b3f      	lsrs	r7, r7, #12
 8000808:	0d4a      	lsrs	r2, r1, #21
 800080a:	0512      	lsls	r2, r2, #20
 800080c:	433a      	orrs	r2, r7
 800080e:	07ed      	lsls	r5, r5, #31
 8000810:	432a      	orrs	r2, r5
 8000812:	0018      	movs	r0, r3
 8000814:	0011      	movs	r1, r2
 8000816:	bce0      	pop	{r5, r6, r7}
 8000818:	46ba      	mov	sl, r7
 800081a:	46b1      	mov	r9, r6
 800081c:	46a8      	mov	r8, r5
 800081e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000820:	2c00      	cmp	r4, #0
 8000822:	d04b      	beq.n	80008bc <__aeabi_dadd+0x1e0>
 8000824:	464c      	mov	r4, r9
 8000826:	1ba4      	subs	r4, r4, r6
 8000828:	46a4      	mov	ip, r4
 800082a:	2e00      	cmp	r6, #0
 800082c:	d000      	beq.n	8000830 <__aeabi_dadd+0x154>
 800082e:	e123      	b.n	8000a78 <__aeabi_dadd+0x39c>
 8000830:	0004      	movs	r4, r0
 8000832:	431c      	orrs	r4, r3
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x15c>
 8000836:	e1af      	b.n	8000b98 <__aeabi_dadd+0x4bc>
 8000838:	4662      	mov	r2, ip
 800083a:	1e54      	subs	r4, r2, #1
 800083c:	2a01      	cmp	r2, #1
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x166>
 8000840:	e215      	b.n	8000c6e <__aeabi_dadd+0x592>
 8000842:	4d80      	ldr	r5, [pc, #512]	; (8000a44 <__aeabi_dadd+0x368>)
 8000844:	45ac      	cmp	ip, r5
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x16e>
 8000848:	e1c8      	b.n	8000bdc <__aeabi_dadd+0x500>
 800084a:	46a4      	mov	ip, r4
 800084c:	e11b      	b.n	8000a86 <__aeabi_dadd+0x3aa>
 800084e:	464a      	mov	r2, r9
 8000850:	1ab2      	subs	r2, r6, r2
 8000852:	4694      	mov	ip, r2
 8000854:	2a00      	cmp	r2, #0
 8000856:	dc00      	bgt.n	800085a <__aeabi_dadd+0x17e>
 8000858:	e0ac      	b.n	80009b4 <__aeabi_dadd+0x2d8>
 800085a:	464a      	mov	r2, r9
 800085c:	2a00      	cmp	r2, #0
 800085e:	d043      	beq.n	80008e8 <__aeabi_dadd+0x20c>
 8000860:	4a78      	ldr	r2, [pc, #480]	; (8000a44 <__aeabi_dadd+0x368>)
 8000862:	4296      	cmp	r6, r2
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0x18c>
 8000866:	e1af      	b.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	003c      	movs	r4, r7
 800086c:	0412      	lsls	r2, r2, #16
 800086e:	4314      	orrs	r4, r2
 8000870:	46a0      	mov	r8, r4
 8000872:	4662      	mov	r2, ip
 8000874:	2a38      	cmp	r2, #56	; 0x38
 8000876:	dc67      	bgt.n	8000948 <__aeabi_dadd+0x26c>
 8000878:	2a1f      	cmp	r2, #31
 800087a:	dc00      	bgt.n	800087e <__aeabi_dadd+0x1a2>
 800087c:	e15f      	b.n	8000b3e <__aeabi_dadd+0x462>
 800087e:	4647      	mov	r7, r8
 8000880:	3a20      	subs	r2, #32
 8000882:	40d7      	lsrs	r7, r2
 8000884:	4662      	mov	r2, ip
 8000886:	2a20      	cmp	r2, #32
 8000888:	d005      	beq.n	8000896 <__aeabi_dadd+0x1ba>
 800088a:	4664      	mov	r4, ip
 800088c:	2240      	movs	r2, #64	; 0x40
 800088e:	1b12      	subs	r2, r2, r4
 8000890:	4644      	mov	r4, r8
 8000892:	4094      	lsls	r4, r2
 8000894:	4321      	orrs	r1, r4
 8000896:	1e4a      	subs	r2, r1, #1
 8000898:	4191      	sbcs	r1, r2
 800089a:	000c      	movs	r4, r1
 800089c:	433c      	orrs	r4, r7
 800089e:	e057      	b.n	8000950 <__aeabi_dadd+0x274>
 80008a0:	003a      	movs	r2, r7
 80008a2:	430a      	orrs	r2, r1
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x1cc>
 80008a6:	e105      	b.n	8000ab4 <__aeabi_dadd+0x3d8>
 80008a8:	0022      	movs	r2, r4
 80008aa:	3a01      	subs	r2, #1
 80008ac:	2c01      	cmp	r4, #1
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dadd+0x1d6>
 80008b0:	e182      	b.n	8000bb8 <__aeabi_dadd+0x4dc>
 80008b2:	4c64      	ldr	r4, [pc, #400]	; (8000a44 <__aeabi_dadd+0x368>)
 80008b4:	45a4      	cmp	ip, r4
 80008b6:	d05b      	beq.n	8000970 <__aeabi_dadd+0x294>
 80008b8:	4694      	mov	ip, r2
 80008ba:	e741      	b.n	8000740 <__aeabi_dadd+0x64>
 80008bc:	4c63      	ldr	r4, [pc, #396]	; (8000a4c <__aeabi_dadd+0x370>)
 80008be:	1c77      	adds	r7, r6, #1
 80008c0:	4227      	tst	r7, r4
 80008c2:	d000      	beq.n	80008c6 <__aeabi_dadd+0x1ea>
 80008c4:	e0c4      	b.n	8000a50 <__aeabi_dadd+0x374>
 80008c6:	0004      	movs	r4, r0
 80008c8:	431c      	orrs	r4, r3
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d000      	beq.n	80008d0 <__aeabi_dadd+0x1f4>
 80008ce:	e169      	b.n	8000ba4 <__aeabi_dadd+0x4c8>
 80008d0:	2c00      	cmp	r4, #0
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x1fa>
 80008d4:	e1bf      	b.n	8000c56 <__aeabi_dadd+0x57a>
 80008d6:	4644      	mov	r4, r8
 80008d8:	430c      	orrs	r4, r1
 80008da:	d000      	beq.n	80008de <__aeabi_dadd+0x202>
 80008dc:	e1d0      	b.n	8000c80 <__aeabi_dadd+0x5a4>
 80008de:	0742      	lsls	r2, r0, #29
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	08c0      	lsrs	r0, r0, #3
 80008e6:	e029      	b.n	800093c <__aeabi_dadd+0x260>
 80008e8:	003a      	movs	r2, r7
 80008ea:	430a      	orrs	r2, r1
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dadd+0x214>
 80008ee:	e170      	b.n	8000bd2 <__aeabi_dadd+0x4f6>
 80008f0:	4662      	mov	r2, ip
 80008f2:	4664      	mov	r4, ip
 80008f4:	3a01      	subs	r2, #1
 80008f6:	2c01      	cmp	r4, #1
 80008f8:	d100      	bne.n	80008fc <__aeabi_dadd+0x220>
 80008fa:	e0e0      	b.n	8000abe <__aeabi_dadd+0x3e2>
 80008fc:	4c51      	ldr	r4, [pc, #324]	; (8000a44 <__aeabi_dadd+0x368>)
 80008fe:	45a4      	cmp	ip, r4
 8000900:	d100      	bne.n	8000904 <__aeabi_dadd+0x228>
 8000902:	e161      	b.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000904:	4694      	mov	ip, r2
 8000906:	e7b4      	b.n	8000872 <__aeabi_dadd+0x196>
 8000908:	003a      	movs	r2, r7
 800090a:	391f      	subs	r1, #31
 800090c:	40ca      	lsrs	r2, r1
 800090e:	0011      	movs	r1, r2
 8000910:	2b20      	cmp	r3, #32
 8000912:	d003      	beq.n	800091c <__aeabi_dadd+0x240>
 8000914:	2240      	movs	r2, #64	; 0x40
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	409f      	lsls	r7, r3
 800091a:	433c      	orrs	r4, r7
 800091c:	1e63      	subs	r3, r4, #1
 800091e:	419c      	sbcs	r4, r3
 8000920:	2700      	movs	r7, #0
 8000922:	2600      	movs	r6, #0
 8000924:	430c      	orrs	r4, r1
 8000926:	0763      	lsls	r3, r4, #29
 8000928:	d000      	beq.n	800092c <__aeabi_dadd+0x250>
 800092a:	e753      	b.n	80007d4 <__aeabi_dadd+0xf8>
 800092c:	46b4      	mov	ip, r6
 800092e:	08e4      	lsrs	r4, r4, #3
 8000930:	077b      	lsls	r3, r7, #29
 8000932:	4323      	orrs	r3, r4
 8000934:	08f8      	lsrs	r0, r7, #3
 8000936:	4a43      	ldr	r2, [pc, #268]	; (8000a44 <__aeabi_dadd+0x368>)
 8000938:	4594      	cmp	ip, r2
 800093a:	d01d      	beq.n	8000978 <__aeabi_dadd+0x29c>
 800093c:	4662      	mov	r2, ip
 800093e:	0307      	lsls	r7, r0, #12
 8000940:	0552      	lsls	r2, r2, #21
 8000942:	0b3f      	lsrs	r7, r7, #12
 8000944:	0d52      	lsrs	r2, r2, #21
 8000946:	e760      	b.n	800080a <__aeabi_dadd+0x12e>
 8000948:	4644      	mov	r4, r8
 800094a:	430c      	orrs	r4, r1
 800094c:	1e62      	subs	r2, r4, #1
 800094e:	4194      	sbcs	r4, r2
 8000950:	18e4      	adds	r4, r4, r3
 8000952:	429c      	cmp	r4, r3
 8000954:	419b      	sbcs	r3, r3
 8000956:	425f      	negs	r7, r3
 8000958:	183f      	adds	r7, r7, r0
 800095a:	023b      	lsls	r3, r7, #8
 800095c:	d5e3      	bpl.n	8000926 <__aeabi_dadd+0x24a>
 800095e:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <__aeabi_dadd+0x368>)
 8000960:	3601      	adds	r6, #1
 8000962:	429e      	cmp	r6, r3
 8000964:	d000      	beq.n	8000968 <__aeabi_dadd+0x28c>
 8000966:	e0b5      	b.n	8000ad4 <__aeabi_dadd+0x3f8>
 8000968:	0032      	movs	r2, r6
 800096a:	2700      	movs	r7, #0
 800096c:	2300      	movs	r3, #0
 800096e:	e74c      	b.n	800080a <__aeabi_dadd+0x12e>
 8000970:	0742      	lsls	r2, r0, #29
 8000972:	08db      	lsrs	r3, r3, #3
 8000974:	4313      	orrs	r3, r2
 8000976:	08c0      	lsrs	r0, r0, #3
 8000978:	001a      	movs	r2, r3
 800097a:	4302      	orrs	r2, r0
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x2a4>
 800097e:	e1e1      	b.n	8000d44 <__aeabi_dadd+0x668>
 8000980:	2780      	movs	r7, #128	; 0x80
 8000982:	033f      	lsls	r7, r7, #12
 8000984:	4307      	orrs	r7, r0
 8000986:	033f      	lsls	r7, r7, #12
 8000988:	4a2e      	ldr	r2, [pc, #184]	; (8000a44 <__aeabi_dadd+0x368>)
 800098a:	0b3f      	lsrs	r7, r7, #12
 800098c:	e73d      	b.n	800080a <__aeabi_dadd+0x12e>
 800098e:	0020      	movs	r0, r4
 8000990:	f001 fc8a 	bl	80022a8 <__clzsi2>
 8000994:	0001      	movs	r1, r0
 8000996:	3118      	adds	r1, #24
 8000998:	291f      	cmp	r1, #31
 800099a:	dc00      	bgt.n	800099e <__aeabi_dadd+0x2c2>
 800099c:	e6fc      	b.n	8000798 <__aeabi_dadd+0xbc>
 800099e:	3808      	subs	r0, #8
 80009a0:	4084      	lsls	r4, r0
 80009a2:	0027      	movs	r7, r4
 80009a4:	2400      	movs	r4, #0
 80009a6:	42b1      	cmp	r1, r6
 80009a8:	db00      	blt.n	80009ac <__aeabi_dadd+0x2d0>
 80009aa:	e6ff      	b.n	80007ac <__aeabi_dadd+0xd0>
 80009ac:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <__aeabi_dadd+0x36c>)
 80009ae:	1a76      	subs	r6, r6, r1
 80009b0:	4017      	ands	r7, r2
 80009b2:	e70d      	b.n	80007d0 <__aeabi_dadd+0xf4>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d02f      	beq.n	8000a18 <__aeabi_dadd+0x33c>
 80009b8:	464a      	mov	r2, r9
 80009ba:	1b92      	subs	r2, r2, r6
 80009bc:	4694      	mov	ip, r2
 80009be:	2e00      	cmp	r6, #0
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dadd+0x2e8>
 80009c2:	e0ad      	b.n	8000b20 <__aeabi_dadd+0x444>
 80009c4:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <__aeabi_dadd+0x368>)
 80009c6:	4591      	cmp	r9, r2
 80009c8:	d100      	bne.n	80009cc <__aeabi_dadd+0x2f0>
 80009ca:	e10f      	b.n	8000bec <__aeabi_dadd+0x510>
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	0412      	lsls	r2, r2, #16
 80009d0:	4310      	orrs	r0, r2
 80009d2:	4662      	mov	r2, ip
 80009d4:	2a38      	cmp	r2, #56	; 0x38
 80009d6:	dd00      	ble.n	80009da <__aeabi_dadd+0x2fe>
 80009d8:	e10f      	b.n	8000bfa <__aeabi_dadd+0x51e>
 80009da:	2a1f      	cmp	r2, #31
 80009dc:	dd00      	ble.n	80009e0 <__aeabi_dadd+0x304>
 80009de:	e180      	b.n	8000ce2 <__aeabi_dadd+0x606>
 80009e0:	4664      	mov	r4, ip
 80009e2:	2220      	movs	r2, #32
 80009e4:	001e      	movs	r6, r3
 80009e6:	1b12      	subs	r2, r2, r4
 80009e8:	4667      	mov	r7, ip
 80009ea:	0004      	movs	r4, r0
 80009ec:	4093      	lsls	r3, r2
 80009ee:	4094      	lsls	r4, r2
 80009f0:	40fe      	lsrs	r6, r7
 80009f2:	1e5a      	subs	r2, r3, #1
 80009f4:	4193      	sbcs	r3, r2
 80009f6:	40f8      	lsrs	r0, r7
 80009f8:	4334      	orrs	r4, r6
 80009fa:	431c      	orrs	r4, r3
 80009fc:	4480      	add	r8, r0
 80009fe:	1864      	adds	r4, r4, r1
 8000a00:	428c      	cmp	r4, r1
 8000a02:	41bf      	sbcs	r7, r7
 8000a04:	427f      	negs	r7, r7
 8000a06:	464e      	mov	r6, r9
 8000a08:	4447      	add	r7, r8
 8000a0a:	e7a6      	b.n	800095a <__aeabi_dadd+0x27e>
 8000a0c:	4642      	mov	r2, r8
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	0011      	movs	r1, r2
 8000a12:	1e4a      	subs	r2, r1, #1
 8000a14:	4191      	sbcs	r1, r2
 8000a16:	e6ad      	b.n	8000774 <__aeabi_dadd+0x98>
 8000a18:	4c0c      	ldr	r4, [pc, #48]	; (8000a4c <__aeabi_dadd+0x370>)
 8000a1a:	1c72      	adds	r2, r6, #1
 8000a1c:	4222      	tst	r2, r4
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_dadd+0x346>
 8000a20:	e0a1      	b.n	8000b66 <__aeabi_dadd+0x48a>
 8000a22:	0002      	movs	r2, r0
 8000a24:	431a      	orrs	r2, r3
 8000a26:	2e00      	cmp	r6, #0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dadd+0x350>
 8000a2a:	e0fa      	b.n	8000c22 <__aeabi_dadd+0x546>
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x356>
 8000a30:	e145      	b.n	8000cbe <__aeabi_dadd+0x5e2>
 8000a32:	003a      	movs	r2, r7
 8000a34:	430a      	orrs	r2, r1
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x35e>
 8000a38:	e146      	b.n	8000cc8 <__aeabi_dadd+0x5ec>
 8000a3a:	0742      	lsls	r2, r0, #29
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	e77b      	b.n	800093c <__aeabi_dadd+0x260>
 8000a44:	000007ff 	.word	0x000007ff
 8000a48:	ff7fffff 	.word	0xff7fffff
 8000a4c:	000007fe 	.word	0x000007fe
 8000a50:	4647      	mov	r7, r8
 8000a52:	1a5c      	subs	r4, r3, r1
 8000a54:	1bc2      	subs	r2, r0, r7
 8000a56:	42a3      	cmp	r3, r4
 8000a58:	41bf      	sbcs	r7, r7
 8000a5a:	427f      	negs	r7, r7
 8000a5c:	46b9      	mov	r9, r7
 8000a5e:	0017      	movs	r7, r2
 8000a60:	464a      	mov	r2, r9
 8000a62:	1abf      	subs	r7, r7, r2
 8000a64:	023a      	lsls	r2, r7, #8
 8000a66:	d500      	bpl.n	8000a6a <__aeabi_dadd+0x38e>
 8000a68:	e08d      	b.n	8000b86 <__aeabi_dadd+0x4aa>
 8000a6a:	0023      	movs	r3, r4
 8000a6c:	433b      	orrs	r3, r7
 8000a6e:	d000      	beq.n	8000a72 <__aeabi_dadd+0x396>
 8000a70:	e68a      	b.n	8000788 <__aeabi_dadd+0xac>
 8000a72:	2000      	movs	r0, #0
 8000a74:	2500      	movs	r5, #0
 8000a76:	e761      	b.n	800093c <__aeabi_dadd+0x260>
 8000a78:	4cb4      	ldr	r4, [pc, #720]	; (8000d4c <__aeabi_dadd+0x670>)
 8000a7a:	45a1      	cmp	r9, r4
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_dadd+0x3a4>
 8000a7e:	e0ad      	b.n	8000bdc <__aeabi_dadd+0x500>
 8000a80:	2480      	movs	r4, #128	; 0x80
 8000a82:	0424      	lsls	r4, r4, #16
 8000a84:	4320      	orrs	r0, r4
 8000a86:	4664      	mov	r4, ip
 8000a88:	2c38      	cmp	r4, #56	; 0x38
 8000a8a:	dc3d      	bgt.n	8000b08 <__aeabi_dadd+0x42c>
 8000a8c:	4662      	mov	r2, ip
 8000a8e:	2c1f      	cmp	r4, #31
 8000a90:	dd00      	ble.n	8000a94 <__aeabi_dadd+0x3b8>
 8000a92:	e0b7      	b.n	8000c04 <__aeabi_dadd+0x528>
 8000a94:	2520      	movs	r5, #32
 8000a96:	001e      	movs	r6, r3
 8000a98:	1b2d      	subs	r5, r5, r4
 8000a9a:	0004      	movs	r4, r0
 8000a9c:	40ab      	lsls	r3, r5
 8000a9e:	40ac      	lsls	r4, r5
 8000aa0:	40d6      	lsrs	r6, r2
 8000aa2:	40d0      	lsrs	r0, r2
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	1e5d      	subs	r5, r3, #1
 8000aa8:	41ab      	sbcs	r3, r5
 8000aaa:	4334      	orrs	r4, r6
 8000aac:	1a12      	subs	r2, r2, r0
 8000aae:	4690      	mov	r8, r2
 8000ab0:	4323      	orrs	r3, r4
 8000ab2:	e02c      	b.n	8000b0e <__aeabi_dadd+0x432>
 8000ab4:	0742      	lsls	r2, r0, #29
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	08c0      	lsrs	r0, r0, #3
 8000abc:	e73b      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000abe:	185c      	adds	r4, r3, r1
 8000ac0:	429c      	cmp	r4, r3
 8000ac2:	419b      	sbcs	r3, r3
 8000ac4:	4440      	add	r0, r8
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	18c7      	adds	r7, r0, r3
 8000aca:	2601      	movs	r6, #1
 8000acc:	023b      	lsls	r3, r7, #8
 8000ace:	d400      	bmi.n	8000ad2 <__aeabi_dadd+0x3f6>
 8000ad0:	e729      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000ad2:	2602      	movs	r6, #2
 8000ad4:	4a9e      	ldr	r2, [pc, #632]	; (8000d50 <__aeabi_dadd+0x674>)
 8000ad6:	0863      	lsrs	r3, r4, #1
 8000ad8:	4017      	ands	r7, r2
 8000ada:	2201      	movs	r2, #1
 8000adc:	4014      	ands	r4, r2
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	07fb      	lsls	r3, r7, #31
 8000ae2:	431c      	orrs	r4, r3
 8000ae4:	087f      	lsrs	r7, r7, #1
 8000ae6:	e673      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000ae8:	4644      	mov	r4, r8
 8000aea:	3a20      	subs	r2, #32
 8000aec:	40d4      	lsrs	r4, r2
 8000aee:	4662      	mov	r2, ip
 8000af0:	2a20      	cmp	r2, #32
 8000af2:	d005      	beq.n	8000b00 <__aeabi_dadd+0x424>
 8000af4:	4667      	mov	r7, ip
 8000af6:	2240      	movs	r2, #64	; 0x40
 8000af8:	1bd2      	subs	r2, r2, r7
 8000afa:	4647      	mov	r7, r8
 8000afc:	4097      	lsls	r7, r2
 8000afe:	4339      	orrs	r1, r7
 8000b00:	1e4a      	subs	r2, r1, #1
 8000b02:	4191      	sbcs	r1, r2
 8000b04:	4321      	orrs	r1, r4
 8000b06:	e635      	b.n	8000774 <__aeabi_dadd+0x98>
 8000b08:	4303      	orrs	r3, r0
 8000b0a:	1e58      	subs	r0, r3, #1
 8000b0c:	4183      	sbcs	r3, r0
 8000b0e:	1acc      	subs	r4, r1, r3
 8000b10:	42a1      	cmp	r1, r4
 8000b12:	41bf      	sbcs	r7, r7
 8000b14:	4643      	mov	r3, r8
 8000b16:	427f      	negs	r7, r7
 8000b18:	4655      	mov	r5, sl
 8000b1a:	464e      	mov	r6, r9
 8000b1c:	1bdf      	subs	r7, r3, r7
 8000b1e:	e62e      	b.n	800077e <__aeabi_dadd+0xa2>
 8000b20:	0002      	movs	r2, r0
 8000b22:	431a      	orrs	r2, r3
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x44c>
 8000b26:	e0bd      	b.n	8000ca4 <__aeabi_dadd+0x5c8>
 8000b28:	4662      	mov	r2, ip
 8000b2a:	4664      	mov	r4, ip
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	2c01      	cmp	r4, #1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x458>
 8000b32:	e0e5      	b.n	8000d00 <__aeabi_dadd+0x624>
 8000b34:	4c85      	ldr	r4, [pc, #532]	; (8000d4c <__aeabi_dadd+0x670>)
 8000b36:	45a4      	cmp	ip, r4
 8000b38:	d058      	beq.n	8000bec <__aeabi_dadd+0x510>
 8000b3a:	4694      	mov	ip, r2
 8000b3c:	e749      	b.n	80009d2 <__aeabi_dadd+0x2f6>
 8000b3e:	4664      	mov	r4, ip
 8000b40:	2220      	movs	r2, #32
 8000b42:	1b12      	subs	r2, r2, r4
 8000b44:	4644      	mov	r4, r8
 8000b46:	4094      	lsls	r4, r2
 8000b48:	000f      	movs	r7, r1
 8000b4a:	46a1      	mov	r9, r4
 8000b4c:	4664      	mov	r4, ip
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	40e7      	lsrs	r7, r4
 8000b52:	464c      	mov	r4, r9
 8000b54:	1e4a      	subs	r2, r1, #1
 8000b56:	4191      	sbcs	r1, r2
 8000b58:	433c      	orrs	r4, r7
 8000b5a:	4642      	mov	r2, r8
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	4661      	mov	r1, ip
 8000b60:	40ca      	lsrs	r2, r1
 8000b62:	1880      	adds	r0, r0, r2
 8000b64:	e6f4      	b.n	8000950 <__aeabi_dadd+0x274>
 8000b66:	4c79      	ldr	r4, [pc, #484]	; (8000d4c <__aeabi_dadd+0x670>)
 8000b68:	42a2      	cmp	r2, r4
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_dadd+0x492>
 8000b6c:	e6fd      	b.n	800096a <__aeabi_dadd+0x28e>
 8000b6e:	1859      	adds	r1, r3, r1
 8000b70:	4299      	cmp	r1, r3
 8000b72:	419b      	sbcs	r3, r3
 8000b74:	4440      	add	r0, r8
 8000b76:	425f      	negs	r7, r3
 8000b78:	19c7      	adds	r7, r0, r7
 8000b7a:	07fc      	lsls	r4, r7, #31
 8000b7c:	0849      	lsrs	r1, r1, #1
 8000b7e:	0016      	movs	r6, r2
 8000b80:	430c      	orrs	r4, r1
 8000b82:	087f      	lsrs	r7, r7, #1
 8000b84:	e6cf      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000b86:	1acc      	subs	r4, r1, r3
 8000b88:	42a1      	cmp	r1, r4
 8000b8a:	41bf      	sbcs	r7, r7
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	427f      	negs	r7, r7
 8000b90:	1a18      	subs	r0, r3, r0
 8000b92:	4655      	mov	r5, sl
 8000b94:	1bc7      	subs	r7, r0, r7
 8000b96:	e5f7      	b.n	8000788 <__aeabi_dadd+0xac>
 8000b98:	08c9      	lsrs	r1, r1, #3
 8000b9a:	077b      	lsls	r3, r7, #29
 8000b9c:	4655      	mov	r5, sl
 8000b9e:	430b      	orrs	r3, r1
 8000ba0:	08f8      	lsrs	r0, r7, #3
 8000ba2:	e6c8      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000ba4:	2c00      	cmp	r4, #0
 8000ba6:	d000      	beq.n	8000baa <__aeabi_dadd+0x4ce>
 8000ba8:	e081      	b.n	8000cae <__aeabi_dadd+0x5d2>
 8000baa:	4643      	mov	r3, r8
 8000bac:	430b      	orrs	r3, r1
 8000bae:	d115      	bne.n	8000bdc <__aeabi_dadd+0x500>
 8000bb0:	2080      	movs	r0, #128	; 0x80
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	0300      	lsls	r0, r0, #12
 8000bb6:	e6e3      	b.n	8000980 <__aeabi_dadd+0x2a4>
 8000bb8:	1a5c      	subs	r4, r3, r1
 8000bba:	42a3      	cmp	r3, r4
 8000bbc:	419b      	sbcs	r3, r3
 8000bbe:	1bc7      	subs	r7, r0, r7
 8000bc0:	425b      	negs	r3, r3
 8000bc2:	2601      	movs	r6, #1
 8000bc4:	1aff      	subs	r7, r7, r3
 8000bc6:	e5da      	b.n	800077e <__aeabi_dadd+0xa2>
 8000bc8:	0742      	lsls	r2, r0, #29
 8000bca:	08db      	lsrs	r3, r3, #3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	08c0      	lsrs	r0, r0, #3
 8000bd0:	e6d2      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bd2:	0742      	lsls	r2, r0, #29
 8000bd4:	08db      	lsrs	r3, r3, #3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	08c0      	lsrs	r0, r0, #3
 8000bda:	e6ac      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000bdc:	4643      	mov	r3, r8
 8000bde:	4642      	mov	r2, r8
 8000be0:	08c9      	lsrs	r1, r1, #3
 8000be2:	075b      	lsls	r3, r3, #29
 8000be4:	4655      	mov	r5, sl
 8000be6:	430b      	orrs	r3, r1
 8000be8:	08d0      	lsrs	r0, r2, #3
 8000bea:	e6c5      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bec:	4643      	mov	r3, r8
 8000bee:	4642      	mov	r2, r8
 8000bf0:	075b      	lsls	r3, r3, #29
 8000bf2:	08c9      	lsrs	r1, r1, #3
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	08d0      	lsrs	r0, r2, #3
 8000bf8:	e6be      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bfa:	4303      	orrs	r3, r0
 8000bfc:	001c      	movs	r4, r3
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	e6fc      	b.n	80009fe <__aeabi_dadd+0x322>
 8000c04:	0002      	movs	r2, r0
 8000c06:	3c20      	subs	r4, #32
 8000c08:	40e2      	lsrs	r2, r4
 8000c0a:	0014      	movs	r4, r2
 8000c0c:	4662      	mov	r2, ip
 8000c0e:	2a20      	cmp	r2, #32
 8000c10:	d003      	beq.n	8000c1a <__aeabi_dadd+0x53e>
 8000c12:	2540      	movs	r5, #64	; 0x40
 8000c14:	1aad      	subs	r5, r5, r2
 8000c16:	40a8      	lsls	r0, r5
 8000c18:	4303      	orrs	r3, r0
 8000c1a:	1e58      	subs	r0, r3, #1
 8000c1c:	4183      	sbcs	r3, r0
 8000c1e:	4323      	orrs	r3, r4
 8000c20:	e775      	b.n	8000b0e <__aeabi_dadd+0x432>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d0e2      	beq.n	8000bec <__aeabi_dadd+0x510>
 8000c26:	003a      	movs	r2, r7
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	d0cd      	beq.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000c2c:	0742      	lsls	r2, r0, #29
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	08c0      	lsrs	r0, r0, #3
 8000c36:	0312      	lsls	r2, r2, #12
 8000c38:	4210      	tst	r0, r2
 8000c3a:	d006      	beq.n	8000c4a <__aeabi_dadd+0x56e>
 8000c3c:	08fc      	lsrs	r4, r7, #3
 8000c3e:	4214      	tst	r4, r2
 8000c40:	d103      	bne.n	8000c4a <__aeabi_dadd+0x56e>
 8000c42:	0020      	movs	r0, r4
 8000c44:	08cb      	lsrs	r3, r1, #3
 8000c46:	077a      	lsls	r2, r7, #29
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	0f5a      	lsrs	r2, r3, #29
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	0752      	lsls	r2, r2, #29
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	e690      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000c56:	4643      	mov	r3, r8
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x582>
 8000c5c:	e709      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000c5e:	4643      	mov	r3, r8
 8000c60:	4642      	mov	r2, r8
 8000c62:	08c9      	lsrs	r1, r1, #3
 8000c64:	075b      	lsls	r3, r3, #29
 8000c66:	4655      	mov	r5, sl
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	08d0      	lsrs	r0, r2, #3
 8000c6c:	e666      	b.n	800093c <__aeabi_dadd+0x260>
 8000c6e:	1acc      	subs	r4, r1, r3
 8000c70:	42a1      	cmp	r1, r4
 8000c72:	4189      	sbcs	r1, r1
 8000c74:	1a3f      	subs	r7, r7, r0
 8000c76:	4249      	negs	r1, r1
 8000c78:	4655      	mov	r5, sl
 8000c7a:	2601      	movs	r6, #1
 8000c7c:	1a7f      	subs	r7, r7, r1
 8000c7e:	e57e      	b.n	800077e <__aeabi_dadd+0xa2>
 8000c80:	4642      	mov	r2, r8
 8000c82:	1a5c      	subs	r4, r3, r1
 8000c84:	1a87      	subs	r7, r0, r2
 8000c86:	42a3      	cmp	r3, r4
 8000c88:	4192      	sbcs	r2, r2
 8000c8a:	4252      	negs	r2, r2
 8000c8c:	1abf      	subs	r7, r7, r2
 8000c8e:	023a      	lsls	r2, r7, #8
 8000c90:	d53d      	bpl.n	8000d0e <__aeabi_dadd+0x632>
 8000c92:	1acc      	subs	r4, r1, r3
 8000c94:	42a1      	cmp	r1, r4
 8000c96:	4189      	sbcs	r1, r1
 8000c98:	4643      	mov	r3, r8
 8000c9a:	4249      	negs	r1, r1
 8000c9c:	1a1f      	subs	r7, r3, r0
 8000c9e:	4655      	mov	r5, sl
 8000ca0:	1a7f      	subs	r7, r7, r1
 8000ca2:	e595      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000ca4:	077b      	lsls	r3, r7, #29
 8000ca6:	08c9      	lsrs	r1, r1, #3
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	08f8      	lsrs	r0, r7, #3
 8000cac:	e643      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000cae:	4644      	mov	r4, r8
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	d130      	bne.n	8000d18 <__aeabi_dadd+0x63c>
 8000cb6:	0742      	lsls	r2, r0, #29
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	08c0      	lsrs	r0, r0, #3
 8000cbc:	e65c      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000cbe:	077b      	lsls	r3, r7, #29
 8000cc0:	08c9      	lsrs	r1, r1, #3
 8000cc2:	430b      	orrs	r3, r1
 8000cc4:	08f8      	lsrs	r0, r7, #3
 8000cc6:	e639      	b.n	800093c <__aeabi_dadd+0x260>
 8000cc8:	185c      	adds	r4, r3, r1
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	419b      	sbcs	r3, r3
 8000cce:	4440      	add	r0, r8
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	18c7      	adds	r7, r0, r3
 8000cd4:	023b      	lsls	r3, r7, #8
 8000cd6:	d400      	bmi.n	8000cda <__aeabi_dadd+0x5fe>
 8000cd8:	e625      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <__aeabi_dadd+0x674>)
 8000cdc:	2601      	movs	r6, #1
 8000cde:	401f      	ands	r7, r3
 8000ce0:	e621      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000ce2:	0004      	movs	r4, r0
 8000ce4:	3a20      	subs	r2, #32
 8000ce6:	40d4      	lsrs	r4, r2
 8000ce8:	4662      	mov	r2, ip
 8000cea:	2a20      	cmp	r2, #32
 8000cec:	d004      	beq.n	8000cf8 <__aeabi_dadd+0x61c>
 8000cee:	2240      	movs	r2, #64	; 0x40
 8000cf0:	4666      	mov	r6, ip
 8000cf2:	1b92      	subs	r2, r2, r6
 8000cf4:	4090      	lsls	r0, r2
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	1e5a      	subs	r2, r3, #1
 8000cfa:	4193      	sbcs	r3, r2
 8000cfc:	431c      	orrs	r4, r3
 8000cfe:	e67e      	b.n	80009fe <__aeabi_dadd+0x322>
 8000d00:	185c      	adds	r4, r3, r1
 8000d02:	428c      	cmp	r4, r1
 8000d04:	4189      	sbcs	r1, r1
 8000d06:	4440      	add	r0, r8
 8000d08:	4249      	negs	r1, r1
 8000d0a:	1847      	adds	r7, r0, r1
 8000d0c:	e6dd      	b.n	8000aca <__aeabi_dadd+0x3ee>
 8000d0e:	0023      	movs	r3, r4
 8000d10:	433b      	orrs	r3, r7
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dadd+0x63a>
 8000d14:	e6ad      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000d16:	e606      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000d18:	0744      	lsls	r4, r0, #29
 8000d1a:	4323      	orrs	r3, r4
 8000d1c:	2480      	movs	r4, #128	; 0x80
 8000d1e:	08c0      	lsrs	r0, r0, #3
 8000d20:	0324      	lsls	r4, r4, #12
 8000d22:	4220      	tst	r0, r4
 8000d24:	d008      	beq.n	8000d38 <__aeabi_dadd+0x65c>
 8000d26:	4642      	mov	r2, r8
 8000d28:	08d6      	lsrs	r6, r2, #3
 8000d2a:	4226      	tst	r6, r4
 8000d2c:	d104      	bne.n	8000d38 <__aeabi_dadd+0x65c>
 8000d2e:	4655      	mov	r5, sl
 8000d30:	0030      	movs	r0, r6
 8000d32:	08cb      	lsrs	r3, r1, #3
 8000d34:	0751      	lsls	r1, r2, #29
 8000d36:	430b      	orrs	r3, r1
 8000d38:	0f5a      	lsrs	r2, r3, #29
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	08db      	lsrs	r3, r3, #3
 8000d3e:	0752      	lsls	r2, r2, #29
 8000d40:	4313      	orrs	r3, r2
 8000d42:	e619      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000d44:	2300      	movs	r3, #0
 8000d46:	4a01      	ldr	r2, [pc, #4]	; (8000d4c <__aeabi_dadd+0x670>)
 8000d48:	001f      	movs	r7, r3
 8000d4a:	e55e      	b.n	800080a <__aeabi_dadd+0x12e>
 8000d4c:	000007ff 	.word	0x000007ff
 8000d50:	ff7fffff 	.word	0xff7fffff

08000d54 <__aeabi_ddiv>:
 8000d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d56:	4657      	mov	r7, sl
 8000d58:	464e      	mov	r6, r9
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	46de      	mov	lr, fp
 8000d5e:	b5e0      	push	{r5, r6, r7, lr}
 8000d60:	4681      	mov	r9, r0
 8000d62:	0005      	movs	r5, r0
 8000d64:	030c      	lsls	r4, r1, #12
 8000d66:	0048      	lsls	r0, r1, #1
 8000d68:	4692      	mov	sl, r2
 8000d6a:	001f      	movs	r7, r3
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	0b24      	lsrs	r4, r4, #12
 8000d70:	0d40      	lsrs	r0, r0, #21
 8000d72:	0fce      	lsrs	r6, r1, #31
 8000d74:	2800      	cmp	r0, #0
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x26>
 8000d78:	e156      	b.n	8001028 <__aeabi_ddiv+0x2d4>
 8000d7a:	4bd4      	ldr	r3, [pc, #848]	; (80010cc <__aeabi_ddiv+0x378>)
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_ddiv+0x2e>
 8000d80:	e172      	b.n	8001068 <__aeabi_ddiv+0x314>
 8000d82:	0f6b      	lsrs	r3, r5, #29
 8000d84:	00e4      	lsls	r4, r4, #3
 8000d86:	431c      	orrs	r4, r3
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	041b      	lsls	r3, r3, #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	4698      	mov	r8, r3
 8000d90:	4bcf      	ldr	r3, [pc, #828]	; (80010d0 <__aeabi_ddiv+0x37c>)
 8000d92:	00ed      	lsls	r5, r5, #3
 8000d94:	469b      	mov	fp, r3
 8000d96:	2300      	movs	r3, #0
 8000d98:	4699      	mov	r9, r3
 8000d9a:	4483      	add	fp, r0
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	033c      	lsls	r4, r7, #12
 8000da0:	007b      	lsls	r3, r7, #1
 8000da2:	4650      	mov	r0, sl
 8000da4:	0b24      	lsrs	r4, r4, #12
 8000da6:	0d5b      	lsrs	r3, r3, #21
 8000da8:	0fff      	lsrs	r7, r7, #31
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_ddiv+0x5c>
 8000dae:	e11f      	b.n	8000ff0 <__aeabi_ddiv+0x29c>
 8000db0:	4ac6      	ldr	r2, [pc, #792]	; (80010cc <__aeabi_ddiv+0x378>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x64>
 8000db6:	e162      	b.n	800107e <__aeabi_ddiv+0x32a>
 8000db8:	49c5      	ldr	r1, [pc, #788]	; (80010d0 <__aeabi_ddiv+0x37c>)
 8000dba:	0f42      	lsrs	r2, r0, #29
 8000dbc:	468c      	mov	ip, r1
 8000dbe:	00e4      	lsls	r4, r4, #3
 8000dc0:	4659      	mov	r1, fp
 8000dc2:	4314      	orrs	r4, r2
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	4463      	add	r3, ip
 8000dc8:	0412      	lsls	r2, r2, #16
 8000dca:	1acb      	subs	r3, r1, r3
 8000dcc:	4314      	orrs	r4, r2
 8000dce:	469b      	mov	fp, r3
 8000dd0:	00c2      	lsls	r2, r0, #3
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	0033      	movs	r3, r6
 8000dd6:	407b      	eors	r3, r7
 8000dd8:	469a      	mov	sl, r3
 8000dda:	464b      	mov	r3, r9
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d827      	bhi.n	8000e30 <__aeabi_ddiv+0xdc>
 8000de0:	49bc      	ldr	r1, [pc, #752]	; (80010d4 <__aeabi_ddiv+0x380>)
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	58cb      	ldr	r3, [r1, r3]
 8000de6:	469f      	mov	pc, r3
 8000de8:	46b2      	mov	sl, r6
 8000dea:	9b00      	ldr	r3, [sp, #0]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d016      	beq.n	8000e1e <__aeabi_ddiv+0xca>
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d100      	bne.n	8000df6 <__aeabi_ddiv+0xa2>
 8000df4:	e28e      	b.n	8001314 <__aeabi_ddiv+0x5c0>
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d000      	beq.n	8000dfc <__aeabi_ddiv+0xa8>
 8000dfa:	e0d9      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	2400      	movs	r4, #0
 8000e00:	2500      	movs	r5, #0
 8000e02:	4652      	mov	r2, sl
 8000e04:	051b      	lsls	r3, r3, #20
 8000e06:	4323      	orrs	r3, r4
 8000e08:	07d2      	lsls	r2, r2, #31
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	0028      	movs	r0, r5
 8000e0e:	0019      	movs	r1, r3
 8000e10:	b005      	add	sp, #20
 8000e12:	bcf0      	pop	{r4, r5, r6, r7}
 8000e14:	46bb      	mov	fp, r7
 8000e16:	46b2      	mov	sl, r6
 8000e18:	46a9      	mov	r9, r5
 8000e1a:	46a0      	mov	r8, r4
 8000e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e1e:	2400      	movs	r4, #0
 8000e20:	2500      	movs	r5, #0
 8000e22:	4baa      	ldr	r3, [pc, #680]	; (80010cc <__aeabi_ddiv+0x378>)
 8000e24:	e7ed      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8000e26:	46ba      	mov	sl, r7
 8000e28:	46a0      	mov	r8, r4
 8000e2a:	0015      	movs	r5, r2
 8000e2c:	9000      	str	r0, [sp, #0]
 8000e2e:	e7dc      	b.n	8000dea <__aeabi_ddiv+0x96>
 8000e30:	4544      	cmp	r4, r8
 8000e32:	d200      	bcs.n	8000e36 <__aeabi_ddiv+0xe2>
 8000e34:	e1c7      	b.n	80011c6 <__aeabi_ddiv+0x472>
 8000e36:	d100      	bne.n	8000e3a <__aeabi_ddiv+0xe6>
 8000e38:	e1c2      	b.n	80011c0 <__aeabi_ddiv+0x46c>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	425b      	negs	r3, r3
 8000e3e:	469c      	mov	ip, r3
 8000e40:	002e      	movs	r6, r5
 8000e42:	4640      	mov	r0, r8
 8000e44:	2500      	movs	r5, #0
 8000e46:	44e3      	add	fp, ip
 8000e48:	0223      	lsls	r3, r4, #8
 8000e4a:	0e14      	lsrs	r4, r2, #24
 8000e4c:	431c      	orrs	r4, r3
 8000e4e:	0c1b      	lsrs	r3, r3, #16
 8000e50:	4699      	mov	r9, r3
 8000e52:	0423      	lsls	r3, r4, #16
 8000e54:	0c1f      	lsrs	r7, r3, #16
 8000e56:	0212      	lsls	r2, r2, #8
 8000e58:	4649      	mov	r1, r9
 8000e5a:	9200      	str	r2, [sp, #0]
 8000e5c:	9701      	str	r7, [sp, #4]
 8000e5e:	f7ff f9f5 	bl	800024c <__aeabi_uidivmod>
 8000e62:	0002      	movs	r2, r0
 8000e64:	437a      	muls	r2, r7
 8000e66:	040b      	lsls	r3, r1, #16
 8000e68:	0c31      	lsrs	r1, r6, #16
 8000e6a:	4680      	mov	r8, r0
 8000e6c:	4319      	orrs	r1, r3
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d907      	bls.n	8000e82 <__aeabi_ddiv+0x12e>
 8000e72:	2301      	movs	r3, #1
 8000e74:	425b      	negs	r3, r3
 8000e76:	469c      	mov	ip, r3
 8000e78:	1909      	adds	r1, r1, r4
 8000e7a:	44e0      	add	r8, ip
 8000e7c:	428c      	cmp	r4, r1
 8000e7e:	d800      	bhi.n	8000e82 <__aeabi_ddiv+0x12e>
 8000e80:	e207      	b.n	8001292 <__aeabi_ddiv+0x53e>
 8000e82:	1a88      	subs	r0, r1, r2
 8000e84:	4649      	mov	r1, r9
 8000e86:	f7ff f9e1 	bl	800024c <__aeabi_uidivmod>
 8000e8a:	0409      	lsls	r1, r1, #16
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	0431      	lsls	r1, r6, #16
 8000e90:	4666      	mov	r6, ip
 8000e92:	9a01      	ldr	r2, [sp, #4]
 8000e94:	0c09      	lsrs	r1, r1, #16
 8000e96:	4342      	muls	r2, r0
 8000e98:	0003      	movs	r3, r0
 8000e9a:	4331      	orrs	r1, r6
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d904      	bls.n	8000eaa <__aeabi_ddiv+0x156>
 8000ea0:	1909      	adds	r1, r1, r4
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	428c      	cmp	r4, r1
 8000ea6:	d800      	bhi.n	8000eaa <__aeabi_ddiv+0x156>
 8000ea8:	e1ed      	b.n	8001286 <__aeabi_ddiv+0x532>
 8000eaa:	1a88      	subs	r0, r1, r2
 8000eac:	4642      	mov	r2, r8
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4641      	mov	r1, r8
 8000eb6:	9b00      	ldr	r3, [sp, #0]
 8000eb8:	040e      	lsls	r6, r1, #16
 8000eba:	0c1b      	lsrs	r3, r3, #16
 8000ebc:	001f      	movs	r7, r3
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	9b00      	ldr	r3, [sp, #0]
 8000ec2:	0c36      	lsrs	r6, r6, #16
 8000ec4:	041b      	lsls	r3, r3, #16
 8000ec6:	0c19      	lsrs	r1, r3, #16
 8000ec8:	000b      	movs	r3, r1
 8000eca:	4373      	muls	r3, r6
 8000ecc:	0c12      	lsrs	r2, r2, #16
 8000ece:	437e      	muls	r6, r7
 8000ed0:	9103      	str	r1, [sp, #12]
 8000ed2:	4351      	muls	r1, r2
 8000ed4:	437a      	muls	r2, r7
 8000ed6:	0c1f      	lsrs	r7, r3, #16
 8000ed8:	46bc      	mov	ip, r7
 8000eda:	1876      	adds	r6, r6, r1
 8000edc:	4466      	add	r6, ip
 8000ede:	42b1      	cmp	r1, r6
 8000ee0:	d903      	bls.n	8000eea <__aeabi_ddiv+0x196>
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	0249      	lsls	r1, r1, #9
 8000ee6:	468c      	mov	ip, r1
 8000ee8:	4462      	add	r2, ip
 8000eea:	0c31      	lsrs	r1, r6, #16
 8000eec:	188a      	adds	r2, r1, r2
 8000eee:	0431      	lsls	r1, r6, #16
 8000ef0:	041e      	lsls	r6, r3, #16
 8000ef2:	0c36      	lsrs	r6, r6, #16
 8000ef4:	198e      	adds	r6, r1, r6
 8000ef6:	4290      	cmp	r0, r2
 8000ef8:	d302      	bcc.n	8000f00 <__aeabi_ddiv+0x1ac>
 8000efa:	d112      	bne.n	8000f22 <__aeabi_ddiv+0x1ce>
 8000efc:	42b5      	cmp	r5, r6
 8000efe:	d210      	bcs.n	8000f22 <__aeabi_ddiv+0x1ce>
 8000f00:	4643      	mov	r3, r8
 8000f02:	1e59      	subs	r1, r3, #1
 8000f04:	9b00      	ldr	r3, [sp, #0]
 8000f06:	469c      	mov	ip, r3
 8000f08:	4465      	add	r5, ip
 8000f0a:	001f      	movs	r7, r3
 8000f0c:	429d      	cmp	r5, r3
 8000f0e:	419b      	sbcs	r3, r3
 8000f10:	425b      	negs	r3, r3
 8000f12:	191b      	adds	r3, r3, r4
 8000f14:	18c0      	adds	r0, r0, r3
 8000f16:	4284      	cmp	r4, r0
 8000f18:	d200      	bcs.n	8000f1c <__aeabi_ddiv+0x1c8>
 8000f1a:	e1a0      	b.n	800125e <__aeabi_ddiv+0x50a>
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_ddiv+0x1cc>
 8000f1e:	e19b      	b.n	8001258 <__aeabi_ddiv+0x504>
 8000f20:	4688      	mov	r8, r1
 8000f22:	1bae      	subs	r6, r5, r6
 8000f24:	42b5      	cmp	r5, r6
 8000f26:	41ad      	sbcs	r5, r5
 8000f28:	1a80      	subs	r0, r0, r2
 8000f2a:	426d      	negs	r5, r5
 8000f2c:	1b40      	subs	r0, r0, r5
 8000f2e:	4284      	cmp	r4, r0
 8000f30:	d100      	bne.n	8000f34 <__aeabi_ddiv+0x1e0>
 8000f32:	e1d5      	b.n	80012e0 <__aeabi_ddiv+0x58c>
 8000f34:	4649      	mov	r1, r9
 8000f36:	f7ff f989 	bl	800024c <__aeabi_uidivmod>
 8000f3a:	9a01      	ldr	r2, [sp, #4]
 8000f3c:	040b      	lsls	r3, r1, #16
 8000f3e:	4342      	muls	r2, r0
 8000f40:	0c31      	lsrs	r1, r6, #16
 8000f42:	0005      	movs	r5, r0
 8000f44:	4319      	orrs	r1, r3
 8000f46:	428a      	cmp	r2, r1
 8000f48:	d900      	bls.n	8000f4c <__aeabi_ddiv+0x1f8>
 8000f4a:	e16c      	b.n	8001226 <__aeabi_ddiv+0x4d2>
 8000f4c:	1a88      	subs	r0, r1, r2
 8000f4e:	4649      	mov	r1, r9
 8000f50:	f7ff f97c 	bl	800024c <__aeabi_uidivmod>
 8000f54:	9a01      	ldr	r2, [sp, #4]
 8000f56:	0436      	lsls	r6, r6, #16
 8000f58:	4342      	muls	r2, r0
 8000f5a:	0409      	lsls	r1, r1, #16
 8000f5c:	0c36      	lsrs	r6, r6, #16
 8000f5e:	0003      	movs	r3, r0
 8000f60:	430e      	orrs	r6, r1
 8000f62:	42b2      	cmp	r2, r6
 8000f64:	d900      	bls.n	8000f68 <__aeabi_ddiv+0x214>
 8000f66:	e153      	b.n	8001210 <__aeabi_ddiv+0x4bc>
 8000f68:	9803      	ldr	r0, [sp, #12]
 8000f6a:	1ab6      	subs	r6, r6, r2
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	042d      	lsls	r5, r5, #16
 8000f70:	431d      	orrs	r5, r3
 8000f72:	9f02      	ldr	r7, [sp, #8]
 8000f74:	042b      	lsls	r3, r5, #16
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	435a      	muls	r2, r3
 8000f7a:	437b      	muls	r3, r7
 8000f7c:	469c      	mov	ip, r3
 8000f7e:	0c29      	lsrs	r1, r5, #16
 8000f80:	4348      	muls	r0, r1
 8000f82:	0c13      	lsrs	r3, r2, #16
 8000f84:	4484      	add	ip, r0
 8000f86:	4463      	add	r3, ip
 8000f88:	4379      	muls	r1, r7
 8000f8a:	4298      	cmp	r0, r3
 8000f8c:	d903      	bls.n	8000f96 <__aeabi_ddiv+0x242>
 8000f8e:	2080      	movs	r0, #128	; 0x80
 8000f90:	0240      	lsls	r0, r0, #9
 8000f92:	4684      	mov	ip, r0
 8000f94:	4461      	add	r1, ip
 8000f96:	0c18      	lsrs	r0, r3, #16
 8000f98:	0412      	lsls	r2, r2, #16
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	0c12      	lsrs	r2, r2, #16
 8000f9e:	1841      	adds	r1, r0, r1
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	428e      	cmp	r6, r1
 8000fa4:	d200      	bcs.n	8000fa8 <__aeabi_ddiv+0x254>
 8000fa6:	e0ff      	b.n	80011a8 <__aeabi_ddiv+0x454>
 8000fa8:	d100      	bne.n	8000fac <__aeabi_ddiv+0x258>
 8000faa:	e0fa      	b.n	80011a2 <__aeabi_ddiv+0x44e>
 8000fac:	2301      	movs	r3, #1
 8000fae:	431d      	orrs	r5, r3
 8000fb0:	4a49      	ldr	r2, [pc, #292]	; (80010d8 <__aeabi_ddiv+0x384>)
 8000fb2:	445a      	add	r2, fp
 8000fb4:	2a00      	cmp	r2, #0
 8000fb6:	dc00      	bgt.n	8000fba <__aeabi_ddiv+0x266>
 8000fb8:	e0aa      	b.n	8001110 <__aeabi_ddiv+0x3bc>
 8000fba:	076b      	lsls	r3, r5, #29
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_ddiv+0x26c>
 8000fbe:	e13d      	b.n	800123c <__aeabi_ddiv+0x4e8>
 8000fc0:	08ed      	lsrs	r5, r5, #3
 8000fc2:	4643      	mov	r3, r8
 8000fc4:	01db      	lsls	r3, r3, #7
 8000fc6:	d506      	bpl.n	8000fd6 <__aeabi_ddiv+0x282>
 8000fc8:	4642      	mov	r2, r8
 8000fca:	4b44      	ldr	r3, [pc, #272]	; (80010dc <__aeabi_ddiv+0x388>)
 8000fcc:	401a      	ands	r2, r3
 8000fce:	4690      	mov	r8, r2
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	00d2      	lsls	r2, r2, #3
 8000fd4:	445a      	add	r2, fp
 8000fd6:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <__aeabi_ddiv+0x38c>)
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dd00      	ble.n	8000fde <__aeabi_ddiv+0x28a>
 8000fdc:	e71f      	b.n	8000e1e <__aeabi_ddiv+0xca>
 8000fde:	4643      	mov	r3, r8
 8000fe0:	075b      	lsls	r3, r3, #29
 8000fe2:	431d      	orrs	r5, r3
 8000fe4:	4643      	mov	r3, r8
 8000fe6:	0552      	lsls	r2, r2, #21
 8000fe8:	025c      	lsls	r4, r3, #9
 8000fea:	0b24      	lsrs	r4, r4, #12
 8000fec:	0d53      	lsrs	r3, r2, #21
 8000fee:	e708      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8000ff0:	4652      	mov	r2, sl
 8000ff2:	4322      	orrs	r2, r4
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_ddiv+0x2a4>
 8000ff6:	e07b      	b.n	80010f0 <__aeabi_ddiv+0x39c>
 8000ff8:	2c00      	cmp	r4, #0
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x2aa>
 8000ffc:	e0fa      	b.n	80011f4 <__aeabi_ddiv+0x4a0>
 8000ffe:	0020      	movs	r0, r4
 8001000:	f001 f952 	bl	80022a8 <__clzsi2>
 8001004:	0002      	movs	r2, r0
 8001006:	3a0b      	subs	r2, #11
 8001008:	231d      	movs	r3, #29
 800100a:	0001      	movs	r1, r0
 800100c:	1a9b      	subs	r3, r3, r2
 800100e:	4652      	mov	r2, sl
 8001010:	3908      	subs	r1, #8
 8001012:	40da      	lsrs	r2, r3
 8001014:	408c      	lsls	r4, r1
 8001016:	4314      	orrs	r4, r2
 8001018:	4652      	mov	r2, sl
 800101a:	408a      	lsls	r2, r1
 800101c:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <__aeabi_ddiv+0x390>)
 800101e:	4458      	add	r0, fp
 8001020:	469b      	mov	fp, r3
 8001022:	4483      	add	fp, r0
 8001024:	2000      	movs	r0, #0
 8001026:	e6d5      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 8001028:	464b      	mov	r3, r9
 800102a:	4323      	orrs	r3, r4
 800102c:	4698      	mov	r8, r3
 800102e:	d044      	beq.n	80010ba <__aeabi_ddiv+0x366>
 8001030:	2c00      	cmp	r4, #0
 8001032:	d100      	bne.n	8001036 <__aeabi_ddiv+0x2e2>
 8001034:	e0ce      	b.n	80011d4 <__aeabi_ddiv+0x480>
 8001036:	0020      	movs	r0, r4
 8001038:	f001 f936 	bl	80022a8 <__clzsi2>
 800103c:	0001      	movs	r1, r0
 800103e:	0002      	movs	r2, r0
 8001040:	390b      	subs	r1, #11
 8001042:	231d      	movs	r3, #29
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	4649      	mov	r1, r9
 8001048:	0010      	movs	r0, r2
 800104a:	40d9      	lsrs	r1, r3
 800104c:	3808      	subs	r0, #8
 800104e:	4084      	lsls	r4, r0
 8001050:	000b      	movs	r3, r1
 8001052:	464d      	mov	r5, r9
 8001054:	4323      	orrs	r3, r4
 8001056:	4698      	mov	r8, r3
 8001058:	4085      	lsls	r5, r0
 800105a:	4823      	ldr	r0, [pc, #140]	; (80010e8 <__aeabi_ddiv+0x394>)
 800105c:	1a83      	subs	r3, r0, r2
 800105e:	469b      	mov	fp, r3
 8001060:	2300      	movs	r3, #0
 8001062:	4699      	mov	r9, r3
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	e69a      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 8001068:	464b      	mov	r3, r9
 800106a:	4323      	orrs	r3, r4
 800106c:	4698      	mov	r8, r3
 800106e:	d11d      	bne.n	80010ac <__aeabi_ddiv+0x358>
 8001070:	2308      	movs	r3, #8
 8001072:	4699      	mov	r9, r3
 8001074:	3b06      	subs	r3, #6
 8001076:	2500      	movs	r5, #0
 8001078:	4683      	mov	fp, r0
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	e68f      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 800107e:	4652      	mov	r2, sl
 8001080:	4322      	orrs	r2, r4
 8001082:	d109      	bne.n	8001098 <__aeabi_ddiv+0x344>
 8001084:	2302      	movs	r3, #2
 8001086:	4649      	mov	r1, r9
 8001088:	4319      	orrs	r1, r3
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <__aeabi_ddiv+0x398>)
 800108c:	4689      	mov	r9, r1
 800108e:	469c      	mov	ip, r3
 8001090:	2400      	movs	r4, #0
 8001092:	2002      	movs	r0, #2
 8001094:	44e3      	add	fp, ip
 8001096:	e69d      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 8001098:	2303      	movs	r3, #3
 800109a:	464a      	mov	r2, r9
 800109c:	431a      	orrs	r2, r3
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <__aeabi_ddiv+0x398>)
 80010a0:	4691      	mov	r9, r2
 80010a2:	469c      	mov	ip, r3
 80010a4:	4652      	mov	r2, sl
 80010a6:	2003      	movs	r0, #3
 80010a8:	44e3      	add	fp, ip
 80010aa:	e693      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 80010ac:	230c      	movs	r3, #12
 80010ae:	4699      	mov	r9, r3
 80010b0:	3b09      	subs	r3, #9
 80010b2:	46a0      	mov	r8, r4
 80010b4:	4683      	mov	fp, r0
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	e671      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 80010ba:	2304      	movs	r3, #4
 80010bc:	4699      	mov	r9, r3
 80010be:	2300      	movs	r3, #0
 80010c0:	469b      	mov	fp, r3
 80010c2:	3301      	adds	r3, #1
 80010c4:	2500      	movs	r5, #0
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	e669      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	000007ff 	.word	0x000007ff
 80010d0:	fffffc01 	.word	0xfffffc01
 80010d4:	0800ac8c 	.word	0x0800ac8c
 80010d8:	000003ff 	.word	0x000003ff
 80010dc:	feffffff 	.word	0xfeffffff
 80010e0:	000007fe 	.word	0x000007fe
 80010e4:	000003f3 	.word	0x000003f3
 80010e8:	fffffc0d 	.word	0xfffffc0d
 80010ec:	fffff801 	.word	0xfffff801
 80010f0:	4649      	mov	r1, r9
 80010f2:	2301      	movs	r3, #1
 80010f4:	4319      	orrs	r1, r3
 80010f6:	4689      	mov	r9, r1
 80010f8:	2400      	movs	r4, #0
 80010fa:	2001      	movs	r0, #1
 80010fc:	e66a      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 80010fe:	2300      	movs	r3, #0
 8001100:	2480      	movs	r4, #128	; 0x80
 8001102:	469a      	mov	sl, r3
 8001104:	2500      	movs	r5, #0
 8001106:	4b8a      	ldr	r3, [pc, #552]	; (8001330 <__aeabi_ddiv+0x5dc>)
 8001108:	0324      	lsls	r4, r4, #12
 800110a:	e67a      	b.n	8000e02 <__aeabi_ddiv+0xae>
 800110c:	2501      	movs	r5, #1
 800110e:	426d      	negs	r5, r5
 8001110:	2301      	movs	r3, #1
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	2b38      	cmp	r3, #56	; 0x38
 8001116:	dd00      	ble.n	800111a <__aeabi_ddiv+0x3c6>
 8001118:	e670      	b.n	8000dfc <__aeabi_ddiv+0xa8>
 800111a:	2b1f      	cmp	r3, #31
 800111c:	dc00      	bgt.n	8001120 <__aeabi_ddiv+0x3cc>
 800111e:	e0bf      	b.n	80012a0 <__aeabi_ddiv+0x54c>
 8001120:	211f      	movs	r1, #31
 8001122:	4249      	negs	r1, r1
 8001124:	1a8a      	subs	r2, r1, r2
 8001126:	4641      	mov	r1, r8
 8001128:	40d1      	lsrs	r1, r2
 800112a:	000a      	movs	r2, r1
 800112c:	2b20      	cmp	r3, #32
 800112e:	d004      	beq.n	800113a <__aeabi_ddiv+0x3e6>
 8001130:	4641      	mov	r1, r8
 8001132:	4b80      	ldr	r3, [pc, #512]	; (8001334 <__aeabi_ddiv+0x5e0>)
 8001134:	445b      	add	r3, fp
 8001136:	4099      	lsls	r1, r3
 8001138:	430d      	orrs	r5, r1
 800113a:	1e6b      	subs	r3, r5, #1
 800113c:	419d      	sbcs	r5, r3
 800113e:	2307      	movs	r3, #7
 8001140:	432a      	orrs	r2, r5
 8001142:	001d      	movs	r5, r3
 8001144:	2400      	movs	r4, #0
 8001146:	4015      	ands	r5, r2
 8001148:	4213      	tst	r3, r2
 800114a:	d100      	bne.n	800114e <__aeabi_ddiv+0x3fa>
 800114c:	e0d4      	b.n	80012f8 <__aeabi_ddiv+0x5a4>
 800114e:	210f      	movs	r1, #15
 8001150:	2300      	movs	r3, #0
 8001152:	4011      	ands	r1, r2
 8001154:	2904      	cmp	r1, #4
 8001156:	d100      	bne.n	800115a <__aeabi_ddiv+0x406>
 8001158:	e0cb      	b.n	80012f2 <__aeabi_ddiv+0x59e>
 800115a:	1d11      	adds	r1, r2, #4
 800115c:	4291      	cmp	r1, r2
 800115e:	4192      	sbcs	r2, r2
 8001160:	4252      	negs	r2, r2
 8001162:	189b      	adds	r3, r3, r2
 8001164:	000a      	movs	r2, r1
 8001166:	0219      	lsls	r1, r3, #8
 8001168:	d400      	bmi.n	800116c <__aeabi_ddiv+0x418>
 800116a:	e0c2      	b.n	80012f2 <__aeabi_ddiv+0x59e>
 800116c:	2301      	movs	r3, #1
 800116e:	2400      	movs	r4, #0
 8001170:	2500      	movs	r5, #0
 8001172:	e646      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	4641      	mov	r1, r8
 8001178:	031b      	lsls	r3, r3, #12
 800117a:	4219      	tst	r1, r3
 800117c:	d008      	beq.n	8001190 <__aeabi_ddiv+0x43c>
 800117e:	421c      	tst	r4, r3
 8001180:	d106      	bne.n	8001190 <__aeabi_ddiv+0x43c>
 8001182:	431c      	orrs	r4, r3
 8001184:	0324      	lsls	r4, r4, #12
 8001186:	46ba      	mov	sl, r7
 8001188:	0015      	movs	r5, r2
 800118a:	4b69      	ldr	r3, [pc, #420]	; (8001330 <__aeabi_ddiv+0x5dc>)
 800118c:	0b24      	lsrs	r4, r4, #12
 800118e:	e638      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001190:	2480      	movs	r4, #128	; 0x80
 8001192:	4643      	mov	r3, r8
 8001194:	0324      	lsls	r4, r4, #12
 8001196:	431c      	orrs	r4, r3
 8001198:	0324      	lsls	r4, r4, #12
 800119a:	46b2      	mov	sl, r6
 800119c:	4b64      	ldr	r3, [pc, #400]	; (8001330 <__aeabi_ddiv+0x5dc>)
 800119e:	0b24      	lsrs	r4, r4, #12
 80011a0:	e62f      	b.n	8000e02 <__aeabi_ddiv+0xae>
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d100      	bne.n	80011a8 <__aeabi_ddiv+0x454>
 80011a6:	e703      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 80011a8:	19a6      	adds	r6, r4, r6
 80011aa:	1e68      	subs	r0, r5, #1
 80011ac:	42a6      	cmp	r6, r4
 80011ae:	d200      	bcs.n	80011b2 <__aeabi_ddiv+0x45e>
 80011b0:	e08d      	b.n	80012ce <__aeabi_ddiv+0x57a>
 80011b2:	428e      	cmp	r6, r1
 80011b4:	d200      	bcs.n	80011b8 <__aeabi_ddiv+0x464>
 80011b6:	e0a3      	b.n	8001300 <__aeabi_ddiv+0x5ac>
 80011b8:	d100      	bne.n	80011bc <__aeabi_ddiv+0x468>
 80011ba:	e0b3      	b.n	8001324 <__aeabi_ddiv+0x5d0>
 80011bc:	0005      	movs	r5, r0
 80011be:	e6f5      	b.n	8000fac <__aeabi_ddiv+0x258>
 80011c0:	42aa      	cmp	r2, r5
 80011c2:	d900      	bls.n	80011c6 <__aeabi_ddiv+0x472>
 80011c4:	e639      	b.n	8000e3a <__aeabi_ddiv+0xe6>
 80011c6:	4643      	mov	r3, r8
 80011c8:	07de      	lsls	r6, r3, #31
 80011ca:	0858      	lsrs	r0, r3, #1
 80011cc:	086b      	lsrs	r3, r5, #1
 80011ce:	431e      	orrs	r6, r3
 80011d0:	07ed      	lsls	r5, r5, #31
 80011d2:	e639      	b.n	8000e48 <__aeabi_ddiv+0xf4>
 80011d4:	4648      	mov	r0, r9
 80011d6:	f001 f867 	bl	80022a8 <__clzsi2>
 80011da:	0001      	movs	r1, r0
 80011dc:	0002      	movs	r2, r0
 80011de:	3115      	adds	r1, #21
 80011e0:	3220      	adds	r2, #32
 80011e2:	291c      	cmp	r1, #28
 80011e4:	dc00      	bgt.n	80011e8 <__aeabi_ddiv+0x494>
 80011e6:	e72c      	b.n	8001042 <__aeabi_ddiv+0x2ee>
 80011e8:	464b      	mov	r3, r9
 80011ea:	3808      	subs	r0, #8
 80011ec:	4083      	lsls	r3, r0
 80011ee:	2500      	movs	r5, #0
 80011f0:	4698      	mov	r8, r3
 80011f2:	e732      	b.n	800105a <__aeabi_ddiv+0x306>
 80011f4:	f001 f858 	bl	80022a8 <__clzsi2>
 80011f8:	0003      	movs	r3, r0
 80011fa:	001a      	movs	r2, r3
 80011fc:	3215      	adds	r2, #21
 80011fe:	3020      	adds	r0, #32
 8001200:	2a1c      	cmp	r2, #28
 8001202:	dc00      	bgt.n	8001206 <__aeabi_ddiv+0x4b2>
 8001204:	e700      	b.n	8001008 <__aeabi_ddiv+0x2b4>
 8001206:	4654      	mov	r4, sl
 8001208:	3b08      	subs	r3, #8
 800120a:	2200      	movs	r2, #0
 800120c:	409c      	lsls	r4, r3
 800120e:	e705      	b.n	800101c <__aeabi_ddiv+0x2c8>
 8001210:	1936      	adds	r6, r6, r4
 8001212:	3b01      	subs	r3, #1
 8001214:	42b4      	cmp	r4, r6
 8001216:	d900      	bls.n	800121a <__aeabi_ddiv+0x4c6>
 8001218:	e6a6      	b.n	8000f68 <__aeabi_ddiv+0x214>
 800121a:	42b2      	cmp	r2, r6
 800121c:	d800      	bhi.n	8001220 <__aeabi_ddiv+0x4cc>
 800121e:	e6a3      	b.n	8000f68 <__aeabi_ddiv+0x214>
 8001220:	1e83      	subs	r3, r0, #2
 8001222:	1936      	adds	r6, r6, r4
 8001224:	e6a0      	b.n	8000f68 <__aeabi_ddiv+0x214>
 8001226:	1909      	adds	r1, r1, r4
 8001228:	3d01      	subs	r5, #1
 800122a:	428c      	cmp	r4, r1
 800122c:	d900      	bls.n	8001230 <__aeabi_ddiv+0x4dc>
 800122e:	e68d      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 8001230:	428a      	cmp	r2, r1
 8001232:	d800      	bhi.n	8001236 <__aeabi_ddiv+0x4e2>
 8001234:	e68a      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 8001236:	1e85      	subs	r5, r0, #2
 8001238:	1909      	adds	r1, r1, r4
 800123a:	e687      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 800123c:	230f      	movs	r3, #15
 800123e:	402b      	ands	r3, r5
 8001240:	2b04      	cmp	r3, #4
 8001242:	d100      	bne.n	8001246 <__aeabi_ddiv+0x4f2>
 8001244:	e6bc      	b.n	8000fc0 <__aeabi_ddiv+0x26c>
 8001246:	2305      	movs	r3, #5
 8001248:	425b      	negs	r3, r3
 800124a:	42ab      	cmp	r3, r5
 800124c:	419b      	sbcs	r3, r3
 800124e:	3504      	adds	r5, #4
 8001250:	425b      	negs	r3, r3
 8001252:	08ed      	lsrs	r5, r5, #3
 8001254:	4498      	add	r8, r3
 8001256:	e6b4      	b.n	8000fc2 <__aeabi_ddiv+0x26e>
 8001258:	42af      	cmp	r7, r5
 800125a:	d900      	bls.n	800125e <__aeabi_ddiv+0x50a>
 800125c:	e660      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 800125e:	4282      	cmp	r2, r0
 8001260:	d804      	bhi.n	800126c <__aeabi_ddiv+0x518>
 8001262:	d000      	beq.n	8001266 <__aeabi_ddiv+0x512>
 8001264:	e65c      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 8001266:	42ae      	cmp	r6, r5
 8001268:	d800      	bhi.n	800126c <__aeabi_ddiv+0x518>
 800126a:	e659      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 800126c:	2302      	movs	r3, #2
 800126e:	425b      	negs	r3, r3
 8001270:	469c      	mov	ip, r3
 8001272:	9b00      	ldr	r3, [sp, #0]
 8001274:	44e0      	add	r8, ip
 8001276:	469c      	mov	ip, r3
 8001278:	4465      	add	r5, ip
 800127a:	429d      	cmp	r5, r3
 800127c:	419b      	sbcs	r3, r3
 800127e:	425b      	negs	r3, r3
 8001280:	191b      	adds	r3, r3, r4
 8001282:	18c0      	adds	r0, r0, r3
 8001284:	e64d      	b.n	8000f22 <__aeabi_ddiv+0x1ce>
 8001286:	428a      	cmp	r2, r1
 8001288:	d800      	bhi.n	800128c <__aeabi_ddiv+0x538>
 800128a:	e60e      	b.n	8000eaa <__aeabi_ddiv+0x156>
 800128c:	1e83      	subs	r3, r0, #2
 800128e:	1909      	adds	r1, r1, r4
 8001290:	e60b      	b.n	8000eaa <__aeabi_ddiv+0x156>
 8001292:	428a      	cmp	r2, r1
 8001294:	d800      	bhi.n	8001298 <__aeabi_ddiv+0x544>
 8001296:	e5f4      	b.n	8000e82 <__aeabi_ddiv+0x12e>
 8001298:	1e83      	subs	r3, r0, #2
 800129a:	4698      	mov	r8, r3
 800129c:	1909      	adds	r1, r1, r4
 800129e:	e5f0      	b.n	8000e82 <__aeabi_ddiv+0x12e>
 80012a0:	4925      	ldr	r1, [pc, #148]	; (8001338 <__aeabi_ddiv+0x5e4>)
 80012a2:	0028      	movs	r0, r5
 80012a4:	4459      	add	r1, fp
 80012a6:	408d      	lsls	r5, r1
 80012a8:	4642      	mov	r2, r8
 80012aa:	408a      	lsls	r2, r1
 80012ac:	1e69      	subs	r1, r5, #1
 80012ae:	418d      	sbcs	r5, r1
 80012b0:	4641      	mov	r1, r8
 80012b2:	40d8      	lsrs	r0, r3
 80012b4:	40d9      	lsrs	r1, r3
 80012b6:	4302      	orrs	r2, r0
 80012b8:	432a      	orrs	r2, r5
 80012ba:	000b      	movs	r3, r1
 80012bc:	0751      	lsls	r1, r2, #29
 80012be:	d100      	bne.n	80012c2 <__aeabi_ddiv+0x56e>
 80012c0:	e751      	b.n	8001166 <__aeabi_ddiv+0x412>
 80012c2:	210f      	movs	r1, #15
 80012c4:	4011      	ands	r1, r2
 80012c6:	2904      	cmp	r1, #4
 80012c8:	d000      	beq.n	80012cc <__aeabi_ddiv+0x578>
 80012ca:	e746      	b.n	800115a <__aeabi_ddiv+0x406>
 80012cc:	e74b      	b.n	8001166 <__aeabi_ddiv+0x412>
 80012ce:	0005      	movs	r5, r0
 80012d0:	428e      	cmp	r6, r1
 80012d2:	d000      	beq.n	80012d6 <__aeabi_ddiv+0x582>
 80012d4:	e66a      	b.n	8000fac <__aeabi_ddiv+0x258>
 80012d6:	9a00      	ldr	r2, [sp, #0]
 80012d8:	4293      	cmp	r3, r2
 80012da:	d000      	beq.n	80012de <__aeabi_ddiv+0x58a>
 80012dc:	e666      	b.n	8000fac <__aeabi_ddiv+0x258>
 80012de:	e667      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 80012e0:	4a16      	ldr	r2, [pc, #88]	; (800133c <__aeabi_ddiv+0x5e8>)
 80012e2:	445a      	add	r2, fp
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	dc00      	bgt.n	80012ea <__aeabi_ddiv+0x596>
 80012e8:	e710      	b.n	800110c <__aeabi_ddiv+0x3b8>
 80012ea:	2301      	movs	r3, #1
 80012ec:	2500      	movs	r5, #0
 80012ee:	4498      	add	r8, r3
 80012f0:	e667      	b.n	8000fc2 <__aeabi_ddiv+0x26e>
 80012f2:	075d      	lsls	r5, r3, #29
 80012f4:	025b      	lsls	r3, r3, #9
 80012f6:	0b1c      	lsrs	r4, r3, #12
 80012f8:	08d2      	lsrs	r2, r2, #3
 80012fa:	2300      	movs	r3, #0
 80012fc:	4315      	orrs	r5, r2
 80012fe:	e580      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001300:	9800      	ldr	r0, [sp, #0]
 8001302:	3d02      	subs	r5, #2
 8001304:	0042      	lsls	r2, r0, #1
 8001306:	4282      	cmp	r2, r0
 8001308:	41bf      	sbcs	r7, r7
 800130a:	427f      	negs	r7, r7
 800130c:	193c      	adds	r4, r7, r4
 800130e:	1936      	adds	r6, r6, r4
 8001310:	9200      	str	r2, [sp, #0]
 8001312:	e7dd      	b.n	80012d0 <__aeabi_ddiv+0x57c>
 8001314:	2480      	movs	r4, #128	; 0x80
 8001316:	4643      	mov	r3, r8
 8001318:	0324      	lsls	r4, r4, #12
 800131a:	431c      	orrs	r4, r3
 800131c:	0324      	lsls	r4, r4, #12
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__aeabi_ddiv+0x5dc>)
 8001320:	0b24      	lsrs	r4, r4, #12
 8001322:	e56e      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001324:	9a00      	ldr	r2, [sp, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d3ea      	bcc.n	8001300 <__aeabi_ddiv+0x5ac>
 800132a:	0005      	movs	r5, r0
 800132c:	e7d3      	b.n	80012d6 <__aeabi_ddiv+0x582>
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	000007ff 	.word	0x000007ff
 8001334:	0000043e 	.word	0x0000043e
 8001338:	0000041e 	.word	0x0000041e
 800133c:	000003ff 	.word	0x000003ff

08001340 <__eqdf2>:
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	464e      	mov	r6, r9
 8001344:	4645      	mov	r5, r8
 8001346:	46de      	mov	lr, fp
 8001348:	4657      	mov	r7, sl
 800134a:	4690      	mov	r8, r2
 800134c:	b5e0      	push	{r5, r6, r7, lr}
 800134e:	0017      	movs	r7, r2
 8001350:	031a      	lsls	r2, r3, #12
 8001352:	0b12      	lsrs	r2, r2, #12
 8001354:	0005      	movs	r5, r0
 8001356:	4684      	mov	ip, r0
 8001358:	4819      	ldr	r0, [pc, #100]	; (80013c0 <__eqdf2+0x80>)
 800135a:	030e      	lsls	r6, r1, #12
 800135c:	004c      	lsls	r4, r1, #1
 800135e:	4691      	mov	r9, r2
 8001360:	005a      	lsls	r2, r3, #1
 8001362:	0fdb      	lsrs	r3, r3, #31
 8001364:	469b      	mov	fp, r3
 8001366:	0b36      	lsrs	r6, r6, #12
 8001368:	0d64      	lsrs	r4, r4, #21
 800136a:	0fc9      	lsrs	r1, r1, #31
 800136c:	0d52      	lsrs	r2, r2, #21
 800136e:	4284      	cmp	r4, r0
 8001370:	d019      	beq.n	80013a6 <__eqdf2+0x66>
 8001372:	4282      	cmp	r2, r0
 8001374:	d010      	beq.n	8001398 <__eqdf2+0x58>
 8001376:	2001      	movs	r0, #1
 8001378:	4294      	cmp	r4, r2
 800137a:	d10e      	bne.n	800139a <__eqdf2+0x5a>
 800137c:	454e      	cmp	r6, r9
 800137e:	d10c      	bne.n	800139a <__eqdf2+0x5a>
 8001380:	2001      	movs	r0, #1
 8001382:	45c4      	cmp	ip, r8
 8001384:	d109      	bne.n	800139a <__eqdf2+0x5a>
 8001386:	4559      	cmp	r1, fp
 8001388:	d017      	beq.n	80013ba <__eqdf2+0x7a>
 800138a:	2c00      	cmp	r4, #0
 800138c:	d105      	bne.n	800139a <__eqdf2+0x5a>
 800138e:	0030      	movs	r0, r6
 8001390:	4328      	orrs	r0, r5
 8001392:	1e43      	subs	r3, r0, #1
 8001394:	4198      	sbcs	r0, r3
 8001396:	e000      	b.n	800139a <__eqdf2+0x5a>
 8001398:	2001      	movs	r0, #1
 800139a:	bcf0      	pop	{r4, r5, r6, r7}
 800139c:	46bb      	mov	fp, r7
 800139e:	46b2      	mov	sl, r6
 80013a0:	46a9      	mov	r9, r5
 80013a2:	46a0      	mov	r8, r4
 80013a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a6:	0033      	movs	r3, r6
 80013a8:	2001      	movs	r0, #1
 80013aa:	432b      	orrs	r3, r5
 80013ac:	d1f5      	bne.n	800139a <__eqdf2+0x5a>
 80013ae:	42a2      	cmp	r2, r4
 80013b0:	d1f3      	bne.n	800139a <__eqdf2+0x5a>
 80013b2:	464b      	mov	r3, r9
 80013b4:	433b      	orrs	r3, r7
 80013b6:	d1f0      	bne.n	800139a <__eqdf2+0x5a>
 80013b8:	e7e2      	b.n	8001380 <__eqdf2+0x40>
 80013ba:	2000      	movs	r0, #0
 80013bc:	e7ed      	b.n	800139a <__eqdf2+0x5a>
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	000007ff 	.word	0x000007ff

080013c4 <__gedf2>:
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	4647      	mov	r7, r8
 80013c8:	46ce      	mov	lr, r9
 80013ca:	0004      	movs	r4, r0
 80013cc:	0018      	movs	r0, r3
 80013ce:	0016      	movs	r6, r2
 80013d0:	031b      	lsls	r3, r3, #12
 80013d2:	0b1b      	lsrs	r3, r3, #12
 80013d4:	4d2d      	ldr	r5, [pc, #180]	; (800148c <__gedf2+0xc8>)
 80013d6:	004a      	lsls	r2, r1, #1
 80013d8:	4699      	mov	r9, r3
 80013da:	b580      	push	{r7, lr}
 80013dc:	0043      	lsls	r3, r0, #1
 80013de:	030f      	lsls	r7, r1, #12
 80013e0:	46a4      	mov	ip, r4
 80013e2:	46b0      	mov	r8, r6
 80013e4:	0b3f      	lsrs	r7, r7, #12
 80013e6:	0d52      	lsrs	r2, r2, #21
 80013e8:	0fc9      	lsrs	r1, r1, #31
 80013ea:	0d5b      	lsrs	r3, r3, #21
 80013ec:	0fc0      	lsrs	r0, r0, #31
 80013ee:	42aa      	cmp	r2, r5
 80013f0:	d021      	beq.n	8001436 <__gedf2+0x72>
 80013f2:	42ab      	cmp	r3, r5
 80013f4:	d013      	beq.n	800141e <__gedf2+0x5a>
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	d122      	bne.n	8001440 <__gedf2+0x7c>
 80013fa:	433c      	orrs	r4, r7
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <__gedf2+0x42>
 8001400:	464d      	mov	r5, r9
 8001402:	432e      	orrs	r6, r5
 8001404:	d022      	beq.n	800144c <__gedf2+0x88>
 8001406:	2c00      	cmp	r4, #0
 8001408:	d010      	beq.n	800142c <__gedf2+0x68>
 800140a:	4281      	cmp	r1, r0
 800140c:	d022      	beq.n	8001454 <__gedf2+0x90>
 800140e:	2002      	movs	r0, #2
 8001410:	3901      	subs	r1, #1
 8001412:	4008      	ands	r0, r1
 8001414:	3801      	subs	r0, #1
 8001416:	bcc0      	pop	{r6, r7}
 8001418:	46b9      	mov	r9, r7
 800141a:	46b0      	mov	r8, r6
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141e:	464d      	mov	r5, r9
 8001420:	432e      	orrs	r6, r5
 8001422:	d129      	bne.n	8001478 <__gedf2+0xb4>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d1f0      	bne.n	800140a <__gedf2+0x46>
 8001428:	433c      	orrs	r4, r7
 800142a:	d1ee      	bne.n	800140a <__gedf2+0x46>
 800142c:	2800      	cmp	r0, #0
 800142e:	d1f2      	bne.n	8001416 <__gedf2+0x52>
 8001430:	2001      	movs	r0, #1
 8001432:	4240      	negs	r0, r0
 8001434:	e7ef      	b.n	8001416 <__gedf2+0x52>
 8001436:	003d      	movs	r5, r7
 8001438:	4325      	orrs	r5, r4
 800143a:	d11d      	bne.n	8001478 <__gedf2+0xb4>
 800143c:	4293      	cmp	r3, r2
 800143e:	d0ee      	beq.n	800141e <__gedf2+0x5a>
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1e2      	bne.n	800140a <__gedf2+0x46>
 8001444:	464c      	mov	r4, r9
 8001446:	4326      	orrs	r6, r4
 8001448:	d1df      	bne.n	800140a <__gedf2+0x46>
 800144a:	e7e0      	b.n	800140e <__gedf2+0x4a>
 800144c:	2000      	movs	r0, #0
 800144e:	2c00      	cmp	r4, #0
 8001450:	d0e1      	beq.n	8001416 <__gedf2+0x52>
 8001452:	e7dc      	b.n	800140e <__gedf2+0x4a>
 8001454:	429a      	cmp	r2, r3
 8001456:	dc0a      	bgt.n	800146e <__gedf2+0xaa>
 8001458:	dbe8      	blt.n	800142c <__gedf2+0x68>
 800145a:	454f      	cmp	r7, r9
 800145c:	d8d7      	bhi.n	800140e <__gedf2+0x4a>
 800145e:	d00e      	beq.n	800147e <__gedf2+0xba>
 8001460:	2000      	movs	r0, #0
 8001462:	454f      	cmp	r7, r9
 8001464:	d2d7      	bcs.n	8001416 <__gedf2+0x52>
 8001466:	2900      	cmp	r1, #0
 8001468:	d0e2      	beq.n	8001430 <__gedf2+0x6c>
 800146a:	0008      	movs	r0, r1
 800146c:	e7d3      	b.n	8001416 <__gedf2+0x52>
 800146e:	4243      	negs	r3, r0
 8001470:	4158      	adcs	r0, r3
 8001472:	0040      	lsls	r0, r0, #1
 8001474:	3801      	subs	r0, #1
 8001476:	e7ce      	b.n	8001416 <__gedf2+0x52>
 8001478:	2002      	movs	r0, #2
 800147a:	4240      	negs	r0, r0
 800147c:	e7cb      	b.n	8001416 <__gedf2+0x52>
 800147e:	45c4      	cmp	ip, r8
 8001480:	d8c5      	bhi.n	800140e <__gedf2+0x4a>
 8001482:	2000      	movs	r0, #0
 8001484:	45c4      	cmp	ip, r8
 8001486:	d2c6      	bcs.n	8001416 <__gedf2+0x52>
 8001488:	e7ed      	b.n	8001466 <__gedf2+0xa2>
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	000007ff 	.word	0x000007ff

08001490 <__ledf2>:
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	4647      	mov	r7, r8
 8001494:	46ce      	mov	lr, r9
 8001496:	0004      	movs	r4, r0
 8001498:	0018      	movs	r0, r3
 800149a:	0016      	movs	r6, r2
 800149c:	031b      	lsls	r3, r3, #12
 800149e:	0b1b      	lsrs	r3, r3, #12
 80014a0:	4d2c      	ldr	r5, [pc, #176]	; (8001554 <__ledf2+0xc4>)
 80014a2:	004a      	lsls	r2, r1, #1
 80014a4:	4699      	mov	r9, r3
 80014a6:	b580      	push	{r7, lr}
 80014a8:	0043      	lsls	r3, r0, #1
 80014aa:	030f      	lsls	r7, r1, #12
 80014ac:	46a4      	mov	ip, r4
 80014ae:	46b0      	mov	r8, r6
 80014b0:	0b3f      	lsrs	r7, r7, #12
 80014b2:	0d52      	lsrs	r2, r2, #21
 80014b4:	0fc9      	lsrs	r1, r1, #31
 80014b6:	0d5b      	lsrs	r3, r3, #21
 80014b8:	0fc0      	lsrs	r0, r0, #31
 80014ba:	42aa      	cmp	r2, r5
 80014bc:	d00d      	beq.n	80014da <__ledf2+0x4a>
 80014be:	42ab      	cmp	r3, r5
 80014c0:	d010      	beq.n	80014e4 <__ledf2+0x54>
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d127      	bne.n	8001516 <__ledf2+0x86>
 80014c6:	433c      	orrs	r4, r7
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d111      	bne.n	80014f0 <__ledf2+0x60>
 80014cc:	464d      	mov	r5, r9
 80014ce:	432e      	orrs	r6, r5
 80014d0:	d10e      	bne.n	80014f0 <__ledf2+0x60>
 80014d2:	2000      	movs	r0, #0
 80014d4:	2c00      	cmp	r4, #0
 80014d6:	d015      	beq.n	8001504 <__ledf2+0x74>
 80014d8:	e00e      	b.n	80014f8 <__ledf2+0x68>
 80014da:	003d      	movs	r5, r7
 80014dc:	4325      	orrs	r5, r4
 80014de:	d110      	bne.n	8001502 <__ledf2+0x72>
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d118      	bne.n	8001516 <__ledf2+0x86>
 80014e4:	464d      	mov	r5, r9
 80014e6:	432e      	orrs	r6, r5
 80014e8:	d10b      	bne.n	8001502 <__ledf2+0x72>
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	d102      	bne.n	80014f4 <__ledf2+0x64>
 80014ee:	433c      	orrs	r4, r7
 80014f0:	2c00      	cmp	r4, #0
 80014f2:	d00b      	beq.n	800150c <__ledf2+0x7c>
 80014f4:	4281      	cmp	r1, r0
 80014f6:	d014      	beq.n	8001522 <__ledf2+0x92>
 80014f8:	2002      	movs	r0, #2
 80014fa:	3901      	subs	r1, #1
 80014fc:	4008      	ands	r0, r1
 80014fe:	3801      	subs	r0, #1
 8001500:	e000      	b.n	8001504 <__ledf2+0x74>
 8001502:	2002      	movs	r0, #2
 8001504:	bcc0      	pop	{r6, r7}
 8001506:	46b9      	mov	r9, r7
 8001508:	46b0      	mov	r8, r6
 800150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800150c:	2800      	cmp	r0, #0
 800150e:	d1f9      	bne.n	8001504 <__ledf2+0x74>
 8001510:	2001      	movs	r0, #1
 8001512:	4240      	negs	r0, r0
 8001514:	e7f6      	b.n	8001504 <__ledf2+0x74>
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ec      	bne.n	80014f4 <__ledf2+0x64>
 800151a:	464c      	mov	r4, r9
 800151c:	4326      	orrs	r6, r4
 800151e:	d1e9      	bne.n	80014f4 <__ledf2+0x64>
 8001520:	e7ea      	b.n	80014f8 <__ledf2+0x68>
 8001522:	429a      	cmp	r2, r3
 8001524:	dd04      	ble.n	8001530 <__ledf2+0xa0>
 8001526:	4243      	negs	r3, r0
 8001528:	4158      	adcs	r0, r3
 800152a:	0040      	lsls	r0, r0, #1
 800152c:	3801      	subs	r0, #1
 800152e:	e7e9      	b.n	8001504 <__ledf2+0x74>
 8001530:	429a      	cmp	r2, r3
 8001532:	dbeb      	blt.n	800150c <__ledf2+0x7c>
 8001534:	454f      	cmp	r7, r9
 8001536:	d8df      	bhi.n	80014f8 <__ledf2+0x68>
 8001538:	d006      	beq.n	8001548 <__ledf2+0xb8>
 800153a:	2000      	movs	r0, #0
 800153c:	454f      	cmp	r7, r9
 800153e:	d2e1      	bcs.n	8001504 <__ledf2+0x74>
 8001540:	2900      	cmp	r1, #0
 8001542:	d0e5      	beq.n	8001510 <__ledf2+0x80>
 8001544:	0008      	movs	r0, r1
 8001546:	e7dd      	b.n	8001504 <__ledf2+0x74>
 8001548:	45c4      	cmp	ip, r8
 800154a:	d8d5      	bhi.n	80014f8 <__ledf2+0x68>
 800154c:	2000      	movs	r0, #0
 800154e:	45c4      	cmp	ip, r8
 8001550:	d2d8      	bcs.n	8001504 <__ledf2+0x74>
 8001552:	e7f5      	b.n	8001540 <__ledf2+0xb0>
 8001554:	000007ff 	.word	0x000007ff

08001558 <__aeabi_dmul>:
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	4657      	mov	r7, sl
 800155c:	464e      	mov	r6, r9
 800155e:	4645      	mov	r5, r8
 8001560:	46de      	mov	lr, fp
 8001562:	b5e0      	push	{r5, r6, r7, lr}
 8001564:	4698      	mov	r8, r3
 8001566:	030c      	lsls	r4, r1, #12
 8001568:	004b      	lsls	r3, r1, #1
 800156a:	0006      	movs	r6, r0
 800156c:	4692      	mov	sl, r2
 800156e:	b087      	sub	sp, #28
 8001570:	0b24      	lsrs	r4, r4, #12
 8001572:	0d5b      	lsrs	r3, r3, #21
 8001574:	0fcf      	lsrs	r7, r1, #31
 8001576:	2b00      	cmp	r3, #0
 8001578:	d100      	bne.n	800157c <__aeabi_dmul+0x24>
 800157a:	e15c      	b.n	8001836 <__aeabi_dmul+0x2de>
 800157c:	4ad9      	ldr	r2, [pc, #868]	; (80018e4 <__aeabi_dmul+0x38c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d100      	bne.n	8001584 <__aeabi_dmul+0x2c>
 8001582:	e175      	b.n	8001870 <__aeabi_dmul+0x318>
 8001584:	0f42      	lsrs	r2, r0, #29
 8001586:	00e4      	lsls	r4, r4, #3
 8001588:	4314      	orrs	r4, r2
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	0412      	lsls	r2, r2, #16
 800158e:	4314      	orrs	r4, r2
 8001590:	4ad5      	ldr	r2, [pc, #852]	; (80018e8 <__aeabi_dmul+0x390>)
 8001592:	00c5      	lsls	r5, r0, #3
 8001594:	4694      	mov	ip, r2
 8001596:	4463      	add	r3, ip
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2300      	movs	r3, #0
 800159c:	4699      	mov	r9, r3
 800159e:	469b      	mov	fp, r3
 80015a0:	4643      	mov	r3, r8
 80015a2:	4642      	mov	r2, r8
 80015a4:	031e      	lsls	r6, r3, #12
 80015a6:	0fd2      	lsrs	r2, r2, #31
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4650      	mov	r0, sl
 80015ac:	4690      	mov	r8, r2
 80015ae:	0b36      	lsrs	r6, r6, #12
 80015b0:	0d5b      	lsrs	r3, r3, #21
 80015b2:	d100      	bne.n	80015b6 <__aeabi_dmul+0x5e>
 80015b4:	e120      	b.n	80017f8 <__aeabi_dmul+0x2a0>
 80015b6:	4acb      	ldr	r2, [pc, #812]	; (80018e4 <__aeabi_dmul+0x38c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d100      	bne.n	80015be <__aeabi_dmul+0x66>
 80015bc:	e162      	b.n	8001884 <__aeabi_dmul+0x32c>
 80015be:	49ca      	ldr	r1, [pc, #808]	; (80018e8 <__aeabi_dmul+0x390>)
 80015c0:	0f42      	lsrs	r2, r0, #29
 80015c2:	468c      	mov	ip, r1
 80015c4:	9900      	ldr	r1, [sp, #0]
 80015c6:	4463      	add	r3, ip
 80015c8:	00f6      	lsls	r6, r6, #3
 80015ca:	468c      	mov	ip, r1
 80015cc:	4316      	orrs	r6, r2
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	449c      	add	ip, r3
 80015d2:	0412      	lsls	r2, r2, #16
 80015d4:	4663      	mov	r3, ip
 80015d6:	4316      	orrs	r6, r2
 80015d8:	00c2      	lsls	r2, r0, #3
 80015da:	2000      	movs	r0, #0
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	9900      	ldr	r1, [sp, #0]
 80015e0:	4643      	mov	r3, r8
 80015e2:	3101      	adds	r1, #1
 80015e4:	468c      	mov	ip, r1
 80015e6:	4649      	mov	r1, r9
 80015e8:	407b      	eors	r3, r7
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	290f      	cmp	r1, #15
 80015ee:	d826      	bhi.n	800163e <__aeabi_dmul+0xe6>
 80015f0:	4bbe      	ldr	r3, [pc, #760]	; (80018ec <__aeabi_dmul+0x394>)
 80015f2:	0089      	lsls	r1, r1, #2
 80015f4:	5859      	ldr	r1, [r3, r1]
 80015f6:	468f      	mov	pc, r1
 80015f8:	4643      	mov	r3, r8
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	0034      	movs	r4, r6
 80015fe:	0015      	movs	r5, r2
 8001600:	4683      	mov	fp, r0
 8001602:	465b      	mov	r3, fp
 8001604:	2b02      	cmp	r3, #2
 8001606:	d016      	beq.n	8001636 <__aeabi_dmul+0xde>
 8001608:	2b03      	cmp	r3, #3
 800160a:	d100      	bne.n	800160e <__aeabi_dmul+0xb6>
 800160c:	e203      	b.n	8001a16 <__aeabi_dmul+0x4be>
 800160e:	2b01      	cmp	r3, #1
 8001610:	d000      	beq.n	8001614 <__aeabi_dmul+0xbc>
 8001612:	e0cd      	b.n	80017b0 <__aeabi_dmul+0x258>
 8001614:	2200      	movs	r2, #0
 8001616:	2400      	movs	r4, #0
 8001618:	2500      	movs	r5, #0
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0512      	lsls	r2, r2, #20
 800161e:	4322      	orrs	r2, r4
 8001620:	07db      	lsls	r3, r3, #31
 8001622:	431a      	orrs	r2, r3
 8001624:	0028      	movs	r0, r5
 8001626:	0011      	movs	r1, r2
 8001628:	b007      	add	sp, #28
 800162a:	bcf0      	pop	{r4, r5, r6, r7}
 800162c:	46bb      	mov	fp, r7
 800162e:	46b2      	mov	sl, r6
 8001630:	46a9      	mov	r9, r5
 8001632:	46a0      	mov	r8, r4
 8001634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001636:	2400      	movs	r4, #0
 8001638:	2500      	movs	r5, #0
 800163a:	4aaa      	ldr	r2, [pc, #680]	; (80018e4 <__aeabi_dmul+0x38c>)
 800163c:	e7ed      	b.n	800161a <__aeabi_dmul+0xc2>
 800163e:	0c28      	lsrs	r0, r5, #16
 8001640:	042d      	lsls	r5, r5, #16
 8001642:	0c2d      	lsrs	r5, r5, #16
 8001644:	002b      	movs	r3, r5
 8001646:	0c11      	lsrs	r1, r2, #16
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	0c12      	lsrs	r2, r2, #16
 800164c:	4353      	muls	r3, r2
 800164e:	4698      	mov	r8, r3
 8001650:	0013      	movs	r3, r2
 8001652:	002f      	movs	r7, r5
 8001654:	4343      	muls	r3, r0
 8001656:	4699      	mov	r9, r3
 8001658:	434f      	muls	r7, r1
 800165a:	444f      	add	r7, r9
 800165c:	46bb      	mov	fp, r7
 800165e:	4647      	mov	r7, r8
 8001660:	000b      	movs	r3, r1
 8001662:	0c3f      	lsrs	r7, r7, #16
 8001664:	46ba      	mov	sl, r7
 8001666:	4343      	muls	r3, r0
 8001668:	44da      	add	sl, fp
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	45d1      	cmp	r9, sl
 800166e:	d904      	bls.n	800167a <__aeabi_dmul+0x122>
 8001670:	2780      	movs	r7, #128	; 0x80
 8001672:	027f      	lsls	r7, r7, #9
 8001674:	46b9      	mov	r9, r7
 8001676:	444b      	add	r3, r9
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	4653      	mov	r3, sl
 800167c:	0c1b      	lsrs	r3, r3, #16
 800167e:	469b      	mov	fp, r3
 8001680:	4653      	mov	r3, sl
 8001682:	041f      	lsls	r7, r3, #16
 8001684:	4643      	mov	r3, r8
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	0c1b      	lsrs	r3, r3, #16
 800168a:	4698      	mov	r8, r3
 800168c:	003b      	movs	r3, r7
 800168e:	4443      	add	r3, r8
 8001690:	9304      	str	r3, [sp, #16]
 8001692:	0c33      	lsrs	r3, r6, #16
 8001694:	0436      	lsls	r6, r6, #16
 8001696:	0c36      	lsrs	r6, r6, #16
 8001698:	4698      	mov	r8, r3
 800169a:	0033      	movs	r3, r6
 800169c:	4343      	muls	r3, r0
 800169e:	4699      	mov	r9, r3
 80016a0:	4643      	mov	r3, r8
 80016a2:	4343      	muls	r3, r0
 80016a4:	002f      	movs	r7, r5
 80016a6:	469a      	mov	sl, r3
 80016a8:	4643      	mov	r3, r8
 80016aa:	4377      	muls	r7, r6
 80016ac:	435d      	muls	r5, r3
 80016ae:	0c38      	lsrs	r0, r7, #16
 80016b0:	444d      	add	r5, r9
 80016b2:	1945      	adds	r5, r0, r5
 80016b4:	45a9      	cmp	r9, r5
 80016b6:	d903      	bls.n	80016c0 <__aeabi_dmul+0x168>
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	025b      	lsls	r3, r3, #9
 80016bc:	4699      	mov	r9, r3
 80016be:	44ca      	add	sl, r9
 80016c0:	043f      	lsls	r7, r7, #16
 80016c2:	0c28      	lsrs	r0, r5, #16
 80016c4:	0c3f      	lsrs	r7, r7, #16
 80016c6:	042d      	lsls	r5, r5, #16
 80016c8:	19ed      	adds	r5, r5, r7
 80016ca:	0c27      	lsrs	r7, r4, #16
 80016cc:	0424      	lsls	r4, r4, #16
 80016ce:	0c24      	lsrs	r4, r4, #16
 80016d0:	0003      	movs	r3, r0
 80016d2:	0020      	movs	r0, r4
 80016d4:	4350      	muls	r0, r2
 80016d6:	437a      	muls	r2, r7
 80016d8:	4691      	mov	r9, r2
 80016da:	003a      	movs	r2, r7
 80016dc:	4453      	add	r3, sl
 80016de:	9305      	str	r3, [sp, #20]
 80016e0:	0c03      	lsrs	r3, r0, #16
 80016e2:	469a      	mov	sl, r3
 80016e4:	434a      	muls	r2, r1
 80016e6:	4361      	muls	r1, r4
 80016e8:	4449      	add	r1, r9
 80016ea:	4451      	add	r1, sl
 80016ec:	44ab      	add	fp, r5
 80016ee:	4589      	cmp	r9, r1
 80016f0:	d903      	bls.n	80016fa <__aeabi_dmul+0x1a2>
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	4699      	mov	r9, r3
 80016f8:	444a      	add	r2, r9
 80016fa:	0400      	lsls	r0, r0, #16
 80016fc:	0c0b      	lsrs	r3, r1, #16
 80016fe:	0c00      	lsrs	r0, r0, #16
 8001700:	0409      	lsls	r1, r1, #16
 8001702:	1809      	adds	r1, r1, r0
 8001704:	0020      	movs	r0, r4
 8001706:	4699      	mov	r9, r3
 8001708:	4643      	mov	r3, r8
 800170a:	4370      	muls	r0, r6
 800170c:	435c      	muls	r4, r3
 800170e:	437e      	muls	r6, r7
 8001710:	435f      	muls	r7, r3
 8001712:	0c03      	lsrs	r3, r0, #16
 8001714:	4698      	mov	r8, r3
 8001716:	19a4      	adds	r4, r4, r6
 8001718:	4444      	add	r4, r8
 800171a:	444a      	add	r2, r9
 800171c:	9703      	str	r7, [sp, #12]
 800171e:	42a6      	cmp	r6, r4
 8001720:	d904      	bls.n	800172c <__aeabi_dmul+0x1d4>
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	025b      	lsls	r3, r3, #9
 8001726:	4698      	mov	r8, r3
 8001728:	4447      	add	r7, r8
 800172a:	9703      	str	r7, [sp, #12]
 800172c:	0423      	lsls	r3, r4, #16
 800172e:	9e02      	ldr	r6, [sp, #8]
 8001730:	469a      	mov	sl, r3
 8001732:	9b05      	ldr	r3, [sp, #20]
 8001734:	445e      	add	r6, fp
 8001736:	4698      	mov	r8, r3
 8001738:	42ae      	cmp	r6, r5
 800173a:	41ad      	sbcs	r5, r5
 800173c:	1876      	adds	r6, r6, r1
 800173e:	428e      	cmp	r6, r1
 8001740:	4189      	sbcs	r1, r1
 8001742:	0400      	lsls	r0, r0, #16
 8001744:	0c00      	lsrs	r0, r0, #16
 8001746:	4450      	add	r0, sl
 8001748:	4440      	add	r0, r8
 800174a:	426d      	negs	r5, r5
 800174c:	1947      	adds	r7, r0, r5
 800174e:	46b8      	mov	r8, r7
 8001750:	4693      	mov	fp, r2
 8001752:	4249      	negs	r1, r1
 8001754:	4689      	mov	r9, r1
 8001756:	44c3      	add	fp, r8
 8001758:	44d9      	add	r9, fp
 800175a:	4298      	cmp	r0, r3
 800175c:	4180      	sbcs	r0, r0
 800175e:	45a8      	cmp	r8, r5
 8001760:	41ad      	sbcs	r5, r5
 8001762:	4593      	cmp	fp, r2
 8001764:	4192      	sbcs	r2, r2
 8001766:	4589      	cmp	r9, r1
 8001768:	4189      	sbcs	r1, r1
 800176a:	426d      	negs	r5, r5
 800176c:	4240      	negs	r0, r0
 800176e:	4328      	orrs	r0, r5
 8001770:	0c24      	lsrs	r4, r4, #16
 8001772:	4252      	negs	r2, r2
 8001774:	4249      	negs	r1, r1
 8001776:	430a      	orrs	r2, r1
 8001778:	9b03      	ldr	r3, [sp, #12]
 800177a:	1900      	adds	r0, r0, r4
 800177c:	1880      	adds	r0, r0, r2
 800177e:	18c7      	adds	r7, r0, r3
 8001780:	464b      	mov	r3, r9
 8001782:	0ddc      	lsrs	r4, r3, #23
 8001784:	9b04      	ldr	r3, [sp, #16]
 8001786:	0275      	lsls	r5, r6, #9
 8001788:	431d      	orrs	r5, r3
 800178a:	1e6a      	subs	r2, r5, #1
 800178c:	4195      	sbcs	r5, r2
 800178e:	464b      	mov	r3, r9
 8001790:	0df6      	lsrs	r6, r6, #23
 8001792:	027f      	lsls	r7, r7, #9
 8001794:	4335      	orrs	r5, r6
 8001796:	025a      	lsls	r2, r3, #9
 8001798:	433c      	orrs	r4, r7
 800179a:	4315      	orrs	r5, r2
 800179c:	01fb      	lsls	r3, r7, #7
 800179e:	d400      	bmi.n	80017a2 <__aeabi_dmul+0x24a>
 80017a0:	e11c      	b.n	80019dc <__aeabi_dmul+0x484>
 80017a2:	2101      	movs	r1, #1
 80017a4:	086a      	lsrs	r2, r5, #1
 80017a6:	400d      	ands	r5, r1
 80017a8:	4315      	orrs	r5, r2
 80017aa:	07e2      	lsls	r2, r4, #31
 80017ac:	4315      	orrs	r5, r2
 80017ae:	0864      	lsrs	r4, r4, #1
 80017b0:	494f      	ldr	r1, [pc, #316]	; (80018f0 <__aeabi_dmul+0x398>)
 80017b2:	4461      	add	r1, ip
 80017b4:	2900      	cmp	r1, #0
 80017b6:	dc00      	bgt.n	80017ba <__aeabi_dmul+0x262>
 80017b8:	e0b0      	b.n	800191c <__aeabi_dmul+0x3c4>
 80017ba:	076b      	lsls	r3, r5, #29
 80017bc:	d009      	beq.n	80017d2 <__aeabi_dmul+0x27a>
 80017be:	220f      	movs	r2, #15
 80017c0:	402a      	ands	r2, r5
 80017c2:	2a04      	cmp	r2, #4
 80017c4:	d005      	beq.n	80017d2 <__aeabi_dmul+0x27a>
 80017c6:	1d2a      	adds	r2, r5, #4
 80017c8:	42aa      	cmp	r2, r5
 80017ca:	41ad      	sbcs	r5, r5
 80017cc:	426d      	negs	r5, r5
 80017ce:	1964      	adds	r4, r4, r5
 80017d0:	0015      	movs	r5, r2
 80017d2:	01e3      	lsls	r3, r4, #7
 80017d4:	d504      	bpl.n	80017e0 <__aeabi_dmul+0x288>
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	4a46      	ldr	r2, [pc, #280]	; (80018f4 <__aeabi_dmul+0x39c>)
 80017da:	00c9      	lsls	r1, r1, #3
 80017dc:	4014      	ands	r4, r2
 80017de:	4461      	add	r1, ip
 80017e0:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <__aeabi_dmul+0x3a0>)
 80017e2:	4291      	cmp	r1, r2
 80017e4:	dd00      	ble.n	80017e8 <__aeabi_dmul+0x290>
 80017e6:	e726      	b.n	8001636 <__aeabi_dmul+0xde>
 80017e8:	0762      	lsls	r2, r4, #29
 80017ea:	08ed      	lsrs	r5, r5, #3
 80017ec:	0264      	lsls	r4, r4, #9
 80017ee:	0549      	lsls	r1, r1, #21
 80017f0:	4315      	orrs	r5, r2
 80017f2:	0b24      	lsrs	r4, r4, #12
 80017f4:	0d4a      	lsrs	r2, r1, #21
 80017f6:	e710      	b.n	800161a <__aeabi_dmul+0xc2>
 80017f8:	4652      	mov	r2, sl
 80017fa:	4332      	orrs	r2, r6
 80017fc:	d100      	bne.n	8001800 <__aeabi_dmul+0x2a8>
 80017fe:	e07f      	b.n	8001900 <__aeabi_dmul+0x3a8>
 8001800:	2e00      	cmp	r6, #0
 8001802:	d100      	bne.n	8001806 <__aeabi_dmul+0x2ae>
 8001804:	e0dc      	b.n	80019c0 <__aeabi_dmul+0x468>
 8001806:	0030      	movs	r0, r6
 8001808:	f000 fd4e 	bl	80022a8 <__clzsi2>
 800180c:	0002      	movs	r2, r0
 800180e:	3a0b      	subs	r2, #11
 8001810:	231d      	movs	r3, #29
 8001812:	0001      	movs	r1, r0
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	4652      	mov	r2, sl
 8001818:	3908      	subs	r1, #8
 800181a:	40da      	lsrs	r2, r3
 800181c:	408e      	lsls	r6, r1
 800181e:	4316      	orrs	r6, r2
 8001820:	4652      	mov	r2, sl
 8001822:	408a      	lsls	r2, r1
 8001824:	9b00      	ldr	r3, [sp, #0]
 8001826:	4935      	ldr	r1, [pc, #212]	; (80018fc <__aeabi_dmul+0x3a4>)
 8001828:	1a18      	subs	r0, r3, r0
 800182a:	0003      	movs	r3, r0
 800182c:	468c      	mov	ip, r1
 800182e:	4463      	add	r3, ip
 8001830:	2000      	movs	r0, #0
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	e6d3      	b.n	80015de <__aeabi_dmul+0x86>
 8001836:	0025      	movs	r5, r4
 8001838:	4305      	orrs	r5, r0
 800183a:	d04a      	beq.n	80018d2 <__aeabi_dmul+0x37a>
 800183c:	2c00      	cmp	r4, #0
 800183e:	d100      	bne.n	8001842 <__aeabi_dmul+0x2ea>
 8001840:	e0b0      	b.n	80019a4 <__aeabi_dmul+0x44c>
 8001842:	0020      	movs	r0, r4
 8001844:	f000 fd30 	bl	80022a8 <__clzsi2>
 8001848:	0001      	movs	r1, r0
 800184a:	0002      	movs	r2, r0
 800184c:	390b      	subs	r1, #11
 800184e:	231d      	movs	r3, #29
 8001850:	0010      	movs	r0, r2
 8001852:	1a5b      	subs	r3, r3, r1
 8001854:	0031      	movs	r1, r6
 8001856:	0035      	movs	r5, r6
 8001858:	3808      	subs	r0, #8
 800185a:	4084      	lsls	r4, r0
 800185c:	40d9      	lsrs	r1, r3
 800185e:	4085      	lsls	r5, r0
 8001860:	430c      	orrs	r4, r1
 8001862:	4826      	ldr	r0, [pc, #152]	; (80018fc <__aeabi_dmul+0x3a4>)
 8001864:	1a83      	subs	r3, r0, r2
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2300      	movs	r3, #0
 800186a:	4699      	mov	r9, r3
 800186c:	469b      	mov	fp, r3
 800186e:	e697      	b.n	80015a0 <__aeabi_dmul+0x48>
 8001870:	0005      	movs	r5, r0
 8001872:	4325      	orrs	r5, r4
 8001874:	d126      	bne.n	80018c4 <__aeabi_dmul+0x36c>
 8001876:	2208      	movs	r2, #8
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	2400      	movs	r4, #0
 800187e:	4691      	mov	r9, r2
 8001880:	469b      	mov	fp, r3
 8001882:	e68d      	b.n	80015a0 <__aeabi_dmul+0x48>
 8001884:	4652      	mov	r2, sl
 8001886:	9b00      	ldr	r3, [sp, #0]
 8001888:	4332      	orrs	r2, r6
 800188a:	d110      	bne.n	80018ae <__aeabi_dmul+0x356>
 800188c:	4915      	ldr	r1, [pc, #84]	; (80018e4 <__aeabi_dmul+0x38c>)
 800188e:	2600      	movs	r6, #0
 8001890:	468c      	mov	ip, r1
 8001892:	4463      	add	r3, ip
 8001894:	4649      	mov	r1, r9
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2302      	movs	r3, #2
 800189a:	4319      	orrs	r1, r3
 800189c:	4689      	mov	r9, r1
 800189e:	2002      	movs	r0, #2
 80018a0:	e69d      	b.n	80015de <__aeabi_dmul+0x86>
 80018a2:	465b      	mov	r3, fp
 80018a4:	9701      	str	r7, [sp, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d000      	beq.n	80018ac <__aeabi_dmul+0x354>
 80018aa:	e6ad      	b.n	8001608 <__aeabi_dmul+0xb0>
 80018ac:	e6c3      	b.n	8001636 <__aeabi_dmul+0xde>
 80018ae:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <__aeabi_dmul+0x38c>)
 80018b0:	2003      	movs	r0, #3
 80018b2:	4694      	mov	ip, r2
 80018b4:	4463      	add	r3, ip
 80018b6:	464a      	mov	r2, r9
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2303      	movs	r3, #3
 80018bc:	431a      	orrs	r2, r3
 80018be:	4691      	mov	r9, r2
 80018c0:	4652      	mov	r2, sl
 80018c2:	e68c      	b.n	80015de <__aeabi_dmul+0x86>
 80018c4:	220c      	movs	r2, #12
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2303      	movs	r3, #3
 80018ca:	0005      	movs	r5, r0
 80018cc:	4691      	mov	r9, r2
 80018ce:	469b      	mov	fp, r3
 80018d0:	e666      	b.n	80015a0 <__aeabi_dmul+0x48>
 80018d2:	2304      	movs	r3, #4
 80018d4:	4699      	mov	r9, r3
 80018d6:	2300      	movs	r3, #0
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	2400      	movs	r4, #0
 80018de:	469b      	mov	fp, r3
 80018e0:	e65e      	b.n	80015a0 <__aeabi_dmul+0x48>
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	000007ff 	.word	0x000007ff
 80018e8:	fffffc01 	.word	0xfffffc01
 80018ec:	0800accc 	.word	0x0800accc
 80018f0:	000003ff 	.word	0x000003ff
 80018f4:	feffffff 	.word	0xfeffffff
 80018f8:	000007fe 	.word	0x000007fe
 80018fc:	fffffc0d 	.word	0xfffffc0d
 8001900:	4649      	mov	r1, r9
 8001902:	2301      	movs	r3, #1
 8001904:	4319      	orrs	r1, r3
 8001906:	4689      	mov	r9, r1
 8001908:	2600      	movs	r6, #0
 800190a:	2001      	movs	r0, #1
 800190c:	e667      	b.n	80015de <__aeabi_dmul+0x86>
 800190e:	2300      	movs	r3, #0
 8001910:	2480      	movs	r4, #128	; 0x80
 8001912:	2500      	movs	r5, #0
 8001914:	4a43      	ldr	r2, [pc, #268]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	0324      	lsls	r4, r4, #12
 800191a:	e67e      	b.n	800161a <__aeabi_dmul+0xc2>
 800191c:	2001      	movs	r0, #1
 800191e:	1a40      	subs	r0, r0, r1
 8001920:	2838      	cmp	r0, #56	; 0x38
 8001922:	dd00      	ble.n	8001926 <__aeabi_dmul+0x3ce>
 8001924:	e676      	b.n	8001614 <__aeabi_dmul+0xbc>
 8001926:	281f      	cmp	r0, #31
 8001928:	dd5b      	ble.n	80019e2 <__aeabi_dmul+0x48a>
 800192a:	221f      	movs	r2, #31
 800192c:	0023      	movs	r3, r4
 800192e:	4252      	negs	r2, r2
 8001930:	1a51      	subs	r1, r2, r1
 8001932:	40cb      	lsrs	r3, r1
 8001934:	0019      	movs	r1, r3
 8001936:	2820      	cmp	r0, #32
 8001938:	d003      	beq.n	8001942 <__aeabi_dmul+0x3ea>
 800193a:	4a3b      	ldr	r2, [pc, #236]	; (8001a28 <__aeabi_dmul+0x4d0>)
 800193c:	4462      	add	r2, ip
 800193e:	4094      	lsls	r4, r2
 8001940:	4325      	orrs	r5, r4
 8001942:	1e6a      	subs	r2, r5, #1
 8001944:	4195      	sbcs	r5, r2
 8001946:	002a      	movs	r2, r5
 8001948:	430a      	orrs	r2, r1
 800194a:	2107      	movs	r1, #7
 800194c:	000d      	movs	r5, r1
 800194e:	2400      	movs	r4, #0
 8001950:	4015      	ands	r5, r2
 8001952:	4211      	tst	r1, r2
 8001954:	d05b      	beq.n	8001a0e <__aeabi_dmul+0x4b6>
 8001956:	210f      	movs	r1, #15
 8001958:	2400      	movs	r4, #0
 800195a:	4011      	ands	r1, r2
 800195c:	2904      	cmp	r1, #4
 800195e:	d053      	beq.n	8001a08 <__aeabi_dmul+0x4b0>
 8001960:	1d11      	adds	r1, r2, #4
 8001962:	4291      	cmp	r1, r2
 8001964:	4192      	sbcs	r2, r2
 8001966:	4252      	negs	r2, r2
 8001968:	18a4      	adds	r4, r4, r2
 800196a:	000a      	movs	r2, r1
 800196c:	0223      	lsls	r3, r4, #8
 800196e:	d54b      	bpl.n	8001a08 <__aeabi_dmul+0x4b0>
 8001970:	2201      	movs	r2, #1
 8001972:	2400      	movs	r4, #0
 8001974:	2500      	movs	r5, #0
 8001976:	e650      	b.n	800161a <__aeabi_dmul+0xc2>
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	031b      	lsls	r3, r3, #12
 800197c:	421c      	tst	r4, r3
 800197e:	d009      	beq.n	8001994 <__aeabi_dmul+0x43c>
 8001980:	421e      	tst	r6, r3
 8001982:	d107      	bne.n	8001994 <__aeabi_dmul+0x43c>
 8001984:	4333      	orrs	r3, r6
 8001986:	031c      	lsls	r4, r3, #12
 8001988:	4643      	mov	r3, r8
 800198a:	0015      	movs	r5, r2
 800198c:	0b24      	lsrs	r4, r4, #12
 800198e:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	e642      	b.n	800161a <__aeabi_dmul+0xc2>
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	0312      	lsls	r2, r2, #12
 8001998:	4314      	orrs	r4, r2
 800199a:	0324      	lsls	r4, r4, #12
 800199c:	4a21      	ldr	r2, [pc, #132]	; (8001a24 <__aeabi_dmul+0x4cc>)
 800199e:	0b24      	lsrs	r4, r4, #12
 80019a0:	9701      	str	r7, [sp, #4]
 80019a2:	e63a      	b.n	800161a <__aeabi_dmul+0xc2>
 80019a4:	f000 fc80 	bl	80022a8 <__clzsi2>
 80019a8:	0001      	movs	r1, r0
 80019aa:	0002      	movs	r2, r0
 80019ac:	3115      	adds	r1, #21
 80019ae:	3220      	adds	r2, #32
 80019b0:	291c      	cmp	r1, #28
 80019b2:	dc00      	bgt.n	80019b6 <__aeabi_dmul+0x45e>
 80019b4:	e74b      	b.n	800184e <__aeabi_dmul+0x2f6>
 80019b6:	0034      	movs	r4, r6
 80019b8:	3808      	subs	r0, #8
 80019ba:	2500      	movs	r5, #0
 80019bc:	4084      	lsls	r4, r0
 80019be:	e750      	b.n	8001862 <__aeabi_dmul+0x30a>
 80019c0:	f000 fc72 	bl	80022a8 <__clzsi2>
 80019c4:	0003      	movs	r3, r0
 80019c6:	001a      	movs	r2, r3
 80019c8:	3215      	adds	r2, #21
 80019ca:	3020      	adds	r0, #32
 80019cc:	2a1c      	cmp	r2, #28
 80019ce:	dc00      	bgt.n	80019d2 <__aeabi_dmul+0x47a>
 80019d0:	e71e      	b.n	8001810 <__aeabi_dmul+0x2b8>
 80019d2:	4656      	mov	r6, sl
 80019d4:	3b08      	subs	r3, #8
 80019d6:	2200      	movs	r2, #0
 80019d8:	409e      	lsls	r6, r3
 80019da:	e723      	b.n	8001824 <__aeabi_dmul+0x2cc>
 80019dc:	9b00      	ldr	r3, [sp, #0]
 80019de:	469c      	mov	ip, r3
 80019e0:	e6e6      	b.n	80017b0 <__aeabi_dmul+0x258>
 80019e2:	4912      	ldr	r1, [pc, #72]	; (8001a2c <__aeabi_dmul+0x4d4>)
 80019e4:	0022      	movs	r2, r4
 80019e6:	4461      	add	r1, ip
 80019e8:	002e      	movs	r6, r5
 80019ea:	408d      	lsls	r5, r1
 80019ec:	408a      	lsls	r2, r1
 80019ee:	40c6      	lsrs	r6, r0
 80019f0:	1e69      	subs	r1, r5, #1
 80019f2:	418d      	sbcs	r5, r1
 80019f4:	4332      	orrs	r2, r6
 80019f6:	432a      	orrs	r2, r5
 80019f8:	40c4      	lsrs	r4, r0
 80019fa:	0753      	lsls	r3, r2, #29
 80019fc:	d0b6      	beq.n	800196c <__aeabi_dmul+0x414>
 80019fe:	210f      	movs	r1, #15
 8001a00:	4011      	ands	r1, r2
 8001a02:	2904      	cmp	r1, #4
 8001a04:	d1ac      	bne.n	8001960 <__aeabi_dmul+0x408>
 8001a06:	e7b1      	b.n	800196c <__aeabi_dmul+0x414>
 8001a08:	0765      	lsls	r5, r4, #29
 8001a0a:	0264      	lsls	r4, r4, #9
 8001a0c:	0b24      	lsrs	r4, r4, #12
 8001a0e:	08d2      	lsrs	r2, r2, #3
 8001a10:	4315      	orrs	r5, r2
 8001a12:	2200      	movs	r2, #0
 8001a14:	e601      	b.n	800161a <__aeabi_dmul+0xc2>
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	0312      	lsls	r2, r2, #12
 8001a1a:	4314      	orrs	r4, r2
 8001a1c:	0324      	lsls	r4, r4, #12
 8001a1e:	4a01      	ldr	r2, [pc, #4]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001a20:	0b24      	lsrs	r4, r4, #12
 8001a22:	e5fa      	b.n	800161a <__aeabi_dmul+0xc2>
 8001a24:	000007ff 	.word	0x000007ff
 8001a28:	0000043e 	.word	0x0000043e
 8001a2c:	0000041e 	.word	0x0000041e

08001a30 <__aeabi_dsub>:
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a32:	4657      	mov	r7, sl
 8001a34:	464e      	mov	r6, r9
 8001a36:	4645      	mov	r5, r8
 8001a38:	46de      	mov	lr, fp
 8001a3a:	b5e0      	push	{r5, r6, r7, lr}
 8001a3c:	001e      	movs	r6, r3
 8001a3e:	0017      	movs	r7, r2
 8001a40:	004a      	lsls	r2, r1, #1
 8001a42:	030b      	lsls	r3, r1, #12
 8001a44:	0d52      	lsrs	r2, r2, #21
 8001a46:	0a5b      	lsrs	r3, r3, #9
 8001a48:	4690      	mov	r8, r2
 8001a4a:	0f42      	lsrs	r2, r0, #29
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	0fcd      	lsrs	r5, r1, #31
 8001a50:	4ccd      	ldr	r4, [pc, #820]	; (8001d88 <__aeabi_dsub+0x358>)
 8001a52:	0331      	lsls	r1, r6, #12
 8001a54:	00c3      	lsls	r3, r0, #3
 8001a56:	4694      	mov	ip, r2
 8001a58:	0070      	lsls	r0, r6, #1
 8001a5a:	0f7a      	lsrs	r2, r7, #29
 8001a5c:	0a49      	lsrs	r1, r1, #9
 8001a5e:	00ff      	lsls	r7, r7, #3
 8001a60:	469a      	mov	sl, r3
 8001a62:	46b9      	mov	r9, r7
 8001a64:	0d40      	lsrs	r0, r0, #21
 8001a66:	0ff6      	lsrs	r6, r6, #31
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	42a0      	cmp	r0, r4
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dsub+0x40>
 8001a6e:	e0b1      	b.n	8001bd4 <__aeabi_dsub+0x1a4>
 8001a70:	2201      	movs	r2, #1
 8001a72:	4056      	eors	r6, r2
 8001a74:	46b3      	mov	fp, r6
 8001a76:	42b5      	cmp	r5, r6
 8001a78:	d100      	bne.n	8001a7c <__aeabi_dsub+0x4c>
 8001a7a:	e088      	b.n	8001b8e <__aeabi_dsub+0x15e>
 8001a7c:	4642      	mov	r2, r8
 8001a7e:	1a12      	subs	r2, r2, r0
 8001a80:	2a00      	cmp	r2, #0
 8001a82:	dc00      	bgt.n	8001a86 <__aeabi_dsub+0x56>
 8001a84:	e0ae      	b.n	8001be4 <__aeabi_dsub+0x1b4>
 8001a86:	2800      	cmp	r0, #0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x5c>
 8001a8a:	e0c1      	b.n	8001c10 <__aeabi_dsub+0x1e0>
 8001a8c:	48be      	ldr	r0, [pc, #760]	; (8001d88 <__aeabi_dsub+0x358>)
 8001a8e:	4580      	cmp	r8, r0
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dsub+0x64>
 8001a92:	e151      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001a94:	2080      	movs	r0, #128	; 0x80
 8001a96:	0400      	lsls	r0, r0, #16
 8001a98:	4301      	orrs	r1, r0
 8001a9a:	2a38      	cmp	r2, #56	; 0x38
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dsub+0x70>
 8001a9e:	e17b      	b.n	8001d98 <__aeabi_dsub+0x368>
 8001aa0:	2a1f      	cmp	r2, #31
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x76>
 8001aa4:	e1ee      	b.n	8001e84 <__aeabi_dsub+0x454>
 8001aa6:	2020      	movs	r0, #32
 8001aa8:	003e      	movs	r6, r7
 8001aaa:	1a80      	subs	r0, r0, r2
 8001aac:	000c      	movs	r4, r1
 8001aae:	40d6      	lsrs	r6, r2
 8001ab0:	40d1      	lsrs	r1, r2
 8001ab2:	4087      	lsls	r7, r0
 8001ab4:	4662      	mov	r2, ip
 8001ab6:	4084      	lsls	r4, r0
 8001ab8:	1a52      	subs	r2, r2, r1
 8001aba:	1e78      	subs	r0, r7, #1
 8001abc:	4187      	sbcs	r7, r0
 8001abe:	4694      	mov	ip, r2
 8001ac0:	4334      	orrs	r4, r6
 8001ac2:	4327      	orrs	r7, r4
 8001ac4:	1bdc      	subs	r4, r3, r7
 8001ac6:	42a3      	cmp	r3, r4
 8001ac8:	419b      	sbcs	r3, r3
 8001aca:	4662      	mov	r2, ip
 8001acc:	425b      	negs	r3, r3
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	4699      	mov	r9, r3
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	d400      	bmi.n	8001ada <__aeabi_dsub+0xaa>
 8001ad8:	e118      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001ada:	464b      	mov	r3, r9
 8001adc:	0258      	lsls	r0, r3, #9
 8001ade:	0a43      	lsrs	r3, r0, #9
 8001ae0:	4699      	mov	r9, r3
 8001ae2:	464b      	mov	r3, r9
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dsub+0xba>
 8001ae8:	e137      	b.n	8001d5a <__aeabi_dsub+0x32a>
 8001aea:	4648      	mov	r0, r9
 8001aec:	f000 fbdc 	bl	80022a8 <__clzsi2>
 8001af0:	0001      	movs	r1, r0
 8001af2:	3908      	subs	r1, #8
 8001af4:	2320      	movs	r3, #32
 8001af6:	0022      	movs	r2, r4
 8001af8:	4648      	mov	r0, r9
 8001afa:	1a5b      	subs	r3, r3, r1
 8001afc:	40da      	lsrs	r2, r3
 8001afe:	4088      	lsls	r0, r1
 8001b00:	408c      	lsls	r4, r1
 8001b02:	4643      	mov	r3, r8
 8001b04:	4310      	orrs	r0, r2
 8001b06:	4588      	cmp	r8, r1
 8001b08:	dd00      	ble.n	8001b0c <__aeabi_dsub+0xdc>
 8001b0a:	e136      	b.n	8001d7a <__aeabi_dsub+0x34a>
 8001b0c:	1ac9      	subs	r1, r1, r3
 8001b0e:	1c4b      	adds	r3, r1, #1
 8001b10:	2b1f      	cmp	r3, #31
 8001b12:	dd00      	ble.n	8001b16 <__aeabi_dsub+0xe6>
 8001b14:	e0ea      	b.n	8001cec <__aeabi_dsub+0x2bc>
 8001b16:	2220      	movs	r2, #32
 8001b18:	0026      	movs	r6, r4
 8001b1a:	1ad2      	subs	r2, r2, r3
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	4094      	lsls	r4, r2
 8001b20:	40de      	lsrs	r6, r3
 8001b22:	40d8      	lsrs	r0, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4091      	lsls	r1, r2
 8001b28:	1e62      	subs	r2, r4, #1
 8001b2a:	4194      	sbcs	r4, r2
 8001b2c:	4681      	mov	r9, r0
 8001b2e:	4698      	mov	r8, r3
 8001b30:	4331      	orrs	r1, r6
 8001b32:	430c      	orrs	r4, r1
 8001b34:	0763      	lsls	r3, r4, #29
 8001b36:	d009      	beq.n	8001b4c <__aeabi_dsub+0x11c>
 8001b38:	230f      	movs	r3, #15
 8001b3a:	4023      	ands	r3, r4
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d005      	beq.n	8001b4c <__aeabi_dsub+0x11c>
 8001b40:	1d23      	adds	r3, r4, #4
 8001b42:	42a3      	cmp	r3, r4
 8001b44:	41a4      	sbcs	r4, r4
 8001b46:	4264      	negs	r4, r4
 8001b48:	44a1      	add	r9, r4
 8001b4a:	001c      	movs	r4, r3
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	d400      	bmi.n	8001b54 <__aeabi_dsub+0x124>
 8001b52:	e0de      	b.n	8001d12 <__aeabi_dsub+0x2e2>
 8001b54:	4641      	mov	r1, r8
 8001b56:	4b8c      	ldr	r3, [pc, #560]	; (8001d88 <__aeabi_dsub+0x358>)
 8001b58:	3101      	adds	r1, #1
 8001b5a:	4299      	cmp	r1, r3
 8001b5c:	d100      	bne.n	8001b60 <__aeabi_dsub+0x130>
 8001b5e:	e0e7      	b.n	8001d30 <__aeabi_dsub+0x300>
 8001b60:	464b      	mov	r3, r9
 8001b62:	488a      	ldr	r0, [pc, #552]	; (8001d8c <__aeabi_dsub+0x35c>)
 8001b64:	08e4      	lsrs	r4, r4, #3
 8001b66:	4003      	ands	r3, r0
 8001b68:	0018      	movs	r0, r3
 8001b6a:	0549      	lsls	r1, r1, #21
 8001b6c:	075b      	lsls	r3, r3, #29
 8001b6e:	0240      	lsls	r0, r0, #9
 8001b70:	4323      	orrs	r3, r4
 8001b72:	0d4a      	lsrs	r2, r1, #21
 8001b74:	0b04      	lsrs	r4, r0, #12
 8001b76:	0512      	lsls	r2, r2, #20
 8001b78:	07ed      	lsls	r5, r5, #31
 8001b7a:	4322      	orrs	r2, r4
 8001b7c:	432a      	orrs	r2, r5
 8001b7e:	0018      	movs	r0, r3
 8001b80:	0011      	movs	r1, r2
 8001b82:	bcf0      	pop	{r4, r5, r6, r7}
 8001b84:	46bb      	mov	fp, r7
 8001b86:	46b2      	mov	sl, r6
 8001b88:	46a9      	mov	r9, r5
 8001b8a:	46a0      	mov	r8, r4
 8001b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b8e:	4642      	mov	r2, r8
 8001b90:	1a12      	subs	r2, r2, r0
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	dd52      	ble.n	8001c3c <__aeabi_dsub+0x20c>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x16c>
 8001b9a:	e09c      	b.n	8001cd6 <__aeabi_dsub+0x2a6>
 8001b9c:	45a0      	cmp	r8, r4
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dsub+0x172>
 8001ba0:	e0ca      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001ba2:	2080      	movs	r0, #128	; 0x80
 8001ba4:	0400      	lsls	r0, r0, #16
 8001ba6:	4301      	orrs	r1, r0
 8001ba8:	2a38      	cmp	r2, #56	; 0x38
 8001baa:	dd00      	ble.n	8001bae <__aeabi_dsub+0x17e>
 8001bac:	e149      	b.n	8001e42 <__aeabi_dsub+0x412>
 8001bae:	2a1f      	cmp	r2, #31
 8001bb0:	dc00      	bgt.n	8001bb4 <__aeabi_dsub+0x184>
 8001bb2:	e197      	b.n	8001ee4 <__aeabi_dsub+0x4b4>
 8001bb4:	0010      	movs	r0, r2
 8001bb6:	000e      	movs	r6, r1
 8001bb8:	3820      	subs	r0, #32
 8001bba:	40c6      	lsrs	r6, r0
 8001bbc:	2a20      	cmp	r2, #32
 8001bbe:	d004      	beq.n	8001bca <__aeabi_dsub+0x19a>
 8001bc0:	2040      	movs	r0, #64	; 0x40
 8001bc2:	1a82      	subs	r2, r0, r2
 8001bc4:	4091      	lsls	r1, r2
 8001bc6:	430f      	orrs	r7, r1
 8001bc8:	46b9      	mov	r9, r7
 8001bca:	464c      	mov	r4, r9
 8001bcc:	1e62      	subs	r2, r4, #1
 8001bce:	4194      	sbcs	r4, r2
 8001bd0:	4334      	orrs	r4, r6
 8001bd2:	e13a      	b.n	8001e4a <__aeabi_dsub+0x41a>
 8001bd4:	000a      	movs	r2, r1
 8001bd6:	433a      	orrs	r2, r7
 8001bd8:	d028      	beq.n	8001c2c <__aeabi_dsub+0x1fc>
 8001bda:	46b3      	mov	fp, r6
 8001bdc:	42b5      	cmp	r5, r6
 8001bde:	d02b      	beq.n	8001c38 <__aeabi_dsub+0x208>
 8001be0:	4a6b      	ldr	r2, [pc, #428]	; (8001d90 <__aeabi_dsub+0x360>)
 8001be2:	4442      	add	r2, r8
 8001be4:	2a00      	cmp	r2, #0
 8001be6:	d05d      	beq.n	8001ca4 <__aeabi_dsub+0x274>
 8001be8:	4642      	mov	r2, r8
 8001bea:	4644      	mov	r4, r8
 8001bec:	1a82      	subs	r2, r0, r2
 8001bee:	2c00      	cmp	r4, #0
 8001bf0:	d000      	beq.n	8001bf4 <__aeabi_dsub+0x1c4>
 8001bf2:	e0f5      	b.n	8001de0 <__aeabi_dsub+0x3b0>
 8001bf4:	4665      	mov	r5, ip
 8001bf6:	431d      	orrs	r5, r3
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x1cc>
 8001bfa:	e19c      	b.n	8001f36 <__aeabi_dsub+0x506>
 8001bfc:	1e55      	subs	r5, r2, #1
 8001bfe:	2a01      	cmp	r2, #1
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x1d4>
 8001c02:	e1fb      	b.n	8001ffc <__aeabi_dsub+0x5cc>
 8001c04:	4c60      	ldr	r4, [pc, #384]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c06:	42a2      	cmp	r2, r4
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x1dc>
 8001c0a:	e1bd      	b.n	8001f88 <__aeabi_dsub+0x558>
 8001c0c:	002a      	movs	r2, r5
 8001c0e:	e0f0      	b.n	8001df2 <__aeabi_dsub+0x3c2>
 8001c10:	0008      	movs	r0, r1
 8001c12:	4338      	orrs	r0, r7
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x1e8>
 8001c16:	e0c3      	b.n	8001da0 <__aeabi_dsub+0x370>
 8001c18:	1e50      	subs	r0, r2, #1
 8001c1a:	2a01      	cmp	r2, #1
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x1f0>
 8001c1e:	e1a8      	b.n	8001f72 <__aeabi_dsub+0x542>
 8001c20:	4c59      	ldr	r4, [pc, #356]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c22:	42a2      	cmp	r2, r4
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dsub+0x1f8>
 8001c26:	e087      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	e736      	b.n	8001a9a <__aeabi_dsub+0x6a>
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4056      	eors	r6, r2
 8001c30:	46b3      	mov	fp, r6
 8001c32:	42b5      	cmp	r5, r6
 8001c34:	d000      	beq.n	8001c38 <__aeabi_dsub+0x208>
 8001c36:	e721      	b.n	8001a7c <__aeabi_dsub+0x4c>
 8001c38:	4a55      	ldr	r2, [pc, #340]	; (8001d90 <__aeabi_dsub+0x360>)
 8001c3a:	4442      	add	r2, r8
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x212>
 8001c40:	e0b5      	b.n	8001dae <__aeabi_dsub+0x37e>
 8001c42:	4642      	mov	r2, r8
 8001c44:	4644      	mov	r4, r8
 8001c46:	1a82      	subs	r2, r0, r2
 8001c48:	2c00      	cmp	r4, #0
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dsub+0x21e>
 8001c4c:	e138      	b.n	8001ec0 <__aeabi_dsub+0x490>
 8001c4e:	4e4e      	ldr	r6, [pc, #312]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c50:	42b0      	cmp	r0, r6
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x226>
 8001c54:	e1de      	b.n	8002014 <__aeabi_dsub+0x5e4>
 8001c56:	2680      	movs	r6, #128	; 0x80
 8001c58:	4664      	mov	r4, ip
 8001c5a:	0436      	lsls	r6, r6, #16
 8001c5c:	4334      	orrs	r4, r6
 8001c5e:	46a4      	mov	ip, r4
 8001c60:	2a38      	cmp	r2, #56	; 0x38
 8001c62:	dd00      	ble.n	8001c66 <__aeabi_dsub+0x236>
 8001c64:	e196      	b.n	8001f94 <__aeabi_dsub+0x564>
 8001c66:	2a1f      	cmp	r2, #31
 8001c68:	dd00      	ble.n	8001c6c <__aeabi_dsub+0x23c>
 8001c6a:	e224      	b.n	80020b6 <__aeabi_dsub+0x686>
 8001c6c:	2620      	movs	r6, #32
 8001c6e:	1ab4      	subs	r4, r6, r2
 8001c70:	46a2      	mov	sl, r4
 8001c72:	4664      	mov	r4, ip
 8001c74:	4656      	mov	r6, sl
 8001c76:	40b4      	lsls	r4, r6
 8001c78:	46a1      	mov	r9, r4
 8001c7a:	001c      	movs	r4, r3
 8001c7c:	464e      	mov	r6, r9
 8001c7e:	40d4      	lsrs	r4, r2
 8001c80:	4326      	orrs	r6, r4
 8001c82:	0034      	movs	r4, r6
 8001c84:	4656      	mov	r6, sl
 8001c86:	40b3      	lsls	r3, r6
 8001c88:	1e5e      	subs	r6, r3, #1
 8001c8a:	41b3      	sbcs	r3, r6
 8001c8c:	431c      	orrs	r4, r3
 8001c8e:	4663      	mov	r3, ip
 8001c90:	40d3      	lsrs	r3, r2
 8001c92:	18c9      	adds	r1, r1, r3
 8001c94:	19e4      	adds	r4, r4, r7
 8001c96:	42bc      	cmp	r4, r7
 8001c98:	41bf      	sbcs	r7, r7
 8001c9a:	427f      	negs	r7, r7
 8001c9c:	46b9      	mov	r9, r7
 8001c9e:	4680      	mov	r8, r0
 8001ca0:	4489      	add	r9, r1
 8001ca2:	e0d8      	b.n	8001e56 <__aeabi_dsub+0x426>
 8001ca4:	4640      	mov	r0, r8
 8001ca6:	4c3b      	ldr	r4, [pc, #236]	; (8001d94 <__aeabi_dsub+0x364>)
 8001ca8:	3001      	adds	r0, #1
 8001caa:	4220      	tst	r0, r4
 8001cac:	d000      	beq.n	8001cb0 <__aeabi_dsub+0x280>
 8001cae:	e0b4      	b.n	8001e1a <__aeabi_dsub+0x3ea>
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x288>
 8001cb6:	e144      	b.n	8001f42 <__aeabi_dsub+0x512>
 8001cb8:	4660      	mov	r0, ip
 8001cba:	4318      	orrs	r0, r3
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x290>
 8001cbe:	e190      	b.n	8001fe2 <__aeabi_dsub+0x5b2>
 8001cc0:	0008      	movs	r0, r1
 8001cc2:	4338      	orrs	r0, r7
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_dsub+0x298>
 8001cc6:	e1aa      	b.n	800201e <__aeabi_dsub+0x5ee>
 8001cc8:	4661      	mov	r1, ip
 8001cca:	08db      	lsrs	r3, r3, #3
 8001ccc:	0749      	lsls	r1, r1, #29
 8001cce:	430b      	orrs	r3, r1
 8001cd0:	4661      	mov	r1, ip
 8001cd2:	08cc      	lsrs	r4, r1, #3
 8001cd4:	e027      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001cd6:	0008      	movs	r0, r1
 8001cd8:	4338      	orrs	r0, r7
 8001cda:	d061      	beq.n	8001da0 <__aeabi_dsub+0x370>
 8001cdc:	1e50      	subs	r0, r2, #1
 8001cde:	2a01      	cmp	r2, #1
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x2b4>
 8001ce2:	e139      	b.n	8001f58 <__aeabi_dsub+0x528>
 8001ce4:	42a2      	cmp	r2, r4
 8001ce6:	d027      	beq.n	8001d38 <__aeabi_dsub+0x308>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	e75d      	b.n	8001ba8 <__aeabi_dsub+0x178>
 8001cec:	0002      	movs	r2, r0
 8001cee:	391f      	subs	r1, #31
 8001cf0:	40ca      	lsrs	r2, r1
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d003      	beq.n	8001d00 <__aeabi_dsub+0x2d0>
 8001cf8:	2240      	movs	r2, #64	; 0x40
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	4098      	lsls	r0, r3
 8001cfe:	4304      	orrs	r4, r0
 8001d00:	1e63      	subs	r3, r4, #1
 8001d02:	419c      	sbcs	r4, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	4699      	mov	r9, r3
 8001d08:	4698      	mov	r8, r3
 8001d0a:	430c      	orrs	r4, r1
 8001d0c:	0763      	lsls	r3, r4, #29
 8001d0e:	d000      	beq.n	8001d12 <__aeabi_dsub+0x2e2>
 8001d10:	e712      	b.n	8001b38 <__aeabi_dsub+0x108>
 8001d12:	464b      	mov	r3, r9
 8001d14:	464a      	mov	r2, r9
 8001d16:	08e4      	lsrs	r4, r4, #3
 8001d18:	075b      	lsls	r3, r3, #29
 8001d1a:	4323      	orrs	r3, r4
 8001d1c:	08d4      	lsrs	r4, r2, #3
 8001d1e:	4642      	mov	r2, r8
 8001d20:	4919      	ldr	r1, [pc, #100]	; (8001d88 <__aeabi_dsub+0x358>)
 8001d22:	428a      	cmp	r2, r1
 8001d24:	d00e      	beq.n	8001d44 <__aeabi_dsub+0x314>
 8001d26:	0324      	lsls	r4, r4, #12
 8001d28:	0552      	lsls	r2, r2, #21
 8001d2a:	0b24      	lsrs	r4, r4, #12
 8001d2c:	0d52      	lsrs	r2, r2, #21
 8001d2e:	e722      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d30:	000a      	movs	r2, r1
 8001d32:	2400      	movs	r4, #0
 8001d34:	2300      	movs	r3, #0
 8001d36:	e71e      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	4662      	mov	r2, ip
 8001d3c:	0752      	lsls	r2, r2, #29
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	4662      	mov	r2, ip
 8001d42:	08d4      	lsrs	r4, r2, #3
 8001d44:	001a      	movs	r2, r3
 8001d46:	4322      	orrs	r2, r4
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x31c>
 8001d4a:	e1fc      	b.n	8002146 <__aeabi_dsub+0x716>
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	0312      	lsls	r2, r2, #12
 8001d50:	4314      	orrs	r4, r2
 8001d52:	0324      	lsls	r4, r4, #12
 8001d54:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <__aeabi_dsub+0x358>)
 8001d56:	0b24      	lsrs	r4, r4, #12
 8001d58:	e70d      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d5a:	0020      	movs	r0, r4
 8001d5c:	f000 faa4 	bl	80022a8 <__clzsi2>
 8001d60:	0001      	movs	r1, r0
 8001d62:	3118      	adds	r1, #24
 8001d64:	291f      	cmp	r1, #31
 8001d66:	dc00      	bgt.n	8001d6a <__aeabi_dsub+0x33a>
 8001d68:	e6c4      	b.n	8001af4 <__aeabi_dsub+0xc4>
 8001d6a:	3808      	subs	r0, #8
 8001d6c:	4084      	lsls	r4, r0
 8001d6e:	4643      	mov	r3, r8
 8001d70:	0020      	movs	r0, r4
 8001d72:	2400      	movs	r4, #0
 8001d74:	4588      	cmp	r8, r1
 8001d76:	dc00      	bgt.n	8001d7a <__aeabi_dsub+0x34a>
 8001d78:	e6c8      	b.n	8001b0c <__aeabi_dsub+0xdc>
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <__aeabi_dsub+0x35c>)
 8001d7c:	1a5b      	subs	r3, r3, r1
 8001d7e:	4010      	ands	r0, r2
 8001d80:	4698      	mov	r8, r3
 8001d82:	4681      	mov	r9, r0
 8001d84:	e6d6      	b.n	8001b34 <__aeabi_dsub+0x104>
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	000007ff 	.word	0x000007ff
 8001d8c:	ff7fffff 	.word	0xff7fffff
 8001d90:	fffff801 	.word	0xfffff801
 8001d94:	000007fe 	.word	0x000007fe
 8001d98:	430f      	orrs	r7, r1
 8001d9a:	1e7a      	subs	r2, r7, #1
 8001d9c:	4197      	sbcs	r7, r2
 8001d9e:	e691      	b.n	8001ac4 <__aeabi_dsub+0x94>
 8001da0:	4661      	mov	r1, ip
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	0749      	lsls	r1, r1, #29
 8001da6:	430b      	orrs	r3, r1
 8001da8:	4661      	mov	r1, ip
 8001daa:	08cc      	lsrs	r4, r1, #3
 8001dac:	e7b8      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8001dae:	4640      	mov	r0, r8
 8001db0:	4cd3      	ldr	r4, [pc, #844]	; (8002100 <__aeabi_dsub+0x6d0>)
 8001db2:	3001      	adds	r0, #1
 8001db4:	4220      	tst	r0, r4
 8001db6:	d000      	beq.n	8001dba <__aeabi_dsub+0x38a>
 8001db8:	e0a2      	b.n	8001f00 <__aeabi_dsub+0x4d0>
 8001dba:	4640      	mov	r0, r8
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d000      	beq.n	8001dc2 <__aeabi_dsub+0x392>
 8001dc0:	e101      	b.n	8001fc6 <__aeabi_dsub+0x596>
 8001dc2:	4660      	mov	r0, ip
 8001dc4:	4318      	orrs	r0, r3
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dsub+0x39a>
 8001dc8:	e15e      	b.n	8002088 <__aeabi_dsub+0x658>
 8001dca:	0008      	movs	r0, r1
 8001dcc:	4338      	orrs	r0, r7
 8001dce:	d000      	beq.n	8001dd2 <__aeabi_dsub+0x3a2>
 8001dd0:	e15f      	b.n	8002092 <__aeabi_dsub+0x662>
 8001dd2:	4661      	mov	r1, ip
 8001dd4:	08db      	lsrs	r3, r3, #3
 8001dd6:	0749      	lsls	r1, r1, #29
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	4661      	mov	r1, ip
 8001ddc:	08cc      	lsrs	r4, r1, #3
 8001dde:	e7a2      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001de0:	4dc8      	ldr	r5, [pc, #800]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001de2:	42a8      	cmp	r0, r5
 8001de4:	d100      	bne.n	8001de8 <__aeabi_dsub+0x3b8>
 8001de6:	e0cf      	b.n	8001f88 <__aeabi_dsub+0x558>
 8001de8:	2580      	movs	r5, #128	; 0x80
 8001dea:	4664      	mov	r4, ip
 8001dec:	042d      	lsls	r5, r5, #16
 8001dee:	432c      	orrs	r4, r5
 8001df0:	46a4      	mov	ip, r4
 8001df2:	2a38      	cmp	r2, #56	; 0x38
 8001df4:	dc56      	bgt.n	8001ea4 <__aeabi_dsub+0x474>
 8001df6:	2a1f      	cmp	r2, #31
 8001df8:	dd00      	ble.n	8001dfc <__aeabi_dsub+0x3cc>
 8001dfa:	e0d1      	b.n	8001fa0 <__aeabi_dsub+0x570>
 8001dfc:	2520      	movs	r5, #32
 8001dfe:	001e      	movs	r6, r3
 8001e00:	1aad      	subs	r5, r5, r2
 8001e02:	4664      	mov	r4, ip
 8001e04:	40ab      	lsls	r3, r5
 8001e06:	40ac      	lsls	r4, r5
 8001e08:	40d6      	lsrs	r6, r2
 8001e0a:	1e5d      	subs	r5, r3, #1
 8001e0c:	41ab      	sbcs	r3, r5
 8001e0e:	4334      	orrs	r4, r6
 8001e10:	4323      	orrs	r3, r4
 8001e12:	4664      	mov	r4, ip
 8001e14:	40d4      	lsrs	r4, r2
 8001e16:	1b09      	subs	r1, r1, r4
 8001e18:	e049      	b.n	8001eae <__aeabi_dsub+0x47e>
 8001e1a:	4660      	mov	r0, ip
 8001e1c:	1bdc      	subs	r4, r3, r7
 8001e1e:	1a46      	subs	r6, r0, r1
 8001e20:	42a3      	cmp	r3, r4
 8001e22:	4180      	sbcs	r0, r0
 8001e24:	4240      	negs	r0, r0
 8001e26:	4681      	mov	r9, r0
 8001e28:	0030      	movs	r0, r6
 8001e2a:	464e      	mov	r6, r9
 8001e2c:	1b80      	subs	r0, r0, r6
 8001e2e:	4681      	mov	r9, r0
 8001e30:	0200      	lsls	r0, r0, #8
 8001e32:	d476      	bmi.n	8001f22 <__aeabi_dsub+0x4f2>
 8001e34:	464b      	mov	r3, r9
 8001e36:	4323      	orrs	r3, r4
 8001e38:	d000      	beq.n	8001e3c <__aeabi_dsub+0x40c>
 8001e3a:	e652      	b.n	8001ae2 <__aeabi_dsub+0xb2>
 8001e3c:	2400      	movs	r4, #0
 8001e3e:	2500      	movs	r5, #0
 8001e40:	e771      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001e42:	4339      	orrs	r1, r7
 8001e44:	000c      	movs	r4, r1
 8001e46:	1e62      	subs	r2, r4, #1
 8001e48:	4194      	sbcs	r4, r2
 8001e4a:	18e4      	adds	r4, r4, r3
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	419b      	sbcs	r3, r3
 8001e50:	425b      	negs	r3, r3
 8001e52:	4463      	add	r3, ip
 8001e54:	4699      	mov	r9, r3
 8001e56:	464b      	mov	r3, r9
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	d400      	bmi.n	8001e5e <__aeabi_dsub+0x42e>
 8001e5c:	e756      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	469c      	mov	ip, r3
 8001e62:	4ba8      	ldr	r3, [pc, #672]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001e64:	44e0      	add	r8, ip
 8001e66:	4598      	cmp	r8, r3
 8001e68:	d038      	beq.n	8001edc <__aeabi_dsub+0x4ac>
 8001e6a:	464b      	mov	r3, r9
 8001e6c:	48a6      	ldr	r0, [pc, #664]	; (8002108 <__aeabi_dsub+0x6d8>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4003      	ands	r3, r0
 8001e72:	0018      	movs	r0, r3
 8001e74:	0863      	lsrs	r3, r4, #1
 8001e76:	4014      	ands	r4, r2
 8001e78:	431c      	orrs	r4, r3
 8001e7a:	07c3      	lsls	r3, r0, #31
 8001e7c:	431c      	orrs	r4, r3
 8001e7e:	0843      	lsrs	r3, r0, #1
 8001e80:	4699      	mov	r9, r3
 8001e82:	e657      	b.n	8001b34 <__aeabi_dsub+0x104>
 8001e84:	0010      	movs	r0, r2
 8001e86:	000e      	movs	r6, r1
 8001e88:	3820      	subs	r0, #32
 8001e8a:	40c6      	lsrs	r6, r0
 8001e8c:	2a20      	cmp	r2, #32
 8001e8e:	d004      	beq.n	8001e9a <__aeabi_dsub+0x46a>
 8001e90:	2040      	movs	r0, #64	; 0x40
 8001e92:	1a82      	subs	r2, r0, r2
 8001e94:	4091      	lsls	r1, r2
 8001e96:	430f      	orrs	r7, r1
 8001e98:	46b9      	mov	r9, r7
 8001e9a:	464f      	mov	r7, r9
 8001e9c:	1e7a      	subs	r2, r7, #1
 8001e9e:	4197      	sbcs	r7, r2
 8001ea0:	4337      	orrs	r7, r6
 8001ea2:	e60f      	b.n	8001ac4 <__aeabi_dsub+0x94>
 8001ea4:	4662      	mov	r2, ip
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	1e5a      	subs	r2, r3, #1
 8001eac:	4193      	sbcs	r3, r2
 8001eae:	1afc      	subs	r4, r7, r3
 8001eb0:	42a7      	cmp	r7, r4
 8001eb2:	41bf      	sbcs	r7, r7
 8001eb4:	427f      	negs	r7, r7
 8001eb6:	1bcb      	subs	r3, r1, r7
 8001eb8:	4699      	mov	r9, r3
 8001eba:	465d      	mov	r5, fp
 8001ebc:	4680      	mov	r8, r0
 8001ebe:	e608      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8001ec0:	4666      	mov	r6, ip
 8001ec2:	431e      	orrs	r6, r3
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x498>
 8001ec6:	e0be      	b.n	8002046 <__aeabi_dsub+0x616>
 8001ec8:	1e56      	subs	r6, r2, #1
 8001eca:	2a01      	cmp	r2, #1
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_dsub+0x4a0>
 8001ece:	e109      	b.n	80020e4 <__aeabi_dsub+0x6b4>
 8001ed0:	4c8c      	ldr	r4, [pc, #560]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001ed2:	42a2      	cmp	r2, r4
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_dsub+0x4a8>
 8001ed6:	e119      	b.n	800210c <__aeabi_dsub+0x6dc>
 8001ed8:	0032      	movs	r2, r6
 8001eda:	e6c1      	b.n	8001c60 <__aeabi_dsub+0x230>
 8001edc:	4642      	mov	r2, r8
 8001ede:	2400      	movs	r4, #0
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e648      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001ee4:	2020      	movs	r0, #32
 8001ee6:	000c      	movs	r4, r1
 8001ee8:	1a80      	subs	r0, r0, r2
 8001eea:	003e      	movs	r6, r7
 8001eec:	4087      	lsls	r7, r0
 8001eee:	4084      	lsls	r4, r0
 8001ef0:	40d6      	lsrs	r6, r2
 8001ef2:	1e78      	subs	r0, r7, #1
 8001ef4:	4187      	sbcs	r7, r0
 8001ef6:	40d1      	lsrs	r1, r2
 8001ef8:	4334      	orrs	r4, r6
 8001efa:	433c      	orrs	r4, r7
 8001efc:	448c      	add	ip, r1
 8001efe:	e7a4      	b.n	8001e4a <__aeabi_dsub+0x41a>
 8001f00:	4a80      	ldr	r2, [pc, #512]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001f02:	4290      	cmp	r0, r2
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x4d8>
 8001f06:	e0e9      	b.n	80020dc <__aeabi_dsub+0x6ac>
 8001f08:	19df      	adds	r7, r3, r7
 8001f0a:	429f      	cmp	r7, r3
 8001f0c:	419b      	sbcs	r3, r3
 8001f0e:	4461      	add	r1, ip
 8001f10:	425b      	negs	r3, r3
 8001f12:	18c9      	adds	r1, r1, r3
 8001f14:	07cc      	lsls	r4, r1, #31
 8001f16:	087f      	lsrs	r7, r7, #1
 8001f18:	084b      	lsrs	r3, r1, #1
 8001f1a:	4699      	mov	r9, r3
 8001f1c:	4680      	mov	r8, r0
 8001f1e:	433c      	orrs	r4, r7
 8001f20:	e6f4      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001f22:	1afc      	subs	r4, r7, r3
 8001f24:	42a7      	cmp	r7, r4
 8001f26:	41bf      	sbcs	r7, r7
 8001f28:	4663      	mov	r3, ip
 8001f2a:	427f      	negs	r7, r7
 8001f2c:	1ac9      	subs	r1, r1, r3
 8001f2e:	1bcb      	subs	r3, r1, r7
 8001f30:	4699      	mov	r9, r3
 8001f32:	465d      	mov	r5, fp
 8001f34:	e5d5      	b.n	8001ae2 <__aeabi_dsub+0xb2>
 8001f36:	08ff      	lsrs	r7, r7, #3
 8001f38:	074b      	lsls	r3, r1, #29
 8001f3a:	465d      	mov	r5, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	08cc      	lsrs	r4, r1, #3
 8001f40:	e6ee      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8001f42:	4662      	mov	r2, ip
 8001f44:	431a      	orrs	r2, r3
 8001f46:	d000      	beq.n	8001f4a <__aeabi_dsub+0x51a>
 8001f48:	e082      	b.n	8002050 <__aeabi_dsub+0x620>
 8001f4a:	000b      	movs	r3, r1
 8001f4c:	433b      	orrs	r3, r7
 8001f4e:	d11b      	bne.n	8001f88 <__aeabi_dsub+0x558>
 8001f50:	2480      	movs	r4, #128	; 0x80
 8001f52:	2500      	movs	r5, #0
 8001f54:	0324      	lsls	r4, r4, #12
 8001f56:	e6f9      	b.n	8001d4c <__aeabi_dsub+0x31c>
 8001f58:	19dc      	adds	r4, r3, r7
 8001f5a:	429c      	cmp	r4, r3
 8001f5c:	419b      	sbcs	r3, r3
 8001f5e:	4461      	add	r1, ip
 8001f60:	4689      	mov	r9, r1
 8001f62:	425b      	negs	r3, r3
 8001f64:	4499      	add	r9, r3
 8001f66:	464b      	mov	r3, r9
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	d444      	bmi.n	8001ff6 <__aeabi_dsub+0x5c6>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	4698      	mov	r8, r3
 8001f70:	e6cc      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001f72:	1bdc      	subs	r4, r3, r7
 8001f74:	4662      	mov	r2, ip
 8001f76:	42a3      	cmp	r3, r4
 8001f78:	419b      	sbcs	r3, r3
 8001f7a:	1a51      	subs	r1, r2, r1
 8001f7c:	425b      	negs	r3, r3
 8001f7e:	1acb      	subs	r3, r1, r3
 8001f80:	4699      	mov	r9, r3
 8001f82:	2301      	movs	r3, #1
 8001f84:	4698      	mov	r8, r3
 8001f86:	e5a4      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8001f88:	08ff      	lsrs	r7, r7, #3
 8001f8a:	074b      	lsls	r3, r1, #29
 8001f8c:	465d      	mov	r5, fp
 8001f8e:	433b      	orrs	r3, r7
 8001f90:	08cc      	lsrs	r4, r1, #3
 8001f92:	e6d7      	b.n	8001d44 <__aeabi_dsub+0x314>
 8001f94:	4662      	mov	r2, ip
 8001f96:	431a      	orrs	r2, r3
 8001f98:	0014      	movs	r4, r2
 8001f9a:	1e63      	subs	r3, r4, #1
 8001f9c:	419c      	sbcs	r4, r3
 8001f9e:	e679      	b.n	8001c94 <__aeabi_dsub+0x264>
 8001fa0:	0015      	movs	r5, r2
 8001fa2:	4664      	mov	r4, ip
 8001fa4:	3d20      	subs	r5, #32
 8001fa6:	40ec      	lsrs	r4, r5
 8001fa8:	46a0      	mov	r8, r4
 8001faa:	2a20      	cmp	r2, #32
 8001fac:	d005      	beq.n	8001fba <__aeabi_dsub+0x58a>
 8001fae:	2540      	movs	r5, #64	; 0x40
 8001fb0:	4664      	mov	r4, ip
 8001fb2:	1aaa      	subs	r2, r5, r2
 8001fb4:	4094      	lsls	r4, r2
 8001fb6:	4323      	orrs	r3, r4
 8001fb8:	469a      	mov	sl, r3
 8001fba:	4654      	mov	r4, sl
 8001fbc:	1e63      	subs	r3, r4, #1
 8001fbe:	419c      	sbcs	r4, r3
 8001fc0:	4643      	mov	r3, r8
 8001fc2:	4323      	orrs	r3, r4
 8001fc4:	e773      	b.n	8001eae <__aeabi_dsub+0x47e>
 8001fc6:	4662      	mov	r2, ip
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	d023      	beq.n	8002014 <__aeabi_dsub+0x5e4>
 8001fcc:	000a      	movs	r2, r1
 8001fce:	433a      	orrs	r2, r7
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x5a4>
 8001fd2:	e0a0      	b.n	8002116 <__aeabi_dsub+0x6e6>
 8001fd4:	4662      	mov	r2, ip
 8001fd6:	08db      	lsrs	r3, r3, #3
 8001fd8:	0752      	lsls	r2, r2, #29
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	4662      	mov	r2, ip
 8001fde:	08d4      	lsrs	r4, r2, #3
 8001fe0:	e6b0      	b.n	8001d44 <__aeabi_dsub+0x314>
 8001fe2:	000b      	movs	r3, r1
 8001fe4:	433b      	orrs	r3, r7
 8001fe6:	d100      	bne.n	8001fea <__aeabi_dsub+0x5ba>
 8001fe8:	e728      	b.n	8001e3c <__aeabi_dsub+0x40c>
 8001fea:	08ff      	lsrs	r7, r7, #3
 8001fec:	074b      	lsls	r3, r1, #29
 8001fee:	465d      	mov	r5, fp
 8001ff0:	433b      	orrs	r3, r7
 8001ff2:	08cc      	lsrs	r4, r1, #3
 8001ff4:	e697      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	4698      	mov	r8, r3
 8001ffa:	e736      	b.n	8001e6a <__aeabi_dsub+0x43a>
 8001ffc:	1afc      	subs	r4, r7, r3
 8001ffe:	42a7      	cmp	r7, r4
 8002000:	41bf      	sbcs	r7, r7
 8002002:	4663      	mov	r3, ip
 8002004:	427f      	negs	r7, r7
 8002006:	1ac9      	subs	r1, r1, r3
 8002008:	1bcb      	subs	r3, r1, r7
 800200a:	4699      	mov	r9, r3
 800200c:	2301      	movs	r3, #1
 800200e:	465d      	mov	r5, fp
 8002010:	4698      	mov	r8, r3
 8002012:	e55e      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8002014:	074b      	lsls	r3, r1, #29
 8002016:	08ff      	lsrs	r7, r7, #3
 8002018:	433b      	orrs	r3, r7
 800201a:	08cc      	lsrs	r4, r1, #3
 800201c:	e692      	b.n	8001d44 <__aeabi_dsub+0x314>
 800201e:	1bdc      	subs	r4, r3, r7
 8002020:	4660      	mov	r0, ip
 8002022:	42a3      	cmp	r3, r4
 8002024:	41b6      	sbcs	r6, r6
 8002026:	1a40      	subs	r0, r0, r1
 8002028:	4276      	negs	r6, r6
 800202a:	1b80      	subs	r0, r0, r6
 800202c:	4681      	mov	r9, r0
 800202e:	0200      	lsls	r0, r0, #8
 8002030:	d560      	bpl.n	80020f4 <__aeabi_dsub+0x6c4>
 8002032:	1afc      	subs	r4, r7, r3
 8002034:	42a7      	cmp	r7, r4
 8002036:	41bf      	sbcs	r7, r7
 8002038:	4663      	mov	r3, ip
 800203a:	427f      	negs	r7, r7
 800203c:	1ac9      	subs	r1, r1, r3
 800203e:	1bcb      	subs	r3, r1, r7
 8002040:	4699      	mov	r9, r3
 8002042:	465d      	mov	r5, fp
 8002044:	e576      	b.n	8001b34 <__aeabi_dsub+0x104>
 8002046:	08ff      	lsrs	r7, r7, #3
 8002048:	074b      	lsls	r3, r1, #29
 800204a:	433b      	orrs	r3, r7
 800204c:	08cc      	lsrs	r4, r1, #3
 800204e:	e667      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8002050:	000a      	movs	r2, r1
 8002052:	08db      	lsrs	r3, r3, #3
 8002054:	433a      	orrs	r2, r7
 8002056:	d100      	bne.n	800205a <__aeabi_dsub+0x62a>
 8002058:	e66f      	b.n	8001d3a <__aeabi_dsub+0x30a>
 800205a:	4662      	mov	r2, ip
 800205c:	0752      	lsls	r2, r2, #29
 800205e:	4313      	orrs	r3, r2
 8002060:	4662      	mov	r2, ip
 8002062:	08d4      	lsrs	r4, r2, #3
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	0312      	lsls	r2, r2, #12
 8002068:	4214      	tst	r4, r2
 800206a:	d007      	beq.n	800207c <__aeabi_dsub+0x64c>
 800206c:	08c8      	lsrs	r0, r1, #3
 800206e:	4210      	tst	r0, r2
 8002070:	d104      	bne.n	800207c <__aeabi_dsub+0x64c>
 8002072:	465d      	mov	r5, fp
 8002074:	0004      	movs	r4, r0
 8002076:	08fb      	lsrs	r3, r7, #3
 8002078:	0749      	lsls	r1, r1, #29
 800207a:	430b      	orrs	r3, r1
 800207c:	0f5a      	lsrs	r2, r3, #29
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	0752      	lsls	r2, r2, #29
 8002084:	4313      	orrs	r3, r2
 8002086:	e65d      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002088:	074b      	lsls	r3, r1, #29
 800208a:	08ff      	lsrs	r7, r7, #3
 800208c:	433b      	orrs	r3, r7
 800208e:	08cc      	lsrs	r4, r1, #3
 8002090:	e649      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8002092:	19dc      	adds	r4, r3, r7
 8002094:	429c      	cmp	r4, r3
 8002096:	419b      	sbcs	r3, r3
 8002098:	4461      	add	r1, ip
 800209a:	4689      	mov	r9, r1
 800209c:	425b      	negs	r3, r3
 800209e:	4499      	add	r9, r3
 80020a0:	464b      	mov	r3, r9
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	d400      	bmi.n	80020a8 <__aeabi_dsub+0x678>
 80020a6:	e631      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020a8:	464a      	mov	r2, r9
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <__aeabi_dsub+0x6d8>)
 80020ac:	401a      	ands	r2, r3
 80020ae:	2301      	movs	r3, #1
 80020b0:	4691      	mov	r9, r2
 80020b2:	4698      	mov	r8, r3
 80020b4:	e62a      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020b6:	0016      	movs	r6, r2
 80020b8:	4664      	mov	r4, ip
 80020ba:	3e20      	subs	r6, #32
 80020bc:	40f4      	lsrs	r4, r6
 80020be:	46a0      	mov	r8, r4
 80020c0:	2a20      	cmp	r2, #32
 80020c2:	d005      	beq.n	80020d0 <__aeabi_dsub+0x6a0>
 80020c4:	2640      	movs	r6, #64	; 0x40
 80020c6:	4664      	mov	r4, ip
 80020c8:	1ab2      	subs	r2, r6, r2
 80020ca:	4094      	lsls	r4, r2
 80020cc:	4323      	orrs	r3, r4
 80020ce:	469a      	mov	sl, r3
 80020d0:	4654      	mov	r4, sl
 80020d2:	1e63      	subs	r3, r4, #1
 80020d4:	419c      	sbcs	r4, r3
 80020d6:	4643      	mov	r3, r8
 80020d8:	431c      	orrs	r4, r3
 80020da:	e5db      	b.n	8001c94 <__aeabi_dsub+0x264>
 80020dc:	0002      	movs	r2, r0
 80020de:	2400      	movs	r4, #0
 80020e0:	2300      	movs	r3, #0
 80020e2:	e548      	b.n	8001b76 <__aeabi_dsub+0x146>
 80020e4:	19dc      	adds	r4, r3, r7
 80020e6:	42bc      	cmp	r4, r7
 80020e8:	41bf      	sbcs	r7, r7
 80020ea:	4461      	add	r1, ip
 80020ec:	4689      	mov	r9, r1
 80020ee:	427f      	negs	r7, r7
 80020f0:	44b9      	add	r9, r7
 80020f2:	e738      	b.n	8001f66 <__aeabi_dsub+0x536>
 80020f4:	464b      	mov	r3, r9
 80020f6:	4323      	orrs	r3, r4
 80020f8:	d100      	bne.n	80020fc <__aeabi_dsub+0x6cc>
 80020fa:	e69f      	b.n	8001e3c <__aeabi_dsub+0x40c>
 80020fc:	e606      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	000007fe 	.word	0x000007fe
 8002104:	000007ff 	.word	0x000007ff
 8002108:	ff7fffff 	.word	0xff7fffff
 800210c:	08ff      	lsrs	r7, r7, #3
 800210e:	074b      	lsls	r3, r1, #29
 8002110:	433b      	orrs	r3, r7
 8002112:	08cc      	lsrs	r4, r1, #3
 8002114:	e616      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002116:	4662      	mov	r2, ip
 8002118:	08db      	lsrs	r3, r3, #3
 800211a:	0752      	lsls	r2, r2, #29
 800211c:	4313      	orrs	r3, r2
 800211e:	4662      	mov	r2, ip
 8002120:	08d4      	lsrs	r4, r2, #3
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	0312      	lsls	r2, r2, #12
 8002126:	4214      	tst	r4, r2
 8002128:	d007      	beq.n	800213a <__aeabi_dsub+0x70a>
 800212a:	08c8      	lsrs	r0, r1, #3
 800212c:	4210      	tst	r0, r2
 800212e:	d104      	bne.n	800213a <__aeabi_dsub+0x70a>
 8002130:	465d      	mov	r5, fp
 8002132:	0004      	movs	r4, r0
 8002134:	08fb      	lsrs	r3, r7, #3
 8002136:	0749      	lsls	r1, r1, #29
 8002138:	430b      	orrs	r3, r1
 800213a:	0f5a      	lsrs	r2, r3, #29
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	0752      	lsls	r2, r2, #29
 8002140:	08db      	lsrs	r3, r3, #3
 8002142:	4313      	orrs	r3, r2
 8002144:	e5fe      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002146:	2300      	movs	r3, #0
 8002148:	4a01      	ldr	r2, [pc, #4]	; (8002150 <__aeabi_dsub+0x720>)
 800214a:	001c      	movs	r4, r3
 800214c:	e513      	b.n	8001b76 <__aeabi_dsub+0x146>
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	000007ff 	.word	0x000007ff

08002154 <__aeabi_dcmpun>:
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	0005      	movs	r5, r0
 8002158:	480c      	ldr	r0, [pc, #48]	; (800218c <__aeabi_dcmpun+0x38>)
 800215a:	031c      	lsls	r4, r3, #12
 800215c:	0016      	movs	r6, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	030a      	lsls	r2, r1, #12
 8002162:	0049      	lsls	r1, r1, #1
 8002164:	0b12      	lsrs	r2, r2, #12
 8002166:	0d49      	lsrs	r1, r1, #21
 8002168:	0b24      	lsrs	r4, r4, #12
 800216a:	0d5b      	lsrs	r3, r3, #21
 800216c:	4281      	cmp	r1, r0
 800216e:	d008      	beq.n	8002182 <__aeabi_dcmpun+0x2e>
 8002170:	4a06      	ldr	r2, [pc, #24]	; (800218c <__aeabi_dcmpun+0x38>)
 8002172:	2000      	movs	r0, #0
 8002174:	4293      	cmp	r3, r2
 8002176:	d103      	bne.n	8002180 <__aeabi_dcmpun+0x2c>
 8002178:	0020      	movs	r0, r4
 800217a:	4330      	orrs	r0, r6
 800217c:	1e43      	subs	r3, r0, #1
 800217e:	4198      	sbcs	r0, r3
 8002180:	bd70      	pop	{r4, r5, r6, pc}
 8002182:	2001      	movs	r0, #1
 8002184:	432a      	orrs	r2, r5
 8002186:	d1fb      	bne.n	8002180 <__aeabi_dcmpun+0x2c>
 8002188:	e7f2      	b.n	8002170 <__aeabi_dcmpun+0x1c>
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	000007ff 	.word	0x000007ff

08002190 <__aeabi_d2iz>:
 8002190:	000a      	movs	r2, r1
 8002192:	b530      	push	{r4, r5, lr}
 8002194:	4c13      	ldr	r4, [pc, #76]	; (80021e4 <__aeabi_d2iz+0x54>)
 8002196:	0053      	lsls	r3, r2, #1
 8002198:	0309      	lsls	r1, r1, #12
 800219a:	0005      	movs	r5, r0
 800219c:	0b09      	lsrs	r1, r1, #12
 800219e:	2000      	movs	r0, #0
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	0fd2      	lsrs	r2, r2, #31
 80021a4:	42a3      	cmp	r3, r4
 80021a6:	dd04      	ble.n	80021b2 <__aeabi_d2iz+0x22>
 80021a8:	480f      	ldr	r0, [pc, #60]	; (80021e8 <__aeabi_d2iz+0x58>)
 80021aa:	4283      	cmp	r3, r0
 80021ac:	dd02      	ble.n	80021b4 <__aeabi_d2iz+0x24>
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <__aeabi_d2iz+0x5c>)
 80021b0:	18d0      	adds	r0, r2, r3
 80021b2:	bd30      	pop	{r4, r5, pc}
 80021b4:	2080      	movs	r0, #128	; 0x80
 80021b6:	0340      	lsls	r0, r0, #13
 80021b8:	4301      	orrs	r1, r0
 80021ba:	480d      	ldr	r0, [pc, #52]	; (80021f0 <__aeabi_d2iz+0x60>)
 80021bc:	1ac0      	subs	r0, r0, r3
 80021be:	281f      	cmp	r0, #31
 80021c0:	dd08      	ble.n	80021d4 <__aeabi_d2iz+0x44>
 80021c2:	480c      	ldr	r0, [pc, #48]	; (80021f4 <__aeabi_d2iz+0x64>)
 80021c4:	1ac3      	subs	r3, r0, r3
 80021c6:	40d9      	lsrs	r1, r3
 80021c8:	000b      	movs	r3, r1
 80021ca:	4258      	negs	r0, r3
 80021cc:	2a00      	cmp	r2, #0
 80021ce:	d1f0      	bne.n	80021b2 <__aeabi_d2iz+0x22>
 80021d0:	0018      	movs	r0, r3
 80021d2:	e7ee      	b.n	80021b2 <__aeabi_d2iz+0x22>
 80021d4:	4c08      	ldr	r4, [pc, #32]	; (80021f8 <__aeabi_d2iz+0x68>)
 80021d6:	40c5      	lsrs	r5, r0
 80021d8:	46a4      	mov	ip, r4
 80021da:	4463      	add	r3, ip
 80021dc:	4099      	lsls	r1, r3
 80021de:	000b      	movs	r3, r1
 80021e0:	432b      	orrs	r3, r5
 80021e2:	e7f2      	b.n	80021ca <__aeabi_d2iz+0x3a>
 80021e4:	000003fe 	.word	0x000003fe
 80021e8:	0000041d 	.word	0x0000041d
 80021ec:	7fffffff 	.word	0x7fffffff
 80021f0:	00000433 	.word	0x00000433
 80021f4:	00000413 	.word	0x00000413
 80021f8:	fffffbed 	.word	0xfffffbed

080021fc <__aeabi_i2d>:
 80021fc:	b570      	push	{r4, r5, r6, lr}
 80021fe:	2800      	cmp	r0, #0
 8002200:	d016      	beq.n	8002230 <__aeabi_i2d+0x34>
 8002202:	17c3      	asrs	r3, r0, #31
 8002204:	18c5      	adds	r5, r0, r3
 8002206:	405d      	eors	r5, r3
 8002208:	0fc4      	lsrs	r4, r0, #31
 800220a:	0028      	movs	r0, r5
 800220c:	f000 f84c 	bl	80022a8 <__clzsi2>
 8002210:	4a11      	ldr	r2, [pc, #68]	; (8002258 <__aeabi_i2d+0x5c>)
 8002212:	1a12      	subs	r2, r2, r0
 8002214:	280a      	cmp	r0, #10
 8002216:	dc16      	bgt.n	8002246 <__aeabi_i2d+0x4a>
 8002218:	0003      	movs	r3, r0
 800221a:	002e      	movs	r6, r5
 800221c:	3315      	adds	r3, #21
 800221e:	409e      	lsls	r6, r3
 8002220:	230b      	movs	r3, #11
 8002222:	1a18      	subs	r0, r3, r0
 8002224:	40c5      	lsrs	r5, r0
 8002226:	0552      	lsls	r2, r2, #21
 8002228:	032d      	lsls	r5, r5, #12
 800222a:	0b2d      	lsrs	r5, r5, #12
 800222c:	0d53      	lsrs	r3, r2, #21
 800222e:	e003      	b.n	8002238 <__aeabi_i2d+0x3c>
 8002230:	2400      	movs	r4, #0
 8002232:	2300      	movs	r3, #0
 8002234:	2500      	movs	r5, #0
 8002236:	2600      	movs	r6, #0
 8002238:	051b      	lsls	r3, r3, #20
 800223a:	432b      	orrs	r3, r5
 800223c:	07e4      	lsls	r4, r4, #31
 800223e:	4323      	orrs	r3, r4
 8002240:	0030      	movs	r0, r6
 8002242:	0019      	movs	r1, r3
 8002244:	bd70      	pop	{r4, r5, r6, pc}
 8002246:	380b      	subs	r0, #11
 8002248:	4085      	lsls	r5, r0
 800224a:	0552      	lsls	r2, r2, #21
 800224c:	032d      	lsls	r5, r5, #12
 800224e:	2600      	movs	r6, #0
 8002250:	0b2d      	lsrs	r5, r5, #12
 8002252:	0d53      	lsrs	r3, r2, #21
 8002254:	e7f0      	b.n	8002238 <__aeabi_i2d+0x3c>
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	0000041e 	.word	0x0000041e

0800225c <__aeabi_ui2d>:
 800225c:	b510      	push	{r4, lr}
 800225e:	1e04      	subs	r4, r0, #0
 8002260:	d010      	beq.n	8002284 <__aeabi_ui2d+0x28>
 8002262:	f000 f821 	bl	80022a8 <__clzsi2>
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <__aeabi_ui2d+0x48>)
 8002268:	1a1b      	subs	r3, r3, r0
 800226a:	280a      	cmp	r0, #10
 800226c:	dc11      	bgt.n	8002292 <__aeabi_ui2d+0x36>
 800226e:	220b      	movs	r2, #11
 8002270:	0021      	movs	r1, r4
 8002272:	1a12      	subs	r2, r2, r0
 8002274:	40d1      	lsrs	r1, r2
 8002276:	3015      	adds	r0, #21
 8002278:	030a      	lsls	r2, r1, #12
 800227a:	055b      	lsls	r3, r3, #21
 800227c:	4084      	lsls	r4, r0
 800227e:	0b12      	lsrs	r2, r2, #12
 8002280:	0d5b      	lsrs	r3, r3, #21
 8002282:	e001      	b.n	8002288 <__aeabi_ui2d+0x2c>
 8002284:	2300      	movs	r3, #0
 8002286:	2200      	movs	r2, #0
 8002288:	051b      	lsls	r3, r3, #20
 800228a:	4313      	orrs	r3, r2
 800228c:	0020      	movs	r0, r4
 800228e:	0019      	movs	r1, r3
 8002290:	bd10      	pop	{r4, pc}
 8002292:	0022      	movs	r2, r4
 8002294:	380b      	subs	r0, #11
 8002296:	4082      	lsls	r2, r0
 8002298:	055b      	lsls	r3, r3, #21
 800229a:	0312      	lsls	r2, r2, #12
 800229c:	2400      	movs	r4, #0
 800229e:	0b12      	lsrs	r2, r2, #12
 80022a0:	0d5b      	lsrs	r3, r3, #21
 80022a2:	e7f1      	b.n	8002288 <__aeabi_ui2d+0x2c>
 80022a4:	0000041e 	.word	0x0000041e

080022a8 <__clzsi2>:
 80022a8:	211c      	movs	r1, #28
 80022aa:	2301      	movs	r3, #1
 80022ac:	041b      	lsls	r3, r3, #16
 80022ae:	4298      	cmp	r0, r3
 80022b0:	d301      	bcc.n	80022b6 <__clzsi2+0xe>
 80022b2:	0c00      	lsrs	r0, r0, #16
 80022b4:	3910      	subs	r1, #16
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	4298      	cmp	r0, r3
 80022ba:	d301      	bcc.n	80022c0 <__clzsi2+0x18>
 80022bc:	0a00      	lsrs	r0, r0, #8
 80022be:	3908      	subs	r1, #8
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	4298      	cmp	r0, r3
 80022c4:	d301      	bcc.n	80022ca <__clzsi2+0x22>
 80022c6:	0900      	lsrs	r0, r0, #4
 80022c8:	3904      	subs	r1, #4
 80022ca:	a202      	add	r2, pc, #8	; (adr r2, 80022d4 <__clzsi2+0x2c>)
 80022cc:	5c10      	ldrb	r0, [r2, r0]
 80022ce:	1840      	adds	r0, r0, r1
 80022d0:	4770      	bx	lr
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	02020304 	.word	0x02020304
 80022d8:	01010101 	.word	0x01010101
	...

080022e4 <__clzdi2>:
 80022e4:	b510      	push	{r4, lr}
 80022e6:	2900      	cmp	r1, #0
 80022e8:	d103      	bne.n	80022f2 <__clzdi2+0xe>
 80022ea:	f7ff ffdd 	bl	80022a8 <__clzsi2>
 80022ee:	3020      	adds	r0, #32
 80022f0:	e002      	b.n	80022f8 <__clzdi2+0x14>
 80022f2:	0008      	movs	r0, r1
 80022f4:	f7ff ffd8 	bl	80022a8 <__clzsi2>
 80022f8:	bd10      	pop	{r4, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)

080022fc <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 80022fc:	b5b0      	push	{r4, r5, r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8002304:	230f      	movs	r3, #15
 8002306:	18fb      	adds	r3, r7, r3
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]

    /* chip id read try count */
    uint8_t try_count = 5;
 800230c:	230e      	movs	r3, #14
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	2205      	movs	r2, #5
 8002312:	701a      	strb	r2, [r3, #0]
    uint8_t chip_id = 0;
 8002314:	230d      	movs	r3, #13
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
    //rslt = null_ptr_check(dev);

    /* Proceed if null check is fine */
    //if (rslt == BME280_OK)
    //{
        while (try_count)
 800231c:	e026      	b.n	800236c <bme280_init+0x70>
        {
            /* Read the chip-id of bme280 sensor */
        	BME280_SPI_Read(BME280_CHIP_ID_ADDR, &chip_id, 1);
 800231e:	240d      	movs	r4, #13
 8002320:	193b      	adds	r3, r7, r4
 8002322:	2201      	movs	r2, #1
 8002324:	0019      	movs	r1, r3
 8002326:	20d0      	movs	r0, #208	; 0xd0
 8002328:	f001 fb18 	bl	800395c <BME280_SPI_Read>
            //rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);

            /* Check for chip id validity */
            if (chip_id == BME280_CHIP_ID) // (rslt == BME280_OK) &&
 800232c:	193b      	adds	r3, r7, r4
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b60      	cmp	r3, #96	; 0x60
 8002332:	d112      	bne.n	800235a <bme280_init+0x5e>

                /* Reset the sensor */
                //bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
                //HAL_Delay(2);
                //bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
                rslt = bme280_soft_reset(); //dev
 8002334:	250f      	movs	r5, #15
 8002336:	197c      	adds	r4, r7, r5
 8002338:	f000 f94b 	bl	80025d2 <bme280_soft_reset>
 800233c:	0003      	movs	r3, r0
 800233e:	7023      	strb	r3, [r4, #0]

                if (rslt == BME280_OK)
 8002340:	197b      	adds	r3, r7, r5
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	b25b      	sxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d116      	bne.n	8002378 <bme280_init+0x7c>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 800234a:	197c      	adds	r4, r7, r5
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	0018      	movs	r0, r3
 8002350:	f000 fe2e 	bl	8002fb0 <get_calib_data>
 8002354:	0003      	movs	r3, r0
 8002356:	7023      	strb	r3, [r4, #0]
                }

                break;
 8002358:	e00e      	b.n	8002378 <bme280_init+0x7c>
            }

            /* Wait for 1 ms */
            //dev->delay_us(1000, dev->intf_ptr);
            HAL_Delay(1);
 800235a:	2001      	movs	r0, #1
 800235c:	f001 fef4 	bl	8004148 <HAL_Delay>
            --try_count;
 8002360:	220e      	movs	r2, #14
 8002362:	18bb      	adds	r3, r7, r2
 8002364:	18ba      	adds	r2, r7, r2
 8002366:	7812      	ldrb	r2, [r2, #0]
 8002368:	3a01      	subs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
        while (try_count)
 800236c:	230e      	movs	r3, #14
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1d3      	bne.n	800231e <bme280_init+0x22>
 8002376:	e000      	b.n	800237a <bme280_init+0x7e>
                break;
 8002378:	46c0      	nop			; (mov r8, r8)
        }

        /* Chip id check failed */
        if (!try_count)
 800237a:	230e      	movs	r3, #14
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d103      	bne.n	800238c <bme280_init+0x90>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8002384:	230f      	movs	r3, #15
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	22fe      	movs	r2, #254	; 0xfe
 800238a:	701a      	strb	r2, [r3, #0]
        }
    //}

    return rslt;
 800238c:	230f      	movs	r3, #15
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	b25b      	sxtb	r3, r3
}
 8002394:	0018      	movs	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	b004      	add	sp, #16
 800239a:	bdb0      	pop	{r4, r5, r7, pc}

0800239c <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
void bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	1dfb      	adds	r3, r7, #7
 80023a8:	701a      	strb	r2, [r3, #0]
    //int8_t rslt = 0;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 80023aa:	1dfb      	adds	r3, r7, #7
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b0a      	cmp	r3, #10
 80023b0:	d902      	bls.n	80023b8 <bme280_set_regs+0x1c>
    {
        len = 10;
 80023b2:	1dfb      	adds	r3, r7, #7
 80023b4:	220a      	movs	r2, #10
 80023b6:	701a      	strb	r2, [r3, #0]
    /* Check for arguments validity */
    //if ((reg_addr != NULL) && (reg_data != NULL)) // (rslt == BME280_OK) &&
    //{
    //    if (len != 0)
    //    {
            temp_buff[0] = reg_data[0];
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	781a      	ldrb	r2, [r3, #0]
 80023bc:	2310      	movs	r3, #16
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
//            if (dev->intf != BME280_I2C_INTF)
//            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80023c2:	2325      	movs	r3, #37	; 0x25
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	e012      	b.n	80023f2 <bme280_set_regs+0x56>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80023cc:	2025      	movs	r0, #37	; 0x25
 80023ce:	183b      	adds	r3, r7, r0
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	18d3      	adds	r3, r2, r3
 80023d6:	781a      	ldrb	r2, [r3, #0]
 80023d8:	183b      	adds	r3, r7, r0
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	68f9      	ldr	r1, [r7, #12]
 80023de:	18cb      	adds	r3, r1, r3
 80023e0:	217f      	movs	r1, #127	; 0x7f
 80023e2:	400a      	ands	r2, r1
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80023e8:	183b      	adds	r3, r7, r0
 80023ea:	781a      	ldrb	r2, [r3, #0]
 80023ec:	183b      	adds	r3, r7, r0
 80023ee:	3201      	adds	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	2325      	movs	r3, #37	; 0x25
 80023f4:	18fa      	adds	r2, r7, r3
 80023f6:	1dfb      	adds	r3, r7, #7
 80023f8:	7812      	ldrb	r2, [r2, #0]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d3e5      	bcc.n	80023cc <bme280_set_regs+0x30>
                }
 //           }

            /* Burst write mode */
            if (len > 1)
 8002400:	1dfb      	adds	r3, r7, #7
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d911      	bls.n	800242c <bme280_set_regs+0x90>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8002408:	1dfb      	adds	r3, r7, #7
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	2110      	movs	r1, #16
 8002410:	1879      	adds	r1, r7, r1
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 fe06 	bl	8003024 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8002418:	1dfb      	adds	r3, r7, #7
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	b29b      	uxth	r3, r3
 800241e:	18db      	adds	r3, r3, r3
 8002420:	b29a      	uxth	r2, r3
 8002422:	2326      	movs	r3, #38	; 0x26
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	3a01      	subs	r2, #1
 8002428:	801a      	strh	r2, [r3, #0]
 800242a:	e004      	b.n	8002436 <bme280_set_regs+0x9a>
            }
            else
            {
                temp_len = len;
 800242c:	2326      	movs	r3, #38	; 0x26
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	1dfa      	adds	r2, r7, #7
 8002432:	7812      	ldrb	r2, [r2, #0]
 8002434:	801a      	strh	r2, [r3, #0]
            }

            BME280_SPI_Write(reg_addr[0], temp_buff, temp_len);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	0018      	movs	r0, r3
 800243c:	2326      	movs	r3, #38	; 0x26
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	881a      	ldrh	r2, [r3, #0]
 8002442:	2310      	movs	r3, #16
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	0019      	movs	r1, r3
 8002448:	f001 fabc 	bl	80039c4 <BME280_SPI_Write>
//    {
//        rslt = BME280_E_NULL_PTR;
//    }

    //return rslt;
}
 800244c:	46c0      	nop			; (mov r8, r8)
 800244e:	46bd      	mov	sp, r7
 8002450:	b00a      	add	sp, #40	; 0x28
 8002452:	bd80      	pop	{r7, pc}

08002454 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, struct bme280_dev *dev)
{
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	0002      	movs	r2, r0
 800245c:	6039      	str	r1, [r7, #0]
 800245e:	1dfb      	adds	r3, r7, #7
 8002460:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0;
 8002462:	250f      	movs	r5, #15
 8002464:	197b      	adds	r3, r7, r5
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
    //rslt = null_ptr_check(dev);

    /* Proceed if null check is fine */
    //if (rslt == BME280_OK)
    //{
        rslt = bme280_get_sensor_mode(&sensor_mode); //, dev
 800246a:	197c      	adds	r4, r7, r5
 800246c:	260e      	movs	r6, #14
 800246e:	19bb      	adds	r3, r7, r6
 8002470:	0018      	movs	r0, r3
 8002472:	f000 f889 	bl	8002588 <bme280_get_sensor_mode>
 8002476:	0003      	movs	r3, r0
 8002478:	7023      	strb	r3, [r4, #0]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 800247a:	002a      	movs	r2, r5
 800247c:	18bb      	adds	r3, r7, r2
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	b25b      	sxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10a      	bne.n	800249c <bme280_set_sensor_settings+0x48>
 8002486:	19bb      	adds	r3, r7, r6
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d006      	beq.n	800249c <bme280_set_sensor_settings+0x48>
        {
            rslt = put_device_to_sleep(dev);
 800248e:	18bc      	adds	r4, r7, r2
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	0018      	movs	r0, r3
 8002494:	f000 fb5b 	bl	8002b4e <put_device_to_sleep>
 8002498:	0003      	movs	r3, r0
 800249a:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME280_OK)
 800249c:	240f      	movs	r4, #15
 800249e:	193b      	adds	r3, r7, r4
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b25b      	sxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d12d      	bne.n	8002504 <bme280_set_sensor_settings+0xb0>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80024a8:	1dfb      	adds	r3, r7, #7
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	0019      	movs	r1, r3
 80024ae:	2007      	movs	r0, #7
 80024b0:	f000 fef3 	bl	800329a <are_settings_changed>
 80024b4:	1e03      	subs	r3, r0, #0
 80024b6:	d00b      	beq.n	80024d0 <bme280_set_sensor_settings+0x7c>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	3328      	adds	r3, #40	; 0x28
 80024bc:	0019      	movs	r1, r3
 80024be:	193c      	adds	r4, r7, r4
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	1dfb      	adds	r3, r7, #7
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	0018      	movs	r0, r3
 80024c8:	f000 f980 	bl	80027cc <set_osr_settings>
 80024cc:	0003      	movs	r3, r0
 80024ce:	7023      	strb	r3, [r4, #0]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80024d0:	240f      	movs	r4, #15
 80024d2:	193b      	adds	r3, r7, r4
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	b25b      	sxtb	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d113      	bne.n	8002504 <bme280_set_sensor_settings+0xb0>
 80024dc:	1dfb      	adds	r3, r7, #7
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	0019      	movs	r1, r3
 80024e2:	2018      	movs	r0, #24
 80024e4:	f000 fed9 	bl	800329a <are_settings_changed>
 80024e8:	1e03      	subs	r3, r0, #0
 80024ea:	d00b      	beq.n	8002504 <bme280_set_sensor_settings+0xb0>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	3328      	adds	r3, #40	; 0x28
 80024f0:	0019      	movs	r1, r3
 80024f2:	193c      	adds	r4, r7, r4
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	1dfb      	adds	r3, r7, #7
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	0018      	movs	r0, r3
 80024fc:	f000 fa17 	bl	800292e <set_filter_standby_settings>
 8002500:	0003      	movs	r3, r0
 8002502:	7023      	strb	r3, [r4, #0]
            }
        }
    //}

    return rslt;
 8002504:	230f      	movs	r3, #15
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	b25b      	sxtb	r3, r3
}
 800250c:	0018      	movs	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	b005      	add	sp, #20
 8002512:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002514 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8002514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	0002      	movs	r2, r0
 800251c:	6039      	str	r1, [r7, #0]
 800251e:	1dfb      	adds	r3, r7, #7
 8002520:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0;
 8002522:	250f      	movs	r5, #15
 8002524:	197b      	adds	r3, r7, r5
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
    /* Check for null pointer in the device structure*/
    //rslt = null_ptr_check(dev);

    //if (rslt == BME280_OK)
    //{
        rslt = bme280_get_sensor_mode(&last_set_mode); //, dev
 800252a:	197c      	adds	r4, r7, r5
 800252c:	260e      	movs	r6, #14
 800252e:	19bb      	adds	r3, r7, r6
 8002530:	0018      	movs	r0, r3
 8002532:	f000 f829 	bl	8002588 <bme280_get_sensor_mode>
 8002536:	0003      	movs	r3, r0
 8002538:	7023      	strb	r3, [r4, #0]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 800253a:	002a      	movs	r2, r5
 800253c:	18bb      	adds	r3, r7, r2
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	b25b      	sxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10a      	bne.n	800255c <bme280_set_sensor_mode+0x48>
 8002546:	19bb      	adds	r3, r7, r6
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d006      	beq.n	800255c <bme280_set_sensor_mode+0x48>
        {
            rslt = put_device_to_sleep(dev);
 800254e:	18bc      	adds	r4, r7, r2
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	0018      	movs	r0, r3
 8002554:	f000 fafb 	bl	8002b4e <put_device_to_sleep>
 8002558:	0003      	movs	r3, r0
 800255a:	7023      	strb	r3, [r4, #0]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 800255c:	220f      	movs	r2, #15
 800255e:	18bb      	adds	r3, r7, r2
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	b25b      	sxtb	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d107      	bne.n	8002578 <bme280_set_sensor_mode+0x64>
        {
            rslt = write_power_mode(sensor_mode); //, dev
 8002568:	18bc      	adds	r4, r7, r2
 800256a:	1dfb      	adds	r3, r7, #7
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	0018      	movs	r0, r3
 8002570:	f000 fab7 	bl	8002ae2 <write_power_mode>
 8002574:	0003      	movs	r3, r0
 8002576:	7023      	strb	r3, [r4, #0]
        }
    //}

    return rslt;
 8002578:	230f      	movs	r3, #15
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	b25b      	sxtb	r3, r3
}
 8002580:	0018      	movs	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	b005      	add	sp, #20
 8002586:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002588 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode) //, struct bme280_dev *dev
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8002590:	230f      	movs	r3, #15
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    //rslt = null_ptr_check(dev);

    if (sensor_mode != NULL) // (rslt == BME280_OK) && (
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00d      	beq.n	80025ba <bme280_get_sensor_mode+0x32>
    {
        /* Read the power mode register */
    	BME280_SPI_Read(BME280_PWR_CTRL_ADDR, sensor_mode, 1);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	0019      	movs	r1, r3
 80025a4:	20f4      	movs	r0, #244	; 0xf4
 80025a6:	f001 f9d9 	bl	800395c <BME280_SPI_Read>
        //rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2203      	movs	r2, #3
 80025b0:	4013      	ands	r3, r2
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	701a      	strb	r2, [r3, #0]
 80025b8:	e003      	b.n	80025c2 <bme280_get_sensor_mode+0x3a>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80025ba:	230f      	movs	r3, #15
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	22ff      	movs	r2, #255	; 0xff
 80025c0:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80025c2:	230f      	movs	r3, #15
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	b25b      	sxtb	r3, r3
}
 80025ca:	0018      	movs	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b004      	add	sp, #16
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset() //struct bme280_dev *dev
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
    int8_t rslt = 0;
 80025d8:	1dfb      	adds	r3, r7, #7
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME280_RESET_ADDR;
 80025de:	1d7b      	adds	r3, r7, #5
 80025e0:	22e0      	movs	r2, #224	; 0xe0
 80025e2:	701a      	strb	r2, [r3, #0]
    uint8_t status_reg = 0;
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
    uint8_t try_run = 5;
 80025ea:	1dbb      	adds	r3, r7, #6
 80025ec:	2205      	movs	r2, #5
 80025ee:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 80025f0:	1cfb      	adds	r3, r7, #3
 80025f2:	22b6      	movs	r2, #182	; 0xb6
 80025f4:	701a      	strb	r2, [r3, #0]

    /* Proceed if null check is fine */
    //if (rslt == BME280_OK)
    //{
        /* Write the soft reset command in the sensor */
         bme280_set_regs(&reg_addr, &soft_rst_cmd, 1);
 80025f6:	1cf9      	adds	r1, r7, #3
 80025f8:	1d7b      	adds	r3, r7, #5
 80025fa:	2201      	movs	r2, #1
 80025fc:	0018      	movs	r0, r3
 80025fe:	f7ff fecd 	bl	800239c <bme280_set_regs>

        if (rslt == BME280_OK)
 8002602:	1dfb      	adds	r3, r7, #7
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	b25b      	sxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d11e      	bne.n	800264a <bme280_soft_reset+0x78>
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                //dev->delay_us(2000, dev->intf_ptr);
            	HAL_Delay(2);
 800260c:	2002      	movs	r0, #2
 800260e:	f001 fd9b 	bl	8004148 <HAL_Delay>
            	BME280_SPI_Read(BME280_STATUS_REG_ADDR, &status_reg, 1);
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	2201      	movs	r2, #1
 8002616:	0019      	movs	r1, r3
 8002618:	20f3      	movs	r0, #243	; 0xf3
 800261a:	f001 f99f 	bl	800395c <BME280_SPI_Read>
                //rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);

            } while ((try_run--) && (status_reg & BME280_STATUS_IM_UPDATE)); // (rslt == BME280_OK) &&
 800261e:	1dbb      	adds	r3, r7, #6
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	1dba      	adds	r2, r7, #6
 8002624:	1e59      	subs	r1, r3, #1
 8002626:	7011      	strb	r1, [r2, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <bme280_soft_reset+0x66>
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	001a      	movs	r2, r3
 8002632:	2301      	movs	r3, #1
 8002634:	4013      	ands	r3, r2
 8002636:	d1e9      	bne.n	800260c <bme280_soft_reset+0x3a>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8002638:	1d3b      	adds	r3, r7, #4
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	001a      	movs	r2, r3
 800263e:	2301      	movs	r3, #1
 8002640:	4013      	ands	r3, r2
 8002642:	d002      	beq.n	800264a <bme280_soft_reset+0x78>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8002644:	1dfb      	adds	r3, r7, #7
 8002646:	22fa      	movs	r2, #250	; 0xfa
 8002648:	701a      	strb	r2, [r3, #0]
            }
        }
    //}

    return rslt;
 800264a:	1dfb      	adds	r3, r7, #7
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	b25b      	sxtb	r3, r3
}
 8002650:	0018      	movs	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	b002      	add	sp, #8
 8002656:	bd80      	pop	{r7, pc}

08002658 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8002658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800265a:	b089      	sub	sp, #36	; 0x24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	230f      	movs	r3, #15
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	1c02      	adds	r2, r0, #0
 8002668:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0;
 800266a:	221f      	movs	r2, #31
 800266c:	18bb      	adds	r3, r7, r2
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_HUMIDITY_CALIB_DATA_LEN] = { 0 }; //BME280_P_T_H_DATA_LEN
 8002672:	2418      	movs	r4, #24
 8002674:	193b      	adds	r3, r7, r4
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	3304      	adds	r3, #4
 800267c:	2203      	movs	r2, #3
 800267e:	2100      	movs	r1, #0
 8002680:	0018      	movs	r0, r3
 8002682:	f005 fb26 	bl	8007cd2 <memset>
    struct bme280_uncomp_data uncomp_data = { 0 };
 8002686:	2610      	movs	r6, #16
 8002688:	19bb      	adds	r3, r7, r6
 800268a:	0018      	movs	r0, r3
 800268c:	2308      	movs	r3, #8
 800268e:	001a      	movs	r2, r3
 8002690:	2100      	movs	r1, #0
 8002692:	f005 fb1e 	bl	8007cd2 <memset>

    /* Check for null pointer in the device structure*/
    //rslt = null_ptr_check(dev);

    if (comp_data != NULL) // (rslt == BME280_OK) && (
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d019      	beq.n	80026d0 <bme280_get_sensor_data+0x78>
    {
        /* Read the pressure and temperature data from the sensor */
    	BME280_SPI_Read(BME280_DATA_ADDR, reg_data, BME280_HUMIDITY_CALIB_DATA_LEN);
 800269c:	193b      	adds	r3, r7, r4
 800269e:	2207      	movs	r2, #7
 80026a0:	0019      	movs	r1, r3
 80026a2:	20f7      	movs	r0, #247	; 0xf7
 80026a4:	f001 f95a 	bl	800395c <BME280_SPI_Read>
        //rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev); //BME280_P_T_H_DATA_LEN

        //if (rslt == BME280_OK)
        //{
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 80026a8:	19ba      	adds	r2, r7, r6
 80026aa:	193b      	adds	r3, r7, r4
 80026ac:	0011      	movs	r1, r2
 80026ae:	0018      	movs	r0, r3
 80026b0:	f000 f81a 	bl	80026e8 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80026b4:	687d      	ldr	r5, [r7, #4]
 80026b6:	221f      	movs	r2, #31
 80026b8:	18bc      	adds	r4, r7, r2
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	19b9      	adds	r1, r7, r6
 80026be:	230f      	movs	r3, #15
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	7818      	ldrb	r0, [r3, #0]
 80026c4:	002b      	movs	r3, r5
 80026c6:	f000 f83d 	bl	8002744 <bme280_compensate_data>
 80026ca:	0003      	movs	r3, r0
 80026cc:	7023      	strb	r3, [r4, #0]
 80026ce:	e003      	b.n	80026d8 <bme280_get_sensor_data+0x80>
        //}
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80026d0:	231f      	movs	r3, #31
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	22ff      	movs	r2, #255	; 0xff
 80026d6:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80026d8:	231f      	movs	r3, #31
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	b25b      	sxtb	r3, r3
}
 80026e0:	0018      	movs	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b009      	add	sp, #36	; 0x24
 80026e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026e8 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
//    data_lsb = (uint32_t)reg_data[1] << 4;
//    data_xlsb = (uint32_t)reg_data[2] >> 4;
//    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3303      	adds	r3, #3
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	031b      	lsls	r3, r3, #12
 80026fa:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3304      	adds	r3, #4
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3305      	adds	r3, #5
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	b2db      	uxtb	r3, r3
 8002710:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	431a      	orrs	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	431a      	orrs	r2, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3306      	adds	r3, #6
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3307      	adds	r3, #7
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	431a      	orrs	r2, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	605a      	str	r2, [r3, #4]
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b006      	add	sp, #24
 8002742:	bd80      	pop	{r7, pc}

08002744 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	230f      	movs	r3, #15
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	1c02      	adds	r2, r0, #0
 8002756:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_OK;
 8002758:	2317      	movs	r3, #23
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d026      	beq.n	80027b4 <bme280_compensate_data+0x70>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d023      	beq.n	80027b4 <bme280_compensate_data+0x70>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d020      	beq.n	80027b4 <bme280_compensate_data+0x70>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	2300      	movs	r3, #0
 8002778:	600a      	str	r2, [r1, #0]
 800277a:	604b      	str	r3, [r1, #4]
        //comp_data->pressure = 0;
        comp_data->humidity = 0;
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	2300      	movs	r3, #0
 8002782:	608a      	str	r2, [r1, #8]
 8002784:	60cb      	str	r3, [r1, #12]

        /* If pressure or temperature component is selected */
        //if (sensor_comp & (BME280_TEMP | BME280_HUM)) // BME280_PRESS |
        //{
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	0011      	movs	r1, r2
 800278c:	0018      	movs	r0, r3
 800278e:	f000 fa3b 	bl	8002c08 <compensate_temperature>
 8002792:	0002      	movs	r2, r0
 8002794:	000b      	movs	r3, r1
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	600a      	str	r2, [r1, #0]
 800279a:	604b      	str	r3, [r1, #4]
//        }

        //if (sensor_comp & BME280_HUM)
        //{
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	0011      	movs	r1, r2
 80027a2:	0018      	movs	r0, r3
 80027a4:	f000 faf6 	bl	8002d94 <compensate_humidity>
 80027a8:	0002      	movs	r2, r0
 80027aa:	000b      	movs	r3, r1
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	608a      	str	r2, [r1, #8]
 80027b0:	60cb      	str	r3, [r1, #12]
 80027b2:	e003      	b.n	80027bc <bme280_compensate_data+0x78>
        //}
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80027b4:	2317      	movs	r3, #23
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	22ff      	movs	r2, #255	; 0xff
 80027ba:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80027bc:	2317      	movs	r3, #23
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	b25b      	sxtb	r3, r3
}
 80027c4:	0018      	movs	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b006      	add	sp, #24
 80027ca:	bd80      	pop	{r7, pc}

080027cc <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	210f      	movs	r1, #15
 80027d8:	187b      	adds	r3, r7, r1
 80027da:	1c02      	adds	r2, r0, #0
 80027dc:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80027de:	2017      	movs	r0, #23
 80027e0:	183b      	adds	r3, r7, r0
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]

    if (desired_settings & BME280_OSR_HUM_SEL)
 80027e6:	187b      	adds	r3, r7, r1
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2204      	movs	r2, #4
 80027ec:	4013      	ands	r3, r2
 80027ee:	d008      	beq.n	8002802 <set_osr_settings+0x36>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 80027f0:	183c      	adds	r4, r7, r0
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	0011      	movs	r1, r2
 80027f8:	0018      	movs	r0, r3
 80027fa:	f000 f81b 	bl	8002834 <set_osr_humidity_settings>
 80027fe:	0003      	movs	r3, r0
 8002800:	7023      	strb	r3, [r4, #0]
    }

    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8002802:	200f      	movs	r0, #15
 8002804:	183b      	adds	r3, r7, r0
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2203      	movs	r2, #3
 800280a:	4013      	ands	r3, r2
 800280c:	d00a      	beq.n	8002824 <set_osr_settings+0x58>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 800280e:	2317      	movs	r3, #23
 8002810:	18fc      	adds	r4, r7, r3
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	183b      	adds	r3, r7, r0
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	0018      	movs	r0, r3
 800281c:	f000 f845 	bl	80028aa <set_osr_press_temp_settings>
 8002820:	0003      	movs	r3, r0
 8002822:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002824:	2317      	movs	r3, #23
 8002826:	18fb      	adds	r3, r7, r3
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	b25b      	sxtb	r3, r3
}
 800282c:	0018      	movs	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	b007      	add	sp, #28
 8002832:	bd90      	pop	{r4, r7, pc}

08002834 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8002834:	b5b0      	push	{r4, r5, r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800283e:	250f      	movs	r5, #15
 8002840:	197b      	adds	r3, r7, r5
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8002846:	200c      	movs	r0, #12
 8002848:	183b      	adds	r3, r7, r0
 800284a:	22f2      	movs	r2, #242	; 0xf2
 800284c:	701a      	strb	r2, [r3, #0]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	789b      	ldrb	r3, [r3, #2]
 8002852:	2207      	movs	r2, #7
 8002854:	4013      	ands	r3, r2
 8002856:	b2da      	uxtb	r2, r3
 8002858:	210e      	movs	r1, #14
 800285a:	187b      	adds	r3, r7, r1
 800285c:	701a      	strb	r2, [r3, #0]

    /* Write the humidity control value in the register */
     bme280_set_regs(&reg_addr, &ctrl_hum, 1);
 800285e:	1879      	adds	r1, r7, r1
 8002860:	0004      	movs	r4, r0
 8002862:	193b      	adds	r3, r7, r4
 8002864:	2201      	movs	r2, #1
 8002866:	0018      	movs	r0, r3
 8002868:	f7ff fd98 	bl	800239c <bme280_set_regs>

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 800286c:	197b      	adds	r3, r7, r5
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	b25b      	sxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d111      	bne.n	800289a <set_osr_humidity_settings+0x66>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8002876:	193b      	adds	r3, r7, r4
 8002878:	22f4      	movs	r2, #244	; 0xf4
 800287a:	701a      	strb	r2, [r3, #0]
        BME280_SPI_Read(reg_addr, &ctrl_meas, 1);
 800287c:	193b      	adds	r3, r7, r4
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	0018      	movs	r0, r3
 8002882:	250d      	movs	r5, #13
 8002884:	197b      	adds	r3, r7, r5
 8002886:	2201      	movs	r2, #1
 8002888:	0019      	movs	r1, r3
 800288a:	f001 f867 	bl	800395c <BME280_SPI_Read>
        //rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);

        //if (rslt == BME280_OK)
        //{
             bme280_set_regs(&reg_addr, &ctrl_meas, 1);
 800288e:	1979      	adds	r1, r7, r5
 8002890:	193b      	adds	r3, r7, r4
 8002892:	2201      	movs	r2, #1
 8002894:	0018      	movs	r0, r3
 8002896:	f7ff fd81 	bl	800239c <bme280_set_regs>
        //}
    }

    return rslt;
 800289a:	230f      	movs	r3, #15
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	b25b      	sxtb	r3, r3
}
 80028a2:	0018      	movs	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	b004      	add	sp, #16
 80028a8:	bdb0      	pop	{r4, r5, r7, pc}

080028aa <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 80028aa:	b5b0      	push	{r4, r5, r7, lr}
 80028ac:	b086      	sub	sp, #24
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	240f      	movs	r4, #15
 80028b6:	193b      	adds	r3, r7, r4
 80028b8:	1c02      	adds	r2, r0, #0
 80028ba:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0;
 80028bc:	2317      	movs	r3, #23
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80028c4:	2116      	movs	r1, #22
 80028c6:	187b      	adds	r3, r7, r1
 80028c8:	22f4      	movs	r2, #244	; 0xf4
 80028ca:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    BME280_SPI_Read(reg_addr, &reg_data, 1);
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	0018      	movs	r0, r3
 80028d2:	2515      	movs	r5, #21
 80028d4:	197b      	adds	r3, r7, r5
 80028d6:	2201      	movs	r2, #1
 80028d8:	0019      	movs	r1, r3
 80028da:	f001 f83f 	bl	800395c <BME280_SPI_Read>
    //rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);

    //if (rslt == BME280_OK)
    //{
        if (desired_settings & BME280_OSR_PRESS_SEL)
 80028de:	193b      	adds	r3, r7, r4
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2201      	movs	r2, #1
 80028e4:	4013      	ands	r3, r2
 80028e6:	d005      	beq.n	80028f4 <set_osr_press_temp_settings+0x4a>
        {
            fill_osr_press_settings(&reg_data, settings);
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	197b      	adds	r3, r7, r5
 80028ec:	0011      	movs	r1, r2
 80028ee:	0018      	movs	r0, r3
 80028f0:	f000 f892 	bl	8002a18 <fill_osr_press_settings>
        }

        if (desired_settings & BME280_OSR_TEMP_SEL)
 80028f4:	230f      	movs	r3, #15
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2202      	movs	r2, #2
 80028fc:	4013      	ands	r3, r2
 80028fe:	d006      	beq.n	800290e <set_osr_press_temp_settings+0x64>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	2315      	movs	r3, #21
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	0011      	movs	r1, r2
 8002908:	0018      	movs	r0, r3
 800290a:	f000 f8a0 	bl	8002a4e <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
         bme280_set_regs(&reg_addr, &reg_data, 1);
 800290e:	2315      	movs	r3, #21
 8002910:	18f9      	adds	r1, r7, r3
 8002912:	2316      	movs	r3, #22
 8002914:	18fb      	adds	r3, r7, r3
 8002916:	2201      	movs	r2, #1
 8002918:	0018      	movs	r0, r3
 800291a:	f7ff fd3f 	bl	800239c <bme280_set_regs>
    //}

    return rslt;
 800291e:	2317      	movs	r3, #23
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	b25b      	sxtb	r3, r3
}
 8002926:	0018      	movs	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	b006      	add	sp, #24
 800292c:	bdb0      	pop	{r4, r5, r7, pc}

0800292e <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 800292e:	b5b0      	push	{r4, r5, r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	240f      	movs	r4, #15
 800293a:	193b      	adds	r3, r7, r4
 800293c:	1c02      	adds	r2, r0, #0
 800293e:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0;
 8002940:	2317      	movs	r3, #23
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8002948:	2116      	movs	r1, #22
 800294a:	187b      	adds	r3, r7, r1
 800294c:	22f5      	movs	r2, #245	; 0xf5
 800294e:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    BME280_SPI_Read(reg_addr, &reg_data, 1);
 8002950:	187b      	adds	r3, r7, r1
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	0018      	movs	r0, r3
 8002956:	2515      	movs	r5, #21
 8002958:	197b      	adds	r3, r7, r5
 800295a:	2201      	movs	r2, #1
 800295c:	0019      	movs	r1, r3
 800295e:	f000 fffd 	bl	800395c <BME280_SPI_Read>
    //rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);

    //if (rslt == BME280_OK)
    //{
        if (desired_settings & BME280_FILTER_SEL)
 8002962:	193b      	adds	r3, r7, r4
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2208      	movs	r2, #8
 8002968:	4013      	ands	r3, r2
 800296a:	d005      	beq.n	8002978 <set_filter_standby_settings+0x4a>
        {
            fill_filter_settings(&reg_data, settings);
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	197b      	adds	r3, r7, r5
 8002970:	0011      	movs	r1, r2
 8002972:	0018      	movs	r0, r3
 8002974:	f000 f81d 	bl	80029b2 <fill_filter_settings>
        }

        if (desired_settings & BME280_STANDBY_SEL)
 8002978:	230f      	movs	r3, #15
 800297a:	18fb      	adds	r3, r7, r3
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2210      	movs	r2, #16
 8002980:	4013      	ands	r3, r2
 8002982:	d006      	beq.n	8002992 <set_filter_standby_settings+0x64>
        {
            fill_standby_settings(&reg_data, settings);
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	2315      	movs	r3, #21
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	0011      	movs	r1, r2
 800298c:	0018      	movs	r0, r3
 800298e:	f000 f82b 	bl	80029e8 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
         bme280_set_regs(&reg_addr, &reg_data, 1);
 8002992:	2315      	movs	r3, #21
 8002994:	18f9      	adds	r1, r7, r3
 8002996:	2316      	movs	r3, #22
 8002998:	18fb      	adds	r3, r7, r3
 800299a:	2201      	movs	r2, #1
 800299c:	0018      	movs	r0, r3
 800299e:	f7ff fcfd 	bl	800239c <bme280_set_regs>
    //}

    return rslt;
 80029a2:	2317      	movs	r3, #23
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	b25b      	sxtb	r3, r3
}
 80029aa:	0018      	movs	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b006      	add	sp, #24
 80029b0:	bdb0      	pop	{r4, r5, r7, pc}

080029b2 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	b25b      	sxtb	r3, r3
 80029c2:	221c      	movs	r2, #28
 80029c4:	4393      	bics	r3, r2
 80029c6:	b25a      	sxtb	r2, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	78db      	ldrb	r3, [r3, #3]
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	b25b      	sxtb	r3, r3
 80029d0:	211c      	movs	r1, #28
 80029d2:	400b      	ands	r3, r1
 80029d4:	b25b      	sxtb	r3, r3
 80029d6:	4313      	orrs	r3, r2
 80029d8:	b25b      	sxtb	r3, r3
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	701a      	strb	r2, [r3, #0]
}
 80029e0:	46c0      	nop			; (mov r8, r8)
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b002      	add	sp, #8
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	b25b      	sxtb	r3, r3
 80029f8:	221f      	movs	r2, #31
 80029fa:	4013      	ands	r3, r2
 80029fc:	b25a      	sxtb	r2, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	791b      	ldrb	r3, [r3, #4]
 8002a02:	015b      	lsls	r3, r3, #5
 8002a04:	b25b      	sxtb	r3, r3
 8002a06:	4313      	orrs	r3, r2
 8002a08:	b25b      	sxtb	r3, r3
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	701a      	strb	r2, [r3, #0]
}
 8002a10:	46c0      	nop			; (mov r8, r8)
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b002      	add	sp, #8
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	b25b      	sxtb	r3, r3
 8002a28:	221c      	movs	r2, #28
 8002a2a:	4393      	bics	r3, r2
 8002a2c:	b25a      	sxtb	r2, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	b25b      	sxtb	r3, r3
 8002a36:	211c      	movs	r1, #28
 8002a38:	400b      	ands	r3, r1
 8002a3a:	b25b      	sxtb	r3, r3
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	b25b      	sxtb	r3, r3
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	701a      	strb	r2, [r3, #0]
}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b002      	add	sp, #8
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	b25b      	sxtb	r3, r3
 8002a5e:	221f      	movs	r2, #31
 8002a60:	4013      	ands	r3, r2
 8002a62:	b25a      	sxtb	r2, r3
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	785b      	ldrb	r3, [r3, #1]
 8002a68:	015b      	lsls	r3, r3, #5
 8002a6a:	b25b      	sxtb	r3, r3
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	b25b      	sxtb	r3, r3
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	701a      	strb	r2, [r3, #0]
}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b002      	add	sp, #8
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2207      	movs	r2, #7
 8002a8e:	4013      	ands	r3, r2
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3302      	adds	r3, #2
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	109b      	asrs	r3, r3, #2
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2207      	movs	r2, #7
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3302      	adds	r3, #2
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	095b      	lsrs	r3, r3, #5
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3303      	adds	r3, #3
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	109b      	asrs	r3, r3, #2
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3303      	adds	r3, #3
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	711a      	strb	r2, [r3, #4]
}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b002      	add	sp, #8
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode) //, struct bme280_dev *dev
{
 8002ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	0002      	movs	r2, r0
 8002aea:	1dfb      	adds	r3, r7, #7
 8002aec:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0;
 8002aee:	260f      	movs	r6, #15
 8002af0:	19bb      	adds	r3, r7, r6
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8002af6:	250e      	movs	r5, #14
 8002af8:	197b      	adds	r3, r7, r5
 8002afa:	22f4      	movs	r2, #244	; 0xf4
 8002afc:	701a      	strb	r2, [r3, #0]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    BME280_SPI_Read(reg_addr, &sensor_mode_reg_val, 1);
 8002afe:	197b      	adds	r3, r7, r5
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	0018      	movs	r0, r3
 8002b04:	240d      	movs	r4, #13
 8002b06:	193b      	adds	r3, r7, r4
 8002b08:	2201      	movs	r2, #1
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	f000 ff26 	bl	800395c <BME280_SPI_Read>
    //rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);

    /* Set the power mode */
    //if (rslt == BME280_OK)
    //{
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8002b10:	0020      	movs	r0, r4
 8002b12:	183b      	adds	r3, r7, r0
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	b25b      	sxtb	r3, r3
 8002b18:	2203      	movs	r2, #3
 8002b1a:	4393      	bics	r3, r2
 8002b1c:	b25a      	sxtb	r2, r3
 8002b1e:	1dfb      	adds	r3, r7, #7
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b25b      	sxtb	r3, r3
 8002b24:	2103      	movs	r1, #3
 8002b26:	400b      	ands	r3, r1
 8002b28:	b25b      	sxtb	r3, r3
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	b25b      	sxtb	r3, r3
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	183b      	adds	r3, r7, r0
 8002b32:	701a      	strb	r2, [r3, #0]

        /* Write the power mode in the register */
         bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1);
 8002b34:	1839      	adds	r1, r7, r0
 8002b36:	197b      	adds	r3, r7, r5
 8002b38:	2201      	movs	r2, #1
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f7ff fc2e 	bl	800239c <bme280_set_regs>
    //}

    return rslt;
 8002b40:	19bb      	adds	r3, r7, r6
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	b25b      	sxtb	r3, r3
}
 8002b46:	0018      	movs	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b005      	add	sp, #20
 8002b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b4e <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 8002b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b50:	b087      	sub	sp, #28
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8002b56:	2417      	movs	r4, #23
 8002b58:	193b      	adds	r3, r7, r4
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data[4];
    struct bme280_settings settings;

    BME280_SPI_Read(BME280_CTRL_HUM_ADDR, reg_data, 4);
 8002b5e:	2510      	movs	r5, #16
 8002b60:	197b      	adds	r3, r7, r5
 8002b62:	2204      	movs	r2, #4
 8002b64:	0019      	movs	r1, r3
 8002b66:	20f2      	movs	r0, #242	; 0xf2
 8002b68:	f000 fef8 	bl	800395c <BME280_SPI_Read>
    //rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);

    //if (rslt == BME280_OK)
    //{
        parse_device_settings(reg_data, &settings);
 8002b6c:	2608      	movs	r6, #8
 8002b6e:	19ba      	adds	r2, r7, r6
 8002b70:	197b      	adds	r3, r7, r5
 8002b72:	0011      	movs	r1, r2
 8002b74:	0018      	movs	r0, r3
 8002b76:	f7ff ff82 	bl	8002a7e <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8002b7a:	0025      	movs	r5, r4
 8002b7c:	193c      	adds	r4, r7, r4
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f7ff fd26 	bl	80025d2 <bme280_soft_reset>
 8002b86:	0003      	movs	r3, r0
 8002b88:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8002b8a:	197b      	adds	r3, r7, r5
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	b25b      	sxtb	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d108      	bne.n	8002ba6 <put_device_to_sleep+0x58>
        {
            rslt = reload_device_settings(&settings, dev);
 8002b94:	197c      	adds	r4, r7, r5
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	19bb      	adds	r3, r7, r6
 8002b9a:	0011      	movs	r1, r2
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f000 f80a 	bl	8002bb6 <reload_device_settings>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	7023      	strb	r3, [r4, #0]
        }
    //}

    return rslt;
 8002ba6:	2317      	movs	r3, #23
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	b25b      	sxtb	r3, r3
}
 8002bae:	0018      	movs	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b007      	add	sp, #28
 8002bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bb6 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8002bb6:	b5b0      	push	{r4, r5, r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8002bc0:	250f      	movs	r5, #15
 8002bc2:	197b      	adds	r3, r7, r5
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8002bc8:	197c      	adds	r4, r7, r5
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	0019      	movs	r1, r3
 8002bd0:	201f      	movs	r0, #31
 8002bd2:	f7ff fdfb 	bl	80027cc <set_osr_settings>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8002bda:	197b      	adds	r3, r7, r5
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	b25b      	sxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d108      	bne.n	8002bf6 <reload_device_settings+0x40>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8002be4:	197c      	adds	r4, r7, r5
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	0019      	movs	r1, r3
 8002bec:	201f      	movs	r0, #31
 8002bee:	f7ff fe9e 	bl	800292e <set_filter_standby_settings>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002bf6:	230f      	movs	r3, #15
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	b25b      	sxtb	r3, r3
}
 8002bfe:	0018      	movs	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	b004      	add	sp, #16
 8002c04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002c08 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 8002c08:	b5b0      	push	{r4, r5, r7, lr}
 8002c0a:	b08c      	sub	sp, #48	; 0x30
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 8002c12:	2200      	movs	r2, #0
 8002c14:	4b59      	ldr	r3, [pc, #356]	; (8002d7c <compensate_temperature+0x174>)
 8002c16:	623a      	str	r2, [r7, #32]
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
    double temperature_max = 85;
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	4b58      	ldr	r3, [pc, #352]	; (8002d80 <compensate_temperature+0x178>)
 8002c1e:	61ba      	str	r2, [r7, #24]
 8002c20:	61fb      	str	r3, [r7, #28]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7ff fb18 	bl	800225c <__aeabi_ui2d>
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	4b55      	ldr	r3, [pc, #340]	; (8002d84 <compensate_temperature+0x17c>)
 8002c30:	f7fe f890 	bl	8000d54 <__aeabi_ddiv>
 8002c34:	0002      	movs	r2, r0
 8002c36:	000b      	movs	r3, r1
 8002c38:	0014      	movs	r4, r2
 8002c3a:	001d      	movs	r5, r3
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f7ff fb0b 	bl	800225c <__aeabi_ui2d>
 8002c46:	2200      	movs	r2, #0
 8002c48:	4b4f      	ldr	r3, [pc, #316]	; (8002d88 <compensate_temperature+0x180>)
 8002c4a:	f7fe f883 	bl	8000d54 <__aeabi_ddiv>
 8002c4e:	0002      	movs	r2, r0
 8002c50:	000b      	movs	r3, r1
 8002c52:	0020      	movs	r0, r4
 8002c54:	0029      	movs	r1, r5
 8002c56:	f7fe feeb 	bl	8001a30 <__aeabi_dsub>
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	000b      	movs	r3, r1
 8002c5e:	613a      	str	r2, [r7, #16]
 8002c60:	617b      	str	r3, [r7, #20]
    var1 = var1 * ((double)calib_data->dig_t2);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2202      	movs	r2, #2
 8002c66:	5e9b      	ldrsh	r3, [r3, r2]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f7ff fac7 	bl	80021fc <__aeabi_i2d>
 8002c6e:	0002      	movs	r2, r0
 8002c70:	000b      	movs	r3, r1
 8002c72:	6938      	ldr	r0, [r7, #16]
 8002c74:	6979      	ldr	r1, [r7, #20]
 8002c76:	f7fe fc6f 	bl	8001558 <__aeabi_dmul>
 8002c7a:	0002      	movs	r2, r0
 8002c7c:	000b      	movs	r3, r1
 8002c7e:	613a      	str	r2, [r7, #16]
 8002c80:	617b      	str	r3, [r7, #20]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7ff fae8 	bl	800225c <__aeabi_ui2d>
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2382      	movs	r3, #130	; 0x82
 8002c90:	05db      	lsls	r3, r3, #23
 8002c92:	f7fe f85f 	bl	8000d54 <__aeabi_ddiv>
 8002c96:	0002      	movs	r2, r0
 8002c98:	000b      	movs	r3, r1
 8002c9a:	0014      	movs	r4, r2
 8002c9c:	001d      	movs	r5, r3
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f7ff fada 	bl	800225c <__aeabi_ui2d>
 8002ca8:	2200      	movs	r2, #0
 8002caa:	4b38      	ldr	r3, [pc, #224]	; (8002d8c <compensate_temperature+0x184>)
 8002cac:	f7fe f852 	bl	8000d54 <__aeabi_ddiv>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	000b      	movs	r3, r1
 8002cb4:	0020      	movs	r0, r4
 8002cb6:	0029      	movs	r1, r5
 8002cb8:	f7fe feba 	bl	8001a30 <__aeabi_dsub>
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	000b      	movs	r3, r1
 8002cc0:	60ba      	str	r2, [r7, #8]
 8002cc2:	60fb      	str	r3, [r7, #12]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	68b8      	ldr	r0, [r7, #8]
 8002cca:	68f9      	ldr	r1, [r7, #12]
 8002ccc:	f7fe fc44 	bl	8001558 <__aeabi_dmul>
 8002cd0:	0002      	movs	r2, r0
 8002cd2:	000b      	movs	r3, r1
 8002cd4:	0014      	movs	r4, r2
 8002cd6:	001d      	movs	r5, r3
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	5e9b      	ldrsh	r3, [r3, r2]
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f7ff fa8c 	bl	80021fc <__aeabi_i2d>
 8002ce4:	0002      	movs	r2, r0
 8002ce6:	000b      	movs	r3, r1
 8002ce8:	0020      	movs	r0, r4
 8002cea:	0029      	movs	r1, r5
 8002cec:	f7fe fc34 	bl	8001558 <__aeabi_dmul>
 8002cf0:	0002      	movs	r2, r0
 8002cf2:	000b      	movs	r3, r1
 8002cf4:	60ba      	str	r2, [r7, #8]
 8002cf6:	60fb      	str	r3, [r7, #12]
    calib_data->t_fine = (int32_t)(var1 + var2);
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6938      	ldr	r0, [r7, #16]
 8002cfe:	6979      	ldr	r1, [r7, #20]
 8002d00:	f7fd fcec 	bl	80006dc <__aeabi_dadd>
 8002d04:	0002      	movs	r2, r0
 8002d06:	000b      	movs	r3, r1
 8002d08:	0010      	movs	r0, r2
 8002d0a:	0019      	movs	r1, r3
 8002d0c:	f7ff fa40 	bl	8002190 <__aeabi_d2iz>
 8002d10:	0002      	movs	r2, r0
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6938      	ldr	r0, [r7, #16]
 8002d1c:	6979      	ldr	r1, [r7, #20]
 8002d1e:	f7fd fcdd 	bl	80006dc <__aeabi_dadd>
 8002d22:	0002      	movs	r2, r0
 8002d24:	000b      	movs	r3, r1
 8002d26:	0010      	movs	r0, r2
 8002d28:	0019      	movs	r1, r3
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <compensate_temperature+0x188>)
 8002d2e:	f7fe f811 	bl	8000d54 <__aeabi_ddiv>
 8002d32:	0002      	movs	r2, r0
 8002d34:	000b      	movs	r3, r1
 8002d36:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (temperature < temperature_min)
 8002d3a:	6a3a      	ldr	r2, [r7, #32]
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d42:	f7fd fb89 	bl	8000458 <__aeabi_dcmplt>
 8002d46:	1e03      	subs	r3, r0, #0
 8002d48:	d004      	beq.n	8002d54 <compensate_temperature+0x14c>
    {
        temperature = temperature_min;
 8002d4a:	6a3a      	ldr	r2, [r7, #32]
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d52:	e00b      	b.n	8002d6c <compensate_temperature+0x164>
    }
    else if (temperature > temperature_max)
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d5c:	f7fd fb90 	bl	8000480 <__aeabi_dcmpgt>
 8002d60:	1e03      	subs	r3, r0, #0
 8002d62:	d003      	beq.n	8002d6c <compensate_temperature+0x164>
    {
        temperature = temperature_max;
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    return temperature;
 8002d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002d70:	0010      	movs	r0, r2
 8002d72:	0019      	movs	r1, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b00c      	add	sp, #48	; 0x30
 8002d78:	bdb0      	pop	{r4, r5, r7, pc}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	c0440000 	.word	0xc0440000
 8002d80:	40554000 	.word	0x40554000
 8002d84:	40d00000 	.word	0x40d00000
 8002d88:	40900000 	.word	0x40900000
 8002d8c:	40c00000 	.word	0x40c00000
 8002d90:	40b40000 	.word	0x40b40000

08002d94 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b094      	sub	sp, #80	; 0x50
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2300      	movs	r3, #0
 8002da2:	643a      	str	r2, [r7, #64]	; 0x40
 8002da4:	647b      	str	r3, [r7, #68]	; 0x44
    double humidity_max = 100.0;
 8002da6:	2200      	movs	r2, #0
 8002da8:	4b79      	ldr	r3, [pc, #484]	; (8002f90 <compensate_humidity+0x1fc>)
 8002daa:	63ba      	str	r2, [r7, #56]	; 0x38
 8002dac:	63fb      	str	r3, [r7, #60]	; 0x3c
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	0018      	movs	r0, r3
 8002db4:	f7ff fa22 	bl	80021fc <__aeabi_i2d>
 8002db8:	2200      	movs	r2, #0
 8002dba:	4b76      	ldr	r3, [pc, #472]	; (8002f94 <compensate_humidity+0x200>)
 8002dbc:	f7fe fe38 	bl	8001a30 <__aeabi_dsub>
 8002dc0:	0002      	movs	r2, r0
 8002dc2:	000b      	movs	r3, r1
 8002dc4:	633a      	str	r2, [r7, #48]	; 0x30
 8002dc6:	637b      	str	r3, [r7, #52]	; 0x34
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	221e      	movs	r2, #30
 8002dcc:	5e9b      	ldrsh	r3, [r3, r2]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f7ff fa14 	bl	80021fc <__aeabi_i2d>
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	4b70      	ldr	r3, [pc, #448]	; (8002f98 <compensate_humidity+0x204>)
 8002dd8:	f7fe fbbe 	bl	8001558 <__aeabi_dmul>
 8002ddc:	0002      	movs	r2, r0
 8002dde:	000b      	movs	r3, r1
 8002de0:	0014      	movs	r4, r2
 8002de2:	001d      	movs	r5, r3
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2220      	movs	r2, #32
 8002de8:	5e9b      	ldrsh	r3, [r3, r2]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f7ff fa06 	bl	80021fc <__aeabi_i2d>
 8002df0:	2200      	movs	r2, #0
 8002df2:	4b6a      	ldr	r3, [pc, #424]	; (8002f9c <compensate_humidity+0x208>)
 8002df4:	f7fd ffae 	bl	8000d54 <__aeabi_ddiv>
 8002df8:	0002      	movs	r2, r0
 8002dfa:	000b      	movs	r3, r1
 8002dfc:	0010      	movs	r0, r2
 8002dfe:	0019      	movs	r1, r3
 8002e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e04:	f7fe fba8 	bl	8001558 <__aeabi_dmul>
 8002e08:	0002      	movs	r2, r0
 8002e0a:	000b      	movs	r3, r1
 8002e0c:	0020      	movs	r0, r4
 8002e0e:	0029      	movs	r1, r5
 8002e10:	f7fd fc64 	bl	80006dc <__aeabi_dadd>
 8002e14:	0002      	movs	r2, r0
 8002e16:	000b      	movs	r3, r1
 8002e18:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    var3 = uncomp_data->humidity - var2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	0018      	movs	r0, r3
 8002e22:	f7ff fa1b 	bl	800225c <__aeabi_ui2d>
 8002e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2a:	f7fe fe01 	bl	8001a30 <__aeabi_dsub>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	000b      	movs	r3, r1
 8002e32:	623a      	str	r2, [r7, #32]
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	221a      	movs	r2, #26
 8002e3a:	5e9b      	ldrsh	r3, [r3, r2]
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f7ff f9dd 	bl	80021fc <__aeabi_i2d>
 8002e42:	2200      	movs	r2, #0
 8002e44:	4b56      	ldr	r3, [pc, #344]	; (8002fa0 <compensate_humidity+0x20c>)
 8002e46:	f7fd ff85 	bl	8000d54 <__aeabi_ddiv>
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	000b      	movs	r3, r1
 8002e4e:	61ba      	str	r2, [r7, #24]
 8002e50:	61fb      	str	r3, [r7, #28]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	7f1b      	ldrb	r3, [r3, #28]
 8002e56:	0018      	movs	r0, r3
 8002e58:	f7ff fa00 	bl	800225c <__aeabi_ui2d>
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	4b51      	ldr	r3, [pc, #324]	; (8002fa4 <compensate_humidity+0x210>)
 8002e60:	f7fd ff78 	bl	8000d54 <__aeabi_ddiv>
 8002e64:	0002      	movs	r2, r0
 8002e66:	000b      	movs	r3, r1
 8002e68:	0010      	movs	r0, r2
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e70:	f7fe fb72 	bl	8001558 <__aeabi_dmul>
 8002e74:	0002      	movs	r2, r0
 8002e76:	000b      	movs	r3, r1
 8002e78:	0010      	movs	r0, r2
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	4b4a      	ldr	r3, [pc, #296]	; (8002fa8 <compensate_humidity+0x214>)
 8002e80:	f7fd fc2c 	bl	80006dc <__aeabi_dadd>
 8002e84:	0002      	movs	r2, r0
 8002e86:	000b      	movs	r3, r1
 8002e88:	613a      	str	r2, [r7, #16]
 8002e8a:	617b      	str	r3, [r7, #20]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2222      	movs	r2, #34	; 0x22
 8002e90:	569b      	ldrsb	r3, [r3, r2]
 8002e92:	0018      	movs	r0, r3
 8002e94:	f7ff f9b2 	bl	80021fc <__aeabi_i2d>
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4b42      	ldr	r3, [pc, #264]	; (8002fa4 <compensate_humidity+0x210>)
 8002e9c:	f7fd ff5a 	bl	8000d54 <__aeabi_ddiv>
 8002ea0:	0002      	movs	r2, r0
 8002ea2:	000b      	movs	r3, r1
 8002ea4:	0010      	movs	r0, r2
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eac:	f7fe fb54 	bl	8001558 <__aeabi_dmul>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	000b      	movs	r3, r1
 8002eb4:	0010      	movs	r0, r2
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f7fe fb4c 	bl	8001558 <__aeabi_dmul>
 8002ec0:	0002      	movs	r2, r0
 8002ec2:	000b      	movs	r3, r1
 8002ec4:	0010      	movs	r0, r2
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	2200      	movs	r2, #0
 8002eca:	4b37      	ldr	r3, [pc, #220]	; (8002fa8 <compensate_humidity+0x214>)
 8002ecc:	f7fd fc06 	bl	80006dc <__aeabi_dadd>
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	000b      	movs	r3, r1
 8002ed4:	60ba      	str	r2, [r7, #8]
 8002ed6:	60fb      	str	r3, [r7, #12]
    var6 = var3 * var4 * (var5 * var6);
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	6a38      	ldr	r0, [r7, #32]
 8002ede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ee0:	f7fe fb3a 	bl	8001558 <__aeabi_dmul>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	000b      	movs	r3, r1
 8002ee8:	0014      	movs	r4, r2
 8002eea:	001d      	movs	r5, r3
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6938      	ldr	r0, [r7, #16]
 8002ef2:	6979      	ldr	r1, [r7, #20]
 8002ef4:	f7fe fb30 	bl	8001558 <__aeabi_dmul>
 8002ef8:	0002      	movs	r2, r0
 8002efa:	000b      	movs	r3, r1
 8002efc:	0020      	movs	r0, r4
 8002efe:	0029      	movs	r1, r5
 8002f00:	f7fe fb2a 	bl	8001558 <__aeabi_dmul>
 8002f04:	0002      	movs	r2, r0
 8002f06:	000b      	movs	r3, r1
 8002f08:	60ba      	str	r2, [r7, #8]
 8002f0a:	60fb      	str	r3, [r7, #12]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	7e1b      	ldrb	r3, [r3, #24]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7ff f9a3 	bl	800225c <__aeabi_ui2d>
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f7fe fb1d 	bl	8001558 <__aeabi_dmul>
 8002f1e:	0002      	movs	r2, r0
 8002f20:	000b      	movs	r3, r1
 8002f22:	0010      	movs	r0, r2
 8002f24:	0019      	movs	r1, r3
 8002f26:	2200      	movs	r2, #0
 8002f28:	4b20      	ldr	r3, [pc, #128]	; (8002fac <compensate_humidity+0x218>)
 8002f2a:	f7fd ff13 	bl	8000d54 <__aeabi_ddiv>
 8002f2e:	0002      	movs	r2, r0
 8002f30:	000b      	movs	r3, r1
 8002f32:	2000      	movs	r0, #0
 8002f34:	491c      	ldr	r1, [pc, #112]	; (8002fa8 <compensate_humidity+0x214>)
 8002f36:	f7fe fd7b 	bl	8001a30 <__aeabi_dsub>
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	000b      	movs	r3, r1
 8002f3e:	68b8      	ldr	r0, [r7, #8]
 8002f40:	68f9      	ldr	r1, [r7, #12]
 8002f42:	f7fe fb09 	bl	8001558 <__aeabi_dmul>
 8002f46:	0002      	movs	r2, r0
 8002f48:	000b      	movs	r3, r1
 8002f4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f4c:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (humidity > humidity_max)
 8002f4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f52:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002f54:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002f56:	f7fd fa93 	bl	8000480 <__aeabi_dcmpgt>
 8002f5a:	1e03      	subs	r3, r0, #0
 8002f5c:	d004      	beq.n	8002f68 <compensate_humidity+0x1d4>
    {
        humidity = humidity_max;
 8002f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f62:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f66:	e00b      	b.n	8002f80 <compensate_humidity+0x1ec>
    }
    else if (humidity < humidity_min)
 8002f68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f6c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002f6e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002f70:	f7fd fa72 	bl	8000458 <__aeabi_dcmplt>
 8002f74:	1e03      	subs	r3, r0, #0
 8002f76:	d003      	beq.n	8002f80 <compensate_humidity+0x1ec>
    {
        humidity = humidity_min;
 8002f78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f7c:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    return humidity;
 8002f80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8002f84:	0010      	movs	r0, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b014      	add	sp, #80	; 0x50
 8002f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	40590000 	.word	0x40590000
 8002f94:	40f2c000 	.word	0x40f2c000
 8002f98:	40500000 	.word	0x40500000
 8002f9c:	40d00000 	.word	0x40d00000
 8002fa0:	40f00000 	.word	0x40f00000
 8002fa4:	41900000 	.word	0x41900000
 8002fa8:	3ff00000 	.word	0x3ff00000
 8002fac:	41200000 	.word	0x41200000

08002fb0 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb2:	b08b      	sub	sp, #44	; 0x2c
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8002fb8:	2627      	movs	r6, #39	; 0x27
 8002fba:	19bb      	adds	r3, r7, r6
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002fc0:	2526      	movs	r5, #38	; 0x26
 8002fc2:	197b      	adds	r3, r7, r5
 8002fc4:	2288      	movs	r2, #136	; 0x88
 8002fc6:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8002fc8:	240c      	movs	r4, #12
 8002fca:	193b      	adds	r3, r7, r4
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	2216      	movs	r2, #22
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f004 fe7b 	bl	8007cd2 <memset>

    /* Read the calibration data from the sensor */
    BME280_SPI_Read(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN);
 8002fdc:	197b      	adds	r3, r7, r5
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	1939      	adds	r1, r7, r4
 8002fe2:	221a      	movs	r2, #26
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f000 fcb9 	bl	800395c <BME280_SPI_Read>
    //if (rslt == BME280_OK)
    //{
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	193b      	adds	r3, r7, r4
 8002fee:	0011      	movs	r1, r2
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f000 f84f 	bl	8003094 <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8002ff6:	197b      	adds	r3, r7, r5
 8002ff8:	22e1      	movs	r2, #225	; 0xe1
 8002ffa:	701a      	strb	r2, [r3, #0]

        /* Read the humidity calibration data from the sensor */
        BME280_SPI_Read(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN);
 8002ffc:	197b      	adds	r3, r7, r5
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	1939      	adds	r1, r7, r4
 8003002:	2207      	movs	r2, #7
 8003004:	0018      	movs	r0, r3
 8003006:	f000 fca9 	bl	800395c <BME280_SPI_Read>
        //if (rslt == BME280_OK)
        //{
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	193b      	adds	r3, r7, r4
 800300e:	0011      	movs	r1, r2
 8003010:	0018      	movs	r0, r3
 8003012:	f000 f8eb 	bl	80031ec <parse_humidity_calib_data>
        //}
    //}

    return rslt;
 8003016:	19bb      	adds	r3, r7, r6
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	b25b      	sxtb	r3, r3
}
 800301c:	0018      	movs	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	b00b      	add	sp, #44	; 0x2c
 8003022:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003024 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	001a      	movs	r2, r3
 8003032:	1cfb      	adds	r3, r7, #3
 8003034:	701a      	strb	r2, [r3, #0]
    uint8_t index;

    for (index = 1; index < len; index++)
 8003036:	2317      	movs	r3, #23
 8003038:	18fb      	adds	r3, r7, r3
 800303a:	2201      	movs	r2, #1
 800303c:	701a      	strb	r2, [r3, #0]
 800303e:	e01d      	b.n	800307c <interleave_reg_addr+0x58>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8003040:	2017      	movs	r0, #23
 8003042:	183b      	adds	r3, r7, r0
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	18d2      	adds	r2, r2, r3
 800304a:	183b      	adds	r3, r7, r0
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	3b01      	subs	r3, #1
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	18cb      	adds	r3, r1, r3
 8003056:	7812      	ldrb	r2, [r2, #0]
 8003058:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800305a:	183b      	adds	r3, r7, r0
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	18d2      	adds	r2, r2, r3
 8003062:	183b      	adds	r3, r7, r0
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	0019      	movs	r1, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	185b      	adds	r3, r3, r1
 800306e:	7812      	ldrb	r2, [r2, #0]
 8003070:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8003072:	183b      	adds	r3, r7, r0
 8003074:	781a      	ldrb	r2, [r3, #0]
 8003076:	183b      	adds	r3, r7, r0
 8003078:	3201      	adds	r2, #1
 800307a:	701a      	strb	r2, [r3, #0]
 800307c:	2317      	movs	r3, #23
 800307e:	18fa      	adds	r2, r7, r3
 8003080:	1cfb      	adds	r3, r7, #3
 8003082:	7812      	ldrb	r2, [r2, #0]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d3da      	bcc.n	8003040 <interleave_reg_addr+0x1c>
    }
}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b006      	add	sp, #24
 8003092:	bd80      	pop	{r7, pc}

08003094 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3301      	adds	r3, #1
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	b21a      	sxth	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	b21b      	sxth	r3, r3
 80030b2:	4313      	orrs	r3, r2
 80030b4:	b21b      	sxth	r3, r3
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3303      	adds	r3, #3
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	b21a      	sxth	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3302      	adds	r3, #2
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b21b      	sxth	r3, r3
 80030ce:	4313      	orrs	r3, r2
 80030d0:	b21a      	sxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3305      	adds	r3, #5
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	b21a      	sxth	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3304      	adds	r3, #4
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b21b      	sxth	r3, r3
 80030e8:	4313      	orrs	r3, r2
 80030ea:	b21a      	sxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3307      	adds	r3, #7
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	b21a      	sxth	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3306      	adds	r3, #6
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	b21b      	sxth	r3, r3
 8003102:	4313      	orrs	r3, r2
 8003104:	b21b      	sxth	r3, r3
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3309      	adds	r3, #9
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	b21a      	sxth	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3308      	adds	r3, #8
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	b21b      	sxth	r3, r3
 800311e:	4313      	orrs	r3, r2
 8003120:	b21a      	sxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	330b      	adds	r3, #11
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	b21a      	sxth	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	330a      	adds	r3, #10
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	b21b      	sxth	r3, r3
 8003138:	4313      	orrs	r3, r2
 800313a:	b21a      	sxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	330d      	adds	r3, #13
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	b21a      	sxth	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	330c      	adds	r3, #12
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	b21b      	sxth	r3, r3
 8003152:	4313      	orrs	r3, r2
 8003154:	b21a      	sxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	330f      	adds	r3, #15
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	b21a      	sxth	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	330e      	adds	r3, #14
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	b21b      	sxth	r3, r3
 800316c:	4313      	orrs	r3, r2
 800316e:	b21a      	sxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3311      	adds	r3, #17
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	b21a      	sxth	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3310      	adds	r3, #16
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	b21b      	sxth	r3, r3
 8003186:	4313      	orrs	r3, r2
 8003188:	b21a      	sxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3313      	adds	r3, #19
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	b21a      	sxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3312      	adds	r3, #18
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	b21b      	sxth	r3, r3
 80031a0:	4313      	orrs	r3, r2
 80031a2:	b21a      	sxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3315      	adds	r3, #21
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	b21a      	sxth	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3314      	adds	r3, #20
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	b21b      	sxth	r3, r3
 80031ba:	4313      	orrs	r3, r2
 80031bc:	b21a      	sxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3317      	adds	r3, #23
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	b21a      	sxth	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3316      	adds	r3, #22
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	b21b      	sxth	r3, r3
 80031d4:	4313      	orrs	r3, r2
 80031d6:	b21a      	sxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	7e5a      	ldrb	r2, [r3, #25]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	761a      	strb	r2, [r3, #24]
}
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b004      	add	sp, #16
 80031ea:	bd80      	pop	{r7, pc}

080031ec <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80031ec:	b590      	push	{r4, r7, lr}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3301      	adds	r3, #1
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	b21a      	sxth	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	b21b      	sxth	r3, r3
 800320a:	4313      	orrs	r3, r2
 800320c:	b21a      	sxth	r2, r3
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	789a      	ldrb	r2, [r3, #2]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3303      	adds	r3, #3
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	b25b      	sxtb	r3, r3
 8003222:	b29b      	uxth	r3, r3
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	b29a      	uxth	r2, r3
 8003228:	2012      	movs	r0, #18
 800322a:	183b      	adds	r3, r7, r0
 800322c:	801a      	strh	r2, [r3, #0]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3304      	adds	r3, #4
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	b21a      	sxth	r2, r3
 8003236:	2410      	movs	r4, #16
 8003238:	193b      	adds	r3, r7, r4
 800323a:	210f      	movs	r1, #15
 800323c:	400a      	ands	r2, r1
 800323e:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 8003240:	183a      	adds	r2, r7, r0
 8003242:	193b      	adds	r3, r7, r4
 8003244:	8812      	ldrh	r2, [r2, #0]
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	4313      	orrs	r3, r2
 800324a:	b21a      	sxth	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3305      	adds	r3, #5
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	b25b      	sxtb	r3, r3
 8003258:	b29b      	uxth	r3, r3
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	b29a      	uxth	r2, r3
 800325e:	210e      	movs	r1, #14
 8003260:	187b      	adds	r3, r7, r1
 8003262:	801a      	strh	r2, [r3, #0]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3304      	adds	r3, #4
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	b2da      	uxtb	r2, r3
 800326e:	200c      	movs	r0, #12
 8003270:	183b      	adds	r3, r7, r0
 8003272:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 8003274:	187a      	adds	r2, r7, r1
 8003276:	183b      	adds	r3, r7, r0
 8003278:	8812      	ldrh	r2, [r2, #0]
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	4313      	orrs	r3, r2
 800327e:	b21a      	sxth	r2, r3
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3306      	adds	r3, #6
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	b259      	sxtb	r1, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2222      	movs	r2, #34	; 0x22
 8003290:	5499      	strb	r1, [r3, r2]
}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	46bd      	mov	sp, r7
 8003296:	b007      	add	sp, #28
 8003298:	bd90      	pop	{r4, r7, pc}

0800329a <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	0002      	movs	r2, r0
 80032a2:	1dfb      	adds	r3, r7, #7
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	1dbb      	adds	r3, r7, #6
 80032a8:	1c0a      	adds	r2, r1, #0
 80032aa:	701a      	strb	r2, [r3, #0]
    uint8_t settings_changed = FALSE;
 80032ac:	210f      	movs	r1, #15
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	2200      	movs	r2, #0
 80032b2:	701a      	strb	r2, [r3, #0]

    if (sub_settings & desired_settings)
 80032b4:	1dfb      	adds	r3, r7, #7
 80032b6:	1dba      	adds	r2, r7, #6
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	7812      	ldrb	r2, [r2, #0]
 80032bc:	4013      	ands	r3, r2
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <are_settings_changed+0x32>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 80032c4:	187b      	adds	r3, r7, r1
 80032c6:	2201      	movs	r2, #1
 80032c8:	701a      	strb	r2, [r3, #0]
 80032ca:	e003      	b.n	80032d4 <are_settings_changed+0x3a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 80032cc:	230f      	movs	r3, #15
 80032ce:	18fb      	adds	r3, r7, r3
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
    }

    return settings_changed;
 80032d4:	230f      	movs	r3, #15
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	781b      	ldrb	r3, [r3, #0]
}
 80032da:	0018      	movs	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	b004      	add	sp, #16
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032e4:	b5b0      	push	{r4, r5, r7, lr}
 80032e6:	b090      	sub	sp, #64	; 0x40
 80032e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032ea:	f000 febd 	bl	8004068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032ee:	f000 f91b 	bl	8003528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032f2:	f000 faab 	bl	800384c <MX_GPIO_Init>
  MX_DMA_Init();
 80032f6:	f000 fa8b 	bl	8003810 <MX_DMA_Init>
  MX_ADC_Init();
 80032fa:	f000 f983 	bl	8003604 <MX_ADC_Init>
  MX_USART1_UART_Init();
 80032fe:	f000 fa53 	bl	80037a8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8003302:	f000 fa19 	bl	8003738 <MX_SPI1_Init>
  MX_RTC_Init();
 8003306:	f000 f9e3 	bl	80036d0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(800);
 800330a:	23c8      	movs	r3, #200	; 0xc8
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	0018      	movs	r0, r3
 8003310:	f000 ff1a 	bl	8004148 <HAL_Delay>
  HAL_ADC_Start_DMA(&hadc, adc_buffer,32);
 8003314:	4977      	ldr	r1, [pc, #476]	; (80034f4 <main+0x210>)
 8003316:	4b78      	ldr	r3, [pc, #480]	; (80034f8 <main+0x214>)
 8003318:	2220      	movs	r2, #32
 800331a:	0018      	movs	r0, r3
 800331c:	f001 f8c8 	bl	80044b0 <HAL_ADC_Start_DMA>
  //HAL_UART_Receive_IT(&huart1,  received_byte,2);

  //HAL_UART_IRQHandler(&huart1);
  HAL_Delay(800);
 8003320:	23c8      	movs	r3, #200	; 0xc8
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	0018      	movs	r0, r3
 8003326:	f000 ff0f 	bl	8004148 <HAL_Delay>
 // printf("Test UART\r\n");
 // SendMSG("\n");
  int8_t rslt_bme = bme280_init(&dev);
 800332a:	253f      	movs	r5, #63	; 0x3f
 800332c:	197c      	adds	r4, r7, r5
 800332e:	4b73      	ldr	r3, [pc, #460]	; (80034fc <main+0x218>)
 8003330:	0018      	movs	r0, r3
 8003332:	f7fe ffe3 	bl	80022fc <bme280_init>
 8003336:	0003      	movs	r3, r0
 8003338:	7023      	strb	r3, [r4, #0]
  if (rslt_bme != BME280_OK)
 800333a:	197b      	adds	r3, r7, r5
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	b25b      	sxtb	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d000      	beq.n	8003346 <main+0x62>
  {
	  while(1);
 8003344:	e7fe      	b.n	8003344 <main+0x60>
  }
  HAL_Delay(100);
 8003346:	2064      	movs	r0, #100	; 0x64
 8003348:	f000 fefe 	bl	8004148 <HAL_Delay>
  uint8_t rslt_bma = BMA456_Check_Connection();
 800334c:	253e      	movs	r5, #62	; 0x3e
 800334e:	197c      	adds	r4, r7, r5
 8003350:	f000 fba2 	bl	8003a98 <BMA456_Check_Connection>
 8003354:	0003      	movs	r3, r0
 8003356:	7023      	strb	r3, [r4, #0]
  if(rslt_bma != 1)
 8003358:	197b      	adds	r3, r7, r5
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d000      	beq.n	8003362 <main+0x7e>
  {
	  while(1);
 8003360:	e7fe      	b.n	8003360 <main+0x7c>
  }
  HAL_Delay(100);
 8003362:	2064      	movs	r0, #100	; 0x64
 8003364:	f000 fef0 	bl	8004148 <HAL_Delay>
  stream_sensor_data_normal_mode(&dev);
 8003368:	4b64      	ldr	r3, [pc, #400]	; (80034fc <main+0x218>)
 800336a:	0018      	movs	r0, r3
 800336c:	f000 fb5e 	bl	8003a2c <stream_sensor_data_normal_mode>
  BMA456_Init();
 8003370:	f000 fbc6 	bl	8003b00 <BMA456_Init>
//
//
//  printf("Kuniec \r\n");
  //SendMSG("AT+LSCN, 500"); //start scanowania do vsp z limitem 500 sekund

  HAL_Delay(800);
 8003374:	23c8      	movs	r3, #200	; 0xc8
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	0018      	movs	r0, r3
 800337a:	f000 fee5 	bl	8004148 <HAL_Delay>
//	  }
//
//	  for(int i=strlen(Sum_s[1]); i<=3; i++){
//		  Sum_s[1][i]=' ';
//	  }
	  char TempCala[20] = "Temperatura: ";
 800337e:	2314      	movs	r3, #20
 8003380:	18f9      	adds	r1, r7, r3
 8003382:	4a5f      	ldr	r2, [pc, #380]	; (8003500 <main+0x21c>)
 8003384:	000b      	movs	r3, r1
 8003386:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003388:	c331      	stmia	r3!, {r0, r4, r5}
 800338a:	8812      	ldrh	r2, [r2, #0]
 800338c:	801a      	strh	r2, [r3, #0]
 800338e:	230e      	movs	r3, #14
 8003390:	18cb      	adds	r3, r1, r3
 8003392:	2206      	movs	r2, #6
 8003394:	2100      	movs	r1, #0
 8003396:	0018      	movs	r0, r3
 8003398:	f004 fc9b 	bl	8007cd2 <memset>
	  char HumCala[20] = "Wilgotnosc: ";
 800339c:	0039      	movs	r1, r7
 800339e:	4a59      	ldr	r2, [pc, #356]	; (8003504 <main+0x220>)
 80033a0:	000b      	movs	r3, r1
 80033a2:	ca31      	ldmia	r2!, {r0, r4, r5}
 80033a4:	c331      	stmia	r3!, {r0, r4, r5}
 80033a6:	7812      	ldrb	r2, [r2, #0]
 80033a8:	701a      	strb	r2, [r3, #0]
 80033aa:	230d      	movs	r3, #13
 80033ac:	18cb      	adds	r3, r1, r3
 80033ae:	2207      	movs	r2, #7
 80033b0:	2100      	movs	r1, #0
 80033b2:	0018      	movs	r0, r3
 80033b4:	f004 fc8d 	bl	8007cd2 <memset>
	  bme280_get_sensor_data(BME280_HUM, &comp_data,&dev);
 80033b8:	4a50      	ldr	r2, [pc, #320]	; (80034fc <main+0x218>)
 80033ba:	4b53      	ldr	r3, [pc, #332]	; (8003508 <main+0x224>)
 80033bc:	0019      	movs	r1, r3
 80033be:	2004      	movs	r0, #4
 80033c0:	f7ff f94a 	bl	8002658 <bme280_get_sensor_data>
	  sprintf(Temp, "%f",comp_data.temperature);
 80033c4:	4b50      	ldr	r3, [pc, #320]	; (8003508 <main+0x224>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	4950      	ldr	r1, [pc, #320]	; (800350c <main+0x228>)
 80033cc:	2034      	movs	r0, #52	; 0x34
 80033ce:	1838      	adds	r0, r7, r0
 80033d0:	f005 f8f6 	bl	80085c0 <siprintf>
	  sprintf(Hum, "%f",comp_data.humidity);
 80033d4:	4b4c      	ldr	r3, [pc, #304]	; (8003508 <main+0x224>)
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	494c      	ldr	r1, [pc, #304]	; (800350c <main+0x228>)
 80033dc:	2028      	movs	r0, #40	; 0x28
 80033de:	1838      	adds	r0, r7, r0
 80033e0:	f005 f8ee 	bl	80085c0 <siprintf>
	  HAL_Delay(1000);
 80033e4:	23fa      	movs	r3, #250	; 0xfa
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	0018      	movs	r0, r3
 80033ea:	f000 fead 	bl	8004148 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80033ee:	23a0      	movs	r3, #160	; 0xa0
 80033f0:	05db      	lsls	r3, r3, #23
 80033f2:	2201      	movs	r2, #1
 80033f4:	2102      	movs	r1, #2
 80033f6:	0018      	movs	r0, r3
 80033f8:	f001 fe84 	bl	8005104 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80033fc:	23fa      	movs	r3, #250	; 0xfa
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	0018      	movs	r0, r3
 8003402:	f000 fea1 	bl	8004148 <HAL_Delay>
	  if(Tensometr(adc_buffer)){
 8003406:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <main+0x210>)
 8003408:	0018      	movs	r0, r3
 800340a:	f000 fa6b 	bl	80038e4 <Tensometr>
 800340e:	1e03      	subs	r3, r0, #0
 8003410:	d007      	beq.n	8003422 <main+0x13e>
		  HAL_UART_Transmit(&huart1,"Lezy\r\n", 6,HAL_MAX_DELAY);;
 8003412:	2301      	movs	r3, #1
 8003414:	425b      	negs	r3, r3
 8003416:	493e      	ldr	r1, [pc, #248]	; (8003510 <main+0x22c>)
 8003418:	483e      	ldr	r0, [pc, #248]	; (8003514 <main+0x230>)
 800341a:	2206      	movs	r2, #6
 800341c:	f003 fed8 	bl	80071d0 <HAL_UART_Transmit>
 8003420:	e006      	b.n	8003430 <main+0x14c>
	  }
	  else{
		  HAL_UART_Transmit(&huart1,"Nie lezy\r\n", 10,HAL_MAX_DELAY);
 8003422:	2301      	movs	r3, #1
 8003424:	425b      	negs	r3, r3
 8003426:	493c      	ldr	r1, [pc, #240]	; (8003518 <main+0x234>)
 8003428:	483a      	ldr	r0, [pc, #232]	; (8003514 <main+0x230>)
 800342a:	220a      	movs	r2, #10
 800342c:	f003 fed0 	bl	80071d0 <HAL_UART_Transmit>
	  }
	  HAL_Delay(2000);
 8003430:	23fa      	movs	r3, #250	; 0xfa
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	0018      	movs	r0, r3
 8003436:	f000 fe87 	bl	8004148 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800343a:	23a0      	movs	r3, #160	; 0xa0
 800343c:	05db      	lsls	r3, r3, #23
 800343e:	2200      	movs	r2, #0
 8003440:	2102      	movs	r1, #2
 8003442:	0018      	movs	r0, r3
 8003444:	f001 fe5e 	bl	8005104 <HAL_GPIO_WritePin>

//	  HAL_UART_Transmit(&huart1,temp,4,HAL_MAX_DELAY);
//	  HAL_UART_Transmit(&huart1,hum,4,HAL_MAX_DELAY);
	  strncat(TempCala,Temp,4);
 8003448:	2334      	movs	r3, #52	; 0x34
 800344a:	18f9      	adds	r1, r7, r3
 800344c:	2414      	movs	r4, #20
 800344e:	193b      	adds	r3, r7, r4
 8003450:	2204      	movs	r2, #4
 8003452:	0018      	movs	r0, r3
 8003454:	f005 f8d4 	bl	8008600 <strncat>
	  strncat(HumCala,Hum,4);
 8003458:	2328      	movs	r3, #40	; 0x28
 800345a:	18f9      	adds	r1, r7, r3
 800345c:	003b      	movs	r3, r7
 800345e:	2204      	movs	r2, #4
 8003460:	0018      	movs	r0, r3
 8003462:	f005 f8cd 	bl	8008600 <strncat>
	  strcat(TempCala,"\r\n");
 8003466:	193b      	adds	r3, r7, r4
 8003468:	0018      	movs	r0, r3
 800346a:	f7fc fe4d 	bl	8000108 <strlen>
 800346e:	0003      	movs	r3, r0
 8003470:	001a      	movs	r2, r3
 8003472:	193b      	adds	r3, r7, r4
 8003474:	189a      	adds	r2, r3, r2
 8003476:	4b29      	ldr	r3, [pc, #164]	; (800351c <main+0x238>)
 8003478:	0010      	movs	r0, r2
 800347a:	0019      	movs	r1, r3
 800347c:	2303      	movs	r3, #3
 800347e:	001a      	movs	r2, r3
 8003480:	f004 fc1e 	bl	8007cc0 <memcpy>
	  strcat(HumCala,"\r\n");
 8003484:	003b      	movs	r3, r7
 8003486:	0018      	movs	r0, r3
 8003488:	f7fc fe3e 	bl	8000108 <strlen>
 800348c:	0003      	movs	r3, r0
 800348e:	001a      	movs	r2, r3
 8003490:	003b      	movs	r3, r7
 8003492:	189a      	adds	r2, r3, r2
 8003494:	4b21      	ldr	r3, [pc, #132]	; (800351c <main+0x238>)
 8003496:	0010      	movs	r0, r2
 8003498:	0019      	movs	r1, r3
 800349a:	2303      	movs	r3, #3
 800349c:	001a      	movs	r2, r3
 800349e:	f004 fc0f 	bl	8007cc0 <memcpy>
	  HAL_UART_Transmit(&huart1,TempCala,19,HAL_MAX_DELAY);
 80034a2:	2301      	movs	r3, #1
 80034a4:	425b      	negs	r3, r3
 80034a6:	1939      	adds	r1, r7, r4
 80034a8:	481a      	ldr	r0, [pc, #104]	; (8003514 <main+0x230>)
 80034aa:	2213      	movs	r2, #19
 80034ac:	f003 fe90 	bl	80071d0 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,HumCala,18,HAL_MAX_DELAY);
 80034b0:	2301      	movs	r3, #1
 80034b2:	425b      	negs	r3, r3
 80034b4:	0039      	movs	r1, r7
 80034b6:	4817      	ldr	r0, [pc, #92]	; (8003514 <main+0x230>)
 80034b8:	2212      	movs	r2, #18
 80034ba:	f003 fe89 	bl	80071d0 <HAL_UART_Transmit>
	    HAL_SuspendTick();
 80034be:	f000 fe67 	bl	8004190 <HAL_SuspendTick>

	  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x5A56, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80034c2:	4917      	ldr	r1, [pc, #92]	; (8003520 <main+0x23c>)
 80034c4:	4b17      	ldr	r3, [pc, #92]	; (8003524 <main+0x240>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	0018      	movs	r0, r3
 80034ca:	f002 fe8f 	bl	80061ec <HAL_RTCEx_SetWakeUpTimer_IT>


	  	 // HAL_PWREx_EnableLowPowerRunMode();
	  	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80034ce:	2101      	movs	r1, #1
 80034d0:	2001      	movs	r0, #1
 80034d2:	f001 fe35 	bl	8005140 <HAL_PWR_EnterSTOPMode>
	    //HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
	    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80034d6:	4b13      	ldr	r3, [pc, #76]	; (8003524 <main+0x240>)
 80034d8:	0018      	movs	r0, r3
 80034da:	f002 ff5f 	bl	800639c <HAL_RTCEx_DeactivateWakeUpTimer>
	    SystemClock_Config();
 80034de:	f000 f823 	bl	8003528 <SystemClock_Config>
	    HAL_ResumeTick();
 80034e2:	f000 fe63 	bl	80041ac <HAL_ResumeTick>
	    HAL_Delay(2000);
 80034e6:	23fa      	movs	r3, #250	; 0xfa
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	0018      	movs	r0, r3
 80034ec:	f000 fe2c 	bl	8004148 <HAL_Delay>
  {
 80034f0:	e745      	b.n	800337e <main+0x9a>
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	200003a4 	.word	0x200003a4
 80034f8:	200001fc 	.word	0x200001fc
 80034fc:	200003e4 	.word	0x200003e4
 8003500:	0800ac64 	.word	0x0800ac64
 8003504:	0800ac78 	.word	0x0800ac78
 8003508:	20000418 	.word	0x20000418
 800350c:	0800ac48 	.word	0x0800ac48
 8003510:	0800ac4c 	.word	0x0800ac4c
 8003514:	2000031c 	.word	0x2000031c
 8003518:	0800ac54 	.word	0x0800ac54
 800351c:	0800ac60 	.word	0x0800ac60
 8003520:	00005a56 	.word	0x00005a56
 8003524:	200002a0 	.word	0x200002a0

08003528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003528:	b590      	push	{r4, r7, lr}
 800352a:	b09b      	sub	sp, #108	; 0x6c
 800352c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800352e:	2434      	movs	r4, #52	; 0x34
 8003530:	193b      	adds	r3, r7, r4
 8003532:	0018      	movs	r0, r3
 8003534:	2334      	movs	r3, #52	; 0x34
 8003536:	001a      	movs	r2, r3
 8003538:	2100      	movs	r1, #0
 800353a:	f004 fbca 	bl	8007cd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800353e:	2320      	movs	r3, #32
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	0018      	movs	r0, r3
 8003544:	2314      	movs	r3, #20
 8003546:	001a      	movs	r2, r3
 8003548:	2100      	movs	r1, #0
 800354a:	f004 fbc2 	bl	8007cd2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800354e:	1d3b      	adds	r3, r7, #4
 8003550:	0018      	movs	r0, r3
 8003552:	231c      	movs	r3, #28
 8003554:	001a      	movs	r2, r3
 8003556:	2100      	movs	r1, #0
 8003558:	f004 fbbb 	bl	8007cd2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800355c:	4b27      	ldr	r3, [pc, #156]	; (80035fc <SystemClock_Config+0xd4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a27      	ldr	r2, [pc, #156]	; (8003600 <SystemClock_Config+0xd8>)
 8003562:	401a      	ands	r2, r3
 8003564:	4b25      	ldr	r3, [pc, #148]	; (80035fc <SystemClock_Config+0xd4>)
 8003566:	2180      	movs	r1, #128	; 0x80
 8003568:	0109      	lsls	r1, r1, #4
 800356a:	430a      	orrs	r2, r1
 800356c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800356e:	0021      	movs	r1, r4
 8003570:	187b      	adds	r3, r7, r1
 8003572:	220a      	movs	r2, #10
 8003574:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003576:	187b      	adds	r3, r7, r1
 8003578:	2201      	movs	r2, #1
 800357a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800357c:	187b      	adds	r3, r7, r1
 800357e:	2210      	movs	r2, #16
 8003580:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003582:	187b      	adds	r3, r7, r1
 8003584:	2201      	movs	r2, #1
 8003586:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003588:	187b      	adds	r3, r7, r1
 800358a:	2200      	movs	r2, #0
 800358c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800358e:	187b      	adds	r3, r7, r1
 8003590:	0018      	movs	r0, r3
 8003592:	f001 fe31 	bl	80051f8 <HAL_RCC_OscConfig>
 8003596:	1e03      	subs	r3, r0, #0
 8003598:	d001      	beq.n	800359e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800359a:	f000 fb1b 	bl	8003bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800359e:	2120      	movs	r1, #32
 80035a0:	187b      	adds	r3, r7, r1
 80035a2:	220f      	movs	r2, #15
 80035a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80035a6:	187b      	adds	r3, r7, r1
 80035a8:	2201      	movs	r2, #1
 80035aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035ac:	187b      	adds	r3, r7, r1
 80035ae:	2200      	movs	r2, #0
 80035b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035b2:	187b      	adds	r3, r7, r1
 80035b4:	2200      	movs	r2, #0
 80035b6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035b8:	187b      	adds	r3, r7, r1
 80035ba:	2200      	movs	r2, #0
 80035bc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80035be:	187b      	adds	r3, r7, r1
 80035c0:	2100      	movs	r1, #0
 80035c2:	0018      	movs	r0, r3
 80035c4:	f002 f982 	bl	80058cc <HAL_RCC_ClockConfig>
 80035c8:	1e03      	subs	r3, r0, #0
 80035ca:	d001      	beq.n	80035d0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80035cc:	f000 fb02 	bl	8003bd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 80035d0:	1d3b      	adds	r3, r7, #4
 80035d2:	2221      	movs	r2, #33	; 0x21
 80035d4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80035d6:	1d3b      	adds	r3, r7, #4
 80035d8:	2200      	movs	r2, #0
 80035da:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80035dc:	1d3b      	adds	r3, r7, #4
 80035de:	2280      	movs	r2, #128	; 0x80
 80035e0:	0292      	lsls	r2, r2, #10
 80035e2:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035e4:	1d3b      	adds	r3, r7, #4
 80035e6:	0018      	movs	r0, r3
 80035e8:	f002 fb94 	bl	8005d14 <HAL_RCCEx_PeriphCLKConfig>
 80035ec:	1e03      	subs	r3, r0, #0
 80035ee:	d001      	beq.n	80035f4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80035f0:	f000 faf0 	bl	8003bd4 <Error_Handler>
  }
}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b01b      	add	sp, #108	; 0x6c
 80035fa:	bd90      	pop	{r4, r7, pc}
 80035fc:	40007000 	.word	0x40007000
 8003600:	ffffe7ff 	.word	0xffffe7ff

08003604 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800360a:	003b      	movs	r3, r7
 800360c:	0018      	movs	r0, r3
 800360e:	2308      	movs	r3, #8
 8003610:	001a      	movs	r2, r3
 8003612:	2100      	movs	r1, #0
 8003614:	f004 fb5d 	bl	8007cd2 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003618:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <MX_ADC_Init+0xc0>)
 800361a:	4a2b      	ldr	r2, [pc, #172]	; (80036c8 <MX_ADC_Init+0xc4>)
 800361c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800361e:	4b29      	ldr	r3, [pc, #164]	; (80036c4 <MX_ADC_Init+0xc0>)
 8003620:	2200      	movs	r2, #0
 8003622:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8003624:	4b27      	ldr	r3, [pc, #156]	; (80036c4 <MX_ADC_Init+0xc0>)
 8003626:	22c0      	movs	r2, #192	; 0xc0
 8003628:	0612      	lsls	r2, r2, #24
 800362a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800362c:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <MX_ADC_Init+0xc0>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003632:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <MX_ADC_Init+0xc0>)
 8003634:	2200      	movs	r2, #0
 8003636:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003638:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <MX_ADC_Init+0xc0>)
 800363a:	2201      	movs	r2, #1
 800363c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800363e:	4b21      	ldr	r3, [pc, #132]	; (80036c4 <MX_ADC_Init+0xc0>)
 8003640:	2200      	movs	r2, #0
 8003642:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003644:	4b1f      	ldr	r3, [pc, #124]	; (80036c4 <MX_ADC_Init+0xc0>)
 8003646:	2220      	movs	r2, #32
 8003648:	2101      	movs	r1, #1
 800364a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800364c:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <MX_ADC_Init+0xc0>)
 800364e:	2221      	movs	r2, #33	; 0x21
 8003650:	2100      	movs	r1, #0
 8003652:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003654:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <MX_ADC_Init+0xc0>)
 8003656:	2200      	movs	r2, #0
 8003658:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800365a:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <MX_ADC_Init+0xc0>)
 800365c:	22c2      	movs	r2, #194	; 0xc2
 800365e:	32ff      	adds	r2, #255	; 0xff
 8003660:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003662:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <MX_ADC_Init+0xc0>)
 8003664:	222c      	movs	r2, #44	; 0x2c
 8003666:	2101      	movs	r1, #1
 8003668:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800366a:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <MX_ADC_Init+0xc0>)
 800366c:	2204      	movs	r2, #4
 800366e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <MX_ADC_Init+0xc0>)
 8003672:	2200      	movs	r2, #0
 8003674:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003676:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <MX_ADC_Init+0xc0>)
 8003678:	2200      	movs	r2, #0
 800367a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800367c:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <MX_ADC_Init+0xc0>)
 800367e:	2200      	movs	r2, #0
 8003680:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003682:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <MX_ADC_Init+0xc0>)
 8003684:	2200      	movs	r2, #0
 8003686:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003688:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <MX_ADC_Init+0xc0>)
 800368a:	0018      	movs	r0, r3
 800368c:	f000 fd9c 	bl	80041c8 <HAL_ADC_Init>
 8003690:	1e03      	subs	r3, r0, #0
 8003692:	d001      	beq.n	8003698 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003694:	f000 fa9e 	bl	8003bd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003698:	003b      	movs	r3, r7
 800369a:	4a0c      	ldr	r2, [pc, #48]	; (80036cc <MX_ADC_Init+0xc8>)
 800369c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800369e:	003b      	movs	r3, r7
 80036a0:	2280      	movs	r2, #128	; 0x80
 80036a2:	0152      	lsls	r2, r2, #5
 80036a4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80036a6:	003a      	movs	r2, r7
 80036a8:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <MX_ADC_Init+0xc0>)
 80036aa:	0011      	movs	r1, r2
 80036ac:	0018      	movs	r0, r3
 80036ae:	f000 ff89 	bl	80045c4 <HAL_ADC_ConfigChannel>
 80036b2:	1e03      	subs	r3, r0, #0
 80036b4:	d001      	beq.n	80036ba <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80036b6:	f000 fa8d 	bl	8003bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	46bd      	mov	sp, r7
 80036be:	b002      	add	sp, #8
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	200001fc 	.word	0x200001fc
 80036c8:	40012400 	.word	0x40012400
 80036cc:	24000200 	.word	0x24000200

080036d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80036d4:	4b16      	ldr	r3, [pc, #88]	; (8003730 <MX_RTC_Init+0x60>)
 80036d6:	4a17      	ldr	r2, [pc, #92]	; (8003734 <MX_RTC_Init+0x64>)
 80036d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036da:	4b15      	ldr	r3, [pc, #84]	; (8003730 <MX_RTC_Init+0x60>)
 80036dc:	2200      	movs	r2, #0
 80036de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80036e0:	4b13      	ldr	r3, [pc, #76]	; (8003730 <MX_RTC_Init+0x60>)
 80036e2:	227f      	movs	r2, #127	; 0x7f
 80036e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80036e6:	4b12      	ldr	r3, [pc, #72]	; (8003730 <MX_RTC_Init+0x60>)
 80036e8:	22ff      	movs	r2, #255	; 0xff
 80036ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036ec:	4b10      	ldr	r3, [pc, #64]	; (8003730 <MX_RTC_Init+0x60>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80036f2:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <MX_RTC_Init+0x60>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036f8:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <MX_RTC_Init+0x60>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036fe:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <MX_RTC_Init+0x60>)
 8003700:	2200      	movs	r2, #0
 8003702:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <MX_RTC_Init+0x60>)
 8003706:	0018      	movs	r0, r3
 8003708:	f002 fc3e 	bl	8005f88 <HAL_RTC_Init>
 800370c:	1e03      	subs	r3, r0, #0
 800370e:	d001      	beq.n	8003714 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8003710:	f000 fa60 	bl	8003bd4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <MX_RTC_Init+0x60>)
 8003716:	2200      	movs	r2, #0
 8003718:	2100      	movs	r1, #0
 800371a:	0018      	movs	r0, r3
 800371c:	f002 fd66 	bl	80061ec <HAL_RTCEx_SetWakeUpTimer_IT>
 8003720:	1e03      	subs	r3, r0, #0
 8003722:	d001      	beq.n	8003728 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8003724:	f000 fa56 	bl	8003bd4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003728:	46c0      	nop			; (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	200002a0 	.word	0x200002a0
 8003734:	40002800 	.word	0x40002800

08003738 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800373c:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <MX_SPI1_Init+0x68>)
 800373e:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <MX_SPI1_Init+0x6c>)
 8003740:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003742:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <MX_SPI1_Init+0x68>)
 8003744:	2282      	movs	r2, #130	; 0x82
 8003746:	0052      	lsls	r2, r2, #1
 8003748:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800374a:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <MX_SPI1_Init+0x68>)
 800374c:	2200      	movs	r2, #0
 800374e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003750:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <MX_SPI1_Init+0x68>)
 8003752:	2200      	movs	r2, #0
 8003754:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003756:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <MX_SPI1_Init+0x68>)
 8003758:	2200      	movs	r2, #0
 800375a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800375c:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <MX_SPI1_Init+0x68>)
 800375e:	2200      	movs	r2, #0
 8003760:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003762:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <MX_SPI1_Init+0x68>)
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	0092      	lsls	r2, r2, #2
 8003768:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <MX_SPI1_Init+0x68>)
 800376c:	2200      	movs	r2, #0
 800376e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <MX_SPI1_Init+0x68>)
 8003772:	2200      	movs	r2, #0
 8003774:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003776:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <MX_SPI1_Init+0x68>)
 8003778:	2200      	movs	r2, #0
 800377a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800377c:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <MX_SPI1_Init+0x68>)
 800377e:	2200      	movs	r2, #0
 8003780:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003782:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <MX_SPI1_Init+0x68>)
 8003784:	2207      	movs	r2, #7
 8003786:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <MX_SPI1_Init+0x68>)
 800378a:	0018      	movs	r0, r3
 800378c:	f002 fea2 	bl	80064d4 <HAL_SPI_Init>
 8003790:	1e03      	subs	r3, r0, #0
 8003792:	d001      	beq.n	8003798 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003794:	f000 fa1e 	bl	8003bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003798:	46c0      	nop			; (mov r8, r8)
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	200002c4 	.word	0x200002c4
 80037a4:	40013000 	.word	0x40013000

080037a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037ac:	4b16      	ldr	r3, [pc, #88]	; (8003808 <MX_USART1_UART_Init+0x60>)
 80037ae:	4a17      	ldr	r2, [pc, #92]	; (800380c <MX_USART1_UART_Init+0x64>)
 80037b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80037b2:	4b15      	ldr	r3, [pc, #84]	; (8003808 <MX_USART1_UART_Init+0x60>)
 80037b4:	22e1      	movs	r2, #225	; 0xe1
 80037b6:	0252      	lsls	r2, r2, #9
 80037b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037ba:	4b13      	ldr	r3, [pc, #76]	; (8003808 <MX_USART1_UART_Init+0x60>)
 80037bc:	2200      	movs	r2, #0
 80037be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037c0:	4b11      	ldr	r3, [pc, #68]	; (8003808 <MX_USART1_UART_Init+0x60>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037c6:	4b10      	ldr	r3, [pc, #64]	; (8003808 <MX_USART1_UART_Init+0x60>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037cc:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <MX_USART1_UART_Init+0x60>)
 80037ce:	220c      	movs	r2, #12
 80037d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037d2:	4b0d      	ldr	r3, [pc, #52]	; (8003808 <MX_USART1_UART_Init+0x60>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037d8:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <MX_USART1_UART_Init+0x60>)
 80037da:	2200      	movs	r2, #0
 80037dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037de:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <MX_USART1_UART_Init+0x60>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80037e4:	4b08      	ldr	r3, [pc, #32]	; (8003808 <MX_USART1_UART_Init+0x60>)
 80037e6:	2208      	movs	r2, #8
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80037ea:	4b07      	ldr	r3, [pc, #28]	; (8003808 <MX_USART1_UART_Init+0x60>)
 80037ec:	2280      	movs	r2, #128	; 0x80
 80037ee:	0212      	lsls	r2, r2, #8
 80037f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037f2:	4b05      	ldr	r3, [pc, #20]	; (8003808 <MX_USART1_UART_Init+0x60>)
 80037f4:	0018      	movs	r0, r3
 80037f6:	f003 fc97 	bl	8007128 <HAL_UART_Init>
 80037fa:	1e03      	subs	r3, r0, #0
 80037fc:	d001      	beq.n	8003802 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80037fe:	f000 f9e9 	bl	8003bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	2000031c 	.word	0x2000031c
 800380c:	40013800 	.word	0x40013800

08003810 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003816:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <MX_DMA_Init+0x38>)
 8003818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800381a:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <MX_DMA_Init+0x38>)
 800381c:	2101      	movs	r1, #1
 800381e:	430a      	orrs	r2, r1
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
 8003822:	4b09      	ldr	r3, [pc, #36]	; (8003848 <MX_DMA_Init+0x38>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	2201      	movs	r2, #1
 8003828:	4013      	ands	r3, r2
 800382a:	607b      	str	r3, [r7, #4]
 800382c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800382e:	2200      	movs	r2, #0
 8003830:	2100      	movs	r1, #0
 8003832:	2009      	movs	r0, #9
 8003834:	f001 f904 	bl	8004a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003838:	2009      	movs	r0, #9
 800383a:	f001 f916 	bl	8004a6a <HAL_NVIC_EnableIRQ>

}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	b002      	add	sp, #8
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	40021000 	.word	0x40021000

0800384c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800384c:	b590      	push	{r4, r7, lr}
 800384e:	b089      	sub	sp, #36	; 0x24
 8003850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003852:	240c      	movs	r4, #12
 8003854:	193b      	adds	r3, r7, r4
 8003856:	0018      	movs	r0, r3
 8003858:	2314      	movs	r3, #20
 800385a:	001a      	movs	r2, r3
 800385c:	2100      	movs	r1, #0
 800385e:	f004 fa38 	bl	8007cd2 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003862:	4b1f      	ldr	r3, [pc, #124]	; (80038e0 <MX_GPIO_Init+0x94>)
 8003864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003866:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <MX_GPIO_Init+0x94>)
 8003868:	2101      	movs	r1, #1
 800386a:	430a      	orrs	r2, r1
 800386c:	62da      	str	r2, [r3, #44]	; 0x2c
 800386e:	4b1c      	ldr	r3, [pc, #112]	; (80038e0 <MX_GPIO_Init+0x94>)
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	2201      	movs	r2, #1
 8003874:	4013      	ands	r3, r2
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800387a:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <MX_GPIO_Init+0x94>)
 800387c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387e:	4b18      	ldr	r3, [pc, #96]	; (80038e0 <MX_GPIO_Init+0x94>)
 8003880:	2102      	movs	r1, #2
 8003882:	430a      	orrs	r2, r1
 8003884:	62da      	str	r2, [r3, #44]	; 0x2c
 8003886:	4b16      	ldr	r3, [pc, #88]	; (80038e0 <MX_GPIO_Init+0x94>)
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	2202      	movs	r2, #2
 800388c:	4013      	ands	r3, r2
 800388e:	607b      	str	r3, [r7, #4]
 8003890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_SET);
 8003892:	23a0      	movs	r3, #160	; 0xa0
 8003894:	05db      	lsls	r3, r3, #23
 8003896:	2201      	movs	r2, #1
 8003898:	2111      	movs	r1, #17
 800389a:	0018      	movs	r0, r3
 800389c:	f001 fc32 	bl	8005104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80038a0:	23a0      	movs	r3, #160	; 0xa0
 80038a2:	05db      	lsls	r3, r3, #23
 80038a4:	2200      	movs	r2, #0
 80038a6:	2102      	movs	r1, #2
 80038a8:	0018      	movs	r0, r3
 80038aa:	f001 fc2b 	bl	8005104 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80038ae:	0021      	movs	r1, r4
 80038b0:	187b      	adds	r3, r7, r1
 80038b2:	2213      	movs	r2, #19
 80038b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038b6:	187b      	adds	r3, r7, r1
 80038b8:	2201      	movs	r2, #1
 80038ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038bc:	187b      	adds	r3, r7, r1
 80038be:	2200      	movs	r2, #0
 80038c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c2:	187b      	adds	r3, r7, r1
 80038c4:	2200      	movs	r2, #0
 80038c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c8:	187a      	adds	r2, r7, r1
 80038ca:	23a0      	movs	r3, #160	; 0xa0
 80038cc:	05db      	lsls	r3, r3, #23
 80038ce:	0011      	movs	r1, r2
 80038d0:	0018      	movs	r0, r3
 80038d2:	f001 faa1 	bl	8004e18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	46bd      	mov	sp, r7
 80038da:	b009      	add	sp, #36	; 0x24
 80038dc:	bd90      	pop	{r4, r7, pc}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	40021000 	.word	0x40021000

080038e4 <Tensometr>:

/* USER CODE BEGIN 4 */
int Tensometr(uint16_t *adcbuffer ){
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	int suma = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]
	for(uint8_t i; i<sizeof(adcbuffer); i++){
 80038f0:	e00f      	b.n	8003912 <Tensometr+0x2e>
		suma += adcbuffer[i];
 80038f2:	210b      	movs	r1, #11
 80038f4:	187b      	adds	r3, r7, r1
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	18d3      	adds	r3, r2, r3
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	001a      	movs	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	189b      	adds	r3, r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
	for(uint8_t i; i<sizeof(adcbuffer); i++){
 8003908:	187b      	adds	r3, r7, r1
 800390a:	781a      	ldrb	r2, [r3, #0]
 800390c:	187b      	adds	r3, r7, r1
 800390e:	3201      	adds	r2, #1
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	230b      	movs	r3, #11
 8003914:	18fb      	adds	r3, r7, r3
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d9ea      	bls.n	80038f2 <Tensometr+0xe>

	}
	suma=suma/sizeof(adcbuffer);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	089b      	lsrs	r3, r3, #2
 8003920:	60fb      	str	r3, [r7, #12]
	if(suma < 24000){
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4a04      	ldr	r2, [pc, #16]	; (8003938 <Tensometr+0x54>)
 8003926:	4293      	cmp	r3, r2
 8003928:	dc01      	bgt.n	800392e <Tensometr+0x4a>
		return 0;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <Tensometr+0x4c>
	}
	else{
		return 1;
 800392e:	2301      	movs	r3, #1
	}

}
 8003930:	0018      	movs	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	b004      	add	sp, #16
 8003936:	bd80      	pop	{r7, pc}
 8003938:	00005dbf 	.word	0x00005dbf

0800393c <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]


}
 8003944:	46c0      	nop			; (mov r8, r8)
 8003946:	46bd      	mov	sp, r7
 8003948:	b002      	add	sp, #8
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]


}
 8003954:	46c0      	nop			; (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	b002      	add	sp, #8
 800395a:	bd80      	pop	{r7, pc}

0800395c <BME280_SPI_Read>:
void BME280_SPI_Read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len)
{
 800395c:	b590      	push	{r4, r7, lr}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	240f      	movs	r4, #15
 8003968:	193b      	adds	r3, r7, r4
 800396a:	1c02      	adds	r2, r0, #0
 800396c:	701a      	strb	r2, [r3, #0]
    reg_addr = reg_addr | 0x80;
 800396e:	193b      	adds	r3, r7, r4
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2280      	movs	r2, #128	; 0x80
 8003974:	4252      	negs	r2, r2
 8003976:	4313      	orrs	r3, r2
 8003978:	b2da      	uxtb	r2, r3
 800397a:	193b      	adds	r3, r7, r4
 800397c:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800397e:	23a0      	movs	r3, #160	; 0xa0
 8003980:	05db      	lsls	r3, r3, #23
 8003982:	2200      	movs	r2, #0
 8003984:	2110      	movs	r1, #16
 8003986:	0018      	movs	r0, r3
 8003988:	f001 fbbc 	bl	8005104 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, &reg_addr, 1, 1000);
 800398c:	23fa      	movs	r3, #250	; 0xfa
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	1939      	adds	r1, r7, r4
 8003992:	480b      	ldr	r0, [pc, #44]	; (80039c0 <BME280_SPI_Read+0x64>)
 8003994:	2201      	movs	r2, #1
 8003996:	f002 fe31 	bl	80065fc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, reg_data, len, 1000);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	b29a      	uxth	r2, r3
 800399e:	23fa      	movs	r3, #250	; 0xfa
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	4806      	ldr	r0, [pc, #24]	; (80039c0 <BME280_SPI_Read+0x64>)
 80039a6:	f002 ff87 	bl	80068b8 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80039aa:	23a0      	movs	r3, #160	; 0xa0
 80039ac:	05db      	lsls	r3, r3, #23
 80039ae:	2201      	movs	r2, #1
 80039b0:	2110      	movs	r1, #16
 80039b2:	0018      	movs	r0, r3
 80039b4:	f001 fba6 	bl	8005104 <HAL_GPIO_WritePin>
}
 80039b8:	46c0      	nop			; (mov r8, r8)
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b005      	add	sp, #20
 80039be:	bd90      	pop	{r4, r7, pc}
 80039c0:	200002c4 	.word	0x200002c4

080039c4 <BME280_SPI_Write>:

void BME280_SPI_Write(uint8_t reg_addr, uint8_t *reg_data, uint32_t len)
{
 80039c4:	b590      	push	{r4, r7, lr}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	607a      	str	r2, [r7, #4]
 80039ce:	240f      	movs	r4, #15
 80039d0:	193b      	adds	r3, r7, r4
 80039d2:	1c02      	adds	r2, r0, #0
 80039d4:	701a      	strb	r2, [r3, #0]
    reg_addr = reg_addr & 0x7F;
 80039d6:	193b      	adds	r3, r7, r4
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	227f      	movs	r2, #127	; 0x7f
 80039dc:	4013      	ands	r3, r2
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	193b      	adds	r3, r7, r4
 80039e2:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80039e4:	23a0      	movs	r3, #160	; 0xa0
 80039e6:	05db      	lsls	r3, r3, #23
 80039e8:	2200      	movs	r2, #0
 80039ea:	2110      	movs	r1, #16
 80039ec:	0018      	movs	r0, r3
 80039ee:	f001 fb89 	bl	8005104 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, &reg_addr, 1, 1000);
 80039f2:	23fa      	movs	r3, #250	; 0xfa
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	1939      	adds	r1, r7, r4
 80039f8:	480b      	ldr	r0, [pc, #44]	; (8003a28 <BME280_SPI_Write+0x64>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	f002 fdfe 	bl	80065fc <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, reg_data, len, 1000);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	23fa      	movs	r3, #250	; 0xfa
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	4807      	ldr	r0, [pc, #28]	; (8003a28 <BME280_SPI_Write+0x64>)
 8003a0c:	f002 fdf6 	bl	80065fc <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003a10:	23a0      	movs	r3, #160	; 0xa0
 8003a12:	05db      	lsls	r3, r3, #23
 8003a14:	2201      	movs	r2, #1
 8003a16:	2110      	movs	r1, #16
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f001 fb73 	bl	8005104 <HAL_GPIO_WritePin>
}
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b005      	add	sp, #20
 8003a24:	bd90      	pop	{r4, r7, pc}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	200002c4 	.word	0x200002c4

08003a2c <stream_sensor_data_normal_mode>:

void stream_sensor_data_normal_mode(struct bme280_dev *dev)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	//int8_t rslt;
	uint8_t settings_sel;
	//struct bme280_data comp_data;

	/* Recommended mode of operation: Indoor navigation */
	dev->settings.osr_h = BME280_OVERSAMPLING_1X;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	222a      	movs	r2, #42	; 0x2a
 8003a38:	2101      	movs	r1, #1
 8003a3a:	5499      	strb	r1, [r3, r2]
	dev->settings.osr_p = BME280_NO_OVERSAMPLING; // BME280_OVERSAMPLING_16X;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2228      	movs	r2, #40	; 0x28
 8003a40:	2100      	movs	r1, #0
 8003a42:	5499      	strb	r1, [r3, r2]
	dev->settings.osr_t = BME280_OVERSAMPLING_2X;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2229      	movs	r2, #41	; 0x29
 8003a48:	2102      	movs	r1, #2
 8003a4a:	5499      	strb	r1, [r3, r2]
	//dev->settings.filter = BME280_FILTER_COEFF_16;
	//dev->settings.standby_time = BME280_STANDBY_TIME_62_5_MS;

	//settings_sel = BME280_OSR_PRESS_SEL;
	settings_sel = BME280_OSR_TEMP_SEL; // |= BME280_OSR_TEMP_SEL;
 8003a4c:	200f      	movs	r0, #15
 8003a4e:	183b      	adds	r3, r7, r0
 8003a50:	2202      	movs	r2, #2
 8003a52:	701a      	strb	r2, [r3, #0]
	settings_sel |= BME280_OSR_HUM_SEL;
 8003a54:	183b      	adds	r3, r7, r0
 8003a56:	183a      	adds	r2, r7, r0
 8003a58:	7812      	ldrb	r2, [r2, #0]
 8003a5a:	2104      	movs	r1, #4
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	701a      	strb	r2, [r3, #0]
	settings_sel |= BME280_STANDBY_SEL;
 8003a60:	183b      	adds	r3, r7, r0
 8003a62:	183a      	adds	r2, r7, r0
 8003a64:	7812      	ldrb	r2, [r2, #0]
 8003a66:	2110      	movs	r1, #16
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	701a      	strb	r2, [r3, #0]
	settings_sel |= BME280_FILTER_SEL;
 8003a6c:	183b      	adds	r3, r7, r0
 8003a6e:	183a      	adds	r2, r7, r0
 8003a70:	7812      	ldrb	r2, [r2, #0]
 8003a72:	2108      	movs	r1, #8
 8003a74:	430a      	orrs	r2, r1
 8003a76:	701a      	strb	r2, [r3, #0]
	bme280_set_sensor_settings(settings_sel, dev);
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	183b      	adds	r3, r7, r0
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	0011      	movs	r1, r2
 8003a80:	0018      	movs	r0, r3
 8003a82:	f7fe fce7 	bl	8002454 <bme280_set_sensor_settings>
	bme280_set_sensor_mode(BME280_NORMAL_MODE, dev);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	0019      	movs	r1, r3
 8003a8a:	2003      	movs	r0, #3
 8003a8c:	f7fe fd42 	bl	8002514 <bme280_set_sensor_mode>

}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b004      	add	sp, #16
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <BMA456_Check_Connection>:

uint8_t BMA456_Check_Connection()
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af02      	add	r7, sp, #8
	uint8_t reg_addr = 0x00;
 8003a9e:	1dfb      	adds	r3, r7, #7
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
	reg_addr |= 0x80;
 8003aa4:	1dfb      	adds	r3, r7, #7
 8003aa6:	1dfa      	adds	r2, r7, #7
 8003aa8:	7812      	ldrb	r2, [r2, #0]
 8003aaa:	2180      	movs	r1, #128	; 0x80
 8003aac:	4249      	negs	r1, r1
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	701a      	strb	r2, [r3, #0]
	uint8_t reg_addr_tab[2];
	reg_addr_tab[0] = reg_addr;
 8003ab2:	1d3b      	adds	r3, r7, #4
 8003ab4:	1dfa      	adds	r2, r7, #7
 8003ab6:	7812      	ldrb	r2, [r2, #0]
 8003ab8:	701a      	strb	r2, [r3, #0]
	uint8_t reg_data[2];

	do{
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8003aba:	23a0      	movs	r3, #160	; 0xa0
 8003abc:	05db      	lsls	r3, r3, #23
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f001 fb1e 	bl	8005104 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&hspi1, reg_addr_tab,reg_data, 2, 1000);
 8003ac8:	003a      	movs	r2, r7
 8003aca:	1d39      	adds	r1, r7, #4
 8003acc:	480b      	ldr	r0, [pc, #44]	; (8003afc <BMA456_Check_Connection+0x64>)
 8003ace:	23fa      	movs	r3, #250	; 0xfa
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	f003 f81d 	bl	8006b14 <HAL_SPI_TransmitReceive>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8003ada:	23a0      	movs	r3, #160	; 0xa0
 8003adc:	05db      	lsls	r3, r3, #23
 8003ade:	2201      	movs	r2, #1
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f001 fb0e 	bl	8005104 <HAL_GPIO_WritePin>
	}while(reg_data[1] != 0x16);
 8003ae8:	003b      	movs	r3, r7
 8003aea:	785b      	ldrb	r3, [r3, #1]
 8003aec:	2b16      	cmp	r3, #22
 8003aee:	d1e4      	bne.n	8003aba <BMA456_Check_Connection+0x22>

    return 1;
 8003af0:	2301      	movs	r3, #1

}
 8003af2:	0018      	movs	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b002      	add	sp, #8
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	200002c4 	.word	0x200002c4

08003b00 <BMA456_Init>:

void BMA456_Init()
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
	//HAL_Delay(10);

	//BMA456_SPI_Write(BMA456_PWR_CTRL, 0x00, &hspi2);
	//HAL_Delay(10);

	BMA456_SPI_Write(BMA456_CMD, 0xB6);
 8003b04:	21b6      	movs	r1, #182	; 0xb6
 8003b06:	207e      	movs	r0, #126	; 0x7e
 8003b08:	f000 f834 	bl	8003b74 <BMA456_SPI_Write>
	HAL_Delay(10);
 8003b0c:	200a      	movs	r0, #10
 8003b0e:	f000 fb1b 	bl	8004148 <HAL_Delay>

	BMA456_SPI_Write(BMA456_PWR_CONF, 0x00);
 8003b12:	2100      	movs	r1, #0
 8003b14:	207c      	movs	r0, #124	; 0x7c
 8003b16:	f000 f82d 	bl	8003b74 <BMA456_SPI_Write>
	HAL_Delay(10);
 8003b1a:	200a      	movs	r0, #10
 8003b1c:	f000 fb14 	bl	8004148 <HAL_Delay>

	BMA456_SPI_Write(BMA456_INIT_CTRL, 0x00);
 8003b20:	2100      	movs	r1, #0
 8003b22:	2059      	movs	r0, #89	; 0x59
 8003b24:	f000 f826 	bl	8003b74 <BMA456_SPI_Write>
	HAL_Delay(10);
 8003b28:	200a      	movs	r0, #10
 8003b2a:	f000 fb0d 	bl	8004148 <HAL_Delay>

	BMA456_SPI_Write(BMA456_INIT_CTRL, 0x01);
 8003b2e:	2101      	movs	r1, #1
 8003b30:	2059      	movs	r0, #89	; 0x59
 8003b32:	f000 f81f 	bl	8003b74 <BMA456_SPI_Write>
	HAL_Delay(10);
 8003b36:	200a      	movs	r0, #10
 8003b38:	f000 fb06 	bl	8004148 <HAL_Delay>

	HAL_Delay (150);
 8003b3c:	2096      	movs	r0, #150	; 0x96
 8003b3e:	f000 fb03 	bl	8004148 <HAL_Delay>

	BMA456_SPI_Write(BMA456_PWR_CTRL, 0x04);
 8003b42:	2104      	movs	r1, #4
 8003b44:	207d      	movs	r0, #125	; 0x7d
 8003b46:	f000 f815 	bl	8003b74 <BMA456_SPI_Write>
	HAL_Delay(10);
 8003b4a:	200a      	movs	r0, #10
 8003b4c:	f000 fafc 	bl	8004148 <HAL_Delay>

	BMA456_SPI_Write(BMA456_ACC_CONF, 0x17);
 8003b50:	2117      	movs	r1, #23
 8003b52:	2040      	movs	r0, #64	; 0x40
 8003b54:	f000 f80e 	bl	8003b74 <BMA456_SPI_Write>
	HAL_Delay(10);
 8003b58:	200a      	movs	r0, #10
 8003b5a:	f000 faf5 	bl	8004148 <HAL_Delay>

	BMA456_SPI_Write(BMA456_PWR_CONF, 0x03);
 8003b5e:	2103      	movs	r1, #3
 8003b60:	207c      	movs	r0, #124	; 0x7c
 8003b62:	f000 f807 	bl	8003b74 <BMA456_SPI_Write>
	HAL_Delay(10);
 8003b66:	200a      	movs	r0, #10
 8003b68:	f000 faee 	bl	8004148 <HAL_Delay>
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <BMA456_SPI_Write>:

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);

}
void BMA456_SPI_Write(uint8_t reg_addr, uint8_t reg_data)
{
 8003b74:	b590      	push	{r4, r7, lr}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	0002      	movs	r2, r0
 8003b7c:	1dfb      	adds	r3, r7, #7
 8003b7e:	701a      	strb	r2, [r3, #0]
 8003b80:	1dbb      	adds	r3, r7, #6
 8003b82:	1c0a      	adds	r2, r1, #0
 8003b84:	701a      	strb	r2, [r3, #0]
	uint8_t reg_data_tab[2];
	reg_data_tab[0] = reg_addr & 0x7F;
 8003b86:	1dfb      	adds	r3, r7, #7
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	227f      	movs	r2, #127	; 0x7f
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	240c      	movs	r4, #12
 8003b92:	193b      	adds	r3, r7, r4
 8003b94:	701a      	strb	r2, [r3, #0]
	reg_data_tab[1] = reg_data;
 8003b96:	193b      	adds	r3, r7, r4
 8003b98:	1dba      	adds	r2, r7, #6
 8003b9a:	7812      	ldrb	r2, [r2, #0]
 8003b9c:	705a      	strb	r2, [r3, #1]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8003b9e:	23a0      	movs	r3, #160	; 0xa0
 8003ba0:	05db      	lsls	r3, r3, #23
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f001 faac 	bl	8005104 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, reg_data_tab, 2, 1000);
 8003bac:	23fa      	movs	r3, #250	; 0xfa
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	1939      	adds	r1, r7, r4
 8003bb2:	4807      	ldr	r0, [pc, #28]	; (8003bd0 <BMA456_SPI_Write+0x5c>)
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	f002 fd21 	bl	80065fc <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8003bba:	23a0      	movs	r3, #160	; 0xa0
 8003bbc:	05db      	lsls	r3, r3, #23
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f001 fa9e 	bl	8005104 <HAL_GPIO_WritePin>
}
 8003bc8:	46c0      	nop			; (mov r8, r8)
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b005      	add	sp, #20
 8003bce:	bd90      	pop	{r4, r7, pc}
 8003bd0:	200002c4 	.word	0x200002c4

08003bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bd8:	b672      	cpsid	i
}
 8003bda:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bdc:	e7fe      	b.n	8003bdc <Error_Handler+0x8>
	...

08003be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be4:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <HAL_MspInit+0x24>)
 8003be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_MspInit+0x24>)
 8003bea:	2101      	movs	r1, #1
 8003bec:	430a      	orrs	r2, r1
 8003bee:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bf0:	4b04      	ldr	r3, [pc, #16]	; (8003c04 <HAL_MspInit+0x24>)
 8003bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bf4:	4b03      	ldr	r3, [pc, #12]	; (8003c04 <HAL_MspInit+0x24>)
 8003bf6:	2180      	movs	r1, #128	; 0x80
 8003bf8:	0549      	lsls	r1, r1, #21
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40021000 	.word	0x40021000

08003c08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c08:	b590      	push	{r4, r7, lr}
 8003c0a:	b089      	sub	sp, #36	; 0x24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c10:	240c      	movs	r4, #12
 8003c12:	193b      	adds	r3, r7, r4
 8003c14:	0018      	movs	r0, r3
 8003c16:	2314      	movs	r3, #20
 8003c18:	001a      	movs	r2, r3
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	f004 f859 	bl	8007cd2 <memset>
  if(hadc->Instance==ADC1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a28      	ldr	r2, [pc, #160]	; (8003cc8 <HAL_ADC_MspInit+0xc0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d14a      	bne.n	8003cc0 <HAL_ADC_MspInit+0xb8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c2a:	4b28      	ldr	r3, [pc, #160]	; (8003ccc <HAL_ADC_MspInit+0xc4>)
 8003c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c2e:	4b27      	ldr	r3, [pc, #156]	; (8003ccc <HAL_ADC_MspInit+0xc4>)
 8003c30:	2180      	movs	r1, #128	; 0x80
 8003c32:	0089      	lsls	r1, r1, #2
 8003c34:	430a      	orrs	r2, r1
 8003c36:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c38:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <HAL_ADC_MspInit+0xc4>)
 8003c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3c:	4b23      	ldr	r3, [pc, #140]	; (8003ccc <HAL_ADC_MspInit+0xc4>)
 8003c3e:	2102      	movs	r1, #2
 8003c40:	430a      	orrs	r2, r1
 8003c42:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c44:	4b21      	ldr	r3, [pc, #132]	; (8003ccc <HAL_ADC_MspInit+0xc4>)
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	2202      	movs	r2, #2
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003c50:	193b      	adds	r3, r7, r4
 8003c52:	2202      	movs	r2, #2
 8003c54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c56:	193b      	adds	r3, r7, r4
 8003c58:	2203      	movs	r2, #3
 8003c5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5c:	193b      	adds	r3, r7, r4
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c62:	193b      	adds	r3, r7, r4
 8003c64:	4a1a      	ldr	r2, [pc, #104]	; (8003cd0 <HAL_ADC_MspInit+0xc8>)
 8003c66:	0019      	movs	r1, r3
 8003c68:	0010      	movs	r0, r2
 8003c6a:	f001 f8d5 	bl	8004e18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003c6e:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <HAL_ADC_MspInit+0xcc>)
 8003c70:	4a19      	ldr	r2, [pc, #100]	; (8003cd8 <HAL_ADC_MspInit+0xd0>)
 8003c72:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8003c74:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <HAL_ADC_MspInit+0xcc>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c7a:	4b16      	ldr	r3, [pc, #88]	; (8003cd4 <HAL_ADC_MspInit+0xcc>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c80:	4b14      	ldr	r3, [pc, #80]	; (8003cd4 <HAL_ADC_MspInit+0xcc>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003c86:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <HAL_ADC_MspInit+0xcc>)
 8003c88:	2280      	movs	r2, #128	; 0x80
 8003c8a:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <HAL_ADC_MspInit+0xcc>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <HAL_ADC_MspInit+0xcc>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003c98:	4b0e      	ldr	r3, [pc, #56]	; (8003cd4 <HAL_ADC_MspInit+0xcc>)
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <HAL_ADC_MspInit+0xcc>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <HAL_ADC_MspInit+0xcc>)
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f000 fefc 	bl	8004aa4 <HAL_DMA_Init>
 8003cac:	1e03      	subs	r3, r0, #0
 8003cae:	d001      	beq.n	8003cb4 <HAL_ADC_MspInit+0xac>
    {
      Error_Handler();
 8003cb0:	f7ff ff90 	bl	8003bd4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a07      	ldr	r2, [pc, #28]	; (8003cd4 <HAL_ADC_MspInit+0xcc>)
 8003cb8:	64da      	str	r2, [r3, #76]	; 0x4c
 8003cba:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <HAL_ADC_MspInit+0xcc>)
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b009      	add	sp, #36	; 0x24
 8003cc6:	bd90      	pop	{r4, r7, pc}
 8003cc8:	40012400 	.word	0x40012400
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	50000400 	.word	0x50000400
 8003cd4:	20000258 	.word	0x20000258
 8003cd8:	40020008 	.word	0x40020008

08003cdc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <HAL_RTC_MspInit+0x38>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d10e      	bne.n	8003d0c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003cee:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <HAL_RTC_MspInit+0x3c>)
 8003cf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_RTC_MspInit+0x3c>)
 8003cf4:	2180      	movs	r1, #128	; 0x80
 8003cf6:	02c9      	lsls	r1, r1, #11
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2100      	movs	r1, #0
 8003d00:	2002      	movs	r0, #2
 8003d02:	f000 fe9d 	bl	8004a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003d06:	2002      	movs	r0, #2
 8003d08:	f000 feaf 	bl	8004a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b002      	add	sp, #8
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40002800 	.word	0x40002800
 8003d18:	40021000 	.word	0x40021000

08003d1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d1c:	b590      	push	{r4, r7, lr}
 8003d1e:	b089      	sub	sp, #36	; 0x24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d24:	240c      	movs	r4, #12
 8003d26:	193b      	adds	r3, r7, r4
 8003d28:	0018      	movs	r0, r3
 8003d2a:	2314      	movs	r3, #20
 8003d2c:	001a      	movs	r2, r3
 8003d2e:	2100      	movs	r1, #0
 8003d30:	f003 ffcf 	bl	8007cd2 <memset>
  if(hspi->Instance==SPI1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a18      	ldr	r2, [pc, #96]	; (8003d9c <HAL_SPI_MspInit+0x80>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d129      	bne.n	8003d92 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d3e:	4b18      	ldr	r3, [pc, #96]	; (8003da0 <HAL_SPI_MspInit+0x84>)
 8003d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d42:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <HAL_SPI_MspInit+0x84>)
 8003d44:	2180      	movs	r1, #128	; 0x80
 8003d46:	0149      	lsls	r1, r1, #5
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d4c:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <HAL_SPI_MspInit+0x84>)
 8003d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d50:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <HAL_SPI_MspInit+0x84>)
 8003d52:	2101      	movs	r1, #1
 8003d54:	430a      	orrs	r2, r1
 8003d56:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d58:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <HAL_SPI_MspInit+0x84>)
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	4013      	ands	r3, r2
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003d64:	0021      	movs	r1, r4
 8003d66:	187b      	adds	r3, r7, r1
 8003d68:	22e0      	movs	r2, #224	; 0xe0
 8003d6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6c:	187b      	adds	r3, r7, r1
 8003d6e:	2202      	movs	r2, #2
 8003d70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d72:	187b      	adds	r3, r7, r1
 8003d74:	2200      	movs	r2, #0
 8003d76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d78:	187b      	adds	r3, r7, r1
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003d7e:	187b      	adds	r3, r7, r1
 8003d80:	2200      	movs	r2, #0
 8003d82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d84:	187a      	adds	r2, r7, r1
 8003d86:	23a0      	movs	r3, #160	; 0xa0
 8003d88:	05db      	lsls	r3, r3, #23
 8003d8a:	0011      	movs	r1, r2
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f001 f843 	bl	8004e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b009      	add	sp, #36	; 0x24
 8003d98:	bd90      	pop	{r4, r7, pc}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	40013000 	.word	0x40013000
 8003da0:	40021000 	.word	0x40021000

08003da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003da4:	b590      	push	{r4, r7, lr}
 8003da6:	b089      	sub	sp, #36	; 0x24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dac:	240c      	movs	r4, #12
 8003dae:	193b      	adds	r3, r7, r4
 8003db0:	0018      	movs	r0, r3
 8003db2:	2314      	movs	r3, #20
 8003db4:	001a      	movs	r2, r3
 8003db6:	2100      	movs	r1, #0
 8003db8:	f003 ff8b 	bl	8007cd2 <memset>
  if(huart->Instance==USART1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a18      	ldr	r2, [pc, #96]	; (8003e24 <HAL_UART_MspInit+0x80>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d12a      	bne.n	8003e1c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003dc6:	4b18      	ldr	r3, [pc, #96]	; (8003e28 <HAL_UART_MspInit+0x84>)
 8003dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dca:	4b17      	ldr	r3, [pc, #92]	; (8003e28 <HAL_UART_MspInit+0x84>)
 8003dcc:	2180      	movs	r1, #128	; 0x80
 8003dce:	01c9      	lsls	r1, r1, #7
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dd4:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <HAL_UART_MspInit+0x84>)
 8003dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd8:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <HAL_UART_MspInit+0x84>)
 8003dda:	2101      	movs	r1, #1
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	62da      	str	r2, [r3, #44]	; 0x2c
 8003de0:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <HAL_UART_MspInit+0x84>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	2201      	movs	r2, #1
 8003de6:	4013      	ands	r3, r2
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003dec:	193b      	adds	r3, r7, r4
 8003dee:	22c0      	movs	r2, #192	; 0xc0
 8003df0:	00d2      	lsls	r2, r2, #3
 8003df2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df4:	0021      	movs	r1, r4
 8003df6:	187b      	adds	r3, r7, r1
 8003df8:	2202      	movs	r2, #2
 8003dfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfc:	187b      	adds	r3, r7, r1
 8003dfe:	2200      	movs	r2, #0
 8003e00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e02:	187b      	adds	r3, r7, r1
 8003e04:	2203      	movs	r2, #3
 8003e06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003e08:	187b      	adds	r3, r7, r1
 8003e0a:	2204      	movs	r2, #4
 8003e0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e0e:	187a      	adds	r2, r7, r1
 8003e10:	23a0      	movs	r3, #160	; 0xa0
 8003e12:	05db      	lsls	r3, r3, #23
 8003e14:	0011      	movs	r1, r2
 8003e16:	0018      	movs	r0, r3
 8003e18:	f000 fffe 	bl	8004e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003e1c:	46c0      	nop			; (mov r8, r8)
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b009      	add	sp, #36	; 0x24
 8003e22:	bd90      	pop	{r4, r7, pc}
 8003e24:	40013800 	.word	0x40013800
 8003e28:	40021000 	.word	0x40021000

08003e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e30:	e7fe      	b.n	8003e30 <NMI_Handler+0x4>

08003e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e36:	e7fe      	b.n	8003e36 <HardFault_Handler+0x4>

08003e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003e3c:	46c0      	nop			; (mov r8, r8)
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e50:	f000 f95e 	bl	8004110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e54:	46c0      	nop			; (mov r8, r8)
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003e60:	4b03      	ldr	r3, [pc, #12]	; (8003e70 <RTC_IRQHandler+0x14>)
 8003e62:	0018      	movs	r0, r3
 8003e64:	f002 fafe 	bl	8006464 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003e68:	46c0      	nop			; (mov r8, r8)
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	200002a0 	.word	0x200002a0

08003e74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003e78:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <DMA1_Channel1_IRQHandler+0x14>)
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f000 fef0 	bl	8004c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003e80:	46c0      	nop			; (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	20000258 	.word	0x20000258

08003e8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  return 1;
 8003e90:	2301      	movs	r3, #1
}
 8003e92:	0018      	movs	r0, r3
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <_kill>:

int _kill(int pid, int sig)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ea2:	f003 fee3 	bl	8007c6c <__errno>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	2216      	movs	r2, #22
 8003eaa:	601a      	str	r2, [r3, #0]
  return -1;
 8003eac:	2301      	movs	r3, #1
 8003eae:	425b      	negs	r3, r3
}
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b002      	add	sp, #8
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <_exit>:

void _exit (int status)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	425a      	negs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	0011      	movs	r1, r2
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f7ff ffe5 	bl	8003e98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ece:	e7fe      	b.n	8003ece <_exit+0x16>

08003ed0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	e00a      	b.n	8003ef8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ee2:	e000      	b.n	8003ee6 <_read+0x16>
 8003ee4:	bf00      	nop
 8003ee6:	0001      	movs	r1, r0
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	60ba      	str	r2, [r7, #8]
 8003eee:	b2ca      	uxtb	r2, r1
 8003ef0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	dbf0      	blt.n	8003ee2 <_read+0x12>
  }

  return len;
 8003f00:	687b      	ldr	r3, [r7, #4]
}
 8003f02:	0018      	movs	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b006      	add	sp, #24
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b086      	sub	sp, #24
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	e009      	b.n	8003f30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	60ba      	str	r2, [r7, #8]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	0018      	movs	r0, r3
 8003f26:	e000      	b.n	8003f2a <_write+0x20>
 8003f28:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	dbf1      	blt.n	8003f1c <_write+0x12>
  }
  return len;
 8003f38:	687b      	ldr	r3, [r7, #4]
}
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	b006      	add	sp, #24
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <_close>:

int _close(int file)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	425b      	negs	r3, r3
}
 8003f4e:	0018      	movs	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b002      	add	sp, #8
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2280      	movs	r2, #128	; 0x80
 8003f64:	0192      	lsls	r2, r2, #6
 8003f66:	605a      	str	r2, [r3, #4]
  return 0;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	b002      	add	sp, #8
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <_isatty>:

int _isatty(int file)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f7a:	2301      	movs	r3, #1
}
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b002      	add	sp, #8
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	0018      	movs	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b004      	add	sp, #16
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fa4:	4a14      	ldr	r2, [pc, #80]	; (8003ff8 <_sbrk+0x5c>)
 8003fa6:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <_sbrk+0x60>)
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fb0:	4b13      	ldr	r3, [pc, #76]	; (8004000 <_sbrk+0x64>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d102      	bne.n	8003fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fb8:	4b11      	ldr	r3, [pc, #68]	; (8004000 <_sbrk+0x64>)
 8003fba:	4a12      	ldr	r2, [pc, #72]	; (8004004 <_sbrk+0x68>)
 8003fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fbe:	4b10      	ldr	r3, [pc, #64]	; (8004000 <_sbrk+0x64>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	18d3      	adds	r3, r2, r3
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d207      	bcs.n	8003fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fcc:	f003 fe4e 	bl	8007c6c <__errno>
 8003fd0:	0003      	movs	r3, r0
 8003fd2:	220c      	movs	r2, #12
 8003fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	425b      	negs	r3, r3
 8003fda:	e009      	b.n	8003ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fdc:	4b08      	ldr	r3, [pc, #32]	; (8004000 <_sbrk+0x64>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fe2:	4b07      	ldr	r3, [pc, #28]	; (8004000 <_sbrk+0x64>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	18d2      	adds	r2, r2, r3
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <_sbrk+0x64>)
 8003fec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003fee:	68fb      	ldr	r3, [r7, #12]
}
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b006      	add	sp, #24
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20002000 	.word	0x20002000
 8003ffc:	00000400 	.word	0x00000400
 8004000:	20000428 	.word	0x20000428
 8004004:	20000440 	.word	0x20000440

08004008 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800400c:	46c0      	nop			; (mov r8, r8)
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004014:	480d      	ldr	r0, [pc, #52]	; (800404c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004016:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004018:	f7ff fff6 	bl	8004008 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800401c:	480c      	ldr	r0, [pc, #48]	; (8004050 <LoopForever+0x6>)
  ldr r1, =_edata
 800401e:	490d      	ldr	r1, [pc, #52]	; (8004054 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004020:	4a0d      	ldr	r2, [pc, #52]	; (8004058 <LoopForever+0xe>)
  movs r3, #0
 8004022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004024:	e002      	b.n	800402c <LoopCopyDataInit>

08004026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800402a:	3304      	adds	r3, #4

0800402c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800402c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800402e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004030:	d3f9      	bcc.n	8004026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004032:	4a0a      	ldr	r2, [pc, #40]	; (800405c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004034:	4c0a      	ldr	r4, [pc, #40]	; (8004060 <LoopForever+0x16>)
  movs r3, #0
 8004036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004038:	e001      	b.n	800403e <LoopFillZerobss>

0800403a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800403a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800403c:	3204      	adds	r2, #4

0800403e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800403e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004040:	d3fb      	bcc.n	800403a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004042:	f003 fe19 	bl	8007c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004046:	f7ff f94d 	bl	80032e4 <main>

0800404a <LoopForever>:

LoopForever:
    b LoopForever
 800404a:	e7fe      	b.n	800404a <LoopForever>
   ldr   r0, =_estack
 800404c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004054:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8004058:	0800b164 	.word	0x0800b164
  ldr r2, =_sbss
 800405c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004060:	20000440 	.word	0x20000440

08004064 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004064:	e7fe      	b.n	8004064 <ADC1_COMP_IRQHandler>
	...

08004068 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800406e:	1dfb      	adds	r3, r7, #7
 8004070:	2200      	movs	r2, #0
 8004072:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_Init+0x3c>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <HAL_Init+0x3c>)
 800407a:	2140      	movs	r1, #64	; 0x40
 800407c:	430a      	orrs	r2, r1
 800407e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004080:	2003      	movs	r0, #3
 8004082:	f000 f811 	bl	80040a8 <HAL_InitTick>
 8004086:	1e03      	subs	r3, r0, #0
 8004088:	d003      	beq.n	8004092 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800408a:	1dfb      	adds	r3, r7, #7
 800408c:	2201      	movs	r2, #1
 800408e:	701a      	strb	r2, [r3, #0]
 8004090:	e001      	b.n	8004096 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004092:	f7ff fda5 	bl	8003be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004096:	1dfb      	adds	r3, r7, #7
 8004098:	781b      	ldrb	r3, [r3, #0]
}
 800409a:	0018      	movs	r0, r3
 800409c:	46bd      	mov	sp, r7
 800409e:	b002      	add	sp, #8
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	40022000 	.word	0x40022000

080040a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040a8:	b590      	push	{r4, r7, lr}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040b0:	4b14      	ldr	r3, [pc, #80]	; (8004104 <HAL_InitTick+0x5c>)
 80040b2:	681c      	ldr	r4, [r3, #0]
 80040b4:	4b14      	ldr	r3, [pc, #80]	; (8004108 <HAL_InitTick+0x60>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	0019      	movs	r1, r3
 80040ba:	23fa      	movs	r3, #250	; 0xfa
 80040bc:	0098      	lsls	r0, r3, #2
 80040be:	f7fc f83f 	bl	8000140 <__udivsi3>
 80040c2:	0003      	movs	r3, r0
 80040c4:	0019      	movs	r1, r3
 80040c6:	0020      	movs	r0, r4
 80040c8:	f7fc f83a 	bl	8000140 <__udivsi3>
 80040cc:	0003      	movs	r3, r0
 80040ce:	0018      	movs	r0, r3
 80040d0:	f000 fcdb 	bl	8004a8a <HAL_SYSTICK_Config>
 80040d4:	1e03      	subs	r3, r0, #0
 80040d6:	d001      	beq.n	80040dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e00f      	b.n	80040fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d80b      	bhi.n	80040fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	2301      	movs	r3, #1
 80040e6:	425b      	negs	r3, r3
 80040e8:	2200      	movs	r2, #0
 80040ea:	0018      	movs	r0, r3
 80040ec:	f000 fca8 	bl	8004a40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <HAL_InitTick+0x64>)
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e000      	b.n	80040fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
}
 80040fc:	0018      	movs	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	b003      	add	sp, #12
 8004102:	bd90      	pop	{r4, r7, pc}
 8004104:	20000000 	.word	0x20000000
 8004108:	20000008 	.word	0x20000008
 800410c:	20000004 	.word	0x20000004

08004110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <HAL_IncTick+0x1c>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	001a      	movs	r2, r3
 800411a:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_IncTick+0x20>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	18d2      	adds	r2, r2, r3
 8004120:	4b03      	ldr	r3, [pc, #12]	; (8004130 <HAL_IncTick+0x20>)
 8004122:	601a      	str	r2, [r3, #0]
}
 8004124:	46c0      	nop			; (mov r8, r8)
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	20000008 	.word	0x20000008
 8004130:	2000042c 	.word	0x2000042c

08004134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  return uwTick;
 8004138:	4b02      	ldr	r3, [pc, #8]	; (8004144 <HAL_GetTick+0x10>)
 800413a:	681b      	ldr	r3, [r3, #0]
}
 800413c:	0018      	movs	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	2000042c 	.word	0x2000042c

08004148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004150:	f7ff fff0 	bl	8004134 <HAL_GetTick>
 8004154:	0003      	movs	r3, r0
 8004156:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3301      	adds	r3, #1
 8004160:	d005      	beq.n	800416e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004162:	4b0a      	ldr	r3, [pc, #40]	; (800418c <HAL_Delay+0x44>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	001a      	movs	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	189b      	adds	r3, r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	f7ff ffe0 	bl	8004134 <HAL_GetTick>
 8004174:	0002      	movs	r2, r0
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	429a      	cmp	r2, r3
 800417e:	d8f7      	bhi.n	8004170 <HAL_Delay+0x28>
  {
  }
}
 8004180:	46c0      	nop			; (mov r8, r8)
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	46bd      	mov	sp, r7
 8004186:	b004      	add	sp, #16
 8004188:	bd80      	pop	{r7, pc}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	20000008 	.word	0x20000008

08004190 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <HAL_SuspendTick+0x18>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <HAL_SuspendTick+0x18>)
 800419a:	2102      	movs	r1, #2
 800419c:	438a      	bics	r2, r1
 800419e:	601a      	str	r2, [r3, #0]
}
 80041a0:	46c0      	nop			; (mov r8, r8)
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	e000e010 	.word	0xe000e010

080041ac <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <HAL_ResumeTick+0x18>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <HAL_ResumeTick+0x18>)
 80041b6:	2102      	movs	r1, #2
 80041b8:	430a      	orrs	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]
}
 80041bc:	46c0      	nop			; (mov r8, r8)
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	e000e010 	.word	0xe000e010

080041c8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e159      	b.n	800448e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2250      	movs	r2, #80	; 0x50
 80041ec:	2100      	movs	r1, #0
 80041ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	0018      	movs	r0, r3
 80041f4:	f7ff fd08 	bl	8003c08 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fc:	2210      	movs	r2, #16
 80041fe:	4013      	ands	r3, r2
 8004200:	2b10      	cmp	r3, #16
 8004202:	d005      	beq.n	8004210 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2204      	movs	r2, #4
 800420c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800420e:	d00b      	beq.n	8004228 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004214:	2210      	movs	r2, #16
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2250      	movs	r2, #80	; 0x50
 8004220:	2100      	movs	r1, #0
 8004222:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e132      	b.n	800448e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422c:	4a9a      	ldr	r2, [pc, #616]	; (8004498 <HAL_ADC_Init+0x2d0>)
 800422e:	4013      	ands	r3, r2
 8004230:	2202      	movs	r2, #2
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2203      	movs	r2, #3
 8004240:	4013      	ands	r3, r2
 8004242:	2b01      	cmp	r3, #1
 8004244:	d108      	bne.n	8004258 <HAL_ADC_Init+0x90>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2201      	movs	r2, #1
 800424e:	4013      	ands	r3, r2
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_ADC_Init+0x90>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <HAL_ADC_Init+0x92>
 8004258:	2300      	movs	r3, #0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d149      	bne.n	80042f2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	23c0      	movs	r3, #192	; 0xc0
 8004264:	061b      	lsls	r3, r3, #24
 8004266:	429a      	cmp	r2, r3
 8004268:	d00b      	beq.n	8004282 <HAL_ADC_Init+0xba>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	2380      	movs	r3, #128	; 0x80
 8004270:	05db      	lsls	r3, r3, #23
 8004272:	429a      	cmp	r2, r3
 8004274:	d005      	beq.n	8004282 <HAL_ADC_Init+0xba>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	2380      	movs	r3, #128	; 0x80
 800427c:	061b      	lsls	r3, r3, #24
 800427e:	429a      	cmp	r2, r3
 8004280:	d111      	bne.n	80042a6 <HAL_ADC_Init+0xde>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	0092      	lsls	r2, r2, #2
 800428e:	0892      	lsrs	r2, r2, #2
 8004290:	611a      	str	r2, [r3, #16]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6919      	ldr	r1, [r3, #16]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	611a      	str	r2, [r3, #16]
 80042a4:	e014      	b.n	80042d0 <HAL_ADC_Init+0x108>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	0092      	lsls	r2, r2, #2
 80042b2:	0892      	lsrs	r2, r2, #2
 80042b4:	611a      	str	r2, [r3, #16]
 80042b6:	4b79      	ldr	r3, [pc, #484]	; (800449c <HAL_ADC_Init+0x2d4>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4b78      	ldr	r3, [pc, #480]	; (800449c <HAL_ADC_Init+0x2d4>)
 80042bc:	4978      	ldr	r1, [pc, #480]	; (80044a0 <HAL_ADC_Init+0x2d8>)
 80042be:	400a      	ands	r2, r1
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	4b76      	ldr	r3, [pc, #472]	; (800449c <HAL_ADC_Init+0x2d4>)
 80042c4:	6819      	ldr	r1, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	4b74      	ldr	r3, [pc, #464]	; (800449c <HAL_ADC_Init+0x2d4>)
 80042cc:	430a      	orrs	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2118      	movs	r1, #24
 80042dc:	438a      	bics	r2, r1
 80042de:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68d9      	ldr	r1, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80042f2:	4b6a      	ldr	r3, [pc, #424]	; (800449c <HAL_ADC_Init+0x2d4>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4b69      	ldr	r3, [pc, #420]	; (800449c <HAL_ADC_Init+0x2d4>)
 80042f8:	496a      	ldr	r1, [pc, #424]	; (80044a4 <HAL_ADC_Init+0x2dc>)
 80042fa:	400a      	ands	r2, r1
 80042fc:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80042fe:	4b67      	ldr	r3, [pc, #412]	; (800449c <HAL_ADC_Init+0x2d4>)
 8004300:	6819      	ldr	r1, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004306:	065a      	lsls	r2, r3, #25
 8004308:	4b64      	ldr	r3, [pc, #400]	; (800449c <HAL_ADC_Init+0x2d4>)
 800430a:	430a      	orrs	r2, r1
 800430c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	055b      	lsls	r3, r3, #21
 8004318:	4013      	ands	r3, r2
 800431a:	d108      	bne.n	800432e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2180      	movs	r1, #128	; 0x80
 8004328:	0549      	lsls	r1, r1, #21
 800432a:	430a      	orrs	r2, r1
 800432c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	495b      	ldr	r1, [pc, #364]	; (80044a8 <HAL_ADC_Init+0x2e0>)
 800433a:	400a      	ands	r2, r1
 800433c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68d9      	ldr	r1, [r3, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d101      	bne.n	8004354 <HAL_ADC_Init+0x18c>
 8004350:	2304      	movs	r3, #4
 8004352:	e000      	b.n	8004356 <HAL_ADC_Init+0x18e>
 8004354:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004356:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2020      	movs	r0, #32
 800435c:	5c1b      	ldrb	r3, [r3, r0]
 800435e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004360:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	202c      	movs	r0, #44	; 0x2c
 8004366:	5c1b      	ldrb	r3, [r3, r0]
 8004368:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800436a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004370:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004378:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004380:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800438e:	23c2      	movs	r3, #194	; 0xc2
 8004390:	33ff      	adds	r3, #255	; 0xff
 8004392:	429a      	cmp	r2, r3
 8004394:	d00b      	beq.n	80043ae <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68d9      	ldr	r1, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2221      	movs	r2, #33	; 0x21
 80043b2:	5c9b      	ldrb	r3, [r3, r2]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d11a      	bne.n	80043ee <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	5c9b      	ldrb	r3, [r3, r2]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2180      	movs	r1, #128	; 0x80
 80043ce:	0249      	lsls	r1, r1, #9
 80043d0:	430a      	orrs	r2, r1
 80043d2:	60da      	str	r2, [r3, #12]
 80043d4:	e00b      	b.n	80043ee <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	2220      	movs	r2, #32
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	2201      	movs	r2, #1
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d11f      	bne.n	8004436 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	492a      	ldr	r1, [pc, #168]	; (80044ac <HAL_ADC_Init+0x2e4>)
 8004402:	400a      	ands	r2, r1
 8004404:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6919      	ldr	r1, [r3, #16]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004414:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800441a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2101      	movs	r1, #1
 8004430:	430a      	orrs	r2, r1
 8004432:	611a      	str	r2, [r3, #16]
 8004434:	e00e      	b.n	8004454 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	2201      	movs	r2, #1
 800443e:	4013      	ands	r3, r2
 8004440:	2b01      	cmp	r3, #1
 8004442:	d107      	bne.n	8004454 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2101      	movs	r1, #1
 8004450:	438a      	bics	r2, r1
 8004452:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2107      	movs	r1, #7
 8004460:	438a      	bics	r2, r1
 8004462:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6959      	ldr	r1, [r3, #20]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004480:	2203      	movs	r2, #3
 8004482:	4393      	bics	r3, r2
 8004484:	2201      	movs	r2, #1
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	0018      	movs	r0, r3
 8004490:	46bd      	mov	sp, r7
 8004492:	b002      	add	sp, #8
 8004494:	bd80      	pop	{r7, pc}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	fffffefd 	.word	0xfffffefd
 800449c:	40012708 	.word	0x40012708
 80044a0:	ffc3ffff 	.word	0xffc3ffff
 80044a4:	fdffffff 	.word	0xfdffffff
 80044a8:	fffe0219 	.word	0xfffe0219
 80044ac:	fffffc03 	.word	0xfffffc03

080044b0 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80044b0:	b590      	push	{r4, r7, lr}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044bc:	2317      	movs	r3, #23
 80044be:	18fb      	adds	r3, r7, r3
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2204      	movs	r2, #4
 80044cc:	4013      	ands	r3, r2
 80044ce:	d15e      	bne.n	800458e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2250      	movs	r2, #80	; 0x50
 80044d4:	5c9b      	ldrb	r3, [r3, r2]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_ADC_Start_DMA+0x2e>
 80044da:	2302      	movs	r3, #2
 80044dc:	e05e      	b.n	800459c <HAL_ADC_Start_DMA+0xec>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2250      	movs	r2, #80	; 0x50
 80044e2:	2101      	movs	r1, #1
 80044e4:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2101      	movs	r1, #1
 80044f2:	430a      	orrs	r2, r1
 80044f4:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d007      	beq.n	800450e <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80044fe:	2317      	movs	r3, #23
 8004500:	18fc      	adds	r4, r7, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	0018      	movs	r0, r3
 8004506:	f000 f8e3 	bl	80046d0 <ADC_Enable>
 800450a:	0003      	movs	r3, r0
 800450c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800450e:	2317      	movs	r3, #23
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d13e      	bne.n	8004596 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451c:	4a21      	ldr	r2, [pc, #132]	; (80045a4 <HAL_ADC_Start_DMA+0xf4>)
 800451e:	4013      	ands	r3, r2
 8004520:	2280      	movs	r2, #128	; 0x80
 8004522:	0052      	lsls	r2, r2, #1
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2250      	movs	r2, #80	; 0x50
 8004534:	2100      	movs	r1, #0
 8004536:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453c:	4a1a      	ldr	r2, [pc, #104]	; (80045a8 <HAL_ADC_Start_DMA+0xf8>)
 800453e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004544:	4a19      	ldr	r2, [pc, #100]	; (80045ac <HAL_ADC_Start_DMA+0xfc>)
 8004546:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454c:	4a18      	ldr	r2, [pc, #96]	; (80045b0 <HAL_ADC_Start_DMA+0x100>)
 800454e:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	221c      	movs	r2, #28
 8004556:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2110      	movs	r1, #16
 8004564:	430a      	orrs	r2, r1
 8004566:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3340      	adds	r3, #64	; 0x40
 8004572:	0019      	movs	r1, r3
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f000 fb0c 	bl	8004b94 <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2104      	movs	r1, #4
 8004588:	430a      	orrs	r2, r1
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	e003      	b.n	8004596 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800458e:	2317      	movs	r3, #23
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	2202      	movs	r2, #2
 8004594:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8004596:	2317      	movs	r3, #23
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	781b      	ldrb	r3, [r3, #0]
}
 800459c:	0018      	movs	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	b007      	add	sp, #28
 80045a2:	bd90      	pop	{r4, r7, pc}
 80045a4:	fffff0fe 	.word	0xfffff0fe
 80045a8:	080047a1 	.word	0x080047a1
 80045ac:	08004855 	.word	0x08004855
 80045b0:	08004873 	.word	0x08004873

080045b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80045bc:	46c0      	nop			; (mov r8, r8)
 80045be:	46bd      	mov	sp, r7
 80045c0:	b002      	add	sp, #8
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2250      	movs	r2, #80	; 0x50
 80045d2:	5c9b      	ldrb	r3, [r3, r2]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_ADC_ConfigChannel+0x18>
 80045d8:	2302      	movs	r3, #2
 80045da:	e06c      	b.n	80046b6 <HAL_ADC_ConfigChannel+0xf2>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2250      	movs	r2, #80	; 0x50
 80045e0:	2101      	movs	r1, #1
 80045e2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2204      	movs	r2, #4
 80045ec:	4013      	ands	r3, r2
 80045ee:	d00b      	beq.n	8004608 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f4:	2220      	movs	r2, #32
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2250      	movs	r2, #80	; 0x50
 8004600:	2100      	movs	r1, #0
 8004602:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e056      	b.n	80046b6 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4a2c      	ldr	r2, [pc, #176]	; (80046c0 <HAL_ADC_ConfigChannel+0xfc>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d028      	beq.n	8004664 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	035b      	lsls	r3, r3, #13
 800461e:	0b5a      	lsrs	r2, r3, #13
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	02db      	lsls	r3, r3, #11
 8004630:	4013      	ands	r3, r2
 8004632:	d009      	beq.n	8004648 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8004634:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <HAL_ADC_ConfigChannel+0x100>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	4b22      	ldr	r3, [pc, #136]	; (80046c4 <HAL_ADC_ConfigChannel+0x100>)
 800463a:	2180      	movs	r1, #128	; 0x80
 800463c:	0409      	lsls	r1, r1, #16
 800463e:	430a      	orrs	r2, r1
 8004640:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004642:	200a      	movs	r0, #10
 8004644:	f000 f930 	bl	80048a8 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	029b      	lsls	r3, r3, #10
 8004650:	4013      	ands	r3, r2
 8004652:	d02b      	beq.n	80046ac <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8004654:	4b1b      	ldr	r3, [pc, #108]	; (80046c4 <HAL_ADC_ConfigChannel+0x100>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <HAL_ADC_ConfigChannel+0x100>)
 800465a:	2180      	movs	r1, #128	; 0x80
 800465c:	03c9      	lsls	r1, r1, #15
 800465e:	430a      	orrs	r2, r1
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	e023      	b.n	80046ac <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	035b      	lsls	r3, r3, #13
 8004670:	0b5b      	lsrs	r3, r3, #13
 8004672:	43d9      	mvns	r1, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	400a      	ands	r2, r1
 800467a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	2380      	movs	r3, #128	; 0x80
 8004682:	02db      	lsls	r3, r3, #11
 8004684:	4013      	ands	r3, r2
 8004686:	d005      	beq.n	8004694 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8004688:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <HAL_ADC_ConfigChannel+0x100>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	4b0d      	ldr	r3, [pc, #52]	; (80046c4 <HAL_ADC_ConfigChannel+0x100>)
 800468e:	490e      	ldr	r1, [pc, #56]	; (80046c8 <HAL_ADC_ConfigChannel+0x104>)
 8004690:	400a      	ands	r2, r1
 8004692:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	2380      	movs	r3, #128	; 0x80
 800469a:	029b      	lsls	r3, r3, #10
 800469c:	4013      	ands	r3, r2
 800469e:	d005      	beq.n	80046ac <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80046a0:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <HAL_ADC_ConfigChannel+0x100>)
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <HAL_ADC_ConfigChannel+0x100>)
 80046a6:	4909      	ldr	r1, [pc, #36]	; (80046cc <HAL_ADC_ConfigChannel+0x108>)
 80046a8:	400a      	ands	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2250      	movs	r2, #80	; 0x50
 80046b0:	2100      	movs	r1, #0
 80046b2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	0018      	movs	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b002      	add	sp, #8
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	00001001 	.word	0x00001001
 80046c4:	40012708 	.word	0x40012708
 80046c8:	ff7fffff 	.word	0xff7fffff
 80046cc:	ffbfffff 	.word	0xffbfffff

080046d0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2203      	movs	r2, #3
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d108      	bne.n	80046fc <ADC_Enable+0x2c>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2201      	movs	r2, #1
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <ADC_Enable+0x2c>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <ADC_Enable+0x2e>
 80046fc:	2300      	movs	r3, #0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d146      	bne.n	8004790 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	4a24      	ldr	r2, [pc, #144]	; (800479c <ADC_Enable+0xcc>)
 800470a:	4013      	ands	r3, r2
 800470c:	d00d      	beq.n	800472a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004712:	2210      	movs	r2, #16
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471e:	2201      	movs	r2, #1
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e033      	b.n	8004792 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2101      	movs	r1, #1
 8004736:	430a      	orrs	r2, r1
 8004738:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800473a:	2001      	movs	r0, #1
 800473c:	f000 f8b4 	bl	80048a8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004740:	f7ff fcf8 	bl	8004134 <HAL_GetTick>
 8004744:	0003      	movs	r3, r0
 8004746:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004748:	e01b      	b.n	8004782 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800474a:	f7ff fcf3 	bl	8004134 <HAL_GetTick>
 800474e:	0002      	movs	r2, r0
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b0a      	cmp	r3, #10
 8004756:	d914      	bls.n	8004782 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2201      	movs	r2, #1
 8004760:	4013      	ands	r3, r2
 8004762:	2b01      	cmp	r3, #1
 8004764:	d00d      	beq.n	8004782 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476a:	2210      	movs	r2, #16
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004776:	2201      	movs	r2, #1
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e007      	b.n	8004792 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2201      	movs	r2, #1
 800478a:	4013      	ands	r3, r2
 800478c:	2b01      	cmp	r3, #1
 800478e:	d1dc      	bne.n	800474a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	0018      	movs	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	b004      	add	sp, #16
 8004798:	bd80      	pop	{r7, pc}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	80000017 	.word	0x80000017

080047a0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b2:	2250      	movs	r2, #80	; 0x50
 80047b4:	4013      	ands	r3, r2
 80047b6:	d141      	bne.n	800483c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047bc:	2280      	movs	r2, #128	; 0x80
 80047be:	0092      	lsls	r2, r2, #2
 80047c0:	431a      	orrs	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	23c0      	movs	r3, #192	; 0xc0
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	4013      	ands	r3, r2
 80047d2:	d12e      	bne.n	8004832 <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d129      	bne.n	8004832 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2208      	movs	r2, #8
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d122      	bne.n	8004832 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2204      	movs	r2, #4
 80047f4:	4013      	ands	r3, r2
 80047f6:	d110      	bne.n	800481a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	210c      	movs	r1, #12
 8004804:	438a      	bics	r2, r1
 8004806:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480c:	4a10      	ldr	r2, [pc, #64]	; (8004850 <ADC_DMAConvCplt+0xb0>)
 800480e:	4013      	ands	r3, r2
 8004810:	2201      	movs	r2, #1
 8004812:	431a      	orrs	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	655a      	str	r2, [r3, #84]	; 0x54
 8004818:	e00b      	b.n	8004832 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481e:	2220      	movs	r2, #32
 8004820:	431a      	orrs	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482a:	2201      	movs	r2, #1
 800482c:	431a      	orrs	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	0018      	movs	r0, r3
 8004836:	f7ff f889 	bl	800394c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800483a:	e005      	b.n	8004848 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	0010      	movs	r0, r2
 8004846:	4798      	blx	r3
}
 8004848:	46c0      	nop			; (mov r8, r8)
 800484a:	46bd      	mov	sp, r7
 800484c:	b004      	add	sp, #16
 800484e:	bd80      	pop	{r7, pc}
 8004850:	fffffefe 	.word	0xfffffefe

08004854 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004860:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	0018      	movs	r0, r3
 8004866:	f7ff f869 	bl	800393c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	46bd      	mov	sp, r7
 800486e:	b004      	add	sp, #16
 8004870:	bd80      	pop	{r7, pc}

08004872 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004884:	2240      	movs	r2, #64	; 0x40
 8004886:	431a      	orrs	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004890:	2204      	movs	r2, #4
 8004892:	431a      	orrs	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	0018      	movs	r0, r3
 800489c:	f7ff fe8a 	bl	80045b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048a0:	46c0      	nop			; (mov r8, r8)
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b004      	add	sp, #16
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <ADC_DelayMicroSecond+0x38>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	490b      	ldr	r1, [pc, #44]	; (80048e4 <ADC_DelayMicroSecond+0x3c>)
 80048b6:	0018      	movs	r0, r3
 80048b8:	f7fb fc42 	bl	8000140 <__udivsi3>
 80048bc:	0003      	movs	r3, r0
 80048be:	001a      	movs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4353      	muls	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80048c6:	e002      	b.n	80048ce <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1f9      	bne.n	80048c8 <ADC_DelayMicroSecond+0x20>
  }
}
 80048d4:	46c0      	nop			; (mov r8, r8)
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	46bd      	mov	sp, r7
 80048da:	b004      	add	sp, #16
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	20000000 	.word	0x20000000
 80048e4:	000f4240 	.word	0x000f4240

080048e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	0002      	movs	r2, r0
 80048f0:	1dfb      	adds	r3, r7, #7
 80048f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80048f4:	1dfb      	adds	r3, r7, #7
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b7f      	cmp	r3, #127	; 0x7f
 80048fa:	d809      	bhi.n	8004910 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048fc:	1dfb      	adds	r3, r7, #7
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	001a      	movs	r2, r3
 8004902:	231f      	movs	r3, #31
 8004904:	401a      	ands	r2, r3
 8004906:	4b04      	ldr	r3, [pc, #16]	; (8004918 <__NVIC_EnableIRQ+0x30>)
 8004908:	2101      	movs	r1, #1
 800490a:	4091      	lsls	r1, r2
 800490c:	000a      	movs	r2, r1
 800490e:	601a      	str	r2, [r3, #0]
  }
}
 8004910:	46c0      	nop			; (mov r8, r8)
 8004912:	46bd      	mov	sp, r7
 8004914:	b002      	add	sp, #8
 8004916:	bd80      	pop	{r7, pc}
 8004918:	e000e100 	.word	0xe000e100

0800491c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800491c:	b590      	push	{r4, r7, lr}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	0002      	movs	r2, r0
 8004924:	6039      	str	r1, [r7, #0]
 8004926:	1dfb      	adds	r3, r7, #7
 8004928:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800492a:	1dfb      	adds	r3, r7, #7
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b7f      	cmp	r3, #127	; 0x7f
 8004930:	d828      	bhi.n	8004984 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004932:	4a2f      	ldr	r2, [pc, #188]	; (80049f0 <__NVIC_SetPriority+0xd4>)
 8004934:	1dfb      	adds	r3, r7, #7
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	b25b      	sxtb	r3, r3
 800493a:	089b      	lsrs	r3, r3, #2
 800493c:	33c0      	adds	r3, #192	; 0xc0
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	589b      	ldr	r3, [r3, r2]
 8004942:	1dfa      	adds	r2, r7, #7
 8004944:	7812      	ldrb	r2, [r2, #0]
 8004946:	0011      	movs	r1, r2
 8004948:	2203      	movs	r2, #3
 800494a:	400a      	ands	r2, r1
 800494c:	00d2      	lsls	r2, r2, #3
 800494e:	21ff      	movs	r1, #255	; 0xff
 8004950:	4091      	lsls	r1, r2
 8004952:	000a      	movs	r2, r1
 8004954:	43d2      	mvns	r2, r2
 8004956:	401a      	ands	r2, r3
 8004958:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	019b      	lsls	r3, r3, #6
 800495e:	22ff      	movs	r2, #255	; 0xff
 8004960:	401a      	ands	r2, r3
 8004962:	1dfb      	adds	r3, r7, #7
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	0018      	movs	r0, r3
 8004968:	2303      	movs	r3, #3
 800496a:	4003      	ands	r3, r0
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004970:	481f      	ldr	r0, [pc, #124]	; (80049f0 <__NVIC_SetPriority+0xd4>)
 8004972:	1dfb      	adds	r3, r7, #7
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	b25b      	sxtb	r3, r3
 8004978:	089b      	lsrs	r3, r3, #2
 800497a:	430a      	orrs	r2, r1
 800497c:	33c0      	adds	r3, #192	; 0xc0
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004982:	e031      	b.n	80049e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004984:	4a1b      	ldr	r2, [pc, #108]	; (80049f4 <__NVIC_SetPriority+0xd8>)
 8004986:	1dfb      	adds	r3, r7, #7
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	0019      	movs	r1, r3
 800498c:	230f      	movs	r3, #15
 800498e:	400b      	ands	r3, r1
 8004990:	3b08      	subs	r3, #8
 8004992:	089b      	lsrs	r3, r3, #2
 8004994:	3306      	adds	r3, #6
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	18d3      	adds	r3, r2, r3
 800499a:	3304      	adds	r3, #4
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	1dfa      	adds	r2, r7, #7
 80049a0:	7812      	ldrb	r2, [r2, #0]
 80049a2:	0011      	movs	r1, r2
 80049a4:	2203      	movs	r2, #3
 80049a6:	400a      	ands	r2, r1
 80049a8:	00d2      	lsls	r2, r2, #3
 80049aa:	21ff      	movs	r1, #255	; 0xff
 80049ac:	4091      	lsls	r1, r2
 80049ae:	000a      	movs	r2, r1
 80049b0:	43d2      	mvns	r2, r2
 80049b2:	401a      	ands	r2, r3
 80049b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	019b      	lsls	r3, r3, #6
 80049ba:	22ff      	movs	r2, #255	; 0xff
 80049bc:	401a      	ands	r2, r3
 80049be:	1dfb      	adds	r3, r7, #7
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	0018      	movs	r0, r3
 80049c4:	2303      	movs	r3, #3
 80049c6:	4003      	ands	r3, r0
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049cc:	4809      	ldr	r0, [pc, #36]	; (80049f4 <__NVIC_SetPriority+0xd8>)
 80049ce:	1dfb      	adds	r3, r7, #7
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	001c      	movs	r4, r3
 80049d4:	230f      	movs	r3, #15
 80049d6:	4023      	ands	r3, r4
 80049d8:	3b08      	subs	r3, #8
 80049da:	089b      	lsrs	r3, r3, #2
 80049dc:	430a      	orrs	r2, r1
 80049de:	3306      	adds	r3, #6
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	18c3      	adds	r3, r0, r3
 80049e4:	3304      	adds	r3, #4
 80049e6:	601a      	str	r2, [r3, #0]
}
 80049e8:	46c0      	nop			; (mov r8, r8)
 80049ea:	46bd      	mov	sp, r7
 80049ec:	b003      	add	sp, #12
 80049ee:	bd90      	pop	{r4, r7, pc}
 80049f0:	e000e100 	.word	0xe000e100
 80049f4:	e000ed00 	.word	0xe000ed00

080049f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	1e5a      	subs	r2, r3, #1
 8004a04:	2380      	movs	r3, #128	; 0x80
 8004a06:	045b      	lsls	r3, r3, #17
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d301      	bcc.n	8004a10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e010      	b.n	8004a32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <SysTick_Config+0x44>)
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	3a01      	subs	r2, #1
 8004a16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a18:	2301      	movs	r3, #1
 8004a1a:	425b      	negs	r3, r3
 8004a1c:	2103      	movs	r1, #3
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f7ff ff7c 	bl	800491c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <SysTick_Config+0x44>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a2a:	4b04      	ldr	r3, [pc, #16]	; (8004a3c <SysTick_Config+0x44>)
 8004a2c:	2207      	movs	r2, #7
 8004a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	0018      	movs	r0, r3
 8004a34:	46bd      	mov	sp, r7
 8004a36:	b002      	add	sp, #8
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	e000e010 	.word	0xe000e010

08004a40 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
 8004a4a:	210f      	movs	r1, #15
 8004a4c:	187b      	adds	r3, r7, r1
 8004a4e:	1c02      	adds	r2, r0, #0
 8004a50:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	187b      	adds	r3, r7, r1
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	b25b      	sxtb	r3, r3
 8004a5a:	0011      	movs	r1, r2
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7ff ff5d 	bl	800491c <__NVIC_SetPriority>
}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	46bd      	mov	sp, r7
 8004a66:	b004      	add	sp, #16
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b082      	sub	sp, #8
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	0002      	movs	r2, r0
 8004a72:	1dfb      	adds	r3, r7, #7
 8004a74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a76:	1dfb      	adds	r3, r7, #7
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	b25b      	sxtb	r3, r3
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f7ff ff33 	bl	80048e8 <__NVIC_EnableIRQ>
}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	46bd      	mov	sp, r7
 8004a86:	b002      	add	sp, #8
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	0018      	movs	r0, r3
 8004a96:	f7ff ffaf 	bl	80049f8 <SysTick_Config>
 8004a9a:	0003      	movs	r3, r0
}
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b002      	add	sp, #8
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e061      	b.n	8004b7a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a32      	ldr	r2, [pc, #200]	; (8004b84 <HAL_DMA_Init+0xe0>)
 8004abc:	4694      	mov	ip, r2
 8004abe:	4463      	add	r3, ip
 8004ac0:	2114      	movs	r1, #20
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f7fb fb3c 	bl	8000140 <__udivsi3>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	009a      	lsls	r2, r3, #2
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a2d      	ldr	r2, [pc, #180]	; (8004b88 <HAL_DMA_Init+0xe4>)
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2225      	movs	r2, #37	; 0x25
 8004ada:	2102      	movs	r1, #2
 8004adc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4a28      	ldr	r2, [pc, #160]	; (8004b8c <HAL_DMA_Init+0xe8>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	2380      	movs	r3, #128	; 0x80
 8004b2a:	01db      	lsls	r3, r3, #7
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d018      	beq.n	8004b62 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004b30:	4b17      	ldr	r3, [pc, #92]	; (8004b90 <HAL_DMA_Init+0xec>)
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b38:	211c      	movs	r1, #28
 8004b3a:	400b      	ands	r3, r1
 8004b3c:	210f      	movs	r1, #15
 8004b3e:	4099      	lsls	r1, r3
 8004b40:	000b      	movs	r3, r1
 8004b42:	43d9      	mvns	r1, r3
 8004b44:	4b12      	ldr	r3, [pc, #72]	; (8004b90 <HAL_DMA_Init+0xec>)
 8004b46:	400a      	ands	r2, r1
 8004b48:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004b4a:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <HAL_DMA_Init+0xec>)
 8004b4c:	6819      	ldr	r1, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b56:	201c      	movs	r0, #28
 8004b58:	4003      	ands	r3, r0
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <HAL_DMA_Init+0xec>)
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2225      	movs	r2, #37	; 0x25
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2224      	movs	r2, #36	; 0x24
 8004b74:	2100      	movs	r1, #0
 8004b76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	b004      	add	sp, #16
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	bffdfff8 	.word	0xbffdfff8
 8004b88:	40020000 	.word	0x40020000
 8004b8c:	ffff800f 	.word	0xffff800f
 8004b90:	400200a8 	.word	0x400200a8

08004b94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba2:	2317      	movs	r3, #23
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2224      	movs	r2, #36	; 0x24
 8004bae:	5c9b      	ldrb	r3, [r3, r2]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_DMA_Start_IT+0x24>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e04f      	b.n	8004c58 <HAL_DMA_Start_IT+0xc4>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2224      	movs	r2, #36	; 0x24
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2225      	movs	r2, #37	; 0x25
 8004bc4:	5c9b      	ldrb	r3, [r3, r2]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d13a      	bne.n	8004c42 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2225      	movs	r2, #37	; 0x25
 8004bd0:	2102      	movs	r1, #2
 8004bd2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2101      	movs	r1, #1
 8004be6:	438a      	bics	r2, r1
 8004be8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f8e3 	bl	8004dbc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d008      	beq.n	8004c10 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	210e      	movs	r1, #14
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	e00f      	b.n	8004c30 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2104      	movs	r1, #4
 8004c1c:	438a      	bics	r2, r1
 8004c1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	210a      	movs	r1, #10
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	e007      	b.n	8004c52 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2224      	movs	r2, #36	; 0x24
 8004c46:	2100      	movs	r1, #0
 8004c48:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c4a:	2317      	movs	r3, #23
 8004c4c:	18fb      	adds	r3, r7, r3
 8004c4e:	2202      	movs	r2, #2
 8004c50:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8004c52:	2317      	movs	r3, #23
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	781b      	ldrb	r3, [r3, #0]
}
 8004c58:	0018      	movs	r0, r3
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	b006      	add	sp, #24
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7c:	221c      	movs	r2, #28
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2204      	movs	r2, #4
 8004c82:	409a      	lsls	r2, r3
 8004c84:	0013      	movs	r3, r2
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d026      	beq.n	8004cda <HAL_DMA_IRQHandler+0x7a>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2204      	movs	r2, #4
 8004c90:	4013      	ands	r3, r2
 8004c92:	d022      	beq.n	8004cda <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	d107      	bne.n	8004cb0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2104      	movs	r1, #4
 8004cac:	438a      	bics	r2, r1
 8004cae:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb4:	221c      	movs	r2, #28
 8004cb6:	401a      	ands	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	2104      	movs	r1, #4
 8004cbe:	4091      	lsls	r1, r2
 8004cc0:	000a      	movs	r2, r1
 8004cc2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d100      	bne.n	8004cce <HAL_DMA_IRQHandler+0x6e>
 8004ccc:	e071      	b.n	8004db2 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	0010      	movs	r0, r2
 8004cd6:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8004cd8:	e06b      	b.n	8004db2 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cde:	221c      	movs	r2, #28
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	409a      	lsls	r2, r3
 8004ce6:	0013      	movs	r3, r2
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4013      	ands	r3, r2
 8004cec:	d02d      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xea>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d029      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d10b      	bne.n	8004d1a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	210a      	movs	r1, #10
 8004d0e:	438a      	bics	r2, r1
 8004d10:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2225      	movs	r2, #37	; 0x25
 8004d16:	2101      	movs	r1, #1
 8004d18:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	221c      	movs	r2, #28
 8004d20:	401a      	ands	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	2102      	movs	r1, #2
 8004d28:	4091      	lsls	r1, r2
 8004d2a:	000a      	movs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2224      	movs	r2, #36	; 0x24
 8004d32:	2100      	movs	r1, #0
 8004d34:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d039      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	0010      	movs	r0, r2
 8004d46:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004d48:	e033      	b.n	8004db2 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4e:	221c      	movs	r2, #28
 8004d50:	4013      	ands	r3, r2
 8004d52:	2208      	movs	r2, #8
 8004d54:	409a      	lsls	r2, r3
 8004d56:	0013      	movs	r3, r2
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	d02a      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x154>
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2208      	movs	r2, #8
 8004d62:	4013      	ands	r3, r2
 8004d64:	d026      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	210e      	movs	r1, #14
 8004d72:	438a      	bics	r2, r1
 8004d74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	221c      	movs	r2, #28
 8004d7c:	401a      	ands	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	2101      	movs	r1, #1
 8004d84:	4091      	lsls	r1, r2
 8004d86:	000a      	movs	r2, r1
 8004d88:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2225      	movs	r2, #37	; 0x25
 8004d94:	2101      	movs	r1, #1
 8004d96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2224      	movs	r2, #36	; 0x24
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d005      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	0010      	movs	r0, r2
 8004db0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	46c0      	nop			; (mov r8, r8)
}
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b004      	add	sp, #16
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dce:	221c      	movs	r2, #28
 8004dd0:	401a      	ands	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	4091      	lsls	r1, r2
 8004dda:	000a      	movs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b10      	cmp	r3, #16
 8004dec:	d108      	bne.n	8004e00 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004dfe:	e007      	b.n	8004e10 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	60da      	str	r2, [r3, #12]
}
 8004e10:	46c0      	nop			; (mov r8, r8)
 8004e12:	46bd      	mov	sp, r7
 8004e14:	b004      	add	sp, #16
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004e2e:	e14f      	b.n	80050d0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2101      	movs	r1, #1
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4091      	lsls	r1, r2
 8004e3a:	000a      	movs	r2, r1
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d100      	bne.n	8004e48 <HAL_GPIO_Init+0x30>
 8004e46:	e140      	b.n	80050ca <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d005      	beq.n	8004e60 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2203      	movs	r2, #3
 8004e5a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d130      	bne.n	8004ec2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	2203      	movs	r2, #3
 8004e6c:	409a      	lsls	r2, r3
 8004e6e:	0013      	movs	r3, r2
 8004e70:	43da      	mvns	r2, r3
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	4013      	ands	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	409a      	lsls	r2, r3
 8004e82:	0013      	movs	r3, r2
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e96:	2201      	movs	r2, #1
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	0013      	movs	r3, r2
 8004e9e:	43da      	mvns	r2, r3
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	091b      	lsrs	r3, r3, #4
 8004eac:	2201      	movs	r2, #1
 8004eae:	401a      	ands	r2, r3
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	0013      	movs	r3, r2
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2203      	movs	r2, #3
 8004ec8:	4013      	ands	r3, r2
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d017      	beq.n	8004efe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	2203      	movs	r2, #3
 8004eda:	409a      	lsls	r2, r3
 8004edc:	0013      	movs	r3, r2
 8004ede:	43da      	mvns	r2, r3
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	409a      	lsls	r2, r3
 8004ef0:	0013      	movs	r3, r2
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2203      	movs	r2, #3
 8004f04:	4013      	ands	r3, r2
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d123      	bne.n	8004f52 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	08da      	lsrs	r2, r3, #3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3208      	adds	r2, #8
 8004f12:	0092      	lsls	r2, r2, #2
 8004f14:	58d3      	ldr	r3, [r2, r3]
 8004f16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2207      	movs	r2, #7
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	220f      	movs	r2, #15
 8004f22:	409a      	lsls	r2, r3
 8004f24:	0013      	movs	r3, r2
 8004f26:	43da      	mvns	r2, r3
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2107      	movs	r1, #7
 8004f36:	400b      	ands	r3, r1
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	409a      	lsls	r2, r3
 8004f3c:	0013      	movs	r3, r2
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	08da      	lsrs	r2, r3, #3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3208      	adds	r2, #8
 8004f4c:	0092      	lsls	r2, r2, #2
 8004f4e:	6939      	ldr	r1, [r7, #16]
 8004f50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	2203      	movs	r2, #3
 8004f5e:	409a      	lsls	r2, r3
 8004f60:	0013      	movs	r3, r2
 8004f62:	43da      	mvns	r2, r3
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4013      	ands	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2203      	movs	r2, #3
 8004f70:	401a      	ands	r2, r3
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	409a      	lsls	r2, r3
 8004f78:	0013      	movs	r3, r2
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	23c0      	movs	r3, #192	; 0xc0
 8004f8c:	029b      	lsls	r3, r3, #10
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d100      	bne.n	8004f94 <HAL_GPIO_Init+0x17c>
 8004f92:	e09a      	b.n	80050ca <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f94:	4b54      	ldr	r3, [pc, #336]	; (80050e8 <HAL_GPIO_Init+0x2d0>)
 8004f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f98:	4b53      	ldr	r3, [pc, #332]	; (80050e8 <HAL_GPIO_Init+0x2d0>)
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fa0:	4a52      	ldr	r2, [pc, #328]	; (80050ec <HAL_GPIO_Init+0x2d4>)
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	089b      	lsrs	r3, r3, #2
 8004fa6:	3302      	adds	r3, #2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	589b      	ldr	r3, [r3, r2]
 8004fac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2203      	movs	r2, #3
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	220f      	movs	r2, #15
 8004fb8:	409a      	lsls	r2, r3
 8004fba:	0013      	movs	r3, r2
 8004fbc:	43da      	mvns	r2, r3
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	23a0      	movs	r3, #160	; 0xa0
 8004fc8:	05db      	lsls	r3, r3, #23
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d019      	beq.n	8005002 <HAL_GPIO_Init+0x1ea>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a47      	ldr	r2, [pc, #284]	; (80050f0 <HAL_GPIO_Init+0x2d8>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d013      	beq.n	8004ffe <HAL_GPIO_Init+0x1e6>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a46      	ldr	r2, [pc, #280]	; (80050f4 <HAL_GPIO_Init+0x2dc>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00d      	beq.n	8004ffa <HAL_GPIO_Init+0x1e2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a45      	ldr	r2, [pc, #276]	; (80050f8 <HAL_GPIO_Init+0x2e0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d007      	beq.n	8004ff6 <HAL_GPIO_Init+0x1de>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a44      	ldr	r2, [pc, #272]	; (80050fc <HAL_GPIO_Init+0x2e4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d101      	bne.n	8004ff2 <HAL_GPIO_Init+0x1da>
 8004fee:	2305      	movs	r3, #5
 8004ff0:	e008      	b.n	8005004 <HAL_GPIO_Init+0x1ec>
 8004ff2:	2306      	movs	r3, #6
 8004ff4:	e006      	b.n	8005004 <HAL_GPIO_Init+0x1ec>
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e004      	b.n	8005004 <HAL_GPIO_Init+0x1ec>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e002      	b.n	8005004 <HAL_GPIO_Init+0x1ec>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <HAL_GPIO_Init+0x1ec>
 8005002:	2300      	movs	r3, #0
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	2103      	movs	r1, #3
 8005008:	400a      	ands	r2, r1
 800500a:	0092      	lsls	r2, r2, #2
 800500c:	4093      	lsls	r3, r2
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005014:	4935      	ldr	r1, [pc, #212]	; (80050ec <HAL_GPIO_Init+0x2d4>)
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	089b      	lsrs	r3, r3, #2
 800501a:	3302      	adds	r3, #2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005022:	4b37      	ldr	r3, [pc, #220]	; (8005100 <HAL_GPIO_Init+0x2e8>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	43da      	mvns	r2, r3
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	4013      	ands	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	2380      	movs	r3, #128	; 0x80
 8005038:	035b      	lsls	r3, r3, #13
 800503a:	4013      	ands	r3, r2
 800503c:	d003      	beq.n	8005046 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005046:	4b2e      	ldr	r3, [pc, #184]	; (8005100 <HAL_GPIO_Init+0x2e8>)
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800504c:	4b2c      	ldr	r3, [pc, #176]	; (8005100 <HAL_GPIO_Init+0x2e8>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	43da      	mvns	r2, r3
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	4013      	ands	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	2380      	movs	r3, #128	; 0x80
 8005062:	039b      	lsls	r3, r3, #14
 8005064:	4013      	ands	r3, r2
 8005066:	d003      	beq.n	8005070 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4313      	orrs	r3, r2
 800506e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005070:	4b23      	ldr	r3, [pc, #140]	; (8005100 <HAL_GPIO_Init+0x2e8>)
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8005076:	4b22      	ldr	r3, [pc, #136]	; (8005100 <HAL_GPIO_Init+0x2e8>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	43da      	mvns	r2, r3
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4013      	ands	r3, r2
 8005084:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	2380      	movs	r3, #128	; 0x80
 800508c:	029b      	lsls	r3, r3, #10
 800508e:	4013      	ands	r3, r2
 8005090:	d003      	beq.n	800509a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800509a:	4b19      	ldr	r3, [pc, #100]	; (8005100 <HAL_GPIO_Init+0x2e8>)
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050a0:	4b17      	ldr	r3, [pc, #92]	; (8005100 <HAL_GPIO_Init+0x2e8>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	43da      	mvns	r2, r3
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4013      	ands	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	2380      	movs	r3, #128	; 0x80
 80050b6:	025b      	lsls	r3, r3, #9
 80050b8:	4013      	ands	r3, r2
 80050ba:	d003      	beq.n	80050c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80050c4:	4b0e      	ldr	r3, [pc, #56]	; (8005100 <HAL_GPIO_Init+0x2e8>)
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	3301      	adds	r3, #1
 80050ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	40da      	lsrs	r2, r3
 80050d8:	1e13      	subs	r3, r2, #0
 80050da:	d000      	beq.n	80050de <HAL_GPIO_Init+0x2c6>
 80050dc:	e6a8      	b.n	8004e30 <HAL_GPIO_Init+0x18>
  }
}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	46c0      	nop			; (mov r8, r8)
 80050e2:	46bd      	mov	sp, r7
 80050e4:	b006      	add	sp, #24
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40021000 	.word	0x40021000
 80050ec:	40010000 	.word	0x40010000
 80050f0:	50000400 	.word	0x50000400
 80050f4:	50000800 	.word	0x50000800
 80050f8:	50000c00 	.word	0x50000c00
 80050fc:	50001c00 	.word	0x50001c00
 8005100:	40010400 	.word	0x40010400

08005104 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	0008      	movs	r0, r1
 800510e:	0011      	movs	r1, r2
 8005110:	1cbb      	adds	r3, r7, #2
 8005112:	1c02      	adds	r2, r0, #0
 8005114:	801a      	strh	r2, [r3, #0]
 8005116:	1c7b      	adds	r3, r7, #1
 8005118:	1c0a      	adds	r2, r1, #0
 800511a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800511c:	1c7b      	adds	r3, r7, #1
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d004      	beq.n	800512e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005124:	1cbb      	adds	r3, r7, #2
 8005126:	881a      	ldrh	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800512c:	e003      	b.n	8005136 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800512e:	1cbb      	adds	r3, r7, #2
 8005130:	881a      	ldrh	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	46bd      	mov	sp, r7
 800513a:	b002      	add	sp, #8
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	000a      	movs	r2, r1
 800514a:	1cfb      	adds	r3, r7, #3
 800514c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005152:	4b25      	ldr	r3, [pc, #148]	; (80051e8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	2380      	movs	r3, #128	; 0x80
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4013      	ands	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800515e:	4b23      	ldr	r3, [pc, #140]	; (80051ec <HAL_PWR_EnterSTOPMode+0xac>)
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	2201      	movs	r2, #1
 8005164:	4013      	ands	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d008      	beq.n	8005180 <HAL_PWR_EnterSTOPMode+0x40>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8005174:	4b1c      	ldr	r3, [pc, #112]	; (80051e8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4b1b      	ldr	r3, [pc, #108]	; (80051e8 <HAL_PWR_EnterSTOPMode+0xa8>)
 800517a:	491d      	ldr	r1, [pc, #116]	; (80051f0 <HAL_PWR_EnterSTOPMode+0xb0>)
 800517c:	400a      	ands	r2, r1
 800517e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8005180:	4b19      	ldr	r3, [pc, #100]	; (80051e8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2203      	movs	r2, #3
 800518a:	4393      	bics	r3, r2
 800518c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8005196:	4b14      	ldr	r3, [pc, #80]	; (80051e8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800519c:	4b15      	ldr	r3, [pc, #84]	; (80051f4 <HAL_PWR_EnterSTOPMode+0xb4>)
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <HAL_PWR_EnterSTOPMode+0xb4>)
 80051a2:	2104      	movs	r1, #4
 80051a4:	430a      	orrs	r2, r1
 80051a6:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80051a8:	1cfb      	adds	r3, r7, #3
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80051b0:	bf30      	wfi
 80051b2:	e002      	b.n	80051ba <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80051b4:	bf40      	sev
    __WFE();
 80051b6:	bf20      	wfe
    __WFE();
 80051b8:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80051ba:	4b0e      	ldr	r3, [pc, #56]	; (80051f4 <HAL_PWR_EnterSTOPMode+0xb4>)
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	4b0d      	ldr	r3, [pc, #52]	; (80051f4 <HAL_PWR_EnterSTOPMode+0xb4>)
 80051c0:	2104      	movs	r1, #4
 80051c2:	438a      	bics	r2, r1
 80051c4:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d009      	beq.n	80051e0 <HAL_PWR_EnterSTOPMode+0xa0>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d006      	beq.n	80051e0 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80051d2:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <HAL_PWR_EnterSTOPMode+0xa8>)
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	4b04      	ldr	r3, [pc, #16]	; (80051e8 <HAL_PWR_EnterSTOPMode+0xa8>)
 80051d8:	2180      	movs	r1, #128	; 0x80
 80051da:	0089      	lsls	r1, r1, #2
 80051dc:	430a      	orrs	r2, r1
 80051de:	601a      	str	r2, [r3, #0]
  }
}
 80051e0:	46c0      	nop			; (mov r8, r8)
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b006      	add	sp, #24
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40007000 	.word	0x40007000
 80051ec:	40010000 	.word	0x40010000
 80051f0:	fffffdff 	.word	0xfffffdff
 80051f4:	e000ed00 	.word	0xe000ed00

080051f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051f8:	b5b0      	push	{r4, r5, r7, lr}
 80051fa:	b08a      	sub	sp, #40	; 0x28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d102      	bne.n	800520c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	f000 fb5a 	bl	80058c0 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800520c:	4bce      	ldr	r3, [pc, #824]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	220c      	movs	r2, #12
 8005212:	4013      	ands	r3, r2
 8005214:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005216:	4bcc      	ldr	r3, [pc, #816]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	2380      	movs	r3, #128	; 0x80
 800521c:	025b      	lsls	r3, r3, #9
 800521e:	4013      	ands	r3, r2
 8005220:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2201      	movs	r2, #1
 8005228:	4013      	ands	r3, r2
 800522a:	d100      	bne.n	800522e <HAL_RCC_OscConfig+0x36>
 800522c:	e07c      	b.n	8005328 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	2b08      	cmp	r3, #8
 8005232:	d007      	beq.n	8005244 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	2b0c      	cmp	r3, #12
 8005238:	d111      	bne.n	800525e <HAL_RCC_OscConfig+0x66>
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	2380      	movs	r3, #128	; 0x80
 800523e:	025b      	lsls	r3, r3, #9
 8005240:	429a      	cmp	r2, r3
 8005242:	d10c      	bne.n	800525e <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005244:	4bc0      	ldr	r3, [pc, #768]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	2380      	movs	r3, #128	; 0x80
 800524a:	029b      	lsls	r3, r3, #10
 800524c:	4013      	ands	r3, r2
 800524e:	d100      	bne.n	8005252 <HAL_RCC_OscConfig+0x5a>
 8005250:	e069      	b.n	8005326 <HAL_RCC_OscConfig+0x12e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d165      	bne.n	8005326 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e330      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	2380      	movs	r3, #128	; 0x80
 8005264:	025b      	lsls	r3, r3, #9
 8005266:	429a      	cmp	r2, r3
 8005268:	d107      	bne.n	800527a <HAL_RCC_OscConfig+0x82>
 800526a:	4bb7      	ldr	r3, [pc, #732]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	4bb6      	ldr	r3, [pc, #728]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005270:	2180      	movs	r1, #128	; 0x80
 8005272:	0249      	lsls	r1, r1, #9
 8005274:	430a      	orrs	r2, r1
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	e027      	b.n	80052ca <HAL_RCC_OscConfig+0xd2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	23a0      	movs	r3, #160	; 0xa0
 8005280:	02db      	lsls	r3, r3, #11
 8005282:	429a      	cmp	r2, r3
 8005284:	d10e      	bne.n	80052a4 <HAL_RCC_OscConfig+0xac>
 8005286:	4bb0      	ldr	r3, [pc, #704]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	4baf      	ldr	r3, [pc, #700]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 800528c:	2180      	movs	r1, #128	; 0x80
 800528e:	02c9      	lsls	r1, r1, #11
 8005290:	430a      	orrs	r2, r1
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	4bac      	ldr	r3, [pc, #688]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	4bab      	ldr	r3, [pc, #684]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 800529a:	2180      	movs	r1, #128	; 0x80
 800529c:	0249      	lsls	r1, r1, #9
 800529e:	430a      	orrs	r2, r1
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e012      	b.n	80052ca <HAL_RCC_OscConfig+0xd2>
 80052a4:	4ba8      	ldr	r3, [pc, #672]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	4ba7      	ldr	r3, [pc, #668]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 80052aa:	49a8      	ldr	r1, [pc, #672]	; (800554c <HAL_RCC_OscConfig+0x354>)
 80052ac:	400a      	ands	r2, r1
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	4ba5      	ldr	r3, [pc, #660]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	2380      	movs	r3, #128	; 0x80
 80052b6:	025b      	lsls	r3, r3, #9
 80052b8:	4013      	ands	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4ba2      	ldr	r3, [pc, #648]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	4ba1      	ldr	r3, [pc, #644]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 80052c4:	49a2      	ldr	r1, [pc, #648]	; (8005550 <HAL_RCC_OscConfig+0x358>)
 80052c6:	400a      	ands	r2, r1
 80052c8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d014      	beq.n	80052fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d2:	f7fe ff2f 	bl	8004134 <HAL_GetTick>
 80052d6:	0003      	movs	r3, r0
 80052d8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052dc:	f7fe ff2a 	bl	8004134 <HAL_GetTick>
 80052e0:	0002      	movs	r2, r0
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b64      	cmp	r3, #100	; 0x64
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e2e8      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052ee:	4b96      	ldr	r3, [pc, #600]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	2380      	movs	r3, #128	; 0x80
 80052f4:	029b      	lsls	r3, r3, #10
 80052f6:	4013      	ands	r3, r2
 80052f8:	d0f0      	beq.n	80052dc <HAL_RCC_OscConfig+0xe4>
 80052fa:	e015      	b.n	8005328 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052fc:	f7fe ff1a 	bl	8004134 <HAL_GetTick>
 8005300:	0003      	movs	r3, r0
 8005302:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005304:	e008      	b.n	8005318 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005306:	f7fe ff15 	bl	8004134 <HAL_GetTick>
 800530a:	0002      	movs	r2, r0
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b64      	cmp	r3, #100	; 0x64
 8005312:	d901      	bls.n	8005318 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e2d3      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005318:	4b8b      	ldr	r3, [pc, #556]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	2380      	movs	r3, #128	; 0x80
 800531e:	029b      	lsls	r3, r3, #10
 8005320:	4013      	ands	r3, r2
 8005322:	d1f0      	bne.n	8005306 <HAL_RCC_OscConfig+0x10e>
 8005324:	e000      	b.n	8005328 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005326:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2202      	movs	r2, #2
 800532e:	4013      	ands	r3, r2
 8005330:	d100      	bne.n	8005334 <HAL_RCC_OscConfig+0x13c>
 8005332:	e08b      	b.n	800544c <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	2b04      	cmp	r3, #4
 800533e:	d005      	beq.n	800534c <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	2b0c      	cmp	r3, #12
 8005344:	d13e      	bne.n	80053c4 <HAL_RCC_OscConfig+0x1cc>
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d13b      	bne.n	80053c4 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800534c:	4b7e      	ldr	r3, [pc, #504]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2204      	movs	r2, #4
 8005352:	4013      	ands	r3, r2
 8005354:	d004      	beq.n	8005360 <HAL_RCC_OscConfig+0x168>
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e2af      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005360:	4b79      	ldr	r3, [pc, #484]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	4a7b      	ldr	r2, [pc, #492]	; (8005554 <HAL_RCC_OscConfig+0x35c>)
 8005366:	4013      	ands	r3, r2
 8005368:	0019      	movs	r1, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	021a      	lsls	r2, r3, #8
 8005370:	4b75      	ldr	r3, [pc, #468]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005376:	4b74      	ldr	r3, [pc, #464]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2209      	movs	r2, #9
 800537c:	4393      	bics	r3, r2
 800537e:	0019      	movs	r1, r3
 8005380:	4b71      	ldr	r3, [pc, #452]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	430a      	orrs	r2, r1
 8005386:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005388:	f000 fbe8 	bl	8005b5c <HAL_RCC_GetSysClockFreq>
 800538c:	0001      	movs	r1, r0
 800538e:	4b6e      	ldr	r3, [pc, #440]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	091b      	lsrs	r3, r3, #4
 8005394:	220f      	movs	r2, #15
 8005396:	4013      	ands	r3, r2
 8005398:	4a6f      	ldr	r2, [pc, #444]	; (8005558 <HAL_RCC_OscConfig+0x360>)
 800539a:	5cd3      	ldrb	r3, [r2, r3]
 800539c:	000a      	movs	r2, r1
 800539e:	40da      	lsrs	r2, r3
 80053a0:	4b6e      	ldr	r3, [pc, #440]	; (800555c <HAL_RCC_OscConfig+0x364>)
 80053a2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80053a4:	4b6e      	ldr	r3, [pc, #440]	; (8005560 <HAL_RCC_OscConfig+0x368>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2513      	movs	r5, #19
 80053aa:	197c      	adds	r4, r7, r5
 80053ac:	0018      	movs	r0, r3
 80053ae:	f7fe fe7b 	bl	80040a8 <HAL_InitTick>
 80053b2:	0003      	movs	r3, r0
 80053b4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80053b6:	197b      	adds	r3, r7, r5
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d046      	beq.n	800544c <HAL_RCC_OscConfig+0x254>
      {
        return status;
 80053be:	197b      	adds	r3, r7, r5
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	e27d      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d027      	beq.n	800541a <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80053ca:	4b5f      	ldr	r3, [pc, #380]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2209      	movs	r2, #9
 80053d0:	4393      	bics	r3, r2
 80053d2:	0019      	movs	r1, r3
 80053d4:	4b5c      	ldr	r3, [pc, #368]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	430a      	orrs	r2, r1
 80053da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053dc:	f7fe feaa 	bl	8004134 <HAL_GetTick>
 80053e0:	0003      	movs	r3, r0
 80053e2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053e4:	e008      	b.n	80053f8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053e6:	f7fe fea5 	bl	8004134 <HAL_GetTick>
 80053ea:	0002      	movs	r2, r0
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e263      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053f8:	4b53      	ldr	r3, [pc, #332]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2204      	movs	r2, #4
 80053fe:	4013      	ands	r3, r2
 8005400:	d0f1      	beq.n	80053e6 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005402:	4b51      	ldr	r3, [pc, #324]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	4a53      	ldr	r2, [pc, #332]	; (8005554 <HAL_RCC_OscConfig+0x35c>)
 8005408:	4013      	ands	r3, r2
 800540a:	0019      	movs	r1, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	021a      	lsls	r2, r3, #8
 8005412:	4b4d      	ldr	r3, [pc, #308]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005414:	430a      	orrs	r2, r1
 8005416:	605a      	str	r2, [r3, #4]
 8005418:	e018      	b.n	800544c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800541a:	4b4b      	ldr	r3, [pc, #300]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4b4a      	ldr	r3, [pc, #296]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005420:	2101      	movs	r1, #1
 8005422:	438a      	bics	r2, r1
 8005424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005426:	f7fe fe85 	bl	8004134 <HAL_GetTick>
 800542a:	0003      	movs	r3, r0
 800542c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005430:	f7fe fe80 	bl	8004134 <HAL_GetTick>
 8005434:	0002      	movs	r2, r0
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e23e      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005442:	4b41      	ldr	r3, [pc, #260]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2204      	movs	r2, #4
 8005448:	4013      	ands	r3, r2
 800544a:	d1f1      	bne.n	8005430 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2210      	movs	r2, #16
 8005452:	4013      	ands	r3, r2
 8005454:	d100      	bne.n	8005458 <HAL_RCC_OscConfig+0x260>
 8005456:	e0a1      	b.n	800559c <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d140      	bne.n	80054e0 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800545e:	4b3a      	ldr	r3, [pc, #232]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	2380      	movs	r3, #128	; 0x80
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4013      	ands	r3, r2
 8005468:	d005      	beq.n	8005476 <HAL_RCC_OscConfig+0x27e>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e224      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005476:	4b34      	ldr	r3, [pc, #208]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	4a3a      	ldr	r2, [pc, #232]	; (8005564 <HAL_RCC_OscConfig+0x36c>)
 800547c:	4013      	ands	r3, r2
 800547e:	0019      	movs	r1, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1a      	ldr	r2, [r3, #32]
 8005484:	4b30      	ldr	r3, [pc, #192]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800548a:	4b2f      	ldr	r3, [pc, #188]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	021b      	lsls	r3, r3, #8
 8005490:	0a19      	lsrs	r1, r3, #8
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	061a      	lsls	r2, r3, #24
 8005498:	4b2b      	ldr	r3, [pc, #172]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 800549a:	430a      	orrs	r2, r1
 800549c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	0b5b      	lsrs	r3, r3, #13
 80054a4:	3301      	adds	r3, #1
 80054a6:	2280      	movs	r2, #128	; 0x80
 80054a8:	0212      	lsls	r2, r2, #8
 80054aa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80054ac:	4b26      	ldr	r3, [pc, #152]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	091b      	lsrs	r3, r3, #4
 80054b2:	210f      	movs	r1, #15
 80054b4:	400b      	ands	r3, r1
 80054b6:	4928      	ldr	r1, [pc, #160]	; (8005558 <HAL_RCC_OscConfig+0x360>)
 80054b8:	5ccb      	ldrb	r3, [r1, r3]
 80054ba:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80054bc:	4b27      	ldr	r3, [pc, #156]	; (800555c <HAL_RCC_OscConfig+0x364>)
 80054be:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80054c0:	4b27      	ldr	r3, [pc, #156]	; (8005560 <HAL_RCC_OscConfig+0x368>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2513      	movs	r5, #19
 80054c6:	197c      	adds	r4, r7, r5
 80054c8:	0018      	movs	r0, r3
 80054ca:	f7fe fded 	bl	80040a8 <HAL_InitTick>
 80054ce:	0003      	movs	r3, r0
 80054d0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80054d2:	197b      	adds	r3, r7, r5
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d060      	beq.n	800559c <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 80054da:	197b      	adds	r3, r7, r5
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	e1ef      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d03f      	beq.n	8005568 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80054e8:	4b17      	ldr	r3, [pc, #92]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	4b16      	ldr	r3, [pc, #88]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 80054ee:	2180      	movs	r1, #128	; 0x80
 80054f0:	0049      	lsls	r1, r1, #1
 80054f2:	430a      	orrs	r2, r1
 80054f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f6:	f7fe fe1d 	bl	8004134 <HAL_GetTick>
 80054fa:	0003      	movs	r3, r0
 80054fc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005500:	f7fe fe18 	bl	8004134 <HAL_GetTick>
 8005504:	0002      	movs	r2, r0
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e1d6      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005512:	4b0d      	ldr	r3, [pc, #52]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	2380      	movs	r3, #128	; 0x80
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4013      	ands	r3, r2
 800551c:	d0f0      	beq.n	8005500 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800551e:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	4a10      	ldr	r2, [pc, #64]	; (8005564 <HAL_RCC_OscConfig+0x36c>)
 8005524:	4013      	ands	r3, r2
 8005526:	0019      	movs	r1, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1a      	ldr	r2, [r3, #32]
 800552c:	4b06      	ldr	r3, [pc, #24]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005532:	4b05      	ldr	r3, [pc, #20]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	021b      	lsls	r3, r3, #8
 8005538:	0a19      	lsrs	r1, r3, #8
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	061a      	lsls	r2, r3, #24
 8005540:	4b01      	ldr	r3, [pc, #4]	; (8005548 <HAL_RCC_OscConfig+0x350>)
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]
 8005546:	e029      	b.n	800559c <HAL_RCC_OscConfig+0x3a4>
 8005548:	40021000 	.word	0x40021000
 800554c:	fffeffff 	.word	0xfffeffff
 8005550:	fffbffff 	.word	0xfffbffff
 8005554:	ffffe0ff 	.word	0xffffe0ff
 8005558:	0800ad0c 	.word	0x0800ad0c
 800555c:	20000000 	.word	0x20000000
 8005560:	20000004 	.word	0x20000004
 8005564:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005568:	4bbe      	ldr	r3, [pc, #760]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	4bbd      	ldr	r3, [pc, #756]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 800556e:	49be      	ldr	r1, [pc, #760]	; (8005868 <HAL_RCC_OscConfig+0x670>)
 8005570:	400a      	ands	r2, r1
 8005572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005574:	f7fe fdde 	bl	8004134 <HAL_GetTick>
 8005578:	0003      	movs	r3, r0
 800557a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800557e:	f7fe fdd9 	bl	8004134 <HAL_GetTick>
 8005582:	0002      	movs	r2, r0
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e197      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005590:	4bb4      	ldr	r3, [pc, #720]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	2380      	movs	r3, #128	; 0x80
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4013      	ands	r3, r2
 800559a:	d1f0      	bne.n	800557e <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2208      	movs	r2, #8
 80055a2:	4013      	ands	r3, r2
 80055a4:	d036      	beq.n	8005614 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d019      	beq.n	80055e2 <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ae:	4bad      	ldr	r3, [pc, #692]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80055b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055b2:	4bac      	ldr	r3, [pc, #688]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80055b4:	2101      	movs	r1, #1
 80055b6:	430a      	orrs	r2, r1
 80055b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ba:	f7fe fdbb 	bl	8004134 <HAL_GetTick>
 80055be:	0003      	movs	r3, r0
 80055c0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055c4:	f7fe fdb6 	bl	8004134 <HAL_GetTick>
 80055c8:	0002      	movs	r2, r0
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e174      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055d6:	4ba3      	ldr	r3, [pc, #652]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80055d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055da:	2202      	movs	r2, #2
 80055dc:	4013      	ands	r3, r2
 80055de:	d0f1      	beq.n	80055c4 <HAL_RCC_OscConfig+0x3cc>
 80055e0:	e018      	b.n	8005614 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055e2:	4ba0      	ldr	r3, [pc, #640]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80055e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055e6:	4b9f      	ldr	r3, [pc, #636]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80055e8:	2101      	movs	r1, #1
 80055ea:	438a      	bics	r2, r1
 80055ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ee:	f7fe fda1 	bl	8004134 <HAL_GetTick>
 80055f2:	0003      	movs	r3, r0
 80055f4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055f8:	f7fe fd9c 	bl	8004134 <HAL_GetTick>
 80055fc:	0002      	movs	r2, r0
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e15a      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800560a:	4b96      	ldr	r3, [pc, #600]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 800560c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560e:	2202      	movs	r2, #2
 8005610:	4013      	ands	r3, r2
 8005612:	d1f1      	bne.n	80055f8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2204      	movs	r2, #4
 800561a:	4013      	ands	r3, r2
 800561c:	d100      	bne.n	8005620 <HAL_RCC_OscConfig+0x428>
 800561e:	e0ae      	b.n	800577e <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005620:	2027      	movs	r0, #39	; 0x27
 8005622:	183b      	adds	r3, r7, r0
 8005624:	2200      	movs	r2, #0
 8005626:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005628:	4b8e      	ldr	r3, [pc, #568]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 800562a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800562c:	2380      	movs	r3, #128	; 0x80
 800562e:	055b      	lsls	r3, r3, #21
 8005630:	4013      	ands	r3, r2
 8005632:	d109      	bne.n	8005648 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005634:	4b8b      	ldr	r3, [pc, #556]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 8005636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005638:	4b8a      	ldr	r3, [pc, #552]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 800563a:	2180      	movs	r1, #128	; 0x80
 800563c:	0549      	lsls	r1, r1, #21
 800563e:	430a      	orrs	r2, r1
 8005640:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005642:	183b      	adds	r3, r7, r0
 8005644:	2201      	movs	r2, #1
 8005646:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005648:	4b88      	ldr	r3, [pc, #544]	; (800586c <HAL_RCC_OscConfig+0x674>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	2380      	movs	r3, #128	; 0x80
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	4013      	ands	r3, r2
 8005652:	d11a      	bne.n	800568a <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005654:	4b85      	ldr	r3, [pc, #532]	; (800586c <HAL_RCC_OscConfig+0x674>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	4b84      	ldr	r3, [pc, #528]	; (800586c <HAL_RCC_OscConfig+0x674>)
 800565a:	2180      	movs	r1, #128	; 0x80
 800565c:	0049      	lsls	r1, r1, #1
 800565e:	430a      	orrs	r2, r1
 8005660:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005662:	f7fe fd67 	bl	8004134 <HAL_GetTick>
 8005666:	0003      	movs	r3, r0
 8005668:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800566c:	f7fe fd62 	bl	8004134 <HAL_GetTick>
 8005670:	0002      	movs	r2, r0
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b64      	cmp	r3, #100	; 0x64
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e120      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800567e:	4b7b      	ldr	r3, [pc, #492]	; (800586c <HAL_RCC_OscConfig+0x674>)
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	2380      	movs	r3, #128	; 0x80
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	4013      	ands	r3, r2
 8005688:	d0f0      	beq.n	800566c <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	2380      	movs	r3, #128	; 0x80
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	429a      	cmp	r2, r3
 8005694:	d107      	bne.n	80056a6 <HAL_RCC_OscConfig+0x4ae>
 8005696:	4b73      	ldr	r3, [pc, #460]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 8005698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800569a:	4b72      	ldr	r3, [pc, #456]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 800569c:	2180      	movs	r1, #128	; 0x80
 800569e:	0049      	lsls	r1, r1, #1
 80056a0:	430a      	orrs	r2, r1
 80056a2:	651a      	str	r2, [r3, #80]	; 0x50
 80056a4:	e031      	b.n	800570a <HAL_RCC_OscConfig+0x512>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10c      	bne.n	80056c8 <HAL_RCC_OscConfig+0x4d0>
 80056ae:	4b6d      	ldr	r3, [pc, #436]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80056b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056b2:	4b6c      	ldr	r3, [pc, #432]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80056b4:	496c      	ldr	r1, [pc, #432]	; (8005868 <HAL_RCC_OscConfig+0x670>)
 80056b6:	400a      	ands	r2, r1
 80056b8:	651a      	str	r2, [r3, #80]	; 0x50
 80056ba:	4b6a      	ldr	r3, [pc, #424]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80056bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056be:	4b69      	ldr	r3, [pc, #420]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80056c0:	496b      	ldr	r1, [pc, #428]	; (8005870 <HAL_RCC_OscConfig+0x678>)
 80056c2:	400a      	ands	r2, r1
 80056c4:	651a      	str	r2, [r3, #80]	; 0x50
 80056c6:	e020      	b.n	800570a <HAL_RCC_OscConfig+0x512>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	23a0      	movs	r3, #160	; 0xa0
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d10e      	bne.n	80056f2 <HAL_RCC_OscConfig+0x4fa>
 80056d4:	4b63      	ldr	r3, [pc, #396]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80056d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056d8:	4b62      	ldr	r3, [pc, #392]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80056da:	2180      	movs	r1, #128	; 0x80
 80056dc:	00c9      	lsls	r1, r1, #3
 80056de:	430a      	orrs	r2, r1
 80056e0:	651a      	str	r2, [r3, #80]	; 0x50
 80056e2:	4b60      	ldr	r3, [pc, #384]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80056e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056e6:	4b5f      	ldr	r3, [pc, #380]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80056e8:	2180      	movs	r1, #128	; 0x80
 80056ea:	0049      	lsls	r1, r1, #1
 80056ec:	430a      	orrs	r2, r1
 80056ee:	651a      	str	r2, [r3, #80]	; 0x50
 80056f0:	e00b      	b.n	800570a <HAL_RCC_OscConfig+0x512>
 80056f2:	4b5c      	ldr	r3, [pc, #368]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80056f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056f6:	4b5b      	ldr	r3, [pc, #364]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80056f8:	495b      	ldr	r1, [pc, #364]	; (8005868 <HAL_RCC_OscConfig+0x670>)
 80056fa:	400a      	ands	r2, r1
 80056fc:	651a      	str	r2, [r3, #80]	; 0x50
 80056fe:	4b59      	ldr	r3, [pc, #356]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 8005700:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005702:	4b58      	ldr	r3, [pc, #352]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 8005704:	495a      	ldr	r1, [pc, #360]	; (8005870 <HAL_RCC_OscConfig+0x678>)
 8005706:	400a      	ands	r2, r1
 8005708:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d015      	beq.n	800573e <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005712:	f7fe fd0f 	bl	8004134 <HAL_GetTick>
 8005716:	0003      	movs	r3, r0
 8005718:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800571a:	e009      	b.n	8005730 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800571c:	f7fe fd0a 	bl	8004134 <HAL_GetTick>
 8005720:	0002      	movs	r2, r0
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	4a53      	ldr	r2, [pc, #332]	; (8005874 <HAL_RCC_OscConfig+0x67c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d901      	bls.n	8005730 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e0c7      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005730:	4b4c      	ldr	r3, [pc, #304]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 8005732:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005734:	2380      	movs	r3, #128	; 0x80
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4013      	ands	r3, r2
 800573a:	d0ef      	beq.n	800571c <HAL_RCC_OscConfig+0x524>
 800573c:	e014      	b.n	8005768 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800573e:	f7fe fcf9 	bl	8004134 <HAL_GetTick>
 8005742:	0003      	movs	r3, r0
 8005744:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005746:	e009      	b.n	800575c <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005748:	f7fe fcf4 	bl	8004134 <HAL_GetTick>
 800574c:	0002      	movs	r2, r0
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	4a48      	ldr	r2, [pc, #288]	; (8005874 <HAL_RCC_OscConfig+0x67c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d901      	bls.n	800575c <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e0b1      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800575c:	4b41      	ldr	r3, [pc, #260]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 800575e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005760:	2380      	movs	r3, #128	; 0x80
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4013      	ands	r3, r2
 8005766:	d1ef      	bne.n	8005748 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005768:	2327      	movs	r3, #39	; 0x27
 800576a:	18fb      	adds	r3, r7, r3
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d105      	bne.n	800577e <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005772:	4b3c      	ldr	r3, [pc, #240]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 8005774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005776:	4b3b      	ldr	r3, [pc, #236]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 8005778:	493f      	ldr	r1, [pc, #252]	; (8005878 <HAL_RCC_OscConfig+0x680>)
 800577a:	400a      	ands	r2, r1
 800577c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	2b00      	cmp	r3, #0
 8005784:	d100      	bne.n	8005788 <HAL_RCC_OscConfig+0x590>
 8005786:	e09a      	b.n	80058be <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	2b0c      	cmp	r3, #12
 800578c:	d064      	beq.n	8005858 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	2b02      	cmp	r3, #2
 8005794:	d145      	bne.n	8005822 <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005796:	4b33      	ldr	r3, [pc, #204]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4b32      	ldr	r3, [pc, #200]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 800579c:	4937      	ldr	r1, [pc, #220]	; (800587c <HAL_RCC_OscConfig+0x684>)
 800579e:	400a      	ands	r2, r1
 80057a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a2:	f7fe fcc7 	bl	8004134 <HAL_GetTick>
 80057a6:	0003      	movs	r3, r0
 80057a8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ac:	f7fe fcc2 	bl	8004134 <HAL_GetTick>
 80057b0:	0002      	movs	r2, r0
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e080      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80057be:	4b29      	ldr	r3, [pc, #164]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	2380      	movs	r3, #128	; 0x80
 80057c4:	049b      	lsls	r3, r3, #18
 80057c6:	4013      	ands	r3, r2
 80057c8:	d1f0      	bne.n	80057ac <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057ca:	4b26      	ldr	r3, [pc, #152]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	4a2c      	ldr	r2, [pc, #176]	; (8005880 <HAL_RCC_OscConfig+0x688>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	0019      	movs	r1, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	431a      	orrs	r2, r3
 80057e4:	4b1f      	ldr	r3, [pc, #124]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80057e6:	430a      	orrs	r2, r1
 80057e8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057ea:	4b1e      	ldr	r3, [pc, #120]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	4b1d      	ldr	r3, [pc, #116]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 80057f0:	2180      	movs	r1, #128	; 0x80
 80057f2:	0449      	lsls	r1, r1, #17
 80057f4:	430a      	orrs	r2, r1
 80057f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f8:	f7fe fc9c 	bl	8004134 <HAL_GetTick>
 80057fc:	0003      	movs	r3, r0
 80057fe:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005800:	e008      	b.n	8005814 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005802:	f7fe fc97 	bl	8004134 <HAL_GetTick>
 8005806:	0002      	movs	r2, r0
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d901      	bls.n	8005814 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e055      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005814:	4b13      	ldr	r3, [pc, #76]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	2380      	movs	r3, #128	; 0x80
 800581a:	049b      	lsls	r3, r3, #18
 800581c:	4013      	ands	r3, r2
 800581e:	d0f0      	beq.n	8005802 <HAL_RCC_OscConfig+0x60a>
 8005820:	e04d      	b.n	80058be <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005822:	4b10      	ldr	r3, [pc, #64]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b0f      	ldr	r3, [pc, #60]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 8005828:	4914      	ldr	r1, [pc, #80]	; (800587c <HAL_RCC_OscConfig+0x684>)
 800582a:	400a      	ands	r2, r1
 800582c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582e:	f7fe fc81 	bl	8004134 <HAL_GetTick>
 8005832:	0003      	movs	r3, r0
 8005834:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005838:	f7fe fc7c 	bl	8004134 <HAL_GetTick>
 800583c:	0002      	movs	r2, r0
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e03a      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800584a:	4b06      	ldr	r3, [pc, #24]	; (8005864 <HAL_RCC_OscConfig+0x66c>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	2380      	movs	r3, #128	; 0x80
 8005850:	049b      	lsls	r3, r3, #18
 8005852:	4013      	ands	r3, r2
 8005854:	d1f0      	bne.n	8005838 <HAL_RCC_OscConfig+0x640>
 8005856:	e032      	b.n	80058be <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	2b01      	cmp	r3, #1
 800585e:	d111      	bne.n	8005884 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e02d      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
 8005864:	40021000 	.word	0x40021000
 8005868:	fffffeff 	.word	0xfffffeff
 800586c:	40007000 	.word	0x40007000
 8005870:	fffffbff 	.word	0xfffffbff
 8005874:	00001388 	.word	0x00001388
 8005878:	efffffff 	.word	0xefffffff
 800587c:	feffffff 	.word	0xfeffffff
 8005880:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005884:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <HAL_RCC_OscConfig+0x6d0>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800588a:	69fa      	ldr	r2, [r7, #28]
 800588c:	2380      	movs	r3, #128	; 0x80
 800588e:	025b      	lsls	r3, r3, #9
 8005890:	401a      	ands	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005896:	429a      	cmp	r2, r3
 8005898:	d10f      	bne.n	80058ba <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	23f0      	movs	r3, #240	; 0xf0
 800589e:	039b      	lsls	r3, r3, #14
 80058a0:	401a      	ands	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d107      	bne.n	80058ba <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80058aa:	69fa      	ldr	r2, [r7, #28]
 80058ac:	23c0      	movs	r3, #192	; 0xc0
 80058ae:	041b      	lsls	r3, r3, #16
 80058b0:	401a      	ands	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d001      	beq.n	80058be <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	0018      	movs	r0, r3
 80058c2:	46bd      	mov	sp, r7
 80058c4:	b00a      	add	sp, #40	; 0x28
 80058c6:	bdb0      	pop	{r4, r5, r7, pc}
 80058c8:	40021000 	.word	0x40021000

080058cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058cc:	b5b0      	push	{r4, r5, r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e128      	b.n	8005b32 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058e0:	4b96      	ldr	r3, [pc, #600]	; (8005b3c <HAL_RCC_ClockConfig+0x270>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2201      	movs	r2, #1
 80058e6:	4013      	ands	r3, r2
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d91e      	bls.n	800592c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ee:	4b93      	ldr	r3, [pc, #588]	; (8005b3c <HAL_RCC_ClockConfig+0x270>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2201      	movs	r2, #1
 80058f4:	4393      	bics	r3, r2
 80058f6:	0019      	movs	r1, r3
 80058f8:	4b90      	ldr	r3, [pc, #576]	; (8005b3c <HAL_RCC_ClockConfig+0x270>)
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005900:	f7fe fc18 	bl	8004134 <HAL_GetTick>
 8005904:	0003      	movs	r3, r0
 8005906:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005908:	e009      	b.n	800591e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800590a:	f7fe fc13 	bl	8004134 <HAL_GetTick>
 800590e:	0002      	movs	r2, r0
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	4a8a      	ldr	r2, [pc, #552]	; (8005b40 <HAL_RCC_ClockConfig+0x274>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d901      	bls.n	800591e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e109      	b.n	8005b32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800591e:	4b87      	ldr	r3, [pc, #540]	; (8005b3c <HAL_RCC_ClockConfig+0x270>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2201      	movs	r2, #1
 8005924:	4013      	ands	r3, r2
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d1ee      	bne.n	800590a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2202      	movs	r2, #2
 8005932:	4013      	ands	r3, r2
 8005934:	d009      	beq.n	800594a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005936:	4b83      	ldr	r3, [pc, #524]	; (8005b44 <HAL_RCC_ClockConfig+0x278>)
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	22f0      	movs	r2, #240	; 0xf0
 800593c:	4393      	bics	r3, r2
 800593e:	0019      	movs	r1, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	4b7f      	ldr	r3, [pc, #508]	; (8005b44 <HAL_RCC_ClockConfig+0x278>)
 8005946:	430a      	orrs	r2, r1
 8005948:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2201      	movs	r2, #1
 8005950:	4013      	ands	r3, r2
 8005952:	d100      	bne.n	8005956 <HAL_RCC_ClockConfig+0x8a>
 8005954:	e089      	b.n	8005a6a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b02      	cmp	r3, #2
 800595c:	d107      	bne.n	800596e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800595e:	4b79      	ldr	r3, [pc, #484]	; (8005b44 <HAL_RCC_ClockConfig+0x278>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	2380      	movs	r3, #128	; 0x80
 8005964:	029b      	lsls	r3, r3, #10
 8005966:	4013      	ands	r3, r2
 8005968:	d120      	bne.n	80059ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e0e1      	b.n	8005b32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b03      	cmp	r3, #3
 8005974:	d107      	bne.n	8005986 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005976:	4b73      	ldr	r3, [pc, #460]	; (8005b44 <HAL_RCC_ClockConfig+0x278>)
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	2380      	movs	r3, #128	; 0x80
 800597c:	049b      	lsls	r3, r3, #18
 800597e:	4013      	ands	r3, r2
 8005980:	d114      	bne.n	80059ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e0d5      	b.n	8005b32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d106      	bne.n	800599c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800598e:	4b6d      	ldr	r3, [pc, #436]	; (8005b44 <HAL_RCC_ClockConfig+0x278>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2204      	movs	r2, #4
 8005994:	4013      	ands	r3, r2
 8005996:	d109      	bne.n	80059ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e0ca      	b.n	8005b32 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800599c:	4b69      	ldr	r3, [pc, #420]	; (8005b44 <HAL_RCC_ClockConfig+0x278>)
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	2380      	movs	r3, #128	; 0x80
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4013      	ands	r3, r2
 80059a6:	d101      	bne.n	80059ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e0c2      	b.n	8005b32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ac:	4b65      	ldr	r3, [pc, #404]	; (8005b44 <HAL_RCC_ClockConfig+0x278>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	2203      	movs	r2, #3
 80059b2:	4393      	bics	r3, r2
 80059b4:	0019      	movs	r1, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	4b62      	ldr	r3, [pc, #392]	; (8005b44 <HAL_RCC_ClockConfig+0x278>)
 80059bc:	430a      	orrs	r2, r1
 80059be:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059c0:	f7fe fbb8 	bl	8004134 <HAL_GetTick>
 80059c4:	0003      	movs	r3, r0
 80059c6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d111      	bne.n	80059f4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80059d0:	e009      	b.n	80059e6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059d2:	f7fe fbaf 	bl	8004134 <HAL_GetTick>
 80059d6:	0002      	movs	r2, r0
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	4a58      	ldr	r2, [pc, #352]	; (8005b40 <HAL_RCC_ClockConfig+0x274>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e0a5      	b.n	8005b32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80059e6:	4b57      	ldr	r3, [pc, #348]	; (8005b44 <HAL_RCC_ClockConfig+0x278>)
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	220c      	movs	r2, #12
 80059ec:	4013      	ands	r3, r2
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d1ef      	bne.n	80059d2 <HAL_RCC_ClockConfig+0x106>
 80059f2:	e03a      	b.n	8005a6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d111      	bne.n	8005a20 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059fc:	e009      	b.n	8005a12 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059fe:	f7fe fb99 	bl	8004134 <HAL_GetTick>
 8005a02:	0002      	movs	r2, r0
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	4a4d      	ldr	r2, [pc, #308]	; (8005b40 <HAL_RCC_ClockConfig+0x274>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e08f      	b.n	8005b32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a12:	4b4c      	ldr	r3, [pc, #304]	; (8005b44 <HAL_RCC_ClockConfig+0x278>)
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	220c      	movs	r2, #12
 8005a18:	4013      	ands	r3, r2
 8005a1a:	2b0c      	cmp	r3, #12
 8005a1c:	d1ef      	bne.n	80059fe <HAL_RCC_ClockConfig+0x132>
 8005a1e:	e024      	b.n	8005a6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d11b      	bne.n	8005a60 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a28:	e009      	b.n	8005a3e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a2a:	f7fe fb83 	bl	8004134 <HAL_GetTick>
 8005a2e:	0002      	movs	r2, r0
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	4a42      	ldr	r2, [pc, #264]	; (8005b40 <HAL_RCC_ClockConfig+0x274>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e079      	b.n	8005b32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a3e:	4b41      	ldr	r3, [pc, #260]	; (8005b44 <HAL_RCC_ClockConfig+0x278>)
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	220c      	movs	r2, #12
 8005a44:	4013      	ands	r3, r2
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d1ef      	bne.n	8005a2a <HAL_RCC_ClockConfig+0x15e>
 8005a4a:	e00e      	b.n	8005a6a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a4c:	f7fe fb72 	bl	8004134 <HAL_GetTick>
 8005a50:	0002      	movs	r2, r0
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	4a3a      	ldr	r2, [pc, #232]	; (8005b40 <HAL_RCC_ClockConfig+0x274>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e068      	b.n	8005b32 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a60:	4b38      	ldr	r3, [pc, #224]	; (8005b44 <HAL_RCC_ClockConfig+0x278>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	220c      	movs	r2, #12
 8005a66:	4013      	ands	r3, r2
 8005a68:	d1f0      	bne.n	8005a4c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a6a:	4b34      	ldr	r3, [pc, #208]	; (8005b3c <HAL_RCC_ClockConfig+0x270>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	4013      	ands	r3, r2
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d21e      	bcs.n	8005ab6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a78:	4b30      	ldr	r3, [pc, #192]	; (8005b3c <HAL_RCC_ClockConfig+0x270>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	4393      	bics	r3, r2
 8005a80:	0019      	movs	r1, r3
 8005a82:	4b2e      	ldr	r3, [pc, #184]	; (8005b3c <HAL_RCC_ClockConfig+0x270>)
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a8a:	f7fe fb53 	bl	8004134 <HAL_GetTick>
 8005a8e:	0003      	movs	r3, r0
 8005a90:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a92:	e009      	b.n	8005aa8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a94:	f7fe fb4e 	bl	8004134 <HAL_GetTick>
 8005a98:	0002      	movs	r2, r0
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	4a28      	ldr	r2, [pc, #160]	; (8005b40 <HAL_RCC_ClockConfig+0x274>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e044      	b.n	8005b32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa8:	4b24      	ldr	r3, [pc, #144]	; (8005b3c <HAL_RCC_ClockConfig+0x270>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2201      	movs	r2, #1
 8005aae:	4013      	ands	r3, r2
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d1ee      	bne.n	8005a94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2204      	movs	r2, #4
 8005abc:	4013      	ands	r3, r2
 8005abe:	d009      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ac0:	4b20      	ldr	r3, [pc, #128]	; (8005b44 <HAL_RCC_ClockConfig+0x278>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	4a20      	ldr	r2, [pc, #128]	; (8005b48 <HAL_RCC_ClockConfig+0x27c>)
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	0019      	movs	r1, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	4b1d      	ldr	r3, [pc, #116]	; (8005b44 <HAL_RCC_ClockConfig+0x278>)
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2208      	movs	r2, #8
 8005ada:	4013      	ands	r3, r2
 8005adc:	d00a      	beq.n	8005af4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ade:	4b19      	ldr	r3, [pc, #100]	; (8005b44 <HAL_RCC_ClockConfig+0x278>)
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	4a1a      	ldr	r2, [pc, #104]	; (8005b4c <HAL_RCC_ClockConfig+0x280>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	0019      	movs	r1, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	00da      	lsls	r2, r3, #3
 8005aee:	4b15      	ldr	r3, [pc, #84]	; (8005b44 <HAL_RCC_ClockConfig+0x278>)
 8005af0:	430a      	orrs	r2, r1
 8005af2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005af4:	f000 f832 	bl	8005b5c <HAL_RCC_GetSysClockFreq>
 8005af8:	0001      	movs	r1, r0
 8005afa:	4b12      	ldr	r3, [pc, #72]	; (8005b44 <HAL_RCC_ClockConfig+0x278>)
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	091b      	lsrs	r3, r3, #4
 8005b00:	220f      	movs	r2, #15
 8005b02:	4013      	ands	r3, r2
 8005b04:	4a12      	ldr	r2, [pc, #72]	; (8005b50 <HAL_RCC_ClockConfig+0x284>)
 8005b06:	5cd3      	ldrb	r3, [r2, r3]
 8005b08:	000a      	movs	r2, r1
 8005b0a:	40da      	lsrs	r2, r3
 8005b0c:	4b11      	ldr	r3, [pc, #68]	; (8005b54 <HAL_RCC_ClockConfig+0x288>)
 8005b0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b10:	4b11      	ldr	r3, [pc, #68]	; (8005b58 <HAL_RCC_ClockConfig+0x28c>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	250b      	movs	r5, #11
 8005b16:	197c      	adds	r4, r7, r5
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f7fe fac5 	bl	80040a8 <HAL_InitTick>
 8005b1e:	0003      	movs	r3, r0
 8005b20:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005b22:	197b      	adds	r3, r7, r5
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005b2a:	197b      	adds	r3, r7, r5
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	e000      	b.n	8005b32 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	0018      	movs	r0, r3
 8005b34:	46bd      	mov	sp, r7
 8005b36:	b004      	add	sp, #16
 8005b38:	bdb0      	pop	{r4, r5, r7, pc}
 8005b3a:	46c0      	nop			; (mov r8, r8)
 8005b3c:	40022000 	.word	0x40022000
 8005b40:	00001388 	.word	0x00001388
 8005b44:	40021000 	.word	0x40021000
 8005b48:	fffff8ff 	.word	0xfffff8ff
 8005b4c:	ffffc7ff 	.word	0xffffc7ff
 8005b50:	0800ad0c 	.word	0x0800ad0c
 8005b54:	20000000 	.word	0x20000000
 8005b58:	20000004 	.word	0x20000004

08005b5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b5c:	b5b0      	push	{r4, r5, r7, lr}
 8005b5e:	b08e      	sub	sp, #56	; 0x38
 8005b60:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005b62:	4b4c      	ldr	r3, [pc, #304]	; (8005c94 <HAL_RCC_GetSysClockFreq+0x138>)
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b6a:	230c      	movs	r3, #12
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	2b0c      	cmp	r3, #12
 8005b70:	d014      	beq.n	8005b9c <HAL_RCC_GetSysClockFreq+0x40>
 8005b72:	d900      	bls.n	8005b76 <HAL_RCC_GetSysClockFreq+0x1a>
 8005b74:	e07b      	b.n	8005c6e <HAL_RCC_GetSysClockFreq+0x112>
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d002      	beq.n	8005b80 <HAL_RCC_GetSysClockFreq+0x24>
 8005b7a:	2b08      	cmp	r3, #8
 8005b7c:	d00b      	beq.n	8005b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b7e:	e076      	b.n	8005c6e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005b80:	4b44      	ldr	r3, [pc, #272]	; (8005c94 <HAL_RCC_GetSysClockFreq+0x138>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2210      	movs	r2, #16
 8005b86:	4013      	ands	r3, r2
 8005b88:	d002      	beq.n	8005b90 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005b8a:	4b43      	ldr	r3, [pc, #268]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005b8c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005b8e:	e07c      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005b90:	4b42      	ldr	r3, [pc, #264]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x140>)
 8005b92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b94:	e079      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b96:	4b42      	ldr	r3, [pc, #264]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x144>)
 8005b98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b9a:	e076      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9e:	0c9a      	lsrs	r2, r3, #18
 8005ba0:	230f      	movs	r3, #15
 8005ba2:	401a      	ands	r2, r3
 8005ba4:	4b3f      	ldr	r3, [pc, #252]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x148>)
 8005ba6:	5c9b      	ldrb	r3, [r3, r2]
 8005ba8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bac:	0d9a      	lsrs	r2, r3, #22
 8005bae:	2303      	movs	r3, #3
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bb6:	4b37      	ldr	r3, [pc, #220]	; (8005c94 <HAL_RCC_GetSysClockFreq+0x138>)
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	2380      	movs	r3, #128	; 0x80
 8005bbc:	025b      	lsls	r3, r3, #9
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	d01a      	beq.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
 8005bca:	4a35      	ldr	r2, [pc, #212]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x144>)
 8005bcc:	2300      	movs	r3, #0
 8005bce:	69b8      	ldr	r0, [r7, #24]
 8005bd0:	69f9      	ldr	r1, [r7, #28]
 8005bd2:	f7fa fc89 	bl	80004e8 <__aeabi_lmul>
 8005bd6:	0002      	movs	r2, r0
 8005bd8:	000b      	movs	r3, r1
 8005bda:	0010      	movs	r0, r2
 8005bdc:	0019      	movs	r1, r3
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	2300      	movs	r3, #0
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f7fa fc5d 	bl	80004a8 <__aeabi_uldivmod>
 8005bee:	0002      	movs	r2, r0
 8005bf0:	000b      	movs	r3, r1
 8005bf2:	0013      	movs	r3, r2
 8005bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf6:	e037      	b.n	8005c68 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005bf8:	4b26      	ldr	r3, [pc, #152]	; (8005c94 <HAL_RCC_GetSysClockFreq+0x138>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2210      	movs	r2, #16
 8005bfe:	4013      	ands	r3, r2
 8005c00:	d01a      	beq.n	8005c38 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	60bb      	str	r3, [r7, #8]
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	4a23      	ldr	r2, [pc, #140]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	68b8      	ldr	r0, [r7, #8]
 8005c10:	68f9      	ldr	r1, [r7, #12]
 8005c12:	f7fa fc69 	bl	80004e8 <__aeabi_lmul>
 8005c16:	0002      	movs	r2, r0
 8005c18:	000b      	movs	r3, r1
 8005c1a:	0010      	movs	r0, r2
 8005c1c:	0019      	movs	r1, r3
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	603b      	str	r3, [r7, #0]
 8005c22:	2300      	movs	r3, #0
 8005c24:	607b      	str	r3, [r7, #4]
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f7fa fc3d 	bl	80004a8 <__aeabi_uldivmod>
 8005c2e:	0002      	movs	r2, r0
 8005c30:	000b      	movs	r3, r1
 8005c32:	0013      	movs	r3, r2
 8005c34:	637b      	str	r3, [r7, #52]	; 0x34
 8005c36:	e017      	b.n	8005c68 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	0019      	movs	r1, r3
 8005c40:	4a16      	ldr	r2, [pc, #88]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x140>)
 8005c42:	2300      	movs	r3, #0
 8005c44:	f7fa fc50 	bl	80004e8 <__aeabi_lmul>
 8005c48:	0002      	movs	r2, r0
 8005c4a:	000b      	movs	r3, r1
 8005c4c:	0010      	movs	r0, r2
 8005c4e:	0019      	movs	r1, r3
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	001c      	movs	r4, r3
 8005c54:	2300      	movs	r3, #0
 8005c56:	001d      	movs	r5, r3
 8005c58:	0022      	movs	r2, r4
 8005c5a:	002b      	movs	r3, r5
 8005c5c:	f7fa fc24 	bl	80004a8 <__aeabi_uldivmod>
 8005c60:	0002      	movs	r2, r0
 8005c62:	000b      	movs	r3, r1
 8005c64:	0013      	movs	r3, r2
 8005c66:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005c6c:	e00d      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005c6e:	4b09      	ldr	r3, [pc, #36]	; (8005c94 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	0b5b      	lsrs	r3, r3, #13
 8005c74:	2207      	movs	r2, #7
 8005c76:	4013      	ands	r3, r2
 8005c78:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	2280      	movs	r2, #128	; 0x80
 8005c80:	0212      	lsls	r2, r2, #8
 8005c82:	409a      	lsls	r2, r3
 8005c84:	0013      	movs	r3, r2
 8005c86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005c88:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	b00e      	add	sp, #56	; 0x38
 8005c92:	bdb0      	pop	{r4, r5, r7, pc}
 8005c94:	40021000 	.word	0x40021000
 8005c98:	003d0900 	.word	0x003d0900
 8005c9c:	00f42400 	.word	0x00f42400
 8005ca0:	007a1200 	.word	0x007a1200
 8005ca4:	0800ad24 	.word	0x0800ad24

08005ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cac:	4b02      	ldr	r3, [pc, #8]	; (8005cb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005cae:	681b      	ldr	r3, [r3, #0]
}
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	46c0      	nop			; (mov r8, r8)
 8005cb8:	20000000 	.word	0x20000000

08005cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005cc0:	f7ff fff2 	bl	8005ca8 <HAL_RCC_GetHCLKFreq>
 8005cc4:	0001      	movs	r1, r0
 8005cc6:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	0a1b      	lsrs	r3, r3, #8
 8005ccc:	2207      	movs	r2, #7
 8005cce:	4013      	ands	r3, r2
 8005cd0:	4a04      	ldr	r2, [pc, #16]	; (8005ce4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cd2:	5cd3      	ldrb	r3, [r2, r3]
 8005cd4:	40d9      	lsrs	r1, r3
 8005cd6:	000b      	movs	r3, r1
}
 8005cd8:	0018      	movs	r0, r3
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	0800ad1c 	.word	0x0800ad1c

08005ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005cec:	f7ff ffdc 	bl	8005ca8 <HAL_RCC_GetHCLKFreq>
 8005cf0:	0001      	movs	r1, r0
 8005cf2:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	0adb      	lsrs	r3, r3, #11
 8005cf8:	2207      	movs	r2, #7
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	4a04      	ldr	r2, [pc, #16]	; (8005d10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005cfe:	5cd3      	ldrb	r3, [r2, r3]
 8005d00:	40d9      	lsrs	r1, r3
 8005d02:	000b      	movs	r3, r1
}
 8005d04:	0018      	movs	r0, r3
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	46c0      	nop			; (mov r8, r8)
 8005d0c:	40021000 	.word	0x40021000
 8005d10:	0800ad1c 	.word	0x0800ad1c

08005d14 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005d1c:	2017      	movs	r0, #23
 8005d1e:	183b      	adds	r3, r7, r0
 8005d20:	2200      	movs	r2, #0
 8005d22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d100      	bne.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005d2e:	e0c7      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d30:	4b8b      	ldr	r3, [pc, #556]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d34:	2380      	movs	r3, #128	; 0x80
 8005d36:	055b      	lsls	r3, r3, #21
 8005d38:	4013      	ands	r3, r2
 8005d3a:	d109      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d3c:	4b88      	ldr	r3, [pc, #544]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d40:	4b87      	ldr	r3, [pc, #540]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005d42:	2180      	movs	r1, #128	; 0x80
 8005d44:	0549      	lsls	r1, r1, #21
 8005d46:	430a      	orrs	r2, r1
 8005d48:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005d4a:	183b      	adds	r3, r7, r0
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d50:	4b84      	ldr	r3, [pc, #528]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	2380      	movs	r3, #128	; 0x80
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	4013      	ands	r3, r2
 8005d5a:	d11a      	bne.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d5c:	4b81      	ldr	r3, [pc, #516]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	4b80      	ldr	r3, [pc, #512]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005d62:	2180      	movs	r1, #128	; 0x80
 8005d64:	0049      	lsls	r1, r1, #1
 8005d66:	430a      	orrs	r2, r1
 8005d68:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d6a:	f7fe f9e3 	bl	8004134 <HAL_GetTick>
 8005d6e:	0003      	movs	r3, r0
 8005d70:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d72:	e008      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d74:	f7fe f9de 	bl	8004134 <HAL_GetTick>
 8005d78:	0002      	movs	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b64      	cmp	r3, #100	; 0x64
 8005d80:	d901      	bls.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e0e8      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d86:	4b77      	ldr	r3, [pc, #476]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	2380      	movs	r3, #128	; 0x80
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	4013      	ands	r3, r2
 8005d90:	d0f0      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005d92:	4b73      	ldr	r3, [pc, #460]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	23c0      	movs	r3, #192	; 0xc0
 8005d98:	039b      	lsls	r3, r3, #14
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	23c0      	movs	r3, #192	; 0xc0
 8005da4:	039b      	lsls	r3, r3, #14
 8005da6:	4013      	ands	r3, r2
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d013      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	23c0      	movs	r3, #192	; 0xc0
 8005db4:	029b      	lsls	r3, r3, #10
 8005db6:	401a      	ands	r2, r3
 8005db8:	23c0      	movs	r3, #192	; 0xc0
 8005dba:	029b      	lsls	r3, r3, #10
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d10a      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005dc0:	4b67      	ldr	r3, [pc, #412]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	2380      	movs	r3, #128	; 0x80
 8005dc6:	029b      	lsls	r3, r3, #10
 8005dc8:	401a      	ands	r2, r3
 8005dca:	2380      	movs	r3, #128	; 0x80
 8005dcc:	029b      	lsls	r3, r3, #10
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d101      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e0c0      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005dd6:	4b62      	ldr	r3, [pc, #392]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005dd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005dda:	23c0      	movs	r3, #192	; 0xc0
 8005ddc:	029b      	lsls	r3, r3, #10
 8005dde:	4013      	ands	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d03b      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	23c0      	movs	r3, #192	; 0xc0
 8005dee:	029b      	lsls	r3, r3, #10
 8005df0:	4013      	ands	r3, r2
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d033      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	4013      	ands	r3, r2
 8005e00:	d02e      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005e02:	4b57      	ldr	r3, [pc, #348]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e06:	4a58      	ldr	r2, [pc, #352]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e0c:	4b54      	ldr	r3, [pc, #336]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005e0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e10:	4b53      	ldr	r3, [pc, #332]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005e12:	2180      	movs	r1, #128	; 0x80
 8005e14:	0309      	lsls	r1, r1, #12
 8005e16:	430a      	orrs	r2, r1
 8005e18:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e1a:	4b51      	ldr	r3, [pc, #324]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005e1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e1e:	4b50      	ldr	r3, [pc, #320]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005e20:	4952      	ldr	r1, [pc, #328]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e22:	400a      	ands	r2, r1
 8005e24:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005e26:	4b4e      	ldr	r3, [pc, #312]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	2380      	movs	r3, #128	; 0x80
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	4013      	ands	r3, r2
 8005e34:	d014      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e36:	f7fe f97d 	bl	8004134 <HAL_GetTick>
 8005e3a:	0003      	movs	r3, r0
 8005e3c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e3e:	e009      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e40:	f7fe f978 	bl	8004134 <HAL_GetTick>
 8005e44:	0002      	movs	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	4a49      	ldr	r2, [pc, #292]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e081      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e54:	4b42      	ldr	r3, [pc, #264]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005e56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e58:	2380      	movs	r3, #128	; 0x80
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	d0ef      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2220      	movs	r2, #32
 8005e66:	4013      	ands	r3, r2
 8005e68:	d01f      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	23c0      	movs	r3, #192	; 0xc0
 8005e70:	029b      	lsls	r3, r3, #10
 8005e72:	401a      	ands	r2, r3
 8005e74:	23c0      	movs	r3, #192	; 0xc0
 8005e76:	029b      	lsls	r3, r3, #10
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d10c      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005e7c:	4b38      	ldr	r3, [pc, #224]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a3c      	ldr	r2, [pc, #240]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e82:	4013      	ands	r3, r2
 8005e84:	0019      	movs	r1, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	23c0      	movs	r3, #192	; 0xc0
 8005e8c:	039b      	lsls	r3, r3, #14
 8005e8e:	401a      	ands	r2, r3
 8005e90:	4b33      	ldr	r3, [pc, #204]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005e92:	430a      	orrs	r2, r1
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	4b32      	ldr	r3, [pc, #200]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005e98:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	23c0      	movs	r3, #192	; 0xc0
 8005ea0:	029b      	lsls	r3, r3, #10
 8005ea2:	401a      	ands	r2, r3
 8005ea4:	4b2e      	ldr	r3, [pc, #184]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005eaa:	2317      	movs	r3, #23
 8005eac:	18fb      	adds	r3, r7, r3
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d105      	bne.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eb4:	4b2a      	ldr	r3, [pc, #168]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb8:	4b29      	ldr	r3, [pc, #164]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005eba:	492f      	ldr	r1, [pc, #188]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ebc:	400a      	ands	r2, r1
 8005ebe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	d009      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005eca:	4b25      	ldr	r3, [pc, #148]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ece:	2203      	movs	r2, #3
 8005ed0:	4393      	bics	r3, r2
 8005ed2:	0019      	movs	r1, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	4b21      	ldr	r3, [pc, #132]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005eda:	430a      	orrs	r2, r1
 8005edc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d009      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ee8:	4b1d      	ldr	r3, [pc, #116]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eec:	220c      	movs	r2, #12
 8005eee:	4393      	bics	r3, r2
 8005ef0:	0019      	movs	r1, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	4b1a      	ldr	r3, [pc, #104]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2204      	movs	r2, #4
 8005f02:	4013      	ands	r3, r2
 8005f04:	d009      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f06:	4b16      	ldr	r3, [pc, #88]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f0a:	4a1c      	ldr	r2, [pc, #112]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	0019      	movs	r1, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691a      	ldr	r2, [r3, #16]
 8005f14:	4b12      	ldr	r3, [pc, #72]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005f16:	430a      	orrs	r2, r1
 8005f18:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2208      	movs	r2, #8
 8005f20:	4013      	ands	r3, r2
 8005f22:	d009      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f24:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f28:	4a15      	ldr	r2, [pc, #84]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	0019      	movs	r1, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695a      	ldr	r2, [r3, #20]
 8005f32:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005f34:	430a      	orrs	r2, r1
 8005f36:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2280      	movs	r2, #128	; 0x80
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d009      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005f42:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f46:	4a0f      	ldr	r2, [pc, #60]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005f48:	4013      	ands	r3, r2
 8005f4a:	0019      	movs	r1, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	699a      	ldr	r2, [r3, #24]
 8005f50:	4b03      	ldr	r3, [pc, #12]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005f52:	430a      	orrs	r2, r1
 8005f54:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	0018      	movs	r0, r3
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	b006      	add	sp, #24
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40021000 	.word	0x40021000
 8005f64:	40007000 	.word	0x40007000
 8005f68:	fffcffff 	.word	0xfffcffff
 8005f6c:	fff7ffff 	.word	0xfff7ffff
 8005f70:	00001388 	.word	0x00001388
 8005f74:	ffcfffff 	.word	0xffcfffff
 8005f78:	efffffff 	.word	0xefffffff
 8005f7c:	fffff3ff 	.word	0xfffff3ff
 8005f80:	ffffcfff 	.word	0xffffcfff
 8005f84:	fff3ffff 	.word	0xfff3ffff

08005f88 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005f88:	b5b0      	push	{r4, r5, r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f90:	230f      	movs	r3, #15
 8005f92:	18fb      	adds	r3, r7, r3
 8005f94:	2201      	movs	r2, #1
 8005f96:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e088      	b.n	80060b4 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2221      	movs	r2, #33	; 0x21
 8005fa6:	5c9b      	ldrb	r3, [r3, r2]
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d107      	bne.n	8005fbe <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f7fd fe8f 	bl	8003cdc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2221      	movs	r2, #33	; 0x21
 8005fc2:	2102      	movs	r1, #2
 8005fc4:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	2210      	movs	r2, #16
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b10      	cmp	r3, #16
 8005fd2:	d05f      	beq.n	8006094 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	22ca      	movs	r2, #202	; 0xca
 8005fda:	625a      	str	r2, [r3, #36]	; 0x24
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2253      	movs	r2, #83	; 0x53
 8005fe2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005fe4:	250f      	movs	r5, #15
 8005fe6:	197c      	adds	r4, r7, r5
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	0018      	movs	r0, r3
 8005fec:	f000 f890 	bl	8006110 <RTC_EnterInitMode>
 8005ff0:	0003      	movs	r3, r0
 8005ff2:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8005ff4:	0028      	movs	r0, r5
 8005ff6:	183b      	adds	r3, r7, r0
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d12c      	bne.n	8006058 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	492c      	ldr	r1, [pc, #176]	; (80060bc <HAL_RTC_Init+0x134>)
 800600a:	400a      	ands	r2, r1
 800600c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6899      	ldr	r1, [r3, #8]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	68d2      	ldr	r2, [r2, #12]
 8006034:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6919      	ldr	r1, [r3, #16]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	041a      	lsls	r2, r3, #16
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800604a:	183c      	adds	r4, r7, r0
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	0018      	movs	r0, r3
 8006050:	f000 f8a2 	bl	8006198 <RTC_ExitInitMode>
 8006054:	0003      	movs	r3, r0
 8006056:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8006058:	230f      	movs	r3, #15
 800605a:	18fb      	adds	r3, r7, r3
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d113      	bne.n	800608a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2103      	movs	r1, #3
 800606e:	438a      	bics	r2, r1
 8006070:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	69da      	ldr	r2, [r3, #28]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	431a      	orrs	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	22ff      	movs	r2, #255	; 0xff
 8006090:	625a      	str	r2, [r3, #36]	; 0x24
 8006092:	e003      	b.n	800609c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006094:	230f      	movs	r3, #15
 8006096:	18fb      	adds	r3, r7, r3
 8006098:	2200      	movs	r2, #0
 800609a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800609c:	230f      	movs	r3, #15
 800609e:	18fb      	adds	r3, r7, r3
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d103      	bne.n	80060ae <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2221      	movs	r2, #33	; 0x21
 80060aa:	2101      	movs	r1, #1
 80060ac:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80060ae:	230f      	movs	r3, #15
 80060b0:	18fb      	adds	r3, r7, r3
 80060b2:	781b      	ldrb	r3, [r3, #0]
}
 80060b4:	0018      	movs	r0, r3
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b004      	add	sp, #16
 80060ba:	bdb0      	pop	{r4, r5, r7, pc}
 80060bc:	ff8fffbf 	.word	0xff8fffbf

080060c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a0e      	ldr	r2, [pc, #56]	; (800610c <HAL_RTC_WaitForSynchro+0x4c>)
 80060d2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060d4:	f7fe f82e 	bl	8004134 <HAL_GetTick>
 80060d8:	0003      	movs	r3, r0
 80060da:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060dc:	e00a      	b.n	80060f4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060de:	f7fe f829 	bl	8004134 <HAL_GetTick>
 80060e2:	0002      	movs	r2, r0
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	1ad2      	subs	r2, r2, r3
 80060e8:	23fa      	movs	r3, #250	; 0xfa
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d901      	bls.n	80060f4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e006      	b.n	8006102 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	2220      	movs	r2, #32
 80060fc:	4013      	ands	r3, r2
 80060fe:	d0ee      	beq.n	80060de <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	0018      	movs	r0, r3
 8006104:	46bd      	mov	sp, r7
 8006106:	b004      	add	sp, #16
 8006108:	bd80      	pop	{r7, pc}
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	00017f5f 	.word	0x00017f5f

08006110 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800611c:	230f      	movs	r3, #15
 800611e:	18fb      	adds	r3, r7, r3
 8006120:	2200      	movs	r2, #0
 8006122:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	2240      	movs	r2, #64	; 0x40
 800612c:	4013      	ands	r3, r2
 800612e:	d12c      	bne.n	800618a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68da      	ldr	r2, [r3, #12]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2180      	movs	r1, #128	; 0x80
 800613c:	430a      	orrs	r2, r1
 800613e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006140:	f7fd fff8 	bl	8004134 <HAL_GetTick>
 8006144:	0003      	movs	r3, r0
 8006146:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006148:	e014      	b.n	8006174 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800614a:	f7fd fff3 	bl	8004134 <HAL_GetTick>
 800614e:	0002      	movs	r2, r0
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	1ad2      	subs	r2, r2, r3
 8006154:	200f      	movs	r0, #15
 8006156:	183b      	adds	r3, r7, r0
 8006158:	1839      	adds	r1, r7, r0
 800615a:	7809      	ldrb	r1, [r1, #0]
 800615c:	7019      	strb	r1, [r3, #0]
 800615e:	23fa      	movs	r3, #250	; 0xfa
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	429a      	cmp	r2, r3
 8006164:	d906      	bls.n	8006174 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2221      	movs	r2, #33	; 0x21
 800616a:	2104      	movs	r1, #4
 800616c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800616e:	183b      	adds	r3, r7, r0
 8006170:	2201      	movs	r2, #1
 8006172:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	2240      	movs	r2, #64	; 0x40
 800617c:	4013      	ands	r3, r2
 800617e:	d104      	bne.n	800618a <RTC_EnterInitMode+0x7a>
 8006180:	230f      	movs	r3, #15
 8006182:	18fb      	adds	r3, r7, r3
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d1df      	bne.n	800614a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800618a:	230f      	movs	r3, #15
 800618c:	18fb      	adds	r3, r7, r3
 800618e:	781b      	ldrb	r3, [r3, #0]
}
 8006190:	0018      	movs	r0, r3
 8006192:	46bd      	mov	sp, r7
 8006194:	b004      	add	sp, #16
 8006196:	bd80      	pop	{r7, pc}

08006198 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006198:	b590      	push	{r4, r7, lr}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061a0:	240f      	movs	r4, #15
 80061a2:	193b      	adds	r3, r7, r4
 80061a4:	2200      	movs	r2, #0
 80061a6:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2180      	movs	r1, #128	; 0x80
 80061b4:	438a      	bics	r2, r1
 80061b6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	2220      	movs	r2, #32
 80061c0:	4013      	ands	r3, r2
 80061c2:	d10c      	bne.n	80061de <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	0018      	movs	r0, r3
 80061c8:	f7ff ff7a 	bl	80060c0 <HAL_RTC_WaitForSynchro>
 80061cc:	1e03      	subs	r3, r0, #0
 80061ce:	d006      	beq.n	80061de <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2221      	movs	r2, #33	; 0x21
 80061d4:	2104      	movs	r1, #4
 80061d6:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80061d8:	193b      	adds	r3, r7, r4
 80061da:	2201      	movs	r2, #1
 80061dc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80061de:	230f      	movs	r3, #15
 80061e0:	18fb      	adds	r3, r7, r3
 80061e2:	781b      	ldrb	r3, [r3, #0]
}
 80061e4:	0018      	movs	r0, r3
 80061e6:	46bd      	mov	sp, r7
 80061e8:	b005      	add	sp, #20
 80061ea:	bd90      	pop	{r4, r7, pc}

080061ec <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80061f8:	4b64      	ldr	r3, [pc, #400]	; (800638c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	22fa      	movs	r2, #250	; 0xfa
 80061fe:	01d1      	lsls	r1, r2, #7
 8006200:	0018      	movs	r0, r3
 8006202:	f7f9 ff9d 	bl	8000140 <__udivsi3>
 8006206:	0003      	movs	r3, r0
 8006208:	001a      	movs	r2, r3
 800620a:	0013      	movs	r3, r2
 800620c:	015b      	lsls	r3, r3, #5
 800620e:	1a9b      	subs	r3, r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	189b      	adds	r3, r3, r2
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2220      	movs	r2, #32
 800621c:	5c9b      	ldrb	r3, [r3, r2]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d101      	bne.n	8006226 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8006222:	2302      	movs	r3, #2
 8006224:	e0ad      	b.n	8006382 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	2101      	movs	r1, #1
 800622c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2221      	movs	r2, #33	; 0x21
 8006232:	2102      	movs	r1, #2
 8006234:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	22ca      	movs	r2, #202	; 0xca
 800623c:	625a      	str	r2, [r3, #36]	; 0x24
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2253      	movs	r2, #83	; 0x53
 8006244:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	2380      	movs	r3, #128	; 0x80
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	4013      	ands	r3, r2
 8006252:	d019      	beq.n	8006288 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	3b01      	subs	r3, #1
 8006258:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10d      	bne.n	800627c <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	22ff      	movs	r2, #255	; 0xff
 8006266:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2221      	movs	r2, #33	; 0x21
 800626c:	2103      	movs	r1, #3
 800626e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2220      	movs	r2, #32
 8006274:	2100      	movs	r1, #0
 8006276:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e082      	b.n	8006382 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	2204      	movs	r2, #4
 8006284:	4013      	ands	r3, r2
 8006286:	d1e5      	bne.n	8006254 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	493f      	ldr	r1, [pc, #252]	; (8006390 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8006294:	400a      	ands	r2, r1
 8006296:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	22ff      	movs	r2, #255	; 0xff
 80062a0:	401a      	ands	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	493b      	ldr	r1, [pc, #236]	; (8006394 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80062a8:	430a      	orrs	r2, r1
 80062aa:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80062ac:	4b37      	ldr	r3, [pc, #220]	; (800638c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	22fa      	movs	r2, #250	; 0xfa
 80062b2:	01d1      	lsls	r1, r2, #7
 80062b4:	0018      	movs	r0, r3
 80062b6:	f7f9 ff43 	bl	8000140 <__udivsi3>
 80062ba:	0003      	movs	r3, r0
 80062bc:	001a      	movs	r2, r3
 80062be:	0013      	movs	r3, r2
 80062c0:	015b      	lsls	r3, r3, #5
 80062c2:	1a9b      	subs	r3, r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	189b      	adds	r3, r3, r2
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10d      	bne.n	80062f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	22ff      	movs	r2, #255	; 0xff
 80062de:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2221      	movs	r2, #33	; 0x21
 80062e4:	2103      	movs	r1, #3
 80062e6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	2100      	movs	r1, #0
 80062ee:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e046      	b.n	8006382 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	2204      	movs	r2, #4
 80062fc:	4013      	ands	r3, r2
 80062fe:	d0e5      	beq.n	80062cc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2107      	movs	r1, #7
 800630c:	438a      	bics	r2, r1
 800630e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6899      	ldr	r1, [r3, #8]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	430a      	orrs	r2, r1
 800631e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006328:	4b1b      	ldr	r3, [pc, #108]	; (8006398 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	4b1a      	ldr	r3, [pc, #104]	; (8006398 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800632e:	2180      	movs	r1, #128	; 0x80
 8006330:	0349      	lsls	r1, r1, #13
 8006332:	430a      	orrs	r2, r1
 8006334:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006336:	4b18      	ldr	r3, [pc, #96]	; (8006398 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	4b17      	ldr	r3, [pc, #92]	; (8006398 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800633c:	2180      	movs	r1, #128	; 0x80
 800633e:	0349      	lsls	r1, r1, #13
 8006340:	430a      	orrs	r2, r1
 8006342:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2180      	movs	r1, #128	; 0x80
 8006350:	01c9      	lsls	r1, r1, #7
 8006352:	430a      	orrs	r2, r1
 8006354:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2180      	movs	r1, #128	; 0x80
 8006362:	00c9      	lsls	r1, r1, #3
 8006364:	430a      	orrs	r2, r1
 8006366:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	22ff      	movs	r2, #255	; 0xff
 800636e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2221      	movs	r2, #33	; 0x21
 8006374:	2101      	movs	r1, #1
 8006376:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2220      	movs	r2, #32
 800637c:	2100      	movs	r1, #0
 800637e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	0018      	movs	r0, r3
 8006384:	46bd      	mov	sp, r7
 8006386:	b006      	add	sp, #24
 8006388:	bd80      	pop	{r7, pc}
 800638a:	46c0      	nop			; (mov r8, r8)
 800638c:	20000000 	.word	0x20000000
 8006390:	fffffbff 	.word	0xfffffbff
 8006394:	fffffb7f 	.word	0xfffffb7f
 8006398:	40010400 	.word	0x40010400

0800639c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2220      	movs	r2, #32
 80063ac:	5c9b      	ldrb	r3, [r3, r2]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d101      	bne.n	80063b6 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 80063b2:	2302      	movs	r3, #2
 80063b4:	e04e      	b.n	8006454 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2220      	movs	r2, #32
 80063ba:	2101      	movs	r1, #1
 80063bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2221      	movs	r2, #33	; 0x21
 80063c2:	2102      	movs	r1, #2
 80063c4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	22ca      	movs	r2, #202	; 0xca
 80063cc:	625a      	str	r2, [r3, #36]	; 0x24
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2253      	movs	r2, #83	; 0x53
 80063d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	491e      	ldr	r1, [pc, #120]	; (800645c <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 80063e2:	400a      	ands	r2, r1
 80063e4:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689a      	ldr	r2, [r3, #8]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	491b      	ldr	r1, [pc, #108]	; (8006460 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 80063f2:	400a      	ands	r2, r1
 80063f4:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063f6:	f7fd fe9d 	bl	8004134 <HAL_GetTick>
 80063fa:	0003      	movs	r3, r0
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80063fe:	e016      	b.n	800642e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006400:	f7fd fe98 	bl	8004134 <HAL_GetTick>
 8006404:	0002      	movs	r2, r0
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1ad2      	subs	r2, r2, r3
 800640a:	23fa      	movs	r3, #250	; 0xfa
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	429a      	cmp	r2, r3
 8006410:	d90d      	bls.n	800642e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	22ff      	movs	r2, #255	; 0xff
 8006418:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2221      	movs	r2, #33	; 0x21
 800641e:	2103      	movs	r1, #3
 8006420:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2220      	movs	r2, #32
 8006426:	2100      	movs	r1, #0
 8006428:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e012      	b.n	8006454 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	2204      	movs	r2, #4
 8006436:	4013      	ands	r3, r2
 8006438:	d0e2      	beq.n	8006400 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	22ff      	movs	r2, #255	; 0xff
 8006440:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2221      	movs	r2, #33	; 0x21
 8006446:	2101      	movs	r1, #1
 8006448:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2220      	movs	r2, #32
 800644e:	2100      	movs	r1, #0
 8006450:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	0018      	movs	r0, r3
 8006456:	46bd      	mov	sp, r7
 8006458:	b004      	add	sp, #16
 800645a:	bd80      	pop	{r7, pc}
 800645c:	fffffbff 	.word	0xfffffbff
 8006460:	ffffbfff 	.word	0xffffbfff

08006464 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800646c:	4b13      	ldr	r3, [pc, #76]	; (80064bc <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 800646e:	2280      	movs	r2, #128	; 0x80
 8006470:	0352      	lsls	r2, r2, #13
 8006472:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	2380      	movs	r3, #128	; 0x80
 800647c:	01db      	lsls	r3, r3, #7
 800647e:	4013      	ands	r3, r2
 8006480:	d014      	beq.n	80064ac <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	2380      	movs	r3, #128	; 0x80
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	4013      	ands	r3, r2
 800648e:	d00d      	beq.n	80064ac <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	22ff      	movs	r2, #255	; 0xff
 8006498:	401a      	ands	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4908      	ldr	r1, [pc, #32]	; (80064c0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80064a0:	430a      	orrs	r2, r1
 80064a2:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	0018      	movs	r0, r3
 80064a8:	f000 f80c 	bl	80064c4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2221      	movs	r2, #33	; 0x21
 80064b0:	2101      	movs	r1, #1
 80064b2:	5499      	strb	r1, [r3, r2]
}
 80064b4:	46c0      	nop			; (mov r8, r8)
 80064b6:	46bd      	mov	sp, r7
 80064b8:	b002      	add	sp, #8
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	40010400 	.word	0x40010400
 80064c0:	fffffb7f 	.word	0xfffffb7f

080064c4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80064cc:	46c0      	nop			; (mov r8, r8)
 80064ce:	46bd      	mov	sp, r7
 80064d0:	b002      	add	sp, #8
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e083      	b.n	80065ee <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d109      	bne.n	8006502 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	2382      	movs	r3, #130	; 0x82
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d009      	beq.n	800650e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	61da      	str	r2, [r3, #28]
 8006500:	e005      	b.n	800650e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2251      	movs	r2, #81	; 0x51
 8006518:	5c9b      	ldrb	r3, [r3, r2]
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	d107      	bne.n	8006530 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2250      	movs	r2, #80	; 0x50
 8006524:	2100      	movs	r1, #0
 8006526:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	0018      	movs	r0, r3
 800652c:	f7fd fbf6 	bl	8003d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2251      	movs	r2, #81	; 0x51
 8006534:	2102      	movs	r1, #2
 8006536:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2140      	movs	r1, #64	; 0x40
 8006544:	438a      	bics	r2, r1
 8006546:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	2382      	movs	r3, #130	; 0x82
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	401a      	ands	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6899      	ldr	r1, [r3, #8]
 8006556:	2384      	movs	r3, #132	; 0x84
 8006558:	021b      	lsls	r3, r3, #8
 800655a:	400b      	ands	r3, r1
 800655c:	431a      	orrs	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68d9      	ldr	r1, [r3, #12]
 8006562:	2380      	movs	r3, #128	; 0x80
 8006564:	011b      	lsls	r3, r3, #4
 8006566:	400b      	ands	r3, r1
 8006568:	431a      	orrs	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2102      	movs	r1, #2
 8006570:	400b      	ands	r3, r1
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	2101      	movs	r1, #1
 800657a:	400b      	ands	r3, r1
 800657c:	431a      	orrs	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6999      	ldr	r1, [r3, #24]
 8006582:	2380      	movs	r3, #128	; 0x80
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	400b      	ands	r3, r1
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	2138      	movs	r1, #56	; 0x38
 8006590:	400b      	ands	r3, r1
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	2180      	movs	r1, #128	; 0x80
 800659a:	400b      	ands	r3, r1
 800659c:	431a      	orrs	r2, r3
 800659e:	0011      	movs	r1, r2
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065a4:	2380      	movs	r3, #128	; 0x80
 80065a6:	019b      	lsls	r3, r3, #6
 80065a8:	401a      	ands	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	0c1b      	lsrs	r3, r3, #16
 80065b8:	2204      	movs	r2, #4
 80065ba:	4013      	ands	r3, r2
 80065bc:	0019      	movs	r1, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	2210      	movs	r2, #16
 80065c4:	401a      	ands	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69da      	ldr	r2, [r3, #28]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4907      	ldr	r1, [pc, #28]	; (80065f8 <HAL_SPI_Init+0x124>)
 80065da:	400a      	ands	r2, r1
 80065dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2251      	movs	r2, #81	; 0x51
 80065e8:	2101      	movs	r1, #1
 80065ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	0018      	movs	r0, r3
 80065f0:	46bd      	mov	sp, r7
 80065f2:	b002      	add	sp, #8
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	46c0      	nop			; (mov r8, r8)
 80065f8:	fffff7ff 	.word	0xfffff7ff

080065fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	603b      	str	r3, [r7, #0]
 8006608:	1dbb      	adds	r3, r7, #6
 800660a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800660c:	231f      	movs	r3, #31
 800660e:	18fb      	adds	r3, r7, r3
 8006610:	2200      	movs	r2, #0
 8006612:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2250      	movs	r2, #80	; 0x50
 8006618:	5c9b      	ldrb	r3, [r3, r2]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d101      	bne.n	8006622 <HAL_SPI_Transmit+0x26>
 800661e:	2302      	movs	r3, #2
 8006620:	e145      	b.n	80068ae <HAL_SPI_Transmit+0x2b2>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2250      	movs	r2, #80	; 0x50
 8006626:	2101      	movs	r1, #1
 8006628:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800662a:	f7fd fd83 	bl	8004134 <HAL_GetTick>
 800662e:	0003      	movs	r3, r0
 8006630:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006632:	2316      	movs	r3, #22
 8006634:	18fb      	adds	r3, r7, r3
 8006636:	1dba      	adds	r2, r7, #6
 8006638:	8812      	ldrh	r2, [r2, #0]
 800663a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2251      	movs	r2, #81	; 0x51
 8006640:	5c9b      	ldrb	r3, [r3, r2]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b01      	cmp	r3, #1
 8006646:	d004      	beq.n	8006652 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006648:	231f      	movs	r3, #31
 800664a:	18fb      	adds	r3, r7, r3
 800664c:	2202      	movs	r2, #2
 800664e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006650:	e126      	b.n	80068a0 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <HAL_SPI_Transmit+0x64>
 8006658:	1dbb      	adds	r3, r7, #6
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d104      	bne.n	800666a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006660:	231f      	movs	r3, #31
 8006662:	18fb      	adds	r3, r7, r3
 8006664:	2201      	movs	r2, #1
 8006666:	701a      	strb	r2, [r3, #0]
    goto error;
 8006668:	e11a      	b.n	80068a0 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2251      	movs	r2, #81	; 0x51
 800666e:	2103      	movs	r1, #3
 8006670:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	1dba      	adds	r2, r7, #6
 8006682:	8812      	ldrh	r2, [r2, #0]
 8006684:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	1dba      	adds	r2, r7, #6
 800668a:	8812      	ldrh	r2, [r2, #0]
 800668c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	2380      	movs	r3, #128	; 0x80
 80066b2:	021b      	lsls	r3, r3, #8
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d110      	bne.n	80066da <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2140      	movs	r1, #64	; 0x40
 80066c4:	438a      	bics	r2, r1
 80066c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2180      	movs	r1, #128	; 0x80
 80066d4:	01c9      	lsls	r1, r1, #7
 80066d6:	430a      	orrs	r2, r1
 80066d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2240      	movs	r2, #64	; 0x40
 80066e2:	4013      	ands	r3, r2
 80066e4:	2b40      	cmp	r3, #64	; 0x40
 80066e6:	d007      	beq.n	80066f8 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2140      	movs	r1, #64	; 0x40
 80066f4:	430a      	orrs	r2, r1
 80066f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	2380      	movs	r3, #128	; 0x80
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	429a      	cmp	r2, r3
 8006702:	d152      	bne.n	80067aa <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d004      	beq.n	8006716 <HAL_SPI_Transmit+0x11a>
 800670c:	2316      	movs	r3, #22
 800670e:	18fb      	adds	r3, r7, r3
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d143      	bne.n	800679e <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671a:	881a      	ldrh	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006726:	1c9a      	adds	r2, r3, #2
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006730:	b29b      	uxth	r3, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	b29a      	uxth	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800673a:	e030      	b.n	800679e <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2202      	movs	r2, #2
 8006744:	4013      	ands	r3, r2
 8006746:	2b02      	cmp	r3, #2
 8006748:	d112      	bne.n	8006770 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674e:	881a      	ldrh	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675a:	1c9a      	adds	r2, r3, #2
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006764:	b29b      	uxth	r3, r3
 8006766:	3b01      	subs	r3, #1
 8006768:	b29a      	uxth	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	86da      	strh	r2, [r3, #54]	; 0x36
 800676e:	e016      	b.n	800679e <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006770:	f7fd fce0 	bl	8004134 <HAL_GetTick>
 8006774:	0002      	movs	r2, r0
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	429a      	cmp	r2, r3
 800677e:	d802      	bhi.n	8006786 <HAL_SPI_Transmit+0x18a>
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	3301      	adds	r3, #1
 8006784:	d102      	bne.n	800678c <HAL_SPI_Transmit+0x190>
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d108      	bne.n	800679e <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 800678c:	231f      	movs	r3, #31
 800678e:	18fb      	adds	r3, r7, r3
 8006790:	2203      	movs	r2, #3
 8006792:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2251      	movs	r2, #81	; 0x51
 8006798:	2101      	movs	r1, #1
 800679a:	5499      	strb	r1, [r3, r2]
          goto error;
 800679c:	e080      	b.n	80068a0 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1c9      	bne.n	800673c <HAL_SPI_Transmit+0x140>
 80067a8:	e053      	b.n	8006852 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d004      	beq.n	80067bc <HAL_SPI_Transmit+0x1c0>
 80067b2:	2316      	movs	r3, #22
 80067b4:	18fb      	adds	r3, r7, r3
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d145      	bne.n	8006848 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	330c      	adds	r3, #12
 80067c6:	7812      	ldrb	r2, [r2, #0]
 80067c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d8:	b29b      	uxth	r3, r3
 80067da:	3b01      	subs	r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80067e2:	e031      	b.n	8006848 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	2202      	movs	r2, #2
 80067ec:	4013      	ands	r3, r2
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d113      	bne.n	800681a <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	330c      	adds	r3, #12
 80067fc:	7812      	ldrb	r2, [r2, #0]
 80067fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800680e:	b29b      	uxth	r3, r3
 8006810:	3b01      	subs	r3, #1
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	86da      	strh	r2, [r3, #54]	; 0x36
 8006818:	e016      	b.n	8006848 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800681a:	f7fd fc8b 	bl	8004134 <HAL_GetTick>
 800681e:	0002      	movs	r2, r0
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	429a      	cmp	r2, r3
 8006828:	d802      	bhi.n	8006830 <HAL_SPI_Transmit+0x234>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	3301      	adds	r3, #1
 800682e:	d102      	bne.n	8006836 <HAL_SPI_Transmit+0x23a>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d108      	bne.n	8006848 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8006836:	231f      	movs	r3, #31
 8006838:	18fb      	adds	r3, r7, r3
 800683a:	2203      	movs	r2, #3
 800683c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2251      	movs	r2, #81	; 0x51
 8006842:	2101      	movs	r1, #1
 8006844:	5499      	strb	r1, [r3, r2]
          goto error;
 8006846:	e02b      	b.n	80068a0 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1c8      	bne.n	80067e4 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	0018      	movs	r0, r3
 800685a:	f000 fc1f 	bl	800709c <SPI_EndRxTxTransaction>
 800685e:	1e03      	subs	r3, r0, #0
 8006860:	d002      	beq.n	8006868 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2220      	movs	r2, #32
 8006866:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10a      	bne.n	8006886 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006870:	2300      	movs	r3, #0
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	613b      	str	r3, [r7, #16]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	613b      	str	r3, [r7, #16]
 8006884:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688a:	2b00      	cmp	r3, #0
 800688c:	d004      	beq.n	8006898 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 800688e:	231f      	movs	r3, #31
 8006890:	18fb      	adds	r3, r7, r3
 8006892:	2201      	movs	r2, #1
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	e003      	b.n	80068a0 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2251      	movs	r2, #81	; 0x51
 800689c:	2101      	movs	r1, #1
 800689e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2250      	movs	r2, #80	; 0x50
 80068a4:	2100      	movs	r1, #0
 80068a6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80068a8:	231f      	movs	r3, #31
 80068aa:	18fb      	adds	r3, r7, r3
 80068ac:	781b      	ldrb	r3, [r3, #0]
}
 80068ae:	0018      	movs	r0, r3
 80068b0:	46bd      	mov	sp, r7
 80068b2:	b008      	add	sp, #32
 80068b4:	bd80      	pop	{r7, pc}
	...

080068b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068b8:	b590      	push	{r4, r7, lr}
 80068ba:	b089      	sub	sp, #36	; 0x24
 80068bc:	af02      	add	r7, sp, #8
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	603b      	str	r3, [r7, #0]
 80068c4:	1dbb      	adds	r3, r7, #6
 80068c6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068c8:	2117      	movs	r1, #23
 80068ca:	187b      	adds	r3, r7, r1
 80068cc:	2200      	movs	r2, #0
 80068ce:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2251      	movs	r2, #81	; 0x51
 80068d4:	5c9b      	ldrb	r3, [r3, r2]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d003      	beq.n	80068e4 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80068dc:	187b      	adds	r3, r7, r1
 80068de:	2202      	movs	r2, #2
 80068e0:	701a      	strb	r2, [r3, #0]
    goto error;
 80068e2:	e109      	b.n	8006af8 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	2382      	movs	r3, #130	; 0x82
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d113      	bne.n	8006918 <HAL_SPI_Receive+0x60>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10f      	bne.n	8006918 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2251      	movs	r2, #81	; 0x51
 80068fc:	2104      	movs	r1, #4
 80068fe:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006900:	1dbb      	adds	r3, r7, #6
 8006902:	881c      	ldrh	r4, [r3, #0]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	68b9      	ldr	r1, [r7, #8]
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	0023      	movs	r3, r4
 8006910:	f000 f900 	bl	8006b14 <HAL_SPI_TransmitReceive>
 8006914:	0003      	movs	r3, r0
 8006916:	e0f6      	b.n	8006b06 <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2250      	movs	r2, #80	; 0x50
 800691c:	5c9b      	ldrb	r3, [r3, r2]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d101      	bne.n	8006926 <HAL_SPI_Receive+0x6e>
 8006922:	2302      	movs	r3, #2
 8006924:	e0ef      	b.n	8006b06 <HAL_SPI_Receive+0x24e>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2250      	movs	r2, #80	; 0x50
 800692a:	2101      	movs	r1, #1
 800692c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800692e:	f7fd fc01 	bl	8004134 <HAL_GetTick>
 8006932:	0003      	movs	r3, r0
 8006934:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <HAL_SPI_Receive+0x8c>
 800693c:	1dbb      	adds	r3, r7, #6
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d104      	bne.n	800694e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8006944:	2317      	movs	r3, #23
 8006946:	18fb      	adds	r3, r7, r3
 8006948:	2201      	movs	r2, #1
 800694a:	701a      	strb	r2, [r3, #0]
    goto error;
 800694c:	e0d4      	b.n	8006af8 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2251      	movs	r2, #81	; 0x51
 8006952:	2104      	movs	r1, #4
 8006954:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	1dba      	adds	r2, r7, #6
 8006966:	8812      	ldrh	r2, [r2, #0]
 8006968:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	1dba      	adds	r2, r7, #6
 800696e:	8812      	ldrh	r2, [r2, #0]
 8006970:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	2380      	movs	r3, #128	; 0x80
 8006996:	021b      	lsls	r3, r3, #8
 8006998:	429a      	cmp	r2, r3
 800699a:	d10f      	bne.n	80069bc <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2140      	movs	r1, #64	; 0x40
 80069a8:	438a      	bics	r2, r1
 80069aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4956      	ldr	r1, [pc, #344]	; (8006b10 <HAL_SPI_Receive+0x258>)
 80069b8:	400a      	ands	r2, r1
 80069ba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2240      	movs	r2, #64	; 0x40
 80069c4:	4013      	ands	r3, r2
 80069c6:	2b40      	cmp	r3, #64	; 0x40
 80069c8:	d007      	beq.n	80069da <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2140      	movs	r1, #64	; 0x40
 80069d6:	430a      	orrs	r2, r1
 80069d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d000      	beq.n	80069e4 <HAL_SPI_Receive+0x12c>
 80069e2:	e06c      	b.n	8006abe <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80069e4:	e033      	b.n	8006a4e <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	2201      	movs	r2, #1
 80069ee:	4013      	ands	r3, r2
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d115      	bne.n	8006a20 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	330c      	adds	r3, #12
 80069fa:	001a      	movs	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a00:	7812      	ldrb	r2, [r2, #0]
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a1e:	e016      	b.n	8006a4e <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a20:	f7fd fb88 	bl	8004134 <HAL_GetTick>
 8006a24:	0002      	movs	r2, r0
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d802      	bhi.n	8006a36 <HAL_SPI_Receive+0x17e>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	3301      	adds	r3, #1
 8006a34:	d102      	bne.n	8006a3c <HAL_SPI_Receive+0x184>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d108      	bne.n	8006a4e <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8006a3c:	2317      	movs	r3, #23
 8006a3e:	18fb      	adds	r3, r7, r3
 8006a40:	2203      	movs	r2, #3
 8006a42:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2251      	movs	r2, #81	; 0x51
 8006a48:	2101      	movs	r1, #1
 8006a4a:	5499      	strb	r1, [r3, r2]
          goto error;
 8006a4c:	e054      	b.n	8006af8 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1c6      	bne.n	80069e6 <HAL_SPI_Receive+0x12e>
 8006a58:	e036      	b.n	8006ac8 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	2201      	movs	r2, #1
 8006a62:	4013      	ands	r3, r2
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d113      	bne.n	8006a90 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68da      	ldr	r2, [r3, #12]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a72:	b292      	uxth	r2, r2
 8006a74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7a:	1c9a      	adds	r2, r3, #2
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a8e:	e016      	b.n	8006abe <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a90:	f7fd fb50 	bl	8004134 <HAL_GetTick>
 8006a94:	0002      	movs	r2, r0
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d802      	bhi.n	8006aa6 <HAL_SPI_Receive+0x1ee>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	d102      	bne.n	8006aac <HAL_SPI_Receive+0x1f4>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d108      	bne.n	8006abe <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8006aac:	2317      	movs	r3, #23
 8006aae:	18fb      	adds	r3, r7, r3
 8006ab0:	2203      	movs	r2, #3
 8006ab2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2251      	movs	r2, #81	; 0x51
 8006ab8:	2101      	movs	r1, #1
 8006aba:	5499      	strb	r1, [r3, r2]
          goto error;
 8006abc:	e01c      	b.n	8006af8 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1c8      	bne.n	8006a5a <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	0018      	movs	r0, r3
 8006ad0:	f000 fa7a 	bl	8006fc8 <SPI_EndRxTransaction>
 8006ad4:	1e03      	subs	r3, r0, #0
 8006ad6:	d002      	beq.n	8006ade <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2220      	movs	r2, #32
 8006adc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d004      	beq.n	8006af0 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 8006ae6:	2317      	movs	r3, #23
 8006ae8:	18fb      	adds	r3, r7, r3
 8006aea:	2201      	movs	r2, #1
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	e003      	b.n	8006af8 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2251      	movs	r2, #81	; 0x51
 8006af4:	2101      	movs	r1, #1
 8006af6:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2250      	movs	r2, #80	; 0x50
 8006afc:	2100      	movs	r1, #0
 8006afe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006b00:	2317      	movs	r3, #23
 8006b02:	18fb      	adds	r3, r7, r3
 8006b04:	781b      	ldrb	r3, [r3, #0]
}
 8006b06:	0018      	movs	r0, r3
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	b007      	add	sp, #28
 8006b0c:	bd90      	pop	{r4, r7, pc}
 8006b0e:	46c0      	nop			; (mov r8, r8)
 8006b10:	ffffbfff 	.word	0xffffbfff

08006b14 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08c      	sub	sp, #48	; 0x30
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	001a      	movs	r2, r3
 8006b22:	1cbb      	adds	r3, r7, #2
 8006b24:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b26:	2301      	movs	r3, #1
 8006b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006b2a:	232b      	movs	r3, #43	; 0x2b
 8006b2c:	18fb      	adds	r3, r7, r3
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2250      	movs	r2, #80	; 0x50
 8006b36:	5c9b      	ldrb	r3, [r3, r2]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_SPI_TransmitReceive+0x2c>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e1b0      	b.n	8006ea2 <HAL_SPI_TransmitReceive+0x38e>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2250      	movs	r2, #80	; 0x50
 8006b44:	2101      	movs	r1, #1
 8006b46:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b48:	f7fd faf4 	bl	8004134 <HAL_GetTick>
 8006b4c:	0003      	movs	r3, r0
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b50:	2023      	movs	r0, #35	; 0x23
 8006b52:	183b      	adds	r3, r7, r0
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	2151      	movs	r1, #81	; 0x51
 8006b58:	5c52      	ldrb	r2, [r2, r1]
 8006b5a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006b62:	231a      	movs	r3, #26
 8006b64:	18fb      	adds	r3, r7, r3
 8006b66:	1cba      	adds	r2, r7, #2
 8006b68:	8812      	ldrh	r2, [r2, #0]
 8006b6a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b6c:	183b      	adds	r3, r7, r0
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d011      	beq.n	8006b98 <HAL_SPI_TransmitReceive+0x84>
 8006b74:	69fa      	ldr	r2, [r7, #28]
 8006b76:	2382      	movs	r3, #130	; 0x82
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d107      	bne.n	8006b8e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d103      	bne.n	8006b8e <HAL_SPI_TransmitReceive+0x7a>
 8006b86:	183b      	adds	r3, r7, r0
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	d004      	beq.n	8006b98 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006b8e:	232b      	movs	r3, #43	; 0x2b
 8006b90:	18fb      	adds	r3, r7, r3
 8006b92:	2202      	movs	r2, #2
 8006b94:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b96:	e17d      	b.n	8006e94 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d006      	beq.n	8006bac <HAL_SPI_TransmitReceive+0x98>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <HAL_SPI_TransmitReceive+0x98>
 8006ba4:	1cbb      	adds	r3, r7, #2
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d104      	bne.n	8006bb6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006bac:	232b      	movs	r3, #43	; 0x2b
 8006bae:	18fb      	adds	r3, r7, r3
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	701a      	strb	r2, [r3, #0]
    goto error;
 8006bb4:	e16e      	b.n	8006e94 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2251      	movs	r2, #81	; 0x51
 8006bba:	5c9b      	ldrb	r3, [r3, r2]
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d003      	beq.n	8006bca <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2251      	movs	r2, #81	; 0x51
 8006bc6:	2105      	movs	r1, #5
 8006bc8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	1cba      	adds	r2, r7, #2
 8006bda:	8812      	ldrh	r2, [r2, #0]
 8006bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	1cba      	adds	r2, r7, #2
 8006be2:	8812      	ldrh	r2, [r2, #0]
 8006be4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	1cba      	adds	r2, r7, #2
 8006bf0:	8812      	ldrh	r2, [r2, #0]
 8006bf2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	1cba      	adds	r2, r7, #2
 8006bf8:	8812      	ldrh	r2, [r2, #0]
 8006bfa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2240      	movs	r2, #64	; 0x40
 8006c10:	4013      	ands	r3, r2
 8006c12:	2b40      	cmp	r3, #64	; 0x40
 8006c14:	d007      	beq.n	8006c26 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2140      	movs	r1, #64	; 0x40
 8006c22:	430a      	orrs	r2, r1
 8006c24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	68da      	ldr	r2, [r3, #12]
 8006c2a:	2380      	movs	r3, #128	; 0x80
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d000      	beq.n	8006c34 <HAL_SPI_TransmitReceive+0x120>
 8006c32:	e07f      	b.n	8006d34 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d005      	beq.n	8006c48 <HAL_SPI_TransmitReceive+0x134>
 8006c3c:	231a      	movs	r3, #26
 8006c3e:	18fb      	adds	r3, r7, r3
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d000      	beq.n	8006c48 <HAL_SPI_TransmitReceive+0x134>
 8006c46:	e06a      	b.n	8006d1e <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4c:	881a      	ldrh	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c58:	1c9a      	adds	r2, r3, #2
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c6c:	e057      	b.n	8006d1e <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	2202      	movs	r2, #2
 8006c76:	4013      	ands	r3, r2
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d11b      	bne.n	8006cb4 <HAL_SPI_TransmitReceive+0x1a0>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d016      	beq.n	8006cb4 <HAL_SPI_TransmitReceive+0x1a0>
 8006c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d113      	bne.n	8006cb4 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c90:	881a      	ldrh	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9c:	1c9a      	adds	r2, r3, #2
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d119      	bne.n	8006cf6 <HAL_SPI_TransmitReceive+0x1e2>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d014      	beq.n	8006cf6 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	b292      	uxth	r2, r2
 8006cd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cde:	1c9a      	adds	r2, r3, #2
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006cf6:	f7fd fa1d 	bl	8004134 <HAL_GetTick>
 8006cfa:	0002      	movs	r2, r0
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d80b      	bhi.n	8006d1e <HAL_SPI_TransmitReceive+0x20a>
 8006d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d08:	3301      	adds	r3, #1
 8006d0a:	d008      	beq.n	8006d1e <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8006d0c:	232b      	movs	r3, #43	; 0x2b
 8006d0e:	18fb      	adds	r3, r7, r3
 8006d10:	2203      	movs	r2, #3
 8006d12:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2251      	movs	r2, #81	; 0x51
 8006d18:	2101      	movs	r1, #1
 8006d1a:	5499      	strb	r1, [r3, r2]
        goto error;
 8006d1c:	e0ba      	b.n	8006e94 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1a2      	bne.n	8006c6e <HAL_SPI_TransmitReceive+0x15a>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d19d      	bne.n	8006c6e <HAL_SPI_TransmitReceive+0x15a>
 8006d32:	e083      	b.n	8006e3c <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <HAL_SPI_TransmitReceive+0x234>
 8006d3c:	231a      	movs	r3, #26
 8006d3e:	18fb      	adds	r3, r7, r3
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d000      	beq.n	8006d48 <HAL_SPI_TransmitReceive+0x234>
 8006d46:	e06f      	b.n	8006e28 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	330c      	adds	r3, #12
 8006d52:	7812      	ldrb	r2, [r2, #0]
 8006d54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d6e:	e05b      	b.n	8006e28 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	2202      	movs	r2, #2
 8006d78:	4013      	ands	r3, r2
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d11c      	bne.n	8006db8 <HAL_SPI_TransmitReceive+0x2a4>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d017      	beq.n	8006db8 <HAL_SPI_TransmitReceive+0x2a4>
 8006d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d114      	bne.n	8006db8 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	330c      	adds	r3, #12
 8006d98:	7812      	ldrb	r2, [r2, #0]
 8006d9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	3b01      	subs	r3, #1
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d119      	bne.n	8006dfa <HAL_SPI_TransmitReceive+0x2e6>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d014      	beq.n	8006dfa <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dda:	b2d2      	uxtb	r2, r2
 8006ddc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	3b01      	subs	r3, #1
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006df6:	2301      	movs	r3, #1
 8006df8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006dfa:	f7fd f99b 	bl	8004134 <HAL_GetTick>
 8006dfe:	0002      	movs	r2, r0
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d802      	bhi.n	8006e10 <HAL_SPI_TransmitReceive+0x2fc>
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	d102      	bne.n	8006e16 <HAL_SPI_TransmitReceive+0x302>
 8006e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d108      	bne.n	8006e28 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8006e16:	232b      	movs	r3, #43	; 0x2b
 8006e18:	18fb      	adds	r3, r7, r3
 8006e1a:	2203      	movs	r2, #3
 8006e1c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2251      	movs	r2, #81	; 0x51
 8006e22:	2101      	movs	r1, #1
 8006e24:	5499      	strb	r1, [r3, r2]
        goto error;
 8006e26:	e035      	b.n	8006e94 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d19e      	bne.n	8006d70 <HAL_SPI_TransmitReceive+0x25c>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d199      	bne.n	8006d70 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	0018      	movs	r0, r3
 8006e44:	f000 f92a 	bl	800709c <SPI_EndRxTxTransaction>
 8006e48:	1e03      	subs	r3, r0, #0
 8006e4a:	d007      	beq.n	8006e5c <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8006e4c:	232b      	movs	r3, #43	; 0x2b
 8006e4e:	18fb      	adds	r3, r7, r3
 8006e50:	2201      	movs	r2, #1
 8006e52:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2220      	movs	r2, #32
 8006e58:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006e5a:	e01b      	b.n	8006e94 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10a      	bne.n	8006e7a <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e64:	2300      	movs	r3, #0
 8006e66:	617b      	str	r3, [r7, #20]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	617b      	str	r3, [r7, #20]
 8006e78:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d004      	beq.n	8006e8c <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8006e82:	232b      	movs	r3, #43	; 0x2b
 8006e84:	18fb      	adds	r3, r7, r3
 8006e86:	2201      	movs	r2, #1
 8006e88:	701a      	strb	r2, [r3, #0]
 8006e8a:	e003      	b.n	8006e94 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2251      	movs	r2, #81	; 0x51
 8006e90:	2101      	movs	r1, #1
 8006e92:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2250      	movs	r2, #80	; 0x50
 8006e98:	2100      	movs	r1, #0
 8006e9a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006e9c:	232b      	movs	r3, #43	; 0x2b
 8006e9e:	18fb      	adds	r3, r7, r3
 8006ea0:	781b      	ldrb	r3, [r3, #0]
}
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	b00c      	add	sp, #48	; 0x30
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	1dfb      	adds	r3, r7, #7
 8006eba:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ebc:	f7fd f93a 	bl	8004134 <HAL_GetTick>
 8006ec0:	0002      	movs	r2, r0
 8006ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	18d3      	adds	r3, r2, r3
 8006eca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ecc:	f7fd f932 	bl	8004134 <HAL_GetTick>
 8006ed0:	0003      	movs	r3, r0
 8006ed2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ed4:	4b3a      	ldr	r3, [pc, #232]	; (8006fc0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	015b      	lsls	r3, r3, #5
 8006eda:	0d1b      	lsrs	r3, r3, #20
 8006edc:	69fa      	ldr	r2, [r7, #28]
 8006ede:	4353      	muls	r3, r2
 8006ee0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ee2:	e058      	b.n	8006f96 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	d055      	beq.n	8006f96 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006eea:	f7fd f923 	bl	8004134 <HAL_GetTick>
 8006eee:	0002      	movs	r2, r0
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	69fa      	ldr	r2, [r7, #28]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d902      	bls.n	8006f00 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d142      	bne.n	8006f86 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	21e0      	movs	r1, #224	; 0xe0
 8006f0c:	438a      	bics	r2, r1
 8006f0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	2382      	movs	r3, #130	; 0x82
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d113      	bne.n	8006f44 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	2380      	movs	r3, #128	; 0x80
 8006f22:	021b      	lsls	r3, r3, #8
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d005      	beq.n	8006f34 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689a      	ldr	r2, [r3, #8]
 8006f2c:	2380      	movs	r3, #128	; 0x80
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d107      	bne.n	8006f44 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2140      	movs	r1, #64	; 0x40
 8006f40:	438a      	bics	r2, r1
 8006f42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f48:	2380      	movs	r3, #128	; 0x80
 8006f4a:	019b      	lsls	r3, r3, #6
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d110      	bne.n	8006f72 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	491a      	ldr	r1, [pc, #104]	; (8006fc4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006f5c:	400a      	ands	r2, r1
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2180      	movs	r1, #128	; 0x80
 8006f6c:	0189      	lsls	r1, r1, #6
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2251      	movs	r2, #81	; 0x51
 8006f76:	2101      	movs	r1, #1
 8006f78:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2250      	movs	r2, #80	; 0x50
 8006f7e:	2100      	movs	r1, #0
 8006f80:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e017      	b.n	8006fb6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	425a      	negs	r2, r3
 8006fa6:	4153      	adcs	r3, r2
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	001a      	movs	r2, r3
 8006fac:	1dfb      	adds	r3, r7, #7
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d197      	bne.n	8006ee4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	b008      	add	sp, #32
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	46c0      	nop			; (mov r8, r8)
 8006fc0:	20000000 	.word	0x20000000
 8006fc4:	ffffdfff 	.word	0xffffdfff

08006fc8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af02      	add	r7, sp, #8
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	2382      	movs	r3, #130	; 0x82
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d113      	bne.n	8007008 <SPI_EndRxTransaction+0x40>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	2380      	movs	r3, #128	; 0x80
 8006fe6:	021b      	lsls	r3, r3, #8
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d005      	beq.n	8006ff8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	2380      	movs	r3, #128	; 0x80
 8006ff2:	00db      	lsls	r3, r3, #3
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d107      	bne.n	8007008 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2140      	movs	r1, #64	; 0x40
 8007004:	438a      	bics	r2, r1
 8007006:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	2382      	movs	r3, #130	; 0x82
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	429a      	cmp	r2, r3
 8007012:	d12b      	bne.n	800706c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	2380      	movs	r3, #128	; 0x80
 800701a:	00db      	lsls	r3, r3, #3
 800701c:	429a      	cmp	r2, r3
 800701e:	d012      	beq.n	8007046 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	0013      	movs	r3, r2
 800702a:	2200      	movs	r2, #0
 800702c:	2180      	movs	r1, #128	; 0x80
 800702e:	f7ff ff3d 	bl	8006eac <SPI_WaitFlagStateUntilTimeout>
 8007032:	1e03      	subs	r3, r0, #0
 8007034:	d02d      	beq.n	8007092 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703a:	2220      	movs	r2, #32
 800703c:	431a      	orrs	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e026      	b.n	8007094 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	0013      	movs	r3, r2
 8007050:	2200      	movs	r2, #0
 8007052:	2101      	movs	r1, #1
 8007054:	f7ff ff2a 	bl	8006eac <SPI_WaitFlagStateUntilTimeout>
 8007058:	1e03      	subs	r3, r0, #0
 800705a:	d01a      	beq.n	8007092 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007060:	2220      	movs	r2, #32
 8007062:	431a      	orrs	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e013      	b.n	8007094 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	0013      	movs	r3, r2
 8007076:	2200      	movs	r2, #0
 8007078:	2101      	movs	r1, #1
 800707a:	f7ff ff17 	bl	8006eac <SPI_WaitFlagStateUntilTimeout>
 800707e:	1e03      	subs	r3, r0, #0
 8007080:	d007      	beq.n	8007092 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007086:	2220      	movs	r2, #32
 8007088:	431a      	orrs	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e000      	b.n	8007094 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	0018      	movs	r0, r3
 8007096:	46bd      	mov	sp, r7
 8007098:	b004      	add	sp, #16
 800709a:	bd80      	pop	{r7, pc}

0800709c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b088      	sub	sp, #32
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070a8:	4b1d      	ldr	r3, [pc, #116]	; (8007120 <SPI_EndRxTxTransaction+0x84>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	491d      	ldr	r1, [pc, #116]	; (8007124 <SPI_EndRxTxTransaction+0x88>)
 80070ae:	0018      	movs	r0, r3
 80070b0:	f7f9 f846 	bl	8000140 <__udivsi3>
 80070b4:	0003      	movs	r3, r0
 80070b6:	001a      	movs	r2, r3
 80070b8:	0013      	movs	r3, r2
 80070ba:	015b      	lsls	r3, r3, #5
 80070bc:	1a9b      	subs	r3, r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	189b      	adds	r3, r3, r2
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	2382      	movs	r3, #130	; 0x82
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d112      	bne.n	80070f8 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	0013      	movs	r3, r2
 80070dc:	2200      	movs	r2, #0
 80070de:	2180      	movs	r1, #128	; 0x80
 80070e0:	f7ff fee4 	bl	8006eac <SPI_WaitFlagStateUntilTimeout>
 80070e4:	1e03      	subs	r3, r0, #0
 80070e6:	d016      	beq.n	8007116 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ec:	2220      	movs	r2, #32
 80070ee:	431a      	orrs	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e00f      	b.n	8007118 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	3b01      	subs	r3, #1
 8007102:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	2280      	movs	r2, #128	; 0x80
 800710c:	4013      	ands	r3, r2
 800710e:	2b80      	cmp	r3, #128	; 0x80
 8007110:	d0f2      	beq.n	80070f8 <SPI_EndRxTxTransaction+0x5c>
 8007112:	e000      	b.n	8007116 <SPI_EndRxTxTransaction+0x7a>
        break;
 8007114:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	0018      	movs	r0, r3
 800711a:	46bd      	mov	sp, r7
 800711c:	b006      	add	sp, #24
 800711e:	bd80      	pop	{r7, pc}
 8007120:	20000000 	.word	0x20000000
 8007124:	016e3600 	.word	0x016e3600

08007128 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e044      	b.n	80071c4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800713e:	2b00      	cmp	r3, #0
 8007140:	d107      	bne.n	8007152 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2278      	movs	r2, #120	; 0x78
 8007146:	2100      	movs	r1, #0
 8007148:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	0018      	movs	r0, r3
 800714e:	f7fc fe29 	bl	8003da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2224      	movs	r2, #36	; 0x24
 8007156:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2101      	movs	r1, #1
 8007164:	438a      	bics	r2, r1
 8007166:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	0018      	movs	r0, r3
 800716c:	f000 f8d0 	bl	8007310 <UART_SetConfig>
 8007170:	0003      	movs	r3, r0
 8007172:	2b01      	cmp	r3, #1
 8007174:	d101      	bne.n	800717a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e024      	b.n	80071c4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717e:	2b00      	cmp	r3, #0
 8007180:	d003      	beq.n	800718a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	0018      	movs	r0, r3
 8007186:	f000 fb47 	bl	8007818 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	490d      	ldr	r1, [pc, #52]	; (80071cc <HAL_UART_Init+0xa4>)
 8007196:	400a      	ands	r2, r1
 8007198:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	212a      	movs	r1, #42	; 0x2a
 80071a6:	438a      	bics	r2, r1
 80071a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2101      	movs	r1, #1
 80071b6:	430a      	orrs	r2, r1
 80071b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	0018      	movs	r0, r3
 80071be:	f000 fbdf 	bl	8007980 <UART_CheckIdleState>
 80071c2:	0003      	movs	r3, r0
}
 80071c4:	0018      	movs	r0, r3
 80071c6:	46bd      	mov	sp, r7
 80071c8:	b002      	add	sp, #8
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	ffffb7ff 	.word	0xffffb7ff

080071d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08a      	sub	sp, #40	; 0x28
 80071d4:	af02      	add	r7, sp, #8
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	603b      	str	r3, [r7, #0]
 80071dc:	1dbb      	adds	r3, r7, #6
 80071de:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071e4:	2b20      	cmp	r3, #32
 80071e6:	d000      	beq.n	80071ea <HAL_UART_Transmit+0x1a>
 80071e8:	e08c      	b.n	8007304 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <HAL_UART_Transmit+0x28>
 80071f0:	1dbb      	adds	r3, r7, #6
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e084      	b.n	8007306 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	2380      	movs	r3, #128	; 0x80
 8007202:	015b      	lsls	r3, r3, #5
 8007204:	429a      	cmp	r2, r3
 8007206:	d109      	bne.n	800721c <HAL_UART_Transmit+0x4c>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d105      	bne.n	800721c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2201      	movs	r2, #1
 8007214:	4013      	ands	r3, r2
 8007216:	d001      	beq.n	800721c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e074      	b.n	8007306 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2284      	movs	r2, #132	; 0x84
 8007220:	2100      	movs	r1, #0
 8007222:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2221      	movs	r2, #33	; 0x21
 8007228:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800722a:	f7fc ff83 	bl	8004134 <HAL_GetTick>
 800722e:	0003      	movs	r3, r0
 8007230:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	1dba      	adds	r2, r7, #6
 8007236:	2150      	movs	r1, #80	; 0x50
 8007238:	8812      	ldrh	r2, [r2, #0]
 800723a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	1dba      	adds	r2, r7, #6
 8007240:	2152      	movs	r1, #82	; 0x52
 8007242:	8812      	ldrh	r2, [r2, #0]
 8007244:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	689a      	ldr	r2, [r3, #8]
 800724a:	2380      	movs	r3, #128	; 0x80
 800724c:	015b      	lsls	r3, r3, #5
 800724e:	429a      	cmp	r2, r3
 8007250:	d108      	bne.n	8007264 <HAL_UART_Transmit+0x94>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d104      	bne.n	8007264 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800725a:	2300      	movs	r3, #0
 800725c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	61bb      	str	r3, [r7, #24]
 8007262:	e003      	b.n	800726c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007268:	2300      	movs	r3, #0
 800726a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800726c:	e02f      	b.n	80072ce <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	0013      	movs	r3, r2
 8007278:	2200      	movs	r2, #0
 800727a:	2180      	movs	r1, #128	; 0x80
 800727c:	f000 fc28 	bl	8007ad0 <UART_WaitOnFlagUntilTimeout>
 8007280:	1e03      	subs	r3, r0, #0
 8007282:	d004      	beq.n	800728e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2220      	movs	r2, #32
 8007288:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e03b      	b.n	8007306 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10b      	bne.n	80072ac <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	001a      	movs	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	05d2      	lsls	r2, r2, #23
 80072a0:	0dd2      	lsrs	r2, r2, #23
 80072a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	3302      	adds	r3, #2
 80072a8:	61bb      	str	r3, [r7, #24]
 80072aa:	e007      	b.n	80072bc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	781a      	ldrb	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	3301      	adds	r3, #1
 80072ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2252      	movs	r2, #82	; 0x52
 80072c0:	5a9b      	ldrh	r3, [r3, r2]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	3b01      	subs	r3, #1
 80072c6:	b299      	uxth	r1, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2252      	movs	r2, #82	; 0x52
 80072cc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2252      	movs	r2, #82	; 0x52
 80072d2:	5a9b      	ldrh	r3, [r3, r2]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1c9      	bne.n	800726e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	0013      	movs	r3, r2
 80072e4:	2200      	movs	r2, #0
 80072e6:	2140      	movs	r1, #64	; 0x40
 80072e8:	f000 fbf2 	bl	8007ad0 <UART_WaitOnFlagUntilTimeout>
 80072ec:	1e03      	subs	r3, r0, #0
 80072ee:	d004      	beq.n	80072fa <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2220      	movs	r2, #32
 80072f4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e005      	b.n	8007306 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2220      	movs	r2, #32
 80072fe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	e000      	b.n	8007306 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007304:	2302      	movs	r3, #2
  }
}
 8007306:	0018      	movs	r0, r3
 8007308:	46bd      	mov	sp, r7
 800730a:	b008      	add	sp, #32
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007310:	b5b0      	push	{r4, r5, r7, lr}
 8007312:	b08e      	sub	sp, #56	; 0x38
 8007314:	af00      	add	r7, sp, #0
 8007316:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007318:	231a      	movs	r3, #26
 800731a:	2218      	movs	r2, #24
 800731c:	189b      	adds	r3, r3, r2
 800731e:	19db      	adds	r3, r3, r7
 8007320:	2200      	movs	r2, #0
 8007322:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	431a      	orrs	r2, r3
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	431a      	orrs	r2, r3
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	4313      	orrs	r3, r2
 800733a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4ac6      	ldr	r2, [pc, #792]	; (800765c <UART_SetConfig+0x34c>)
 8007344:	4013      	ands	r3, r2
 8007346:	0019      	movs	r1, r3
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800734e:	430a      	orrs	r2, r1
 8007350:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	4ac1      	ldr	r2, [pc, #772]	; (8007660 <UART_SetConfig+0x350>)
 800735a:	4013      	ands	r3, r2
 800735c:	0019      	movs	r1, r3
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	68da      	ldr	r2, [r3, #12]
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4abb      	ldr	r2, [pc, #748]	; (8007664 <UART_SetConfig+0x354>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d004      	beq.n	8007384 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007380:	4313      	orrs	r3, r2
 8007382:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	4ab7      	ldr	r2, [pc, #732]	; (8007668 <UART_SetConfig+0x358>)
 800738c:	4013      	ands	r3, r2
 800738e:	0019      	movs	r1, r3
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007396:	430a      	orrs	r2, r1
 8007398:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4ab3      	ldr	r2, [pc, #716]	; (800766c <UART_SetConfig+0x35c>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d131      	bne.n	8007408 <UART_SetConfig+0xf8>
 80073a4:	4bb2      	ldr	r3, [pc, #712]	; (8007670 <UART_SetConfig+0x360>)
 80073a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073a8:	2203      	movs	r2, #3
 80073aa:	4013      	ands	r3, r2
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	d01d      	beq.n	80073ec <UART_SetConfig+0xdc>
 80073b0:	d823      	bhi.n	80073fa <UART_SetConfig+0xea>
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d00c      	beq.n	80073d0 <UART_SetConfig+0xc0>
 80073b6:	d820      	bhi.n	80073fa <UART_SetConfig+0xea>
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <UART_SetConfig+0xb2>
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d00e      	beq.n	80073de <UART_SetConfig+0xce>
 80073c0:	e01b      	b.n	80073fa <UART_SetConfig+0xea>
 80073c2:	231b      	movs	r3, #27
 80073c4:	2218      	movs	r2, #24
 80073c6:	189b      	adds	r3, r3, r2
 80073c8:	19db      	adds	r3, r3, r7
 80073ca:	2201      	movs	r2, #1
 80073cc:	701a      	strb	r2, [r3, #0]
 80073ce:	e09c      	b.n	800750a <UART_SetConfig+0x1fa>
 80073d0:	231b      	movs	r3, #27
 80073d2:	2218      	movs	r2, #24
 80073d4:	189b      	adds	r3, r3, r2
 80073d6:	19db      	adds	r3, r3, r7
 80073d8:	2202      	movs	r2, #2
 80073da:	701a      	strb	r2, [r3, #0]
 80073dc:	e095      	b.n	800750a <UART_SetConfig+0x1fa>
 80073de:	231b      	movs	r3, #27
 80073e0:	2218      	movs	r2, #24
 80073e2:	189b      	adds	r3, r3, r2
 80073e4:	19db      	adds	r3, r3, r7
 80073e6:	2204      	movs	r2, #4
 80073e8:	701a      	strb	r2, [r3, #0]
 80073ea:	e08e      	b.n	800750a <UART_SetConfig+0x1fa>
 80073ec:	231b      	movs	r3, #27
 80073ee:	2218      	movs	r2, #24
 80073f0:	189b      	adds	r3, r3, r2
 80073f2:	19db      	adds	r3, r3, r7
 80073f4:	2208      	movs	r2, #8
 80073f6:	701a      	strb	r2, [r3, #0]
 80073f8:	e087      	b.n	800750a <UART_SetConfig+0x1fa>
 80073fa:	231b      	movs	r3, #27
 80073fc:	2218      	movs	r2, #24
 80073fe:	189b      	adds	r3, r3, r2
 8007400:	19db      	adds	r3, r3, r7
 8007402:	2210      	movs	r2, #16
 8007404:	701a      	strb	r2, [r3, #0]
 8007406:	e080      	b.n	800750a <UART_SetConfig+0x1fa>
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a99      	ldr	r2, [pc, #612]	; (8007674 <UART_SetConfig+0x364>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d131      	bne.n	8007476 <UART_SetConfig+0x166>
 8007412:	4b97      	ldr	r3, [pc, #604]	; (8007670 <UART_SetConfig+0x360>)
 8007414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007416:	220c      	movs	r2, #12
 8007418:	4013      	ands	r3, r2
 800741a:	2b0c      	cmp	r3, #12
 800741c:	d01d      	beq.n	800745a <UART_SetConfig+0x14a>
 800741e:	d823      	bhi.n	8007468 <UART_SetConfig+0x158>
 8007420:	2b08      	cmp	r3, #8
 8007422:	d00c      	beq.n	800743e <UART_SetConfig+0x12e>
 8007424:	d820      	bhi.n	8007468 <UART_SetConfig+0x158>
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <UART_SetConfig+0x120>
 800742a:	2b04      	cmp	r3, #4
 800742c:	d00e      	beq.n	800744c <UART_SetConfig+0x13c>
 800742e:	e01b      	b.n	8007468 <UART_SetConfig+0x158>
 8007430:	231b      	movs	r3, #27
 8007432:	2218      	movs	r2, #24
 8007434:	189b      	adds	r3, r3, r2
 8007436:	19db      	adds	r3, r3, r7
 8007438:	2200      	movs	r2, #0
 800743a:	701a      	strb	r2, [r3, #0]
 800743c:	e065      	b.n	800750a <UART_SetConfig+0x1fa>
 800743e:	231b      	movs	r3, #27
 8007440:	2218      	movs	r2, #24
 8007442:	189b      	adds	r3, r3, r2
 8007444:	19db      	adds	r3, r3, r7
 8007446:	2202      	movs	r2, #2
 8007448:	701a      	strb	r2, [r3, #0]
 800744a:	e05e      	b.n	800750a <UART_SetConfig+0x1fa>
 800744c:	231b      	movs	r3, #27
 800744e:	2218      	movs	r2, #24
 8007450:	189b      	adds	r3, r3, r2
 8007452:	19db      	adds	r3, r3, r7
 8007454:	2204      	movs	r2, #4
 8007456:	701a      	strb	r2, [r3, #0]
 8007458:	e057      	b.n	800750a <UART_SetConfig+0x1fa>
 800745a:	231b      	movs	r3, #27
 800745c:	2218      	movs	r2, #24
 800745e:	189b      	adds	r3, r3, r2
 8007460:	19db      	adds	r3, r3, r7
 8007462:	2208      	movs	r2, #8
 8007464:	701a      	strb	r2, [r3, #0]
 8007466:	e050      	b.n	800750a <UART_SetConfig+0x1fa>
 8007468:	231b      	movs	r3, #27
 800746a:	2218      	movs	r2, #24
 800746c:	189b      	adds	r3, r3, r2
 800746e:	19db      	adds	r3, r3, r7
 8007470:	2210      	movs	r2, #16
 8007472:	701a      	strb	r2, [r3, #0]
 8007474:	e049      	b.n	800750a <UART_SetConfig+0x1fa>
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a7a      	ldr	r2, [pc, #488]	; (8007664 <UART_SetConfig+0x354>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d13e      	bne.n	80074fe <UART_SetConfig+0x1ee>
 8007480:	4b7b      	ldr	r3, [pc, #492]	; (8007670 <UART_SetConfig+0x360>)
 8007482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007484:	23c0      	movs	r3, #192	; 0xc0
 8007486:	011b      	lsls	r3, r3, #4
 8007488:	4013      	ands	r3, r2
 800748a:	22c0      	movs	r2, #192	; 0xc0
 800748c:	0112      	lsls	r2, r2, #4
 800748e:	4293      	cmp	r3, r2
 8007490:	d027      	beq.n	80074e2 <UART_SetConfig+0x1d2>
 8007492:	22c0      	movs	r2, #192	; 0xc0
 8007494:	0112      	lsls	r2, r2, #4
 8007496:	4293      	cmp	r3, r2
 8007498:	d82a      	bhi.n	80074f0 <UART_SetConfig+0x1e0>
 800749a:	2280      	movs	r2, #128	; 0x80
 800749c:	0112      	lsls	r2, r2, #4
 800749e:	4293      	cmp	r3, r2
 80074a0:	d011      	beq.n	80074c6 <UART_SetConfig+0x1b6>
 80074a2:	2280      	movs	r2, #128	; 0x80
 80074a4:	0112      	lsls	r2, r2, #4
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d822      	bhi.n	80074f0 <UART_SetConfig+0x1e0>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d004      	beq.n	80074b8 <UART_SetConfig+0x1a8>
 80074ae:	2280      	movs	r2, #128	; 0x80
 80074b0:	00d2      	lsls	r2, r2, #3
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d00e      	beq.n	80074d4 <UART_SetConfig+0x1c4>
 80074b6:	e01b      	b.n	80074f0 <UART_SetConfig+0x1e0>
 80074b8:	231b      	movs	r3, #27
 80074ba:	2218      	movs	r2, #24
 80074bc:	189b      	adds	r3, r3, r2
 80074be:	19db      	adds	r3, r3, r7
 80074c0:	2200      	movs	r2, #0
 80074c2:	701a      	strb	r2, [r3, #0]
 80074c4:	e021      	b.n	800750a <UART_SetConfig+0x1fa>
 80074c6:	231b      	movs	r3, #27
 80074c8:	2218      	movs	r2, #24
 80074ca:	189b      	adds	r3, r3, r2
 80074cc:	19db      	adds	r3, r3, r7
 80074ce:	2202      	movs	r2, #2
 80074d0:	701a      	strb	r2, [r3, #0]
 80074d2:	e01a      	b.n	800750a <UART_SetConfig+0x1fa>
 80074d4:	231b      	movs	r3, #27
 80074d6:	2218      	movs	r2, #24
 80074d8:	189b      	adds	r3, r3, r2
 80074da:	19db      	adds	r3, r3, r7
 80074dc:	2204      	movs	r2, #4
 80074de:	701a      	strb	r2, [r3, #0]
 80074e0:	e013      	b.n	800750a <UART_SetConfig+0x1fa>
 80074e2:	231b      	movs	r3, #27
 80074e4:	2218      	movs	r2, #24
 80074e6:	189b      	adds	r3, r3, r2
 80074e8:	19db      	adds	r3, r3, r7
 80074ea:	2208      	movs	r2, #8
 80074ec:	701a      	strb	r2, [r3, #0]
 80074ee:	e00c      	b.n	800750a <UART_SetConfig+0x1fa>
 80074f0:	231b      	movs	r3, #27
 80074f2:	2218      	movs	r2, #24
 80074f4:	189b      	adds	r3, r3, r2
 80074f6:	19db      	adds	r3, r3, r7
 80074f8:	2210      	movs	r2, #16
 80074fa:	701a      	strb	r2, [r3, #0]
 80074fc:	e005      	b.n	800750a <UART_SetConfig+0x1fa>
 80074fe:	231b      	movs	r3, #27
 8007500:	2218      	movs	r2, #24
 8007502:	189b      	adds	r3, r3, r2
 8007504:	19db      	adds	r3, r3, r7
 8007506:	2210      	movs	r2, #16
 8007508:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a55      	ldr	r2, [pc, #340]	; (8007664 <UART_SetConfig+0x354>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d000      	beq.n	8007516 <UART_SetConfig+0x206>
 8007514:	e084      	b.n	8007620 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007516:	231b      	movs	r3, #27
 8007518:	2218      	movs	r2, #24
 800751a:	189b      	adds	r3, r3, r2
 800751c:	19db      	adds	r3, r3, r7
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	2b08      	cmp	r3, #8
 8007522:	d01d      	beq.n	8007560 <UART_SetConfig+0x250>
 8007524:	dc20      	bgt.n	8007568 <UART_SetConfig+0x258>
 8007526:	2b04      	cmp	r3, #4
 8007528:	d015      	beq.n	8007556 <UART_SetConfig+0x246>
 800752a:	dc1d      	bgt.n	8007568 <UART_SetConfig+0x258>
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <UART_SetConfig+0x226>
 8007530:	2b02      	cmp	r3, #2
 8007532:	d005      	beq.n	8007540 <UART_SetConfig+0x230>
 8007534:	e018      	b.n	8007568 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007536:	f7fe fbc1 	bl	8005cbc <HAL_RCC_GetPCLK1Freq>
 800753a:	0003      	movs	r3, r0
 800753c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800753e:	e01c      	b.n	800757a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007540:	4b4b      	ldr	r3, [pc, #300]	; (8007670 <UART_SetConfig+0x360>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2210      	movs	r2, #16
 8007546:	4013      	ands	r3, r2
 8007548:	d002      	beq.n	8007550 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800754a:	4b4b      	ldr	r3, [pc, #300]	; (8007678 <UART_SetConfig+0x368>)
 800754c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800754e:	e014      	b.n	800757a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8007550:	4b4a      	ldr	r3, [pc, #296]	; (800767c <UART_SetConfig+0x36c>)
 8007552:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007554:	e011      	b.n	800757a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007556:	f7fe fb01 	bl	8005b5c <HAL_RCC_GetSysClockFreq>
 800755a:	0003      	movs	r3, r0
 800755c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800755e:	e00c      	b.n	800757a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007560:	2380      	movs	r3, #128	; 0x80
 8007562:	021b      	lsls	r3, r3, #8
 8007564:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007566:	e008      	b.n	800757a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800756c:	231a      	movs	r3, #26
 800756e:	2218      	movs	r2, #24
 8007570:	189b      	adds	r3, r3, r2
 8007572:	19db      	adds	r3, r3, r7
 8007574:	2201      	movs	r2, #1
 8007576:	701a      	strb	r2, [r3, #0]
        break;
 8007578:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800757a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757c:	2b00      	cmp	r3, #0
 800757e:	d100      	bne.n	8007582 <UART_SetConfig+0x272>
 8007580:	e132      	b.n	80077e8 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	0013      	movs	r3, r2
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	189b      	adds	r3, r3, r2
 800758c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800758e:	429a      	cmp	r2, r3
 8007590:	d305      	bcc.n	800759e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800759a:	429a      	cmp	r2, r3
 800759c:	d906      	bls.n	80075ac <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800759e:	231a      	movs	r3, #26
 80075a0:	2218      	movs	r2, #24
 80075a2:	189b      	adds	r3, r3, r2
 80075a4:	19db      	adds	r3, r3, r7
 80075a6:	2201      	movs	r2, #1
 80075a8:	701a      	strb	r2, [r3, #0]
 80075aa:	e11d      	b.n	80077e8 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80075ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ae:	613b      	str	r3, [r7, #16]
 80075b0:	2300      	movs	r3, #0
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	6939      	ldr	r1, [r7, #16]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	000b      	movs	r3, r1
 80075ba:	0e1b      	lsrs	r3, r3, #24
 80075bc:	0010      	movs	r0, r2
 80075be:	0205      	lsls	r5, r0, #8
 80075c0:	431d      	orrs	r5, r3
 80075c2:	000b      	movs	r3, r1
 80075c4:	021c      	lsls	r4, r3, #8
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	085b      	lsrs	r3, r3, #1
 80075cc:	60bb      	str	r3, [r7, #8]
 80075ce:	2300      	movs	r3, #0
 80075d0:	60fb      	str	r3, [r7, #12]
 80075d2:	68b8      	ldr	r0, [r7, #8]
 80075d4:	68f9      	ldr	r1, [r7, #12]
 80075d6:	1900      	adds	r0, r0, r4
 80075d8:	4169      	adcs	r1, r5
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	603b      	str	r3, [r7, #0]
 80075e0:	2300      	movs	r3, #0
 80075e2:	607b      	str	r3, [r7, #4]
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f7f8 ff5e 	bl	80004a8 <__aeabi_uldivmod>
 80075ec:	0002      	movs	r2, r0
 80075ee:	000b      	movs	r3, r1
 80075f0:	0013      	movs	r3, r2
 80075f2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075f6:	23c0      	movs	r3, #192	; 0xc0
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d309      	bcc.n	8007612 <UART_SetConfig+0x302>
 80075fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007600:	2380      	movs	r3, #128	; 0x80
 8007602:	035b      	lsls	r3, r3, #13
 8007604:	429a      	cmp	r2, r3
 8007606:	d204      	bcs.n	8007612 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800760e:	60da      	str	r2, [r3, #12]
 8007610:	e0ea      	b.n	80077e8 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8007612:	231a      	movs	r3, #26
 8007614:	2218      	movs	r2, #24
 8007616:	189b      	adds	r3, r3, r2
 8007618:	19db      	adds	r3, r3, r7
 800761a:	2201      	movs	r2, #1
 800761c:	701a      	strb	r2, [r3, #0]
 800761e:	e0e3      	b.n	80077e8 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	69da      	ldr	r2, [r3, #28]
 8007624:	2380      	movs	r3, #128	; 0x80
 8007626:	021b      	lsls	r3, r3, #8
 8007628:	429a      	cmp	r2, r3
 800762a:	d000      	beq.n	800762e <UART_SetConfig+0x31e>
 800762c:	e085      	b.n	800773a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800762e:	231b      	movs	r3, #27
 8007630:	2218      	movs	r2, #24
 8007632:	189b      	adds	r3, r3, r2
 8007634:	19db      	adds	r3, r3, r7
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	2b08      	cmp	r3, #8
 800763a:	d837      	bhi.n	80076ac <UART_SetConfig+0x39c>
 800763c:	009a      	lsls	r2, r3, #2
 800763e:	4b10      	ldr	r3, [pc, #64]	; (8007680 <UART_SetConfig+0x370>)
 8007640:	18d3      	adds	r3, r2, r3
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007646:	f7fe fb39 	bl	8005cbc <HAL_RCC_GetPCLK1Freq>
 800764a:	0003      	movs	r3, r0
 800764c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800764e:	e036      	b.n	80076be <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007650:	f7fe fb4a 	bl	8005ce8 <HAL_RCC_GetPCLK2Freq>
 8007654:	0003      	movs	r3, r0
 8007656:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007658:	e031      	b.n	80076be <UART_SetConfig+0x3ae>
 800765a:	46c0      	nop			; (mov r8, r8)
 800765c:	efff69f3 	.word	0xefff69f3
 8007660:	ffffcfff 	.word	0xffffcfff
 8007664:	40004800 	.word	0x40004800
 8007668:	fffff4ff 	.word	0xfffff4ff
 800766c:	40013800 	.word	0x40013800
 8007670:	40021000 	.word	0x40021000
 8007674:	40004400 	.word	0x40004400
 8007678:	003d0900 	.word	0x003d0900
 800767c:	00f42400 	.word	0x00f42400
 8007680:	0800ad30 	.word	0x0800ad30
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007684:	4b60      	ldr	r3, [pc, #384]	; (8007808 <UART_SetConfig+0x4f8>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2210      	movs	r2, #16
 800768a:	4013      	ands	r3, r2
 800768c:	d002      	beq.n	8007694 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800768e:	4b5f      	ldr	r3, [pc, #380]	; (800780c <UART_SetConfig+0x4fc>)
 8007690:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007692:	e014      	b.n	80076be <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8007694:	4b5e      	ldr	r3, [pc, #376]	; (8007810 <UART_SetConfig+0x500>)
 8007696:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007698:	e011      	b.n	80076be <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800769a:	f7fe fa5f 	bl	8005b5c <HAL_RCC_GetSysClockFreq>
 800769e:	0003      	movs	r3, r0
 80076a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076a2:	e00c      	b.n	80076be <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076a4:	2380      	movs	r3, #128	; 0x80
 80076a6:	021b      	lsls	r3, r3, #8
 80076a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076aa:	e008      	b.n	80076be <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80076b0:	231a      	movs	r3, #26
 80076b2:	2218      	movs	r2, #24
 80076b4:	189b      	adds	r3, r3, r2
 80076b6:	19db      	adds	r3, r3, r7
 80076b8:	2201      	movs	r2, #1
 80076ba:	701a      	strb	r2, [r3, #0]
        break;
 80076bc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d100      	bne.n	80076c6 <UART_SetConfig+0x3b6>
 80076c4:	e090      	b.n	80077e8 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80076c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c8:	005a      	lsls	r2, r3, #1
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	085b      	lsrs	r3, r3, #1
 80076d0:	18d2      	adds	r2, r2, r3
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	0019      	movs	r1, r3
 80076d8:	0010      	movs	r0, r2
 80076da:	f7f8 fd31 	bl	8000140 <__udivsi3>
 80076de:	0003      	movs	r3, r0
 80076e0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e4:	2b0f      	cmp	r3, #15
 80076e6:	d921      	bls.n	800772c <UART_SetConfig+0x41c>
 80076e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076ea:	2380      	movs	r3, #128	; 0x80
 80076ec:	025b      	lsls	r3, r3, #9
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d21c      	bcs.n	800772c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	200e      	movs	r0, #14
 80076f8:	2418      	movs	r4, #24
 80076fa:	1903      	adds	r3, r0, r4
 80076fc:	19db      	adds	r3, r3, r7
 80076fe:	210f      	movs	r1, #15
 8007700:	438a      	bics	r2, r1
 8007702:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	085b      	lsrs	r3, r3, #1
 8007708:	b29b      	uxth	r3, r3
 800770a:	2207      	movs	r2, #7
 800770c:	4013      	ands	r3, r2
 800770e:	b299      	uxth	r1, r3
 8007710:	1903      	adds	r3, r0, r4
 8007712:	19db      	adds	r3, r3, r7
 8007714:	1902      	adds	r2, r0, r4
 8007716:	19d2      	adds	r2, r2, r7
 8007718:	8812      	ldrh	r2, [r2, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	1902      	adds	r2, r0, r4
 8007724:	19d2      	adds	r2, r2, r7
 8007726:	8812      	ldrh	r2, [r2, #0]
 8007728:	60da      	str	r2, [r3, #12]
 800772a:	e05d      	b.n	80077e8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800772c:	231a      	movs	r3, #26
 800772e:	2218      	movs	r2, #24
 8007730:	189b      	adds	r3, r3, r2
 8007732:	19db      	adds	r3, r3, r7
 8007734:	2201      	movs	r2, #1
 8007736:	701a      	strb	r2, [r3, #0]
 8007738:	e056      	b.n	80077e8 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800773a:	231b      	movs	r3, #27
 800773c:	2218      	movs	r2, #24
 800773e:	189b      	adds	r3, r3, r2
 8007740:	19db      	adds	r3, r3, r7
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b08      	cmp	r3, #8
 8007746:	d822      	bhi.n	800778e <UART_SetConfig+0x47e>
 8007748:	009a      	lsls	r2, r3, #2
 800774a:	4b32      	ldr	r3, [pc, #200]	; (8007814 <UART_SetConfig+0x504>)
 800774c:	18d3      	adds	r3, r2, r3
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007752:	f7fe fab3 	bl	8005cbc <HAL_RCC_GetPCLK1Freq>
 8007756:	0003      	movs	r3, r0
 8007758:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800775a:	e021      	b.n	80077a0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800775c:	f7fe fac4 	bl	8005ce8 <HAL_RCC_GetPCLK2Freq>
 8007760:	0003      	movs	r3, r0
 8007762:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007764:	e01c      	b.n	80077a0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007766:	4b28      	ldr	r3, [pc, #160]	; (8007808 <UART_SetConfig+0x4f8>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2210      	movs	r2, #16
 800776c:	4013      	ands	r3, r2
 800776e:	d002      	beq.n	8007776 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007770:	4b26      	ldr	r3, [pc, #152]	; (800780c <UART_SetConfig+0x4fc>)
 8007772:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007774:	e014      	b.n	80077a0 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8007776:	4b26      	ldr	r3, [pc, #152]	; (8007810 <UART_SetConfig+0x500>)
 8007778:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800777a:	e011      	b.n	80077a0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800777c:	f7fe f9ee 	bl	8005b5c <HAL_RCC_GetSysClockFreq>
 8007780:	0003      	movs	r3, r0
 8007782:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007784:	e00c      	b.n	80077a0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007786:	2380      	movs	r3, #128	; 0x80
 8007788:	021b      	lsls	r3, r3, #8
 800778a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800778c:	e008      	b.n	80077a0 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007792:	231a      	movs	r3, #26
 8007794:	2218      	movs	r2, #24
 8007796:	189b      	adds	r3, r3, r2
 8007798:	19db      	adds	r3, r3, r7
 800779a:	2201      	movs	r2, #1
 800779c:	701a      	strb	r2, [r3, #0]
        break;
 800779e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80077a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d020      	beq.n	80077e8 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	085a      	lsrs	r2, r3, #1
 80077ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ae:	18d2      	adds	r2, r2, r3
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	0019      	movs	r1, r3
 80077b6:	0010      	movs	r0, r2
 80077b8:	f7f8 fcc2 	bl	8000140 <__udivsi3>
 80077bc:	0003      	movs	r3, r0
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	2b0f      	cmp	r3, #15
 80077c4:	d90a      	bls.n	80077dc <UART_SetConfig+0x4cc>
 80077c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077c8:	2380      	movs	r3, #128	; 0x80
 80077ca:	025b      	lsls	r3, r3, #9
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d205      	bcs.n	80077dc <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	60da      	str	r2, [r3, #12]
 80077da:	e005      	b.n	80077e8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80077dc:	231a      	movs	r3, #26
 80077de:	2218      	movs	r2, #24
 80077e0:	189b      	adds	r3, r3, r2
 80077e2:	19db      	adds	r3, r3, r7
 80077e4:	2201      	movs	r2, #1
 80077e6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	2200      	movs	r2, #0
 80077ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	2200      	movs	r2, #0
 80077f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80077f4:	231a      	movs	r3, #26
 80077f6:	2218      	movs	r2, #24
 80077f8:	189b      	adds	r3, r3, r2
 80077fa:	19db      	adds	r3, r3, r7
 80077fc:	781b      	ldrb	r3, [r3, #0]
}
 80077fe:	0018      	movs	r0, r3
 8007800:	46bd      	mov	sp, r7
 8007802:	b00e      	add	sp, #56	; 0x38
 8007804:	bdb0      	pop	{r4, r5, r7, pc}
 8007806:	46c0      	nop			; (mov r8, r8)
 8007808:	40021000 	.word	0x40021000
 800780c:	003d0900 	.word	0x003d0900
 8007810:	00f42400 	.word	0x00f42400
 8007814:	0800ad54 	.word	0x0800ad54

08007818 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	2201      	movs	r2, #1
 8007826:	4013      	ands	r3, r2
 8007828:	d00b      	beq.n	8007842 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	4a4a      	ldr	r2, [pc, #296]	; (800795c <UART_AdvFeatureConfig+0x144>)
 8007832:	4013      	ands	r3, r2
 8007834:	0019      	movs	r1, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	2202      	movs	r2, #2
 8007848:	4013      	ands	r3, r2
 800784a:	d00b      	beq.n	8007864 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	4a43      	ldr	r2, [pc, #268]	; (8007960 <UART_AdvFeatureConfig+0x148>)
 8007854:	4013      	ands	r3, r2
 8007856:	0019      	movs	r1, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	2204      	movs	r2, #4
 800786a:	4013      	ands	r3, r2
 800786c:	d00b      	beq.n	8007886 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	4a3b      	ldr	r2, [pc, #236]	; (8007964 <UART_AdvFeatureConfig+0x14c>)
 8007876:	4013      	ands	r3, r2
 8007878:	0019      	movs	r1, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	2208      	movs	r2, #8
 800788c:	4013      	ands	r3, r2
 800788e:	d00b      	beq.n	80078a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	4a34      	ldr	r2, [pc, #208]	; (8007968 <UART_AdvFeatureConfig+0x150>)
 8007898:	4013      	ands	r3, r2
 800789a:	0019      	movs	r1, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ac:	2210      	movs	r2, #16
 80078ae:	4013      	ands	r3, r2
 80078b0:	d00b      	beq.n	80078ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	4a2c      	ldr	r2, [pc, #176]	; (800796c <UART_AdvFeatureConfig+0x154>)
 80078ba:	4013      	ands	r3, r2
 80078bc:	0019      	movs	r1, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ce:	2220      	movs	r2, #32
 80078d0:	4013      	ands	r3, r2
 80078d2:	d00b      	beq.n	80078ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	4a25      	ldr	r2, [pc, #148]	; (8007970 <UART_AdvFeatureConfig+0x158>)
 80078dc:	4013      	ands	r3, r2
 80078de:	0019      	movs	r1, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	2240      	movs	r2, #64	; 0x40
 80078f2:	4013      	ands	r3, r2
 80078f4:	d01d      	beq.n	8007932 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	4a1d      	ldr	r2, [pc, #116]	; (8007974 <UART_AdvFeatureConfig+0x15c>)
 80078fe:	4013      	ands	r3, r2
 8007900:	0019      	movs	r1, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	430a      	orrs	r2, r1
 800790c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007912:	2380      	movs	r3, #128	; 0x80
 8007914:	035b      	lsls	r3, r3, #13
 8007916:	429a      	cmp	r2, r3
 8007918:	d10b      	bne.n	8007932 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	4a15      	ldr	r2, [pc, #84]	; (8007978 <UART_AdvFeatureConfig+0x160>)
 8007922:	4013      	ands	r3, r2
 8007924:	0019      	movs	r1, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	2280      	movs	r2, #128	; 0x80
 8007938:	4013      	ands	r3, r2
 800793a:	d00b      	beq.n	8007954 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	4a0e      	ldr	r2, [pc, #56]	; (800797c <UART_AdvFeatureConfig+0x164>)
 8007944:	4013      	ands	r3, r2
 8007946:	0019      	movs	r1, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	430a      	orrs	r2, r1
 8007952:	605a      	str	r2, [r3, #4]
  }
}
 8007954:	46c0      	nop			; (mov r8, r8)
 8007956:	46bd      	mov	sp, r7
 8007958:	b002      	add	sp, #8
 800795a:	bd80      	pop	{r7, pc}
 800795c:	fffdffff 	.word	0xfffdffff
 8007960:	fffeffff 	.word	0xfffeffff
 8007964:	fffbffff 	.word	0xfffbffff
 8007968:	ffff7fff 	.word	0xffff7fff
 800796c:	ffffefff 	.word	0xffffefff
 8007970:	ffffdfff 	.word	0xffffdfff
 8007974:	ffefffff 	.word	0xffefffff
 8007978:	ff9fffff 	.word	0xff9fffff
 800797c:	fff7ffff 	.word	0xfff7ffff

08007980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b092      	sub	sp, #72	; 0x48
 8007984:	af02      	add	r7, sp, #8
 8007986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2284      	movs	r2, #132	; 0x84
 800798c:	2100      	movs	r1, #0
 800798e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007990:	f7fc fbd0 	bl	8004134 <HAL_GetTick>
 8007994:	0003      	movs	r3, r0
 8007996:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2208      	movs	r2, #8
 80079a0:	4013      	ands	r3, r2
 80079a2:	2b08      	cmp	r3, #8
 80079a4:	d12c      	bne.n	8007a00 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a8:	2280      	movs	r2, #128	; 0x80
 80079aa:	0391      	lsls	r1, r2, #14
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	4a46      	ldr	r2, [pc, #280]	; (8007ac8 <UART_CheckIdleState+0x148>)
 80079b0:	9200      	str	r2, [sp, #0]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f000 f88c 	bl	8007ad0 <UART_WaitOnFlagUntilTimeout>
 80079b8:	1e03      	subs	r3, r0, #0
 80079ba:	d021      	beq.n	8007a00 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079bc:	f3ef 8310 	mrs	r3, PRIMASK
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80079c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80079c6:	2301      	movs	r3, #1
 80079c8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079cc:	f383 8810 	msr	PRIMASK, r3
}
 80079d0:	46c0      	nop			; (mov r8, r8)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2180      	movs	r1, #128	; 0x80
 80079de:	438a      	bics	r2, r1
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e8:	f383 8810 	msr	PRIMASK, r3
}
 80079ec:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2220      	movs	r2, #32
 80079f2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2278      	movs	r2, #120	; 0x78
 80079f8:	2100      	movs	r1, #0
 80079fa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e05f      	b.n	8007ac0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2204      	movs	r2, #4
 8007a08:	4013      	ands	r3, r2
 8007a0a:	2b04      	cmp	r3, #4
 8007a0c:	d146      	bne.n	8007a9c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a10:	2280      	movs	r2, #128	; 0x80
 8007a12:	03d1      	lsls	r1, r2, #15
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	4a2c      	ldr	r2, [pc, #176]	; (8007ac8 <UART_CheckIdleState+0x148>)
 8007a18:	9200      	str	r2, [sp, #0]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f000 f858 	bl	8007ad0 <UART_WaitOnFlagUntilTimeout>
 8007a20:	1e03      	subs	r3, r0, #0
 8007a22:	d03b      	beq.n	8007a9c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a24:	f3ef 8310 	mrs	r3, PRIMASK
 8007a28:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a2e:	2301      	movs	r3, #1
 8007a30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	f383 8810 	msr	PRIMASK, r3
}
 8007a38:	46c0      	nop			; (mov r8, r8)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4921      	ldr	r1, [pc, #132]	; (8007acc <UART_CheckIdleState+0x14c>)
 8007a46:	400a      	ands	r2, r1
 8007a48:	601a      	str	r2, [r3, #0]
 8007a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f383 8810 	msr	PRIMASK, r3
}
 8007a54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a56:	f3ef 8310 	mrs	r3, PRIMASK
 8007a5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a5c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a5e:	633b      	str	r3, [r7, #48]	; 0x30
 8007a60:	2301      	movs	r3, #1
 8007a62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	f383 8810 	msr	PRIMASK, r3
}
 8007a6a:	46c0      	nop			; (mov r8, r8)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689a      	ldr	r2, [r3, #8]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2101      	movs	r1, #1
 8007a78:	438a      	bics	r2, r1
 8007a7a:	609a      	str	r2, [r3, #8]
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a80:	6a3b      	ldr	r3, [r7, #32]
 8007a82:	f383 8810 	msr	PRIMASK, r3
}
 8007a86:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2280      	movs	r2, #128	; 0x80
 8007a8c:	2120      	movs	r1, #32
 8007a8e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2278      	movs	r2, #120	; 0x78
 8007a94:	2100      	movs	r1, #0
 8007a96:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e011      	b.n	8007ac0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2280      	movs	r2, #128	; 0x80
 8007aa6:	2120      	movs	r1, #32
 8007aa8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2278      	movs	r2, #120	; 0x78
 8007aba:	2100      	movs	r1, #0
 8007abc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	0018      	movs	r0, r3
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	b010      	add	sp, #64	; 0x40
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	01ffffff 	.word	0x01ffffff
 8007acc:	fffffedf 	.word	0xfffffedf

08007ad0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	603b      	str	r3, [r7, #0]
 8007adc:	1dfb      	adds	r3, r7, #7
 8007ade:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ae0:	e04b      	b.n	8007b7a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	d048      	beq.n	8007b7a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ae8:	f7fc fb24 	bl	8004134 <HAL_GetTick>
 8007aec:	0002      	movs	r2, r0
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d302      	bcc.n	8007afe <UART_WaitOnFlagUntilTimeout+0x2e>
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e04b      	b.n	8007b9a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2204      	movs	r2, #4
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	d035      	beq.n	8007b7a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	2208      	movs	r2, #8
 8007b16:	4013      	ands	r3, r2
 8007b18:	2b08      	cmp	r3, #8
 8007b1a:	d111      	bne.n	8007b40 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2208      	movs	r2, #8
 8007b22:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	0018      	movs	r0, r3
 8007b28:	f000 f83c 	bl	8007ba4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2284      	movs	r2, #132	; 0x84
 8007b30:	2108      	movs	r1, #8
 8007b32:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2278      	movs	r2, #120	; 0x78
 8007b38:	2100      	movs	r1, #0
 8007b3a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e02c      	b.n	8007b9a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	69da      	ldr	r2, [r3, #28]
 8007b46:	2380      	movs	r3, #128	; 0x80
 8007b48:	011b      	lsls	r3, r3, #4
 8007b4a:	401a      	ands	r2, r3
 8007b4c:	2380      	movs	r3, #128	; 0x80
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d112      	bne.n	8007b7a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2280      	movs	r2, #128	; 0x80
 8007b5a:	0112      	lsls	r2, r2, #4
 8007b5c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	0018      	movs	r0, r3
 8007b62:	f000 f81f 	bl	8007ba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2284      	movs	r2, #132	; 0x84
 8007b6a:	2120      	movs	r1, #32
 8007b6c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2278      	movs	r2, #120	; 0x78
 8007b72:	2100      	movs	r1, #0
 8007b74:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e00f      	b.n	8007b9a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	69db      	ldr	r3, [r3, #28]
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	4013      	ands	r3, r2
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	425a      	negs	r2, r3
 8007b8a:	4153      	adcs	r3, r2
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	001a      	movs	r2, r3
 8007b90:	1dfb      	adds	r3, r7, #7
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d0a4      	beq.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	0018      	movs	r0, r3
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	b004      	add	sp, #16
 8007ba0:	bd80      	pop	{r7, pc}
	...

08007ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08e      	sub	sp, #56	; 0x38
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bac:	f3ef 8310 	mrs	r3, PRIMASK
 8007bb0:	617b      	str	r3, [r7, #20]
  return(result);
 8007bb2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	f383 8810 	msr	PRIMASK, r3
}
 8007bc0:	46c0      	nop			; (mov r8, r8)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4926      	ldr	r1, [pc, #152]	; (8007c68 <UART_EndRxTransfer+0xc4>)
 8007bce:	400a      	ands	r2, r1
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	f383 8810 	msr	PRIMASK, r3
}
 8007bdc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bde:	f3ef 8310 	mrs	r3, PRIMASK
 8007be2:	623b      	str	r3, [r7, #32]
  return(result);
 8007be4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be6:	633b      	str	r3, [r7, #48]	; 0x30
 8007be8:	2301      	movs	r3, #1
 8007bea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	f383 8810 	msr	PRIMASK, r3
}
 8007bf2:	46c0      	nop			; (mov r8, r8)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689a      	ldr	r2, [r3, #8]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2101      	movs	r1, #1
 8007c00:	438a      	bics	r2, r1
 8007c02:	609a      	str	r2, [r3, #8]
 8007c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c06:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0a:	f383 8810 	msr	PRIMASK, r3
}
 8007c0e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d118      	bne.n	8007c4a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c18:	f3ef 8310 	mrs	r3, PRIMASK
 8007c1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c1e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c22:	2301      	movs	r3, #1
 8007c24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f383 8810 	msr	PRIMASK, r3
}
 8007c2c:	46c0      	nop			; (mov r8, r8)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2110      	movs	r1, #16
 8007c3a:	438a      	bics	r2, r1
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f383 8810 	msr	PRIMASK, r3
}
 8007c48:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2280      	movs	r2, #128	; 0x80
 8007c4e:	2120      	movs	r1, #32
 8007c50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007c5e:	46c0      	nop			; (mov r8, r8)
 8007c60:	46bd      	mov	sp, r7
 8007c62:	b00e      	add	sp, #56	; 0x38
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	46c0      	nop			; (mov r8, r8)
 8007c68:	fffffedf 	.word	0xfffffedf

08007c6c <__errno>:
 8007c6c:	4b01      	ldr	r3, [pc, #4]	; (8007c74 <__errno+0x8>)
 8007c6e:	6818      	ldr	r0, [r3, #0]
 8007c70:	4770      	bx	lr
 8007c72:	46c0      	nop			; (mov r8, r8)
 8007c74:	2000000c 	.word	0x2000000c

08007c78 <__libc_init_array>:
 8007c78:	b570      	push	{r4, r5, r6, lr}
 8007c7a:	2600      	movs	r6, #0
 8007c7c:	4d0c      	ldr	r5, [pc, #48]	; (8007cb0 <__libc_init_array+0x38>)
 8007c7e:	4c0d      	ldr	r4, [pc, #52]	; (8007cb4 <__libc_init_array+0x3c>)
 8007c80:	1b64      	subs	r4, r4, r5
 8007c82:	10a4      	asrs	r4, r4, #2
 8007c84:	42a6      	cmp	r6, r4
 8007c86:	d109      	bne.n	8007c9c <__libc_init_array+0x24>
 8007c88:	2600      	movs	r6, #0
 8007c8a:	f002 ffd1 	bl	800ac30 <_init>
 8007c8e:	4d0a      	ldr	r5, [pc, #40]	; (8007cb8 <__libc_init_array+0x40>)
 8007c90:	4c0a      	ldr	r4, [pc, #40]	; (8007cbc <__libc_init_array+0x44>)
 8007c92:	1b64      	subs	r4, r4, r5
 8007c94:	10a4      	asrs	r4, r4, #2
 8007c96:	42a6      	cmp	r6, r4
 8007c98:	d105      	bne.n	8007ca6 <__libc_init_array+0x2e>
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}
 8007c9c:	00b3      	lsls	r3, r6, #2
 8007c9e:	58eb      	ldr	r3, [r5, r3]
 8007ca0:	4798      	blx	r3
 8007ca2:	3601      	adds	r6, #1
 8007ca4:	e7ee      	b.n	8007c84 <__libc_init_array+0xc>
 8007ca6:	00b3      	lsls	r3, r6, #2
 8007ca8:	58eb      	ldr	r3, [r5, r3]
 8007caa:	4798      	blx	r3
 8007cac:	3601      	adds	r6, #1
 8007cae:	e7f2      	b.n	8007c96 <__libc_init_array+0x1e>
 8007cb0:	0800b15c 	.word	0x0800b15c
 8007cb4:	0800b15c 	.word	0x0800b15c
 8007cb8:	0800b15c 	.word	0x0800b15c
 8007cbc:	0800b160 	.word	0x0800b160

08007cc0 <memcpy>:
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d100      	bne.n	8007cca <memcpy+0xa>
 8007cc8:	bd10      	pop	{r4, pc}
 8007cca:	5ccc      	ldrb	r4, [r1, r3]
 8007ccc:	54c4      	strb	r4, [r0, r3]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	e7f8      	b.n	8007cc4 <memcpy+0x4>

08007cd2 <memset>:
 8007cd2:	0003      	movs	r3, r0
 8007cd4:	1882      	adds	r2, r0, r2
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d100      	bne.n	8007cdc <memset+0xa>
 8007cda:	4770      	bx	lr
 8007cdc:	7019      	strb	r1, [r3, #0]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	e7f9      	b.n	8007cd6 <memset+0x4>

08007ce2 <__cvt>:
 8007ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ce4:	001e      	movs	r6, r3
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	0014      	movs	r4, r2
 8007cea:	b08b      	sub	sp, #44	; 0x2c
 8007cec:	429e      	cmp	r6, r3
 8007cee:	da04      	bge.n	8007cfa <__cvt+0x18>
 8007cf0:	2180      	movs	r1, #128	; 0x80
 8007cf2:	0609      	lsls	r1, r1, #24
 8007cf4:	1873      	adds	r3, r6, r1
 8007cf6:	001e      	movs	r6, r3
 8007cf8:	232d      	movs	r3, #45	; 0x2d
 8007cfa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007cfc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007cfe:	7013      	strb	r3, [r2, #0]
 8007d00:	2320      	movs	r3, #32
 8007d02:	2203      	movs	r2, #3
 8007d04:	439f      	bics	r7, r3
 8007d06:	2f46      	cmp	r7, #70	; 0x46
 8007d08:	d007      	beq.n	8007d1a <__cvt+0x38>
 8007d0a:	003b      	movs	r3, r7
 8007d0c:	3b45      	subs	r3, #69	; 0x45
 8007d0e:	4259      	negs	r1, r3
 8007d10:	414b      	adcs	r3, r1
 8007d12:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007d14:	3a01      	subs	r2, #1
 8007d16:	18cb      	adds	r3, r1, r3
 8007d18:	9310      	str	r3, [sp, #64]	; 0x40
 8007d1a:	ab09      	add	r3, sp, #36	; 0x24
 8007d1c:	9304      	str	r3, [sp, #16]
 8007d1e:	ab08      	add	r3, sp, #32
 8007d20:	9303      	str	r3, [sp, #12]
 8007d22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d24:	9200      	str	r2, [sp, #0]
 8007d26:	9302      	str	r3, [sp, #8]
 8007d28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d2a:	0022      	movs	r2, r4
 8007d2c:	9301      	str	r3, [sp, #4]
 8007d2e:	0033      	movs	r3, r6
 8007d30:	f000 fd06 	bl	8008740 <_dtoa_r>
 8007d34:	0005      	movs	r5, r0
 8007d36:	2f47      	cmp	r7, #71	; 0x47
 8007d38:	d102      	bne.n	8007d40 <__cvt+0x5e>
 8007d3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d3c:	07db      	lsls	r3, r3, #31
 8007d3e:	d528      	bpl.n	8007d92 <__cvt+0xb0>
 8007d40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d42:	18eb      	adds	r3, r5, r3
 8007d44:	9307      	str	r3, [sp, #28]
 8007d46:	2f46      	cmp	r7, #70	; 0x46
 8007d48:	d114      	bne.n	8007d74 <__cvt+0x92>
 8007d4a:	782b      	ldrb	r3, [r5, #0]
 8007d4c:	2b30      	cmp	r3, #48	; 0x30
 8007d4e:	d10c      	bne.n	8007d6a <__cvt+0x88>
 8007d50:	2200      	movs	r2, #0
 8007d52:	2300      	movs	r3, #0
 8007d54:	0020      	movs	r0, r4
 8007d56:	0031      	movs	r1, r6
 8007d58:	f7f8 fb78 	bl	800044c <__aeabi_dcmpeq>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d104      	bne.n	8007d6a <__cvt+0x88>
 8007d60:	2301      	movs	r3, #1
 8007d62:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d64:	1a9b      	subs	r3, r3, r2
 8007d66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d68:	6013      	str	r3, [r2, #0]
 8007d6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d6c:	9a07      	ldr	r2, [sp, #28]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	18d3      	adds	r3, r2, r3
 8007d72:	9307      	str	r3, [sp, #28]
 8007d74:	2200      	movs	r2, #0
 8007d76:	2300      	movs	r3, #0
 8007d78:	0020      	movs	r0, r4
 8007d7a:	0031      	movs	r1, r6
 8007d7c:	f7f8 fb66 	bl	800044c <__aeabi_dcmpeq>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d001      	beq.n	8007d88 <__cvt+0xa6>
 8007d84:	9b07      	ldr	r3, [sp, #28]
 8007d86:	9309      	str	r3, [sp, #36]	; 0x24
 8007d88:	2230      	movs	r2, #48	; 0x30
 8007d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d8c:	9907      	ldr	r1, [sp, #28]
 8007d8e:	428b      	cmp	r3, r1
 8007d90:	d306      	bcc.n	8007da0 <__cvt+0xbe>
 8007d92:	0028      	movs	r0, r5
 8007d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d98:	1b5b      	subs	r3, r3, r5
 8007d9a:	6013      	str	r3, [r2, #0]
 8007d9c:	b00b      	add	sp, #44	; 0x2c
 8007d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007da0:	1c59      	adds	r1, r3, #1
 8007da2:	9109      	str	r1, [sp, #36]	; 0x24
 8007da4:	701a      	strb	r2, [r3, #0]
 8007da6:	e7f0      	b.n	8007d8a <__cvt+0xa8>

08007da8 <__exponent>:
 8007da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007daa:	1c83      	adds	r3, r0, #2
 8007dac:	b087      	sub	sp, #28
 8007dae:	9303      	str	r3, [sp, #12]
 8007db0:	0005      	movs	r5, r0
 8007db2:	000c      	movs	r4, r1
 8007db4:	232b      	movs	r3, #43	; 0x2b
 8007db6:	7002      	strb	r2, [r0, #0]
 8007db8:	2900      	cmp	r1, #0
 8007dba:	da01      	bge.n	8007dc0 <__exponent+0x18>
 8007dbc:	424c      	negs	r4, r1
 8007dbe:	3302      	adds	r3, #2
 8007dc0:	706b      	strb	r3, [r5, #1]
 8007dc2:	2c09      	cmp	r4, #9
 8007dc4:	dd31      	ble.n	8007e2a <__exponent+0x82>
 8007dc6:	270a      	movs	r7, #10
 8007dc8:	ab04      	add	r3, sp, #16
 8007dca:	1dde      	adds	r6, r3, #7
 8007dcc:	0020      	movs	r0, r4
 8007dce:	0039      	movs	r1, r7
 8007dd0:	9601      	str	r6, [sp, #4]
 8007dd2:	f7f8 fb25 	bl	8000420 <__aeabi_idivmod>
 8007dd6:	3e01      	subs	r6, #1
 8007dd8:	3130      	adds	r1, #48	; 0x30
 8007dda:	0020      	movs	r0, r4
 8007ddc:	7031      	strb	r1, [r6, #0]
 8007dde:	0039      	movs	r1, r7
 8007de0:	9402      	str	r4, [sp, #8]
 8007de2:	f7f8 fa37 	bl	8000254 <__divsi3>
 8007de6:	9b02      	ldr	r3, [sp, #8]
 8007de8:	0004      	movs	r4, r0
 8007dea:	2b63      	cmp	r3, #99	; 0x63
 8007dec:	dcee      	bgt.n	8007dcc <__exponent+0x24>
 8007dee:	9b01      	ldr	r3, [sp, #4]
 8007df0:	3430      	adds	r4, #48	; 0x30
 8007df2:	1e9a      	subs	r2, r3, #2
 8007df4:	0013      	movs	r3, r2
 8007df6:	9903      	ldr	r1, [sp, #12]
 8007df8:	7014      	strb	r4, [r2, #0]
 8007dfa:	a804      	add	r0, sp, #16
 8007dfc:	3007      	adds	r0, #7
 8007dfe:	4298      	cmp	r0, r3
 8007e00:	d80e      	bhi.n	8007e20 <__exponent+0x78>
 8007e02:	ab04      	add	r3, sp, #16
 8007e04:	3307      	adds	r3, #7
 8007e06:	2000      	movs	r0, #0
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d804      	bhi.n	8007e16 <__exponent+0x6e>
 8007e0c:	ab04      	add	r3, sp, #16
 8007e0e:	3009      	adds	r0, #9
 8007e10:	18c0      	adds	r0, r0, r3
 8007e12:	9b01      	ldr	r3, [sp, #4]
 8007e14:	1ac0      	subs	r0, r0, r3
 8007e16:	9b03      	ldr	r3, [sp, #12]
 8007e18:	1818      	adds	r0, r3, r0
 8007e1a:	1b40      	subs	r0, r0, r5
 8007e1c:	b007      	add	sp, #28
 8007e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e20:	7818      	ldrb	r0, [r3, #0]
 8007e22:	3301      	adds	r3, #1
 8007e24:	7008      	strb	r0, [r1, #0]
 8007e26:	3101      	adds	r1, #1
 8007e28:	e7e7      	b.n	8007dfa <__exponent+0x52>
 8007e2a:	2330      	movs	r3, #48	; 0x30
 8007e2c:	18e4      	adds	r4, r4, r3
 8007e2e:	70ab      	strb	r3, [r5, #2]
 8007e30:	1d28      	adds	r0, r5, #4
 8007e32:	70ec      	strb	r4, [r5, #3]
 8007e34:	e7f1      	b.n	8007e1a <__exponent+0x72>
	...

08007e38 <_printf_float>:
 8007e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e3a:	b095      	sub	sp, #84	; 0x54
 8007e3c:	000c      	movs	r4, r1
 8007e3e:	9209      	str	r2, [sp, #36]	; 0x24
 8007e40:	001e      	movs	r6, r3
 8007e42:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007e44:	0007      	movs	r7, r0
 8007e46:	f001 fa95 	bl	8009374 <_localeconv_r>
 8007e4a:	6803      	ldr	r3, [r0, #0]
 8007e4c:	0018      	movs	r0, r3
 8007e4e:	930c      	str	r3, [sp, #48]	; 0x30
 8007e50:	f7f8 f95a 	bl	8000108 <strlen>
 8007e54:	2300      	movs	r3, #0
 8007e56:	9312      	str	r3, [sp, #72]	; 0x48
 8007e58:	7e23      	ldrb	r3, [r4, #24]
 8007e5a:	2207      	movs	r2, #7
 8007e5c:	930a      	str	r3, [sp, #40]	; 0x28
 8007e5e:	6823      	ldr	r3, [r4, #0]
 8007e60:	900e      	str	r0, [sp, #56]	; 0x38
 8007e62:	930d      	str	r3, [sp, #52]	; 0x34
 8007e64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007e66:	682b      	ldr	r3, [r5, #0]
 8007e68:	05c9      	lsls	r1, r1, #23
 8007e6a:	d547      	bpl.n	8007efc <_printf_float+0xc4>
 8007e6c:	189b      	adds	r3, r3, r2
 8007e6e:	4393      	bics	r3, r2
 8007e70:	001a      	movs	r2, r3
 8007e72:	3208      	adds	r2, #8
 8007e74:	602a      	str	r2, [r5, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	64a2      	str	r2, [r4, #72]	; 0x48
 8007e7c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007e7e:	2201      	movs	r2, #1
 8007e80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007e82:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007e84:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e86:	006b      	lsls	r3, r5, #1
 8007e88:	085b      	lsrs	r3, r3, #1
 8007e8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007e8e:	4ba7      	ldr	r3, [pc, #668]	; (800812c <_printf_float+0x2f4>)
 8007e90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007e92:	4252      	negs	r2, r2
 8007e94:	f7fa f95e 	bl	8002154 <__aeabi_dcmpun>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d131      	bne.n	8007f00 <_printf_float+0xc8>
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	4ba3      	ldr	r3, [pc, #652]	; (800812c <_printf_float+0x2f4>)
 8007ea0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007ea2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007ea4:	4252      	negs	r2, r2
 8007ea6:	f7f8 fae1 	bl	800046c <__aeabi_dcmple>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	d128      	bne.n	8007f00 <_printf_float+0xc8>
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	0029      	movs	r1, r5
 8007eb4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007eb6:	f7f8 facf 	bl	8000458 <__aeabi_dcmplt>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	d003      	beq.n	8007ec6 <_printf_float+0x8e>
 8007ebe:	0023      	movs	r3, r4
 8007ec0:	222d      	movs	r2, #45	; 0x2d
 8007ec2:	3343      	adds	r3, #67	; 0x43
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec8:	4d99      	ldr	r5, [pc, #612]	; (8008130 <_printf_float+0x2f8>)
 8007eca:	2b47      	cmp	r3, #71	; 0x47
 8007ecc:	d900      	bls.n	8007ed0 <_printf_float+0x98>
 8007ece:	4d99      	ldr	r5, [pc, #612]	; (8008134 <_printf_float+0x2fc>)
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ed4:	6123      	str	r3, [r4, #16]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	439a      	bics	r2, r3
 8007eda:	2300      	movs	r3, #0
 8007edc:	6022      	str	r2, [r4, #0]
 8007ede:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee2:	0021      	movs	r1, r4
 8007ee4:	0038      	movs	r0, r7
 8007ee6:	9600      	str	r6, [sp, #0]
 8007ee8:	aa13      	add	r2, sp, #76	; 0x4c
 8007eea:	f000 f9e7 	bl	80082bc <_printf_common>
 8007eee:	1c43      	adds	r3, r0, #1
 8007ef0:	d000      	beq.n	8007ef4 <_printf_float+0xbc>
 8007ef2:	e0a2      	b.n	800803a <_printf_float+0x202>
 8007ef4:	2001      	movs	r0, #1
 8007ef6:	4240      	negs	r0, r0
 8007ef8:	b015      	add	sp, #84	; 0x54
 8007efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007efc:	3307      	adds	r3, #7
 8007efe:	e7b6      	b.n	8007e6e <_printf_float+0x36>
 8007f00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f02:	002b      	movs	r3, r5
 8007f04:	0010      	movs	r0, r2
 8007f06:	0029      	movs	r1, r5
 8007f08:	f7fa f924 	bl	8002154 <__aeabi_dcmpun>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d00b      	beq.n	8007f28 <_printf_float+0xf0>
 8007f10:	2d00      	cmp	r5, #0
 8007f12:	da03      	bge.n	8007f1c <_printf_float+0xe4>
 8007f14:	0023      	movs	r3, r4
 8007f16:	222d      	movs	r2, #45	; 0x2d
 8007f18:	3343      	adds	r3, #67	; 0x43
 8007f1a:	701a      	strb	r2, [r3, #0]
 8007f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f1e:	4d86      	ldr	r5, [pc, #536]	; (8008138 <_printf_float+0x300>)
 8007f20:	2b47      	cmp	r3, #71	; 0x47
 8007f22:	d9d5      	bls.n	8007ed0 <_printf_float+0x98>
 8007f24:	4d85      	ldr	r5, [pc, #532]	; (800813c <_printf_float+0x304>)
 8007f26:	e7d3      	b.n	8007ed0 <_printf_float+0x98>
 8007f28:	2220      	movs	r2, #32
 8007f2a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f2c:	6863      	ldr	r3, [r4, #4]
 8007f2e:	4391      	bics	r1, r2
 8007f30:	910f      	str	r1, [sp, #60]	; 0x3c
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	d149      	bne.n	8007fca <_printf_float+0x192>
 8007f36:	3307      	adds	r3, #7
 8007f38:	6063      	str	r3, [r4, #4]
 8007f3a:	2380      	movs	r3, #128	; 0x80
 8007f3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	4313      	orrs	r3, r2
 8007f42:	2200      	movs	r2, #0
 8007f44:	9206      	str	r2, [sp, #24]
 8007f46:	aa12      	add	r2, sp, #72	; 0x48
 8007f48:	9205      	str	r2, [sp, #20]
 8007f4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f4c:	a908      	add	r1, sp, #32
 8007f4e:	9204      	str	r2, [sp, #16]
 8007f50:	aa11      	add	r2, sp, #68	; 0x44
 8007f52:	9203      	str	r2, [sp, #12]
 8007f54:	2223      	movs	r2, #35	; 0x23
 8007f56:	6023      	str	r3, [r4, #0]
 8007f58:	9301      	str	r3, [sp, #4]
 8007f5a:	6863      	ldr	r3, [r4, #4]
 8007f5c:	1852      	adds	r2, r2, r1
 8007f5e:	9202      	str	r2, [sp, #8]
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	0038      	movs	r0, r7
 8007f64:	002b      	movs	r3, r5
 8007f66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f68:	f7ff febb 	bl	8007ce2 <__cvt>
 8007f6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f6e:	0005      	movs	r5, r0
 8007f70:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007f72:	2b47      	cmp	r3, #71	; 0x47
 8007f74:	d108      	bne.n	8007f88 <_printf_float+0x150>
 8007f76:	1ccb      	adds	r3, r1, #3
 8007f78:	db02      	blt.n	8007f80 <_printf_float+0x148>
 8007f7a:	6863      	ldr	r3, [r4, #4]
 8007f7c:	4299      	cmp	r1, r3
 8007f7e:	dd48      	ble.n	8008012 <_printf_float+0x1da>
 8007f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f82:	3b02      	subs	r3, #2
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	930a      	str	r3, [sp, #40]	; 0x28
 8007f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f8a:	2b65      	cmp	r3, #101	; 0x65
 8007f8c:	d824      	bhi.n	8007fd8 <_printf_float+0x1a0>
 8007f8e:	0020      	movs	r0, r4
 8007f90:	001a      	movs	r2, r3
 8007f92:	3901      	subs	r1, #1
 8007f94:	3050      	adds	r0, #80	; 0x50
 8007f96:	9111      	str	r1, [sp, #68]	; 0x44
 8007f98:	f7ff ff06 	bl	8007da8 <__exponent>
 8007f9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f9e:	900b      	str	r0, [sp, #44]	; 0x2c
 8007fa0:	1813      	adds	r3, r2, r0
 8007fa2:	6123      	str	r3, [r4, #16]
 8007fa4:	2a01      	cmp	r2, #1
 8007fa6:	dc02      	bgt.n	8007fae <_printf_float+0x176>
 8007fa8:	6822      	ldr	r2, [r4, #0]
 8007faa:	07d2      	lsls	r2, r2, #31
 8007fac:	d501      	bpl.n	8007fb2 <_printf_float+0x17a>
 8007fae:	3301      	adds	r3, #1
 8007fb0:	6123      	str	r3, [r4, #16]
 8007fb2:	2323      	movs	r3, #35	; 0x23
 8007fb4:	aa08      	add	r2, sp, #32
 8007fb6:	189b      	adds	r3, r3, r2
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d100      	bne.n	8007fc0 <_printf_float+0x188>
 8007fbe:	e78f      	b.n	8007ee0 <_printf_float+0xa8>
 8007fc0:	0023      	movs	r3, r4
 8007fc2:	222d      	movs	r2, #45	; 0x2d
 8007fc4:	3343      	adds	r3, #67	; 0x43
 8007fc6:	701a      	strb	r2, [r3, #0]
 8007fc8:	e78a      	b.n	8007ee0 <_printf_float+0xa8>
 8007fca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007fcc:	2a47      	cmp	r2, #71	; 0x47
 8007fce:	d1b4      	bne.n	8007f3a <_printf_float+0x102>
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1b2      	bne.n	8007f3a <_printf_float+0x102>
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	e7af      	b.n	8007f38 <_printf_float+0x100>
 8007fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fda:	2b66      	cmp	r3, #102	; 0x66
 8007fdc:	d11b      	bne.n	8008016 <_printf_float+0x1de>
 8007fde:	6863      	ldr	r3, [r4, #4]
 8007fe0:	2900      	cmp	r1, #0
 8007fe2:	dd0d      	ble.n	8008000 <_printf_float+0x1c8>
 8007fe4:	6121      	str	r1, [r4, #16]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d102      	bne.n	8007ff0 <_printf_float+0x1b8>
 8007fea:	6822      	ldr	r2, [r4, #0]
 8007fec:	07d2      	lsls	r2, r2, #31
 8007fee:	d502      	bpl.n	8007ff6 <_printf_float+0x1be>
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	1859      	adds	r1, r3, r1
 8007ff4:	6121      	str	r1, [r4, #16]
 8007ff6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ff8:	65a3      	str	r3, [r4, #88]	; 0x58
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ffe:	e7d8      	b.n	8007fb2 <_printf_float+0x17a>
 8008000:	2b00      	cmp	r3, #0
 8008002:	d103      	bne.n	800800c <_printf_float+0x1d4>
 8008004:	2201      	movs	r2, #1
 8008006:	6821      	ldr	r1, [r4, #0]
 8008008:	4211      	tst	r1, r2
 800800a:	d000      	beq.n	800800e <_printf_float+0x1d6>
 800800c:	1c9a      	adds	r2, r3, #2
 800800e:	6122      	str	r2, [r4, #16]
 8008010:	e7f1      	b.n	8007ff6 <_printf_float+0x1be>
 8008012:	2367      	movs	r3, #103	; 0x67
 8008014:	930a      	str	r3, [sp, #40]	; 0x28
 8008016:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008018:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800801a:	4293      	cmp	r3, r2
 800801c:	db06      	blt.n	800802c <_printf_float+0x1f4>
 800801e:	6822      	ldr	r2, [r4, #0]
 8008020:	6123      	str	r3, [r4, #16]
 8008022:	07d2      	lsls	r2, r2, #31
 8008024:	d5e7      	bpl.n	8007ff6 <_printf_float+0x1be>
 8008026:	3301      	adds	r3, #1
 8008028:	6123      	str	r3, [r4, #16]
 800802a:	e7e4      	b.n	8007ff6 <_printf_float+0x1be>
 800802c:	2101      	movs	r1, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	dc01      	bgt.n	8008036 <_printf_float+0x1fe>
 8008032:	1849      	adds	r1, r1, r1
 8008034:	1ac9      	subs	r1, r1, r3
 8008036:	1852      	adds	r2, r2, r1
 8008038:	e7e9      	b.n	800800e <_printf_float+0x1d6>
 800803a:	6822      	ldr	r2, [r4, #0]
 800803c:	0553      	lsls	r3, r2, #21
 800803e:	d407      	bmi.n	8008050 <_printf_float+0x218>
 8008040:	6923      	ldr	r3, [r4, #16]
 8008042:	002a      	movs	r2, r5
 8008044:	0038      	movs	r0, r7
 8008046:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008048:	47b0      	blx	r6
 800804a:	1c43      	adds	r3, r0, #1
 800804c:	d128      	bne.n	80080a0 <_printf_float+0x268>
 800804e:	e751      	b.n	8007ef4 <_printf_float+0xbc>
 8008050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008052:	2b65      	cmp	r3, #101	; 0x65
 8008054:	d800      	bhi.n	8008058 <_printf_float+0x220>
 8008056:	e0e1      	b.n	800821c <_printf_float+0x3e4>
 8008058:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800805a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800805c:	2200      	movs	r2, #0
 800805e:	2300      	movs	r3, #0
 8008060:	f7f8 f9f4 	bl	800044c <__aeabi_dcmpeq>
 8008064:	2800      	cmp	r0, #0
 8008066:	d031      	beq.n	80080cc <_printf_float+0x294>
 8008068:	2301      	movs	r3, #1
 800806a:	0038      	movs	r0, r7
 800806c:	4a34      	ldr	r2, [pc, #208]	; (8008140 <_printf_float+0x308>)
 800806e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008070:	47b0      	blx	r6
 8008072:	1c43      	adds	r3, r0, #1
 8008074:	d100      	bne.n	8008078 <_printf_float+0x240>
 8008076:	e73d      	b.n	8007ef4 <_printf_float+0xbc>
 8008078:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800807a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800807c:	4293      	cmp	r3, r2
 800807e:	db02      	blt.n	8008086 <_printf_float+0x24e>
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	07db      	lsls	r3, r3, #31
 8008084:	d50c      	bpl.n	80080a0 <_printf_float+0x268>
 8008086:	0038      	movs	r0, r7
 8008088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800808a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800808c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800808e:	47b0      	blx	r6
 8008090:	2500      	movs	r5, #0
 8008092:	1c43      	adds	r3, r0, #1
 8008094:	d100      	bne.n	8008098 <_printf_float+0x260>
 8008096:	e72d      	b.n	8007ef4 <_printf_float+0xbc>
 8008098:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800809a:	3b01      	subs	r3, #1
 800809c:	42ab      	cmp	r3, r5
 800809e:	dc0a      	bgt.n	80080b6 <_printf_float+0x27e>
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	079b      	lsls	r3, r3, #30
 80080a4:	d500      	bpl.n	80080a8 <_printf_float+0x270>
 80080a6:	e106      	b.n	80082b6 <_printf_float+0x47e>
 80080a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80080aa:	68e0      	ldr	r0, [r4, #12]
 80080ac:	4298      	cmp	r0, r3
 80080ae:	db00      	blt.n	80080b2 <_printf_float+0x27a>
 80080b0:	e722      	b.n	8007ef8 <_printf_float+0xc0>
 80080b2:	0018      	movs	r0, r3
 80080b4:	e720      	b.n	8007ef8 <_printf_float+0xc0>
 80080b6:	0022      	movs	r2, r4
 80080b8:	2301      	movs	r3, #1
 80080ba:	0038      	movs	r0, r7
 80080bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080be:	321a      	adds	r2, #26
 80080c0:	47b0      	blx	r6
 80080c2:	1c43      	adds	r3, r0, #1
 80080c4:	d100      	bne.n	80080c8 <_printf_float+0x290>
 80080c6:	e715      	b.n	8007ef4 <_printf_float+0xbc>
 80080c8:	3501      	adds	r5, #1
 80080ca:	e7e5      	b.n	8008098 <_printf_float+0x260>
 80080cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	dc38      	bgt.n	8008144 <_printf_float+0x30c>
 80080d2:	2301      	movs	r3, #1
 80080d4:	0038      	movs	r0, r7
 80080d6:	4a1a      	ldr	r2, [pc, #104]	; (8008140 <_printf_float+0x308>)
 80080d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080da:	47b0      	blx	r6
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	d100      	bne.n	80080e2 <_printf_float+0x2aa>
 80080e0:	e708      	b.n	8007ef4 <_printf_float+0xbc>
 80080e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080e6:	4313      	orrs	r3, r2
 80080e8:	d102      	bne.n	80080f0 <_printf_float+0x2b8>
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	07db      	lsls	r3, r3, #31
 80080ee:	d5d7      	bpl.n	80080a0 <_printf_float+0x268>
 80080f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080f2:	0038      	movs	r0, r7
 80080f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080f8:	47b0      	blx	r6
 80080fa:	1c43      	adds	r3, r0, #1
 80080fc:	d100      	bne.n	8008100 <_printf_float+0x2c8>
 80080fe:	e6f9      	b.n	8007ef4 <_printf_float+0xbc>
 8008100:	2300      	movs	r3, #0
 8008102:	930a      	str	r3, [sp, #40]	; 0x28
 8008104:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008106:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008108:	425b      	negs	r3, r3
 800810a:	4293      	cmp	r3, r2
 800810c:	dc01      	bgt.n	8008112 <_printf_float+0x2da>
 800810e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008110:	e797      	b.n	8008042 <_printf_float+0x20a>
 8008112:	0022      	movs	r2, r4
 8008114:	2301      	movs	r3, #1
 8008116:	0038      	movs	r0, r7
 8008118:	9909      	ldr	r1, [sp, #36]	; 0x24
 800811a:	321a      	adds	r2, #26
 800811c:	47b0      	blx	r6
 800811e:	1c43      	adds	r3, r0, #1
 8008120:	d100      	bne.n	8008124 <_printf_float+0x2ec>
 8008122:	e6e7      	b.n	8007ef4 <_printf_float+0xbc>
 8008124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008126:	3301      	adds	r3, #1
 8008128:	e7eb      	b.n	8008102 <_printf_float+0x2ca>
 800812a:	46c0      	nop			; (mov r8, r8)
 800812c:	7fefffff 	.word	0x7fefffff
 8008130:	0800ad7c 	.word	0x0800ad7c
 8008134:	0800ad80 	.word	0x0800ad80
 8008138:	0800ad84 	.word	0x0800ad84
 800813c:	0800ad88 	.word	0x0800ad88
 8008140:	0800ad8c 	.word	0x0800ad8c
 8008144:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008146:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008148:	920a      	str	r2, [sp, #40]	; 0x28
 800814a:	429a      	cmp	r2, r3
 800814c:	dd00      	ble.n	8008150 <_printf_float+0x318>
 800814e:	930a      	str	r3, [sp, #40]	; 0x28
 8008150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008152:	2b00      	cmp	r3, #0
 8008154:	dc3c      	bgt.n	80081d0 <_printf_float+0x398>
 8008156:	2300      	movs	r3, #0
 8008158:	930d      	str	r3, [sp, #52]	; 0x34
 800815a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800815c:	43db      	mvns	r3, r3
 800815e:	17db      	asrs	r3, r3, #31
 8008160:	930f      	str	r3, [sp, #60]	; 0x3c
 8008162:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008164:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008166:	930b      	str	r3, [sp, #44]	; 0x2c
 8008168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800816a:	4013      	ands	r3, r2
 800816c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008172:	4293      	cmp	r3, r2
 8008174:	dc34      	bgt.n	80081e0 <_printf_float+0x3a8>
 8008176:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008178:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800817a:	4293      	cmp	r3, r2
 800817c:	db3d      	blt.n	80081fa <_printf_float+0x3c2>
 800817e:	6823      	ldr	r3, [r4, #0]
 8008180:	07db      	lsls	r3, r3, #31
 8008182:	d43a      	bmi.n	80081fa <_printf_float+0x3c2>
 8008184:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008188:	9911      	ldr	r1, [sp, #68]	; 0x44
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	1a52      	subs	r2, r2, r1
 800818e:	920a      	str	r2, [sp, #40]	; 0x28
 8008190:	429a      	cmp	r2, r3
 8008192:	dd00      	ble.n	8008196 <_printf_float+0x35e>
 8008194:	930a      	str	r3, [sp, #40]	; 0x28
 8008196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008198:	2b00      	cmp	r3, #0
 800819a:	dc36      	bgt.n	800820a <_printf_float+0x3d2>
 800819c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800819e:	2500      	movs	r5, #0
 80081a0:	43db      	mvns	r3, r3
 80081a2:	17db      	asrs	r3, r3, #31
 80081a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80081a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80081a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081ac:	1a9b      	subs	r3, r3, r2
 80081ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081b0:	400a      	ands	r2, r1
 80081b2:	1a9b      	subs	r3, r3, r2
 80081b4:	42ab      	cmp	r3, r5
 80081b6:	dc00      	bgt.n	80081ba <_printf_float+0x382>
 80081b8:	e772      	b.n	80080a0 <_printf_float+0x268>
 80081ba:	0022      	movs	r2, r4
 80081bc:	2301      	movs	r3, #1
 80081be:	0038      	movs	r0, r7
 80081c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081c2:	321a      	adds	r2, #26
 80081c4:	47b0      	blx	r6
 80081c6:	1c43      	adds	r3, r0, #1
 80081c8:	d100      	bne.n	80081cc <_printf_float+0x394>
 80081ca:	e693      	b.n	8007ef4 <_printf_float+0xbc>
 80081cc:	3501      	adds	r5, #1
 80081ce:	e7ea      	b.n	80081a6 <_printf_float+0x36e>
 80081d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d2:	002a      	movs	r2, r5
 80081d4:	0038      	movs	r0, r7
 80081d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081d8:	47b0      	blx	r6
 80081da:	1c43      	adds	r3, r0, #1
 80081dc:	d1bb      	bne.n	8008156 <_printf_float+0x31e>
 80081de:	e689      	b.n	8007ef4 <_printf_float+0xbc>
 80081e0:	0022      	movs	r2, r4
 80081e2:	2301      	movs	r3, #1
 80081e4:	0038      	movs	r0, r7
 80081e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081e8:	321a      	adds	r2, #26
 80081ea:	47b0      	blx	r6
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d100      	bne.n	80081f2 <_printf_float+0x3ba>
 80081f0:	e680      	b.n	8007ef4 <_printf_float+0xbc>
 80081f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081f4:	3301      	adds	r3, #1
 80081f6:	930d      	str	r3, [sp, #52]	; 0x34
 80081f8:	e7b3      	b.n	8008162 <_printf_float+0x32a>
 80081fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081fc:	0038      	movs	r0, r7
 80081fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008200:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008202:	47b0      	blx	r6
 8008204:	1c43      	adds	r3, r0, #1
 8008206:	d1bd      	bne.n	8008184 <_printf_float+0x34c>
 8008208:	e674      	b.n	8007ef4 <_printf_float+0xbc>
 800820a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800820c:	0038      	movs	r0, r7
 800820e:	18ea      	adds	r2, r5, r3
 8008210:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008214:	47b0      	blx	r6
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	d1c0      	bne.n	800819c <_printf_float+0x364>
 800821a:	e66b      	b.n	8007ef4 <_printf_float+0xbc>
 800821c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800821e:	2b01      	cmp	r3, #1
 8008220:	dc02      	bgt.n	8008228 <_printf_float+0x3f0>
 8008222:	2301      	movs	r3, #1
 8008224:	421a      	tst	r2, r3
 8008226:	d034      	beq.n	8008292 <_printf_float+0x45a>
 8008228:	2301      	movs	r3, #1
 800822a:	002a      	movs	r2, r5
 800822c:	0038      	movs	r0, r7
 800822e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008230:	47b0      	blx	r6
 8008232:	1c43      	adds	r3, r0, #1
 8008234:	d100      	bne.n	8008238 <_printf_float+0x400>
 8008236:	e65d      	b.n	8007ef4 <_printf_float+0xbc>
 8008238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800823a:	0038      	movs	r0, r7
 800823c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800823e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008240:	47b0      	blx	r6
 8008242:	1c43      	adds	r3, r0, #1
 8008244:	d100      	bne.n	8008248 <_printf_float+0x410>
 8008246:	e655      	b.n	8007ef4 <_printf_float+0xbc>
 8008248:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800824a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800824c:	2200      	movs	r2, #0
 800824e:	2300      	movs	r3, #0
 8008250:	f7f8 f8fc 	bl	800044c <__aeabi_dcmpeq>
 8008254:	2800      	cmp	r0, #0
 8008256:	d11a      	bne.n	800828e <_printf_float+0x456>
 8008258:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800825a:	1c6a      	adds	r2, r5, #1
 800825c:	3b01      	subs	r3, #1
 800825e:	0038      	movs	r0, r7
 8008260:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008262:	47b0      	blx	r6
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	d10e      	bne.n	8008286 <_printf_float+0x44e>
 8008268:	e644      	b.n	8007ef4 <_printf_float+0xbc>
 800826a:	0022      	movs	r2, r4
 800826c:	2301      	movs	r3, #1
 800826e:	0038      	movs	r0, r7
 8008270:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008272:	321a      	adds	r2, #26
 8008274:	47b0      	blx	r6
 8008276:	1c43      	adds	r3, r0, #1
 8008278:	d100      	bne.n	800827c <_printf_float+0x444>
 800827a:	e63b      	b.n	8007ef4 <_printf_float+0xbc>
 800827c:	3501      	adds	r5, #1
 800827e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008280:	3b01      	subs	r3, #1
 8008282:	42ab      	cmp	r3, r5
 8008284:	dcf1      	bgt.n	800826a <_printf_float+0x432>
 8008286:	0022      	movs	r2, r4
 8008288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800828a:	3250      	adds	r2, #80	; 0x50
 800828c:	e6da      	b.n	8008044 <_printf_float+0x20c>
 800828e:	2500      	movs	r5, #0
 8008290:	e7f5      	b.n	800827e <_printf_float+0x446>
 8008292:	002a      	movs	r2, r5
 8008294:	e7e3      	b.n	800825e <_printf_float+0x426>
 8008296:	0022      	movs	r2, r4
 8008298:	2301      	movs	r3, #1
 800829a:	0038      	movs	r0, r7
 800829c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800829e:	3219      	adds	r2, #25
 80082a0:	47b0      	blx	r6
 80082a2:	1c43      	adds	r3, r0, #1
 80082a4:	d100      	bne.n	80082a8 <_printf_float+0x470>
 80082a6:	e625      	b.n	8007ef4 <_printf_float+0xbc>
 80082a8:	3501      	adds	r5, #1
 80082aa:	68e3      	ldr	r3, [r4, #12]
 80082ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80082ae:	1a9b      	subs	r3, r3, r2
 80082b0:	42ab      	cmp	r3, r5
 80082b2:	dcf0      	bgt.n	8008296 <_printf_float+0x45e>
 80082b4:	e6f8      	b.n	80080a8 <_printf_float+0x270>
 80082b6:	2500      	movs	r5, #0
 80082b8:	e7f7      	b.n	80082aa <_printf_float+0x472>
 80082ba:	46c0      	nop			; (mov r8, r8)

080082bc <_printf_common>:
 80082bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082be:	0015      	movs	r5, r2
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	688a      	ldr	r2, [r1, #8]
 80082c4:	690b      	ldr	r3, [r1, #16]
 80082c6:	000c      	movs	r4, r1
 80082c8:	9000      	str	r0, [sp, #0]
 80082ca:	4293      	cmp	r3, r2
 80082cc:	da00      	bge.n	80082d0 <_printf_common+0x14>
 80082ce:	0013      	movs	r3, r2
 80082d0:	0022      	movs	r2, r4
 80082d2:	602b      	str	r3, [r5, #0]
 80082d4:	3243      	adds	r2, #67	; 0x43
 80082d6:	7812      	ldrb	r2, [r2, #0]
 80082d8:	2a00      	cmp	r2, #0
 80082da:	d001      	beq.n	80082e0 <_printf_common+0x24>
 80082dc:	3301      	adds	r3, #1
 80082de:	602b      	str	r3, [r5, #0]
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	069b      	lsls	r3, r3, #26
 80082e4:	d502      	bpl.n	80082ec <_printf_common+0x30>
 80082e6:	682b      	ldr	r3, [r5, #0]
 80082e8:	3302      	adds	r3, #2
 80082ea:	602b      	str	r3, [r5, #0]
 80082ec:	6822      	ldr	r2, [r4, #0]
 80082ee:	2306      	movs	r3, #6
 80082f0:	0017      	movs	r7, r2
 80082f2:	401f      	ands	r7, r3
 80082f4:	421a      	tst	r2, r3
 80082f6:	d027      	beq.n	8008348 <_printf_common+0x8c>
 80082f8:	0023      	movs	r3, r4
 80082fa:	3343      	adds	r3, #67	; 0x43
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	1e5a      	subs	r2, r3, #1
 8008300:	4193      	sbcs	r3, r2
 8008302:	6822      	ldr	r2, [r4, #0]
 8008304:	0692      	lsls	r2, r2, #26
 8008306:	d430      	bmi.n	800836a <_printf_common+0xae>
 8008308:	0022      	movs	r2, r4
 800830a:	9901      	ldr	r1, [sp, #4]
 800830c:	9800      	ldr	r0, [sp, #0]
 800830e:	9e08      	ldr	r6, [sp, #32]
 8008310:	3243      	adds	r2, #67	; 0x43
 8008312:	47b0      	blx	r6
 8008314:	1c43      	adds	r3, r0, #1
 8008316:	d025      	beq.n	8008364 <_printf_common+0xa8>
 8008318:	2306      	movs	r3, #6
 800831a:	6820      	ldr	r0, [r4, #0]
 800831c:	682a      	ldr	r2, [r5, #0]
 800831e:	68e1      	ldr	r1, [r4, #12]
 8008320:	2500      	movs	r5, #0
 8008322:	4003      	ands	r3, r0
 8008324:	2b04      	cmp	r3, #4
 8008326:	d103      	bne.n	8008330 <_printf_common+0x74>
 8008328:	1a8d      	subs	r5, r1, r2
 800832a:	43eb      	mvns	r3, r5
 800832c:	17db      	asrs	r3, r3, #31
 800832e:	401d      	ands	r5, r3
 8008330:	68a3      	ldr	r3, [r4, #8]
 8008332:	6922      	ldr	r2, [r4, #16]
 8008334:	4293      	cmp	r3, r2
 8008336:	dd01      	ble.n	800833c <_printf_common+0x80>
 8008338:	1a9b      	subs	r3, r3, r2
 800833a:	18ed      	adds	r5, r5, r3
 800833c:	2700      	movs	r7, #0
 800833e:	42bd      	cmp	r5, r7
 8008340:	d120      	bne.n	8008384 <_printf_common+0xc8>
 8008342:	2000      	movs	r0, #0
 8008344:	e010      	b.n	8008368 <_printf_common+0xac>
 8008346:	3701      	adds	r7, #1
 8008348:	68e3      	ldr	r3, [r4, #12]
 800834a:	682a      	ldr	r2, [r5, #0]
 800834c:	1a9b      	subs	r3, r3, r2
 800834e:	42bb      	cmp	r3, r7
 8008350:	ddd2      	ble.n	80082f8 <_printf_common+0x3c>
 8008352:	0022      	movs	r2, r4
 8008354:	2301      	movs	r3, #1
 8008356:	9901      	ldr	r1, [sp, #4]
 8008358:	9800      	ldr	r0, [sp, #0]
 800835a:	9e08      	ldr	r6, [sp, #32]
 800835c:	3219      	adds	r2, #25
 800835e:	47b0      	blx	r6
 8008360:	1c43      	adds	r3, r0, #1
 8008362:	d1f0      	bne.n	8008346 <_printf_common+0x8a>
 8008364:	2001      	movs	r0, #1
 8008366:	4240      	negs	r0, r0
 8008368:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800836a:	2030      	movs	r0, #48	; 0x30
 800836c:	18e1      	adds	r1, r4, r3
 800836e:	3143      	adds	r1, #67	; 0x43
 8008370:	7008      	strb	r0, [r1, #0]
 8008372:	0021      	movs	r1, r4
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	3145      	adds	r1, #69	; 0x45
 8008378:	7809      	ldrb	r1, [r1, #0]
 800837a:	18a2      	adds	r2, r4, r2
 800837c:	3243      	adds	r2, #67	; 0x43
 800837e:	3302      	adds	r3, #2
 8008380:	7011      	strb	r1, [r2, #0]
 8008382:	e7c1      	b.n	8008308 <_printf_common+0x4c>
 8008384:	0022      	movs	r2, r4
 8008386:	2301      	movs	r3, #1
 8008388:	9901      	ldr	r1, [sp, #4]
 800838a:	9800      	ldr	r0, [sp, #0]
 800838c:	9e08      	ldr	r6, [sp, #32]
 800838e:	321a      	adds	r2, #26
 8008390:	47b0      	blx	r6
 8008392:	1c43      	adds	r3, r0, #1
 8008394:	d0e6      	beq.n	8008364 <_printf_common+0xa8>
 8008396:	3701      	adds	r7, #1
 8008398:	e7d1      	b.n	800833e <_printf_common+0x82>
	...

0800839c <_printf_i>:
 800839c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800839e:	b08b      	sub	sp, #44	; 0x2c
 80083a0:	9206      	str	r2, [sp, #24]
 80083a2:	000a      	movs	r2, r1
 80083a4:	3243      	adds	r2, #67	; 0x43
 80083a6:	9307      	str	r3, [sp, #28]
 80083a8:	9005      	str	r0, [sp, #20]
 80083aa:	9204      	str	r2, [sp, #16]
 80083ac:	7e0a      	ldrb	r2, [r1, #24]
 80083ae:	000c      	movs	r4, r1
 80083b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083b2:	2a78      	cmp	r2, #120	; 0x78
 80083b4:	d807      	bhi.n	80083c6 <_printf_i+0x2a>
 80083b6:	2a62      	cmp	r2, #98	; 0x62
 80083b8:	d809      	bhi.n	80083ce <_printf_i+0x32>
 80083ba:	2a00      	cmp	r2, #0
 80083bc:	d100      	bne.n	80083c0 <_printf_i+0x24>
 80083be:	e0c1      	b.n	8008544 <_printf_i+0x1a8>
 80083c0:	2a58      	cmp	r2, #88	; 0x58
 80083c2:	d100      	bne.n	80083c6 <_printf_i+0x2a>
 80083c4:	e08c      	b.n	80084e0 <_printf_i+0x144>
 80083c6:	0026      	movs	r6, r4
 80083c8:	3642      	adds	r6, #66	; 0x42
 80083ca:	7032      	strb	r2, [r6, #0]
 80083cc:	e022      	b.n	8008414 <_printf_i+0x78>
 80083ce:	0010      	movs	r0, r2
 80083d0:	3863      	subs	r0, #99	; 0x63
 80083d2:	2815      	cmp	r0, #21
 80083d4:	d8f7      	bhi.n	80083c6 <_printf_i+0x2a>
 80083d6:	f7f7 fea9 	bl	800012c <__gnu_thumb1_case_shi>
 80083da:	0016      	.short	0x0016
 80083dc:	fff6001f 	.word	0xfff6001f
 80083e0:	fff6fff6 	.word	0xfff6fff6
 80083e4:	001ffff6 	.word	0x001ffff6
 80083e8:	fff6fff6 	.word	0xfff6fff6
 80083ec:	fff6fff6 	.word	0xfff6fff6
 80083f0:	003600a8 	.word	0x003600a8
 80083f4:	fff6009a 	.word	0xfff6009a
 80083f8:	00b9fff6 	.word	0x00b9fff6
 80083fc:	0036fff6 	.word	0x0036fff6
 8008400:	fff6fff6 	.word	0xfff6fff6
 8008404:	009e      	.short	0x009e
 8008406:	0026      	movs	r6, r4
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	3642      	adds	r6, #66	; 0x42
 800840c:	1d11      	adds	r1, r2, #4
 800840e:	6019      	str	r1, [r3, #0]
 8008410:	6813      	ldr	r3, [r2, #0]
 8008412:	7033      	strb	r3, [r6, #0]
 8008414:	2301      	movs	r3, #1
 8008416:	e0a7      	b.n	8008568 <_printf_i+0x1cc>
 8008418:	6808      	ldr	r0, [r1, #0]
 800841a:	6819      	ldr	r1, [r3, #0]
 800841c:	1d0a      	adds	r2, r1, #4
 800841e:	0605      	lsls	r5, r0, #24
 8008420:	d50b      	bpl.n	800843a <_printf_i+0x9e>
 8008422:	680d      	ldr	r5, [r1, #0]
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	2d00      	cmp	r5, #0
 8008428:	da03      	bge.n	8008432 <_printf_i+0x96>
 800842a:	232d      	movs	r3, #45	; 0x2d
 800842c:	9a04      	ldr	r2, [sp, #16]
 800842e:	426d      	negs	r5, r5
 8008430:	7013      	strb	r3, [r2, #0]
 8008432:	4b61      	ldr	r3, [pc, #388]	; (80085b8 <_printf_i+0x21c>)
 8008434:	270a      	movs	r7, #10
 8008436:	9303      	str	r3, [sp, #12]
 8008438:	e01b      	b.n	8008472 <_printf_i+0xd6>
 800843a:	680d      	ldr	r5, [r1, #0]
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	0641      	lsls	r1, r0, #25
 8008440:	d5f1      	bpl.n	8008426 <_printf_i+0x8a>
 8008442:	b22d      	sxth	r5, r5
 8008444:	e7ef      	b.n	8008426 <_printf_i+0x8a>
 8008446:	680d      	ldr	r5, [r1, #0]
 8008448:	6819      	ldr	r1, [r3, #0]
 800844a:	1d08      	adds	r0, r1, #4
 800844c:	6018      	str	r0, [r3, #0]
 800844e:	062e      	lsls	r6, r5, #24
 8008450:	d501      	bpl.n	8008456 <_printf_i+0xba>
 8008452:	680d      	ldr	r5, [r1, #0]
 8008454:	e003      	b.n	800845e <_printf_i+0xc2>
 8008456:	066d      	lsls	r5, r5, #25
 8008458:	d5fb      	bpl.n	8008452 <_printf_i+0xb6>
 800845a:	680d      	ldr	r5, [r1, #0]
 800845c:	b2ad      	uxth	r5, r5
 800845e:	4b56      	ldr	r3, [pc, #344]	; (80085b8 <_printf_i+0x21c>)
 8008460:	2708      	movs	r7, #8
 8008462:	9303      	str	r3, [sp, #12]
 8008464:	2a6f      	cmp	r2, #111	; 0x6f
 8008466:	d000      	beq.n	800846a <_printf_i+0xce>
 8008468:	3702      	adds	r7, #2
 800846a:	0023      	movs	r3, r4
 800846c:	2200      	movs	r2, #0
 800846e:	3343      	adds	r3, #67	; 0x43
 8008470:	701a      	strb	r2, [r3, #0]
 8008472:	6863      	ldr	r3, [r4, #4]
 8008474:	60a3      	str	r3, [r4, #8]
 8008476:	2b00      	cmp	r3, #0
 8008478:	db03      	blt.n	8008482 <_printf_i+0xe6>
 800847a:	2204      	movs	r2, #4
 800847c:	6821      	ldr	r1, [r4, #0]
 800847e:	4391      	bics	r1, r2
 8008480:	6021      	str	r1, [r4, #0]
 8008482:	2d00      	cmp	r5, #0
 8008484:	d102      	bne.n	800848c <_printf_i+0xf0>
 8008486:	9e04      	ldr	r6, [sp, #16]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00c      	beq.n	80084a6 <_printf_i+0x10a>
 800848c:	9e04      	ldr	r6, [sp, #16]
 800848e:	0028      	movs	r0, r5
 8008490:	0039      	movs	r1, r7
 8008492:	f7f7 fedb 	bl	800024c <__aeabi_uidivmod>
 8008496:	9b03      	ldr	r3, [sp, #12]
 8008498:	3e01      	subs	r6, #1
 800849a:	5c5b      	ldrb	r3, [r3, r1]
 800849c:	7033      	strb	r3, [r6, #0]
 800849e:	002b      	movs	r3, r5
 80084a0:	0005      	movs	r5, r0
 80084a2:	429f      	cmp	r7, r3
 80084a4:	d9f3      	bls.n	800848e <_printf_i+0xf2>
 80084a6:	2f08      	cmp	r7, #8
 80084a8:	d109      	bne.n	80084be <_printf_i+0x122>
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	07db      	lsls	r3, r3, #31
 80084ae:	d506      	bpl.n	80084be <_printf_i+0x122>
 80084b0:	6863      	ldr	r3, [r4, #4]
 80084b2:	6922      	ldr	r2, [r4, #16]
 80084b4:	4293      	cmp	r3, r2
 80084b6:	dc02      	bgt.n	80084be <_printf_i+0x122>
 80084b8:	2330      	movs	r3, #48	; 0x30
 80084ba:	3e01      	subs	r6, #1
 80084bc:	7033      	strb	r3, [r6, #0]
 80084be:	9b04      	ldr	r3, [sp, #16]
 80084c0:	1b9b      	subs	r3, r3, r6
 80084c2:	6123      	str	r3, [r4, #16]
 80084c4:	9b07      	ldr	r3, [sp, #28]
 80084c6:	0021      	movs	r1, r4
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	9805      	ldr	r0, [sp, #20]
 80084cc:	9b06      	ldr	r3, [sp, #24]
 80084ce:	aa09      	add	r2, sp, #36	; 0x24
 80084d0:	f7ff fef4 	bl	80082bc <_printf_common>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d14c      	bne.n	8008572 <_printf_i+0x1d6>
 80084d8:	2001      	movs	r0, #1
 80084da:	4240      	negs	r0, r0
 80084dc:	b00b      	add	sp, #44	; 0x2c
 80084de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084e0:	3145      	adds	r1, #69	; 0x45
 80084e2:	700a      	strb	r2, [r1, #0]
 80084e4:	4a34      	ldr	r2, [pc, #208]	; (80085b8 <_printf_i+0x21c>)
 80084e6:	9203      	str	r2, [sp, #12]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	6821      	ldr	r1, [r4, #0]
 80084ec:	ca20      	ldmia	r2!, {r5}
 80084ee:	601a      	str	r2, [r3, #0]
 80084f0:	0608      	lsls	r0, r1, #24
 80084f2:	d516      	bpl.n	8008522 <_printf_i+0x186>
 80084f4:	07cb      	lsls	r3, r1, #31
 80084f6:	d502      	bpl.n	80084fe <_printf_i+0x162>
 80084f8:	2320      	movs	r3, #32
 80084fa:	4319      	orrs	r1, r3
 80084fc:	6021      	str	r1, [r4, #0]
 80084fe:	2710      	movs	r7, #16
 8008500:	2d00      	cmp	r5, #0
 8008502:	d1b2      	bne.n	800846a <_printf_i+0xce>
 8008504:	2320      	movs	r3, #32
 8008506:	6822      	ldr	r2, [r4, #0]
 8008508:	439a      	bics	r2, r3
 800850a:	6022      	str	r2, [r4, #0]
 800850c:	e7ad      	b.n	800846a <_printf_i+0xce>
 800850e:	2220      	movs	r2, #32
 8008510:	6809      	ldr	r1, [r1, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	6022      	str	r2, [r4, #0]
 8008516:	0022      	movs	r2, r4
 8008518:	2178      	movs	r1, #120	; 0x78
 800851a:	3245      	adds	r2, #69	; 0x45
 800851c:	7011      	strb	r1, [r2, #0]
 800851e:	4a27      	ldr	r2, [pc, #156]	; (80085bc <_printf_i+0x220>)
 8008520:	e7e1      	b.n	80084e6 <_printf_i+0x14a>
 8008522:	0648      	lsls	r0, r1, #25
 8008524:	d5e6      	bpl.n	80084f4 <_printf_i+0x158>
 8008526:	b2ad      	uxth	r5, r5
 8008528:	e7e4      	b.n	80084f4 <_printf_i+0x158>
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	680d      	ldr	r5, [r1, #0]
 800852e:	1d10      	adds	r0, r2, #4
 8008530:	6949      	ldr	r1, [r1, #20]
 8008532:	6018      	str	r0, [r3, #0]
 8008534:	6813      	ldr	r3, [r2, #0]
 8008536:	062e      	lsls	r6, r5, #24
 8008538:	d501      	bpl.n	800853e <_printf_i+0x1a2>
 800853a:	6019      	str	r1, [r3, #0]
 800853c:	e002      	b.n	8008544 <_printf_i+0x1a8>
 800853e:	066d      	lsls	r5, r5, #25
 8008540:	d5fb      	bpl.n	800853a <_printf_i+0x19e>
 8008542:	8019      	strh	r1, [r3, #0]
 8008544:	2300      	movs	r3, #0
 8008546:	9e04      	ldr	r6, [sp, #16]
 8008548:	6123      	str	r3, [r4, #16]
 800854a:	e7bb      	b.n	80084c4 <_printf_i+0x128>
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	1d11      	adds	r1, r2, #4
 8008550:	6019      	str	r1, [r3, #0]
 8008552:	6816      	ldr	r6, [r2, #0]
 8008554:	2100      	movs	r1, #0
 8008556:	0030      	movs	r0, r6
 8008558:	6862      	ldr	r2, [r4, #4]
 800855a:	f000 ff19 	bl	8009390 <memchr>
 800855e:	2800      	cmp	r0, #0
 8008560:	d001      	beq.n	8008566 <_printf_i+0x1ca>
 8008562:	1b80      	subs	r0, r0, r6
 8008564:	6060      	str	r0, [r4, #4]
 8008566:	6863      	ldr	r3, [r4, #4]
 8008568:	6123      	str	r3, [r4, #16]
 800856a:	2300      	movs	r3, #0
 800856c:	9a04      	ldr	r2, [sp, #16]
 800856e:	7013      	strb	r3, [r2, #0]
 8008570:	e7a8      	b.n	80084c4 <_printf_i+0x128>
 8008572:	6923      	ldr	r3, [r4, #16]
 8008574:	0032      	movs	r2, r6
 8008576:	9906      	ldr	r1, [sp, #24]
 8008578:	9805      	ldr	r0, [sp, #20]
 800857a:	9d07      	ldr	r5, [sp, #28]
 800857c:	47a8      	blx	r5
 800857e:	1c43      	adds	r3, r0, #1
 8008580:	d0aa      	beq.n	80084d8 <_printf_i+0x13c>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	079b      	lsls	r3, r3, #30
 8008586:	d415      	bmi.n	80085b4 <_printf_i+0x218>
 8008588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858a:	68e0      	ldr	r0, [r4, #12]
 800858c:	4298      	cmp	r0, r3
 800858e:	daa5      	bge.n	80084dc <_printf_i+0x140>
 8008590:	0018      	movs	r0, r3
 8008592:	e7a3      	b.n	80084dc <_printf_i+0x140>
 8008594:	0022      	movs	r2, r4
 8008596:	2301      	movs	r3, #1
 8008598:	9906      	ldr	r1, [sp, #24]
 800859a:	9805      	ldr	r0, [sp, #20]
 800859c:	9e07      	ldr	r6, [sp, #28]
 800859e:	3219      	adds	r2, #25
 80085a0:	47b0      	blx	r6
 80085a2:	1c43      	adds	r3, r0, #1
 80085a4:	d098      	beq.n	80084d8 <_printf_i+0x13c>
 80085a6:	3501      	adds	r5, #1
 80085a8:	68e3      	ldr	r3, [r4, #12]
 80085aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085ac:	1a9b      	subs	r3, r3, r2
 80085ae:	42ab      	cmp	r3, r5
 80085b0:	dcf0      	bgt.n	8008594 <_printf_i+0x1f8>
 80085b2:	e7e9      	b.n	8008588 <_printf_i+0x1ec>
 80085b4:	2500      	movs	r5, #0
 80085b6:	e7f7      	b.n	80085a8 <_printf_i+0x20c>
 80085b8:	0800ad8e 	.word	0x0800ad8e
 80085bc:	0800ad9f 	.word	0x0800ad9f

080085c0 <siprintf>:
 80085c0:	b40e      	push	{r1, r2, r3}
 80085c2:	b500      	push	{lr}
 80085c4:	490b      	ldr	r1, [pc, #44]	; (80085f4 <siprintf+0x34>)
 80085c6:	b09c      	sub	sp, #112	; 0x70
 80085c8:	ab1d      	add	r3, sp, #116	; 0x74
 80085ca:	9002      	str	r0, [sp, #8]
 80085cc:	9006      	str	r0, [sp, #24]
 80085ce:	9107      	str	r1, [sp, #28]
 80085d0:	9104      	str	r1, [sp, #16]
 80085d2:	4809      	ldr	r0, [pc, #36]	; (80085f8 <siprintf+0x38>)
 80085d4:	4909      	ldr	r1, [pc, #36]	; (80085fc <siprintf+0x3c>)
 80085d6:	cb04      	ldmia	r3!, {r2}
 80085d8:	9105      	str	r1, [sp, #20]
 80085da:	6800      	ldr	r0, [r0, #0]
 80085dc:	a902      	add	r1, sp, #8
 80085de:	9301      	str	r3, [sp, #4]
 80085e0:	f001 fbee 	bl	8009dc0 <_svfiprintf_r>
 80085e4:	2300      	movs	r3, #0
 80085e6:	9a02      	ldr	r2, [sp, #8]
 80085e8:	7013      	strb	r3, [r2, #0]
 80085ea:	b01c      	add	sp, #112	; 0x70
 80085ec:	bc08      	pop	{r3}
 80085ee:	b003      	add	sp, #12
 80085f0:	4718      	bx	r3
 80085f2:	46c0      	nop			; (mov r8, r8)
 80085f4:	7fffffff 	.word	0x7fffffff
 80085f8:	2000000c 	.word	0x2000000c
 80085fc:	ffff0208 	.word	0xffff0208

08008600 <strncat>:
 8008600:	0003      	movs	r3, r0
 8008602:	b510      	push	{r4, lr}
 8008604:	781c      	ldrb	r4, [r3, #0]
 8008606:	2c00      	cmp	r4, #0
 8008608:	d107      	bne.n	800861a <strncat+0x1a>
 800860a:	3a01      	subs	r2, #1
 800860c:	1c54      	adds	r4, r2, #1
 800860e:	d003      	beq.n	8008618 <strncat+0x18>
 8008610:	780c      	ldrb	r4, [r1, #0]
 8008612:	701c      	strb	r4, [r3, #0]
 8008614:	2c00      	cmp	r4, #0
 8008616:	d102      	bne.n	800861e <strncat+0x1e>
 8008618:	bd10      	pop	{r4, pc}
 800861a:	3301      	adds	r3, #1
 800861c:	e7f2      	b.n	8008604 <strncat+0x4>
 800861e:	2a00      	cmp	r2, #0
 8008620:	d100      	bne.n	8008624 <strncat+0x24>
 8008622:	705a      	strb	r2, [r3, #1]
 8008624:	3301      	adds	r3, #1
 8008626:	3101      	adds	r1, #1
 8008628:	e7ef      	b.n	800860a <strncat+0xa>

0800862a <quorem>:
 800862a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800862c:	0006      	movs	r6, r0
 800862e:	690b      	ldr	r3, [r1, #16]
 8008630:	6932      	ldr	r2, [r6, #16]
 8008632:	b087      	sub	sp, #28
 8008634:	2000      	movs	r0, #0
 8008636:	9103      	str	r1, [sp, #12]
 8008638:	429a      	cmp	r2, r3
 800863a:	db65      	blt.n	8008708 <quorem+0xde>
 800863c:	3b01      	subs	r3, #1
 800863e:	009c      	lsls	r4, r3, #2
 8008640:	9300      	str	r3, [sp, #0]
 8008642:	000b      	movs	r3, r1
 8008644:	3314      	adds	r3, #20
 8008646:	9305      	str	r3, [sp, #20]
 8008648:	191b      	adds	r3, r3, r4
 800864a:	9304      	str	r3, [sp, #16]
 800864c:	0033      	movs	r3, r6
 800864e:	3314      	adds	r3, #20
 8008650:	9302      	str	r3, [sp, #8]
 8008652:	191c      	adds	r4, r3, r4
 8008654:	9b04      	ldr	r3, [sp, #16]
 8008656:	6827      	ldr	r7, [r4, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	0038      	movs	r0, r7
 800865c:	1c5d      	adds	r5, r3, #1
 800865e:	0029      	movs	r1, r5
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	f7f7 fd6d 	bl	8000140 <__udivsi3>
 8008666:	9001      	str	r0, [sp, #4]
 8008668:	42af      	cmp	r7, r5
 800866a:	d324      	bcc.n	80086b6 <quorem+0x8c>
 800866c:	2500      	movs	r5, #0
 800866e:	46ac      	mov	ip, r5
 8008670:	9802      	ldr	r0, [sp, #8]
 8008672:	9f05      	ldr	r7, [sp, #20]
 8008674:	cf08      	ldmia	r7!, {r3}
 8008676:	9a01      	ldr	r2, [sp, #4]
 8008678:	b299      	uxth	r1, r3
 800867a:	4351      	muls	r1, r2
 800867c:	0c1b      	lsrs	r3, r3, #16
 800867e:	4353      	muls	r3, r2
 8008680:	1949      	adds	r1, r1, r5
 8008682:	0c0a      	lsrs	r2, r1, #16
 8008684:	189b      	adds	r3, r3, r2
 8008686:	6802      	ldr	r2, [r0, #0]
 8008688:	b289      	uxth	r1, r1
 800868a:	b292      	uxth	r2, r2
 800868c:	4462      	add	r2, ip
 800868e:	1a52      	subs	r2, r2, r1
 8008690:	6801      	ldr	r1, [r0, #0]
 8008692:	0c1d      	lsrs	r5, r3, #16
 8008694:	0c09      	lsrs	r1, r1, #16
 8008696:	b29b      	uxth	r3, r3
 8008698:	1acb      	subs	r3, r1, r3
 800869a:	1411      	asrs	r1, r2, #16
 800869c:	185b      	adds	r3, r3, r1
 800869e:	1419      	asrs	r1, r3, #16
 80086a0:	b292      	uxth	r2, r2
 80086a2:	041b      	lsls	r3, r3, #16
 80086a4:	431a      	orrs	r2, r3
 80086a6:	9b04      	ldr	r3, [sp, #16]
 80086a8:	468c      	mov	ip, r1
 80086aa:	c004      	stmia	r0!, {r2}
 80086ac:	42bb      	cmp	r3, r7
 80086ae:	d2e1      	bcs.n	8008674 <quorem+0x4a>
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d030      	beq.n	8008718 <quorem+0xee>
 80086b6:	0030      	movs	r0, r6
 80086b8:	9903      	ldr	r1, [sp, #12]
 80086ba:	f001 f8f9 	bl	80098b0 <__mcmp>
 80086be:	2800      	cmp	r0, #0
 80086c0:	db21      	blt.n	8008706 <quorem+0xdc>
 80086c2:	0030      	movs	r0, r6
 80086c4:	2400      	movs	r4, #0
 80086c6:	9b01      	ldr	r3, [sp, #4]
 80086c8:	9903      	ldr	r1, [sp, #12]
 80086ca:	3301      	adds	r3, #1
 80086cc:	9301      	str	r3, [sp, #4]
 80086ce:	3014      	adds	r0, #20
 80086d0:	3114      	adds	r1, #20
 80086d2:	6803      	ldr	r3, [r0, #0]
 80086d4:	c920      	ldmia	r1!, {r5}
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	1914      	adds	r4, r2, r4
 80086da:	b2aa      	uxth	r2, r5
 80086dc:	1aa2      	subs	r2, r4, r2
 80086de:	0c1b      	lsrs	r3, r3, #16
 80086e0:	0c2d      	lsrs	r5, r5, #16
 80086e2:	1414      	asrs	r4, r2, #16
 80086e4:	1b5b      	subs	r3, r3, r5
 80086e6:	191b      	adds	r3, r3, r4
 80086e8:	141c      	asrs	r4, r3, #16
 80086ea:	b292      	uxth	r2, r2
 80086ec:	041b      	lsls	r3, r3, #16
 80086ee:	4313      	orrs	r3, r2
 80086f0:	c008      	stmia	r0!, {r3}
 80086f2:	9b04      	ldr	r3, [sp, #16]
 80086f4:	428b      	cmp	r3, r1
 80086f6:	d2ec      	bcs.n	80086d2 <quorem+0xa8>
 80086f8:	9b00      	ldr	r3, [sp, #0]
 80086fa:	9a02      	ldr	r2, [sp, #8]
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	18d3      	adds	r3, r2, r3
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	2a00      	cmp	r2, #0
 8008704:	d015      	beq.n	8008732 <quorem+0x108>
 8008706:	9801      	ldr	r0, [sp, #4]
 8008708:	b007      	add	sp, #28
 800870a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d106      	bne.n	8008720 <quorem+0xf6>
 8008712:	9b00      	ldr	r3, [sp, #0]
 8008714:	3b01      	subs	r3, #1
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	9b02      	ldr	r3, [sp, #8]
 800871a:	3c04      	subs	r4, #4
 800871c:	42a3      	cmp	r3, r4
 800871e:	d3f5      	bcc.n	800870c <quorem+0xe2>
 8008720:	9b00      	ldr	r3, [sp, #0]
 8008722:	6133      	str	r3, [r6, #16]
 8008724:	e7c7      	b.n	80086b6 <quorem+0x8c>
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	2a00      	cmp	r2, #0
 800872a:	d106      	bne.n	800873a <quorem+0x110>
 800872c:	9a00      	ldr	r2, [sp, #0]
 800872e:	3a01      	subs	r2, #1
 8008730:	9200      	str	r2, [sp, #0]
 8008732:	9a02      	ldr	r2, [sp, #8]
 8008734:	3b04      	subs	r3, #4
 8008736:	429a      	cmp	r2, r3
 8008738:	d3f5      	bcc.n	8008726 <quorem+0xfc>
 800873a:	9b00      	ldr	r3, [sp, #0]
 800873c:	6133      	str	r3, [r6, #16]
 800873e:	e7e2      	b.n	8008706 <quorem+0xdc>

08008740 <_dtoa_r>:
 8008740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008742:	b09d      	sub	sp, #116	; 0x74
 8008744:	9202      	str	r2, [sp, #8]
 8008746:	9303      	str	r3, [sp, #12]
 8008748:	9b02      	ldr	r3, [sp, #8]
 800874a:	9c03      	ldr	r4, [sp, #12]
 800874c:	9308      	str	r3, [sp, #32]
 800874e:	9409      	str	r4, [sp, #36]	; 0x24
 8008750:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008752:	0007      	movs	r7, r0
 8008754:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008756:	2c00      	cmp	r4, #0
 8008758:	d10e      	bne.n	8008778 <_dtoa_r+0x38>
 800875a:	2010      	movs	r0, #16
 800875c:	f000 fe0e 	bl	800937c <malloc>
 8008760:	1e02      	subs	r2, r0, #0
 8008762:	6278      	str	r0, [r7, #36]	; 0x24
 8008764:	d104      	bne.n	8008770 <_dtoa_r+0x30>
 8008766:	21ea      	movs	r1, #234	; 0xea
 8008768:	4bc7      	ldr	r3, [pc, #796]	; (8008a88 <_dtoa_r+0x348>)
 800876a:	48c8      	ldr	r0, [pc, #800]	; (8008a8c <_dtoa_r+0x34c>)
 800876c:	f001 fc3a 	bl	8009fe4 <__assert_func>
 8008770:	6044      	str	r4, [r0, #4]
 8008772:	6084      	str	r4, [r0, #8]
 8008774:	6004      	str	r4, [r0, #0]
 8008776:	60c4      	str	r4, [r0, #12]
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	6819      	ldr	r1, [r3, #0]
 800877c:	2900      	cmp	r1, #0
 800877e:	d00a      	beq.n	8008796 <_dtoa_r+0x56>
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	2301      	movs	r3, #1
 8008784:	4093      	lsls	r3, r2
 8008786:	604a      	str	r2, [r1, #4]
 8008788:	608b      	str	r3, [r1, #8]
 800878a:	0038      	movs	r0, r7
 800878c:	f000 fe50 	bl	8009430 <_Bfree>
 8008790:	2200      	movs	r2, #0
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	601a      	str	r2, [r3, #0]
 8008796:	9b03      	ldr	r3, [sp, #12]
 8008798:	2b00      	cmp	r3, #0
 800879a:	da20      	bge.n	80087de <_dtoa_r+0x9e>
 800879c:	2301      	movs	r3, #1
 800879e:	602b      	str	r3, [r5, #0]
 80087a0:	9b03      	ldr	r3, [sp, #12]
 80087a2:	005b      	lsls	r3, r3, #1
 80087a4:	085b      	lsrs	r3, r3, #1
 80087a6:	9309      	str	r3, [sp, #36]	; 0x24
 80087a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80087aa:	4bb9      	ldr	r3, [pc, #740]	; (8008a90 <_dtoa_r+0x350>)
 80087ac:	4ab8      	ldr	r2, [pc, #736]	; (8008a90 <_dtoa_r+0x350>)
 80087ae:	402b      	ands	r3, r5
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d117      	bne.n	80087e4 <_dtoa_r+0xa4>
 80087b4:	4bb7      	ldr	r3, [pc, #732]	; (8008a94 <_dtoa_r+0x354>)
 80087b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80087b8:	0328      	lsls	r0, r5, #12
 80087ba:	6013      	str	r3, [r2, #0]
 80087bc:	9b02      	ldr	r3, [sp, #8]
 80087be:	0b00      	lsrs	r0, r0, #12
 80087c0:	4318      	orrs	r0, r3
 80087c2:	d101      	bne.n	80087c8 <_dtoa_r+0x88>
 80087c4:	f000 fdbf 	bl	8009346 <_dtoa_r+0xc06>
 80087c8:	48b3      	ldr	r0, [pc, #716]	; (8008a98 <_dtoa_r+0x358>)
 80087ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80087cc:	9006      	str	r0, [sp, #24]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <_dtoa_r+0x98>
 80087d2:	4bb2      	ldr	r3, [pc, #712]	; (8008a9c <_dtoa_r+0x35c>)
 80087d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80087d6:	6013      	str	r3, [r2, #0]
 80087d8:	9806      	ldr	r0, [sp, #24]
 80087da:	b01d      	add	sp, #116	; 0x74
 80087dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087de:	2300      	movs	r3, #0
 80087e0:	602b      	str	r3, [r5, #0]
 80087e2:	e7e1      	b.n	80087a8 <_dtoa_r+0x68>
 80087e4:	9b08      	ldr	r3, [sp, #32]
 80087e6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80087e8:	9312      	str	r3, [sp, #72]	; 0x48
 80087ea:	9413      	str	r4, [sp, #76]	; 0x4c
 80087ec:	9812      	ldr	r0, [sp, #72]	; 0x48
 80087ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80087f0:	2200      	movs	r2, #0
 80087f2:	2300      	movs	r3, #0
 80087f4:	f7f7 fe2a 	bl	800044c <__aeabi_dcmpeq>
 80087f8:	1e04      	subs	r4, r0, #0
 80087fa:	d009      	beq.n	8008810 <_dtoa_r+0xd0>
 80087fc:	2301      	movs	r3, #1
 80087fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	4ba7      	ldr	r3, [pc, #668]	; (8008aa0 <_dtoa_r+0x360>)
 8008804:	9306      	str	r3, [sp, #24]
 8008806:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008808:	2b00      	cmp	r3, #0
 800880a:	d0e5      	beq.n	80087d8 <_dtoa_r+0x98>
 800880c:	4ba5      	ldr	r3, [pc, #660]	; (8008aa4 <_dtoa_r+0x364>)
 800880e:	e7e1      	b.n	80087d4 <_dtoa_r+0x94>
 8008810:	ab1a      	add	r3, sp, #104	; 0x68
 8008812:	9301      	str	r3, [sp, #4]
 8008814:	ab1b      	add	r3, sp, #108	; 0x6c
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	0038      	movs	r0, r7
 800881a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800881c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800881e:	f001 f8fb 	bl	8009a18 <__d2b>
 8008822:	006e      	lsls	r6, r5, #1
 8008824:	9005      	str	r0, [sp, #20]
 8008826:	0d76      	lsrs	r6, r6, #21
 8008828:	d100      	bne.n	800882c <_dtoa_r+0xec>
 800882a:	e07c      	b.n	8008926 <_dtoa_r+0x1e6>
 800882c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800882e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008830:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008832:	4a9d      	ldr	r2, [pc, #628]	; (8008aa8 <_dtoa_r+0x368>)
 8008834:	031b      	lsls	r3, r3, #12
 8008836:	0b1b      	lsrs	r3, r3, #12
 8008838:	431a      	orrs	r2, r3
 800883a:	0011      	movs	r1, r2
 800883c:	4b9b      	ldr	r3, [pc, #620]	; (8008aac <_dtoa_r+0x36c>)
 800883e:	9418      	str	r4, [sp, #96]	; 0x60
 8008840:	18f6      	adds	r6, r6, r3
 8008842:	2200      	movs	r2, #0
 8008844:	4b9a      	ldr	r3, [pc, #616]	; (8008ab0 <_dtoa_r+0x370>)
 8008846:	f7f9 f8f3 	bl	8001a30 <__aeabi_dsub>
 800884a:	4a9a      	ldr	r2, [pc, #616]	; (8008ab4 <_dtoa_r+0x374>)
 800884c:	4b9a      	ldr	r3, [pc, #616]	; (8008ab8 <_dtoa_r+0x378>)
 800884e:	f7f8 fe83 	bl	8001558 <__aeabi_dmul>
 8008852:	4a9a      	ldr	r2, [pc, #616]	; (8008abc <_dtoa_r+0x37c>)
 8008854:	4b9a      	ldr	r3, [pc, #616]	; (8008ac0 <_dtoa_r+0x380>)
 8008856:	f7f7 ff41 	bl	80006dc <__aeabi_dadd>
 800885a:	0004      	movs	r4, r0
 800885c:	0030      	movs	r0, r6
 800885e:	000d      	movs	r5, r1
 8008860:	f7f9 fccc 	bl	80021fc <__aeabi_i2d>
 8008864:	4a97      	ldr	r2, [pc, #604]	; (8008ac4 <_dtoa_r+0x384>)
 8008866:	4b98      	ldr	r3, [pc, #608]	; (8008ac8 <_dtoa_r+0x388>)
 8008868:	f7f8 fe76 	bl	8001558 <__aeabi_dmul>
 800886c:	0002      	movs	r2, r0
 800886e:	000b      	movs	r3, r1
 8008870:	0020      	movs	r0, r4
 8008872:	0029      	movs	r1, r5
 8008874:	f7f7 ff32 	bl	80006dc <__aeabi_dadd>
 8008878:	0004      	movs	r4, r0
 800887a:	000d      	movs	r5, r1
 800887c:	f7f9 fc88 	bl	8002190 <__aeabi_d2iz>
 8008880:	2200      	movs	r2, #0
 8008882:	9002      	str	r0, [sp, #8]
 8008884:	2300      	movs	r3, #0
 8008886:	0020      	movs	r0, r4
 8008888:	0029      	movs	r1, r5
 800888a:	f7f7 fde5 	bl	8000458 <__aeabi_dcmplt>
 800888e:	2800      	cmp	r0, #0
 8008890:	d00b      	beq.n	80088aa <_dtoa_r+0x16a>
 8008892:	9802      	ldr	r0, [sp, #8]
 8008894:	f7f9 fcb2 	bl	80021fc <__aeabi_i2d>
 8008898:	002b      	movs	r3, r5
 800889a:	0022      	movs	r2, r4
 800889c:	f7f7 fdd6 	bl	800044c <__aeabi_dcmpeq>
 80088a0:	4243      	negs	r3, r0
 80088a2:	4158      	adcs	r0, r3
 80088a4:	9b02      	ldr	r3, [sp, #8]
 80088a6:	1a1b      	subs	r3, r3, r0
 80088a8:	9302      	str	r3, [sp, #8]
 80088aa:	2301      	movs	r3, #1
 80088ac:	9316      	str	r3, [sp, #88]	; 0x58
 80088ae:	9b02      	ldr	r3, [sp, #8]
 80088b0:	2b16      	cmp	r3, #22
 80088b2:	d80f      	bhi.n	80088d4 <_dtoa_r+0x194>
 80088b4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80088b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80088b8:	00da      	lsls	r2, r3, #3
 80088ba:	4b84      	ldr	r3, [pc, #528]	; (8008acc <_dtoa_r+0x38c>)
 80088bc:	189b      	adds	r3, r3, r2
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f7f7 fdc9 	bl	8000458 <__aeabi_dcmplt>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d049      	beq.n	800895e <_dtoa_r+0x21e>
 80088ca:	9b02      	ldr	r3, [sp, #8]
 80088cc:	3b01      	subs	r3, #1
 80088ce:	9302      	str	r3, [sp, #8]
 80088d0:	2300      	movs	r3, #0
 80088d2:	9316      	str	r3, [sp, #88]	; 0x58
 80088d4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80088d6:	1b9e      	subs	r6, r3, r6
 80088d8:	2300      	movs	r3, #0
 80088da:	930a      	str	r3, [sp, #40]	; 0x28
 80088dc:	0033      	movs	r3, r6
 80088de:	3b01      	subs	r3, #1
 80088e0:	930d      	str	r3, [sp, #52]	; 0x34
 80088e2:	d504      	bpl.n	80088ee <_dtoa_r+0x1ae>
 80088e4:	2301      	movs	r3, #1
 80088e6:	1b9b      	subs	r3, r3, r6
 80088e8:	930a      	str	r3, [sp, #40]	; 0x28
 80088ea:	2300      	movs	r3, #0
 80088ec:	930d      	str	r3, [sp, #52]	; 0x34
 80088ee:	9b02      	ldr	r3, [sp, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	db36      	blt.n	8008962 <_dtoa_r+0x222>
 80088f4:	9a02      	ldr	r2, [sp, #8]
 80088f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088f8:	4694      	mov	ip, r2
 80088fa:	4463      	add	r3, ip
 80088fc:	930d      	str	r3, [sp, #52]	; 0x34
 80088fe:	2300      	movs	r3, #0
 8008900:	9215      	str	r2, [sp, #84]	; 0x54
 8008902:	930e      	str	r3, [sp, #56]	; 0x38
 8008904:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008906:	2401      	movs	r4, #1
 8008908:	2b09      	cmp	r3, #9
 800890a:	d864      	bhi.n	80089d6 <_dtoa_r+0x296>
 800890c:	2b05      	cmp	r3, #5
 800890e:	dd02      	ble.n	8008916 <_dtoa_r+0x1d6>
 8008910:	2400      	movs	r4, #0
 8008912:	3b04      	subs	r3, #4
 8008914:	9322      	str	r3, [sp, #136]	; 0x88
 8008916:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008918:	1e98      	subs	r0, r3, #2
 800891a:	2803      	cmp	r0, #3
 800891c:	d864      	bhi.n	80089e8 <_dtoa_r+0x2a8>
 800891e:	f7f7 fbfb 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008922:	3829      	.short	0x3829
 8008924:	5836      	.short	0x5836
 8008926:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008928:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800892a:	189e      	adds	r6, r3, r2
 800892c:	4b68      	ldr	r3, [pc, #416]	; (8008ad0 <_dtoa_r+0x390>)
 800892e:	18f2      	adds	r2, r6, r3
 8008930:	2a20      	cmp	r2, #32
 8008932:	dd0f      	ble.n	8008954 <_dtoa_r+0x214>
 8008934:	2340      	movs	r3, #64	; 0x40
 8008936:	1a9b      	subs	r3, r3, r2
 8008938:	409d      	lsls	r5, r3
 800893a:	4b66      	ldr	r3, [pc, #408]	; (8008ad4 <_dtoa_r+0x394>)
 800893c:	9802      	ldr	r0, [sp, #8]
 800893e:	18f3      	adds	r3, r6, r3
 8008940:	40d8      	lsrs	r0, r3
 8008942:	4328      	orrs	r0, r5
 8008944:	f7f9 fc8a 	bl	800225c <__aeabi_ui2d>
 8008948:	2301      	movs	r3, #1
 800894a:	4c63      	ldr	r4, [pc, #396]	; (8008ad8 <_dtoa_r+0x398>)
 800894c:	3e01      	subs	r6, #1
 800894e:	1909      	adds	r1, r1, r4
 8008950:	9318      	str	r3, [sp, #96]	; 0x60
 8008952:	e776      	b.n	8008842 <_dtoa_r+0x102>
 8008954:	2320      	movs	r3, #32
 8008956:	9802      	ldr	r0, [sp, #8]
 8008958:	1a9b      	subs	r3, r3, r2
 800895a:	4098      	lsls	r0, r3
 800895c:	e7f2      	b.n	8008944 <_dtoa_r+0x204>
 800895e:	9016      	str	r0, [sp, #88]	; 0x58
 8008960:	e7b8      	b.n	80088d4 <_dtoa_r+0x194>
 8008962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008964:	9a02      	ldr	r2, [sp, #8]
 8008966:	1a9b      	subs	r3, r3, r2
 8008968:	930a      	str	r3, [sp, #40]	; 0x28
 800896a:	4253      	negs	r3, r2
 800896c:	930e      	str	r3, [sp, #56]	; 0x38
 800896e:	2300      	movs	r3, #0
 8008970:	9315      	str	r3, [sp, #84]	; 0x54
 8008972:	e7c7      	b.n	8008904 <_dtoa_r+0x1c4>
 8008974:	2300      	movs	r3, #0
 8008976:	930f      	str	r3, [sp, #60]	; 0x3c
 8008978:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800897a:	930c      	str	r3, [sp, #48]	; 0x30
 800897c:	9307      	str	r3, [sp, #28]
 800897e:	2b00      	cmp	r3, #0
 8008980:	dc13      	bgt.n	80089aa <_dtoa_r+0x26a>
 8008982:	2301      	movs	r3, #1
 8008984:	001a      	movs	r2, r3
 8008986:	930c      	str	r3, [sp, #48]	; 0x30
 8008988:	9307      	str	r3, [sp, #28]
 800898a:	9223      	str	r2, [sp, #140]	; 0x8c
 800898c:	e00d      	b.n	80089aa <_dtoa_r+0x26a>
 800898e:	2301      	movs	r3, #1
 8008990:	e7f1      	b.n	8008976 <_dtoa_r+0x236>
 8008992:	2300      	movs	r3, #0
 8008994:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008996:	930f      	str	r3, [sp, #60]	; 0x3c
 8008998:	4694      	mov	ip, r2
 800899a:	9b02      	ldr	r3, [sp, #8]
 800899c:	4463      	add	r3, ip
 800899e:	930c      	str	r3, [sp, #48]	; 0x30
 80089a0:	3301      	adds	r3, #1
 80089a2:	9307      	str	r3, [sp, #28]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	dc00      	bgt.n	80089aa <_dtoa_r+0x26a>
 80089a8:	2301      	movs	r3, #1
 80089aa:	2200      	movs	r2, #0
 80089ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089ae:	6042      	str	r2, [r0, #4]
 80089b0:	3204      	adds	r2, #4
 80089b2:	0015      	movs	r5, r2
 80089b4:	3514      	adds	r5, #20
 80089b6:	6841      	ldr	r1, [r0, #4]
 80089b8:	429d      	cmp	r5, r3
 80089ba:	d919      	bls.n	80089f0 <_dtoa_r+0x2b0>
 80089bc:	0038      	movs	r0, r7
 80089be:	f000 fcf3 	bl	80093a8 <_Balloc>
 80089c2:	9006      	str	r0, [sp, #24]
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d117      	bne.n	80089f8 <_dtoa_r+0x2b8>
 80089c8:	21d5      	movs	r1, #213	; 0xd5
 80089ca:	0002      	movs	r2, r0
 80089cc:	4b43      	ldr	r3, [pc, #268]	; (8008adc <_dtoa_r+0x39c>)
 80089ce:	0049      	lsls	r1, r1, #1
 80089d0:	e6cb      	b.n	800876a <_dtoa_r+0x2a>
 80089d2:	2301      	movs	r3, #1
 80089d4:	e7de      	b.n	8008994 <_dtoa_r+0x254>
 80089d6:	2300      	movs	r3, #0
 80089d8:	940f      	str	r4, [sp, #60]	; 0x3c
 80089da:	9322      	str	r3, [sp, #136]	; 0x88
 80089dc:	3b01      	subs	r3, #1
 80089de:	930c      	str	r3, [sp, #48]	; 0x30
 80089e0:	9307      	str	r3, [sp, #28]
 80089e2:	2200      	movs	r2, #0
 80089e4:	3313      	adds	r3, #19
 80089e6:	e7d0      	b.n	800898a <_dtoa_r+0x24a>
 80089e8:	2301      	movs	r3, #1
 80089ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80089ec:	3b02      	subs	r3, #2
 80089ee:	e7f6      	b.n	80089de <_dtoa_r+0x29e>
 80089f0:	3101      	adds	r1, #1
 80089f2:	6041      	str	r1, [r0, #4]
 80089f4:	0052      	lsls	r2, r2, #1
 80089f6:	e7dc      	b.n	80089b2 <_dtoa_r+0x272>
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	9a06      	ldr	r2, [sp, #24]
 80089fc:	601a      	str	r2, [r3, #0]
 80089fe:	9b07      	ldr	r3, [sp, #28]
 8008a00:	2b0e      	cmp	r3, #14
 8008a02:	d900      	bls.n	8008a06 <_dtoa_r+0x2c6>
 8008a04:	e0eb      	b.n	8008bde <_dtoa_r+0x49e>
 8008a06:	2c00      	cmp	r4, #0
 8008a08:	d100      	bne.n	8008a0c <_dtoa_r+0x2cc>
 8008a0a:	e0e8      	b.n	8008bde <_dtoa_r+0x49e>
 8008a0c:	9b02      	ldr	r3, [sp, #8]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	dd68      	ble.n	8008ae4 <_dtoa_r+0x3a4>
 8008a12:	001a      	movs	r2, r3
 8008a14:	210f      	movs	r1, #15
 8008a16:	4b2d      	ldr	r3, [pc, #180]	; (8008acc <_dtoa_r+0x38c>)
 8008a18:	400a      	ands	r2, r1
 8008a1a:	00d2      	lsls	r2, r2, #3
 8008a1c:	189b      	adds	r3, r3, r2
 8008a1e:	681d      	ldr	r5, [r3, #0]
 8008a20:	685e      	ldr	r6, [r3, #4]
 8008a22:	9b02      	ldr	r3, [sp, #8]
 8008a24:	111c      	asrs	r4, r3, #4
 8008a26:	2302      	movs	r3, #2
 8008a28:	9310      	str	r3, [sp, #64]	; 0x40
 8008a2a:	9b02      	ldr	r3, [sp, #8]
 8008a2c:	05db      	lsls	r3, r3, #23
 8008a2e:	d50b      	bpl.n	8008a48 <_dtoa_r+0x308>
 8008a30:	4b2b      	ldr	r3, [pc, #172]	; (8008ae0 <_dtoa_r+0x3a0>)
 8008a32:	400c      	ands	r4, r1
 8008a34:	6a1a      	ldr	r2, [r3, #32]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a38:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008a3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008a3c:	f7f8 f98a 	bl	8000d54 <__aeabi_ddiv>
 8008a40:	2303      	movs	r3, #3
 8008a42:	9008      	str	r0, [sp, #32]
 8008a44:	9109      	str	r1, [sp, #36]	; 0x24
 8008a46:	9310      	str	r3, [sp, #64]	; 0x40
 8008a48:	4b25      	ldr	r3, [pc, #148]	; (8008ae0 <_dtoa_r+0x3a0>)
 8008a4a:	9314      	str	r3, [sp, #80]	; 0x50
 8008a4c:	2c00      	cmp	r4, #0
 8008a4e:	d108      	bne.n	8008a62 <_dtoa_r+0x322>
 8008a50:	9808      	ldr	r0, [sp, #32]
 8008a52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a54:	002a      	movs	r2, r5
 8008a56:	0033      	movs	r3, r6
 8008a58:	f7f8 f97c 	bl	8000d54 <__aeabi_ddiv>
 8008a5c:	9008      	str	r0, [sp, #32]
 8008a5e:	9109      	str	r1, [sp, #36]	; 0x24
 8008a60:	e05c      	b.n	8008b1c <_dtoa_r+0x3dc>
 8008a62:	2301      	movs	r3, #1
 8008a64:	421c      	tst	r4, r3
 8008a66:	d00b      	beq.n	8008a80 <_dtoa_r+0x340>
 8008a68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a6a:	0028      	movs	r0, r5
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	9310      	str	r3, [sp, #64]	; 0x40
 8008a70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a72:	0031      	movs	r1, r6
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	f7f8 fd6e 	bl	8001558 <__aeabi_dmul>
 8008a7c:	0005      	movs	r5, r0
 8008a7e:	000e      	movs	r6, r1
 8008a80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a82:	1064      	asrs	r4, r4, #1
 8008a84:	3308      	adds	r3, #8
 8008a86:	e7e0      	b.n	8008a4a <_dtoa_r+0x30a>
 8008a88:	0800adbd 	.word	0x0800adbd
 8008a8c:	0800add4 	.word	0x0800add4
 8008a90:	7ff00000 	.word	0x7ff00000
 8008a94:	0000270f 	.word	0x0000270f
 8008a98:	0800adb9 	.word	0x0800adb9
 8008a9c:	0800adbc 	.word	0x0800adbc
 8008aa0:	0800ad8c 	.word	0x0800ad8c
 8008aa4:	0800ad8d 	.word	0x0800ad8d
 8008aa8:	3ff00000 	.word	0x3ff00000
 8008aac:	fffffc01 	.word	0xfffffc01
 8008ab0:	3ff80000 	.word	0x3ff80000
 8008ab4:	636f4361 	.word	0x636f4361
 8008ab8:	3fd287a7 	.word	0x3fd287a7
 8008abc:	8b60c8b3 	.word	0x8b60c8b3
 8008ac0:	3fc68a28 	.word	0x3fc68a28
 8008ac4:	509f79fb 	.word	0x509f79fb
 8008ac8:	3fd34413 	.word	0x3fd34413
 8008acc:	0800aec8 	.word	0x0800aec8
 8008ad0:	00000432 	.word	0x00000432
 8008ad4:	00000412 	.word	0x00000412
 8008ad8:	fe100000 	.word	0xfe100000
 8008adc:	0800ae2f 	.word	0x0800ae2f
 8008ae0:	0800aea0 	.word	0x0800aea0
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	9310      	str	r3, [sp, #64]	; 0x40
 8008ae8:	9b02      	ldr	r3, [sp, #8]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d016      	beq.n	8008b1c <_dtoa_r+0x3dc>
 8008aee:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008af0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008af2:	425c      	negs	r4, r3
 8008af4:	230f      	movs	r3, #15
 8008af6:	4ab6      	ldr	r2, [pc, #728]	; (8008dd0 <_dtoa_r+0x690>)
 8008af8:	4023      	ands	r3, r4
 8008afa:	00db      	lsls	r3, r3, #3
 8008afc:	18d3      	adds	r3, r2, r3
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	f7f8 fd29 	bl	8001558 <__aeabi_dmul>
 8008b06:	2601      	movs	r6, #1
 8008b08:	2300      	movs	r3, #0
 8008b0a:	9008      	str	r0, [sp, #32]
 8008b0c:	9109      	str	r1, [sp, #36]	; 0x24
 8008b0e:	4db1      	ldr	r5, [pc, #708]	; (8008dd4 <_dtoa_r+0x694>)
 8008b10:	1124      	asrs	r4, r4, #4
 8008b12:	2c00      	cmp	r4, #0
 8008b14:	d000      	beq.n	8008b18 <_dtoa_r+0x3d8>
 8008b16:	e094      	b.n	8008c42 <_dtoa_r+0x502>
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d19f      	bne.n	8008a5c <_dtoa_r+0x31c>
 8008b1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d100      	bne.n	8008b24 <_dtoa_r+0x3e4>
 8008b22:	e09b      	b.n	8008c5c <_dtoa_r+0x51c>
 8008b24:	9c08      	ldr	r4, [sp, #32]
 8008b26:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008b28:	2200      	movs	r2, #0
 8008b2a:	0020      	movs	r0, r4
 8008b2c:	0029      	movs	r1, r5
 8008b2e:	4baa      	ldr	r3, [pc, #680]	; (8008dd8 <_dtoa_r+0x698>)
 8008b30:	f7f7 fc92 	bl	8000458 <__aeabi_dcmplt>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	d100      	bne.n	8008b3a <_dtoa_r+0x3fa>
 8008b38:	e090      	b.n	8008c5c <_dtoa_r+0x51c>
 8008b3a:	9b07      	ldr	r3, [sp, #28]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d100      	bne.n	8008b42 <_dtoa_r+0x402>
 8008b40:	e08c      	b.n	8008c5c <_dtoa_r+0x51c>
 8008b42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	dd46      	ble.n	8008bd6 <_dtoa_r+0x496>
 8008b48:	9b02      	ldr	r3, [sp, #8]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	0020      	movs	r0, r4
 8008b4e:	0029      	movs	r1, r5
 8008b50:	1e5e      	subs	r6, r3, #1
 8008b52:	4ba2      	ldr	r3, [pc, #648]	; (8008ddc <_dtoa_r+0x69c>)
 8008b54:	f7f8 fd00 	bl	8001558 <__aeabi_dmul>
 8008b58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b5a:	9008      	str	r0, [sp, #32]
 8008b5c:	9109      	str	r1, [sp, #36]	; 0x24
 8008b5e:	3301      	adds	r3, #1
 8008b60:	9310      	str	r3, [sp, #64]	; 0x40
 8008b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b64:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008b66:	9c08      	ldr	r4, [sp, #32]
 8008b68:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008b6a:	9314      	str	r3, [sp, #80]	; 0x50
 8008b6c:	f7f9 fb46 	bl	80021fc <__aeabi_i2d>
 8008b70:	0022      	movs	r2, r4
 8008b72:	002b      	movs	r3, r5
 8008b74:	f7f8 fcf0 	bl	8001558 <__aeabi_dmul>
 8008b78:	2200      	movs	r2, #0
 8008b7a:	4b99      	ldr	r3, [pc, #612]	; (8008de0 <_dtoa_r+0x6a0>)
 8008b7c:	f7f7 fdae 	bl	80006dc <__aeabi_dadd>
 8008b80:	9010      	str	r0, [sp, #64]	; 0x40
 8008b82:	9111      	str	r1, [sp, #68]	; 0x44
 8008b84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b88:	9208      	str	r2, [sp, #32]
 8008b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b8c:	4a95      	ldr	r2, [pc, #596]	; (8008de4 <_dtoa_r+0x6a4>)
 8008b8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b90:	4694      	mov	ip, r2
 8008b92:	4463      	add	r3, ip
 8008b94:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b96:	9309      	str	r3, [sp, #36]	; 0x24
 8008b98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d161      	bne.n	8008c62 <_dtoa_r+0x522>
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	0020      	movs	r0, r4
 8008ba2:	0029      	movs	r1, r5
 8008ba4:	4b90      	ldr	r3, [pc, #576]	; (8008de8 <_dtoa_r+0x6a8>)
 8008ba6:	f7f8 ff43 	bl	8001a30 <__aeabi_dsub>
 8008baa:	9a08      	ldr	r2, [sp, #32]
 8008bac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bae:	0004      	movs	r4, r0
 8008bb0:	000d      	movs	r5, r1
 8008bb2:	f7f7 fc65 	bl	8000480 <__aeabi_dcmpgt>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d000      	beq.n	8008bbc <_dtoa_r+0x47c>
 8008bba:	e2af      	b.n	800911c <_dtoa_r+0x9dc>
 8008bbc:	488b      	ldr	r0, [pc, #556]	; (8008dec <_dtoa_r+0x6ac>)
 8008bbe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008bc0:	4684      	mov	ip, r0
 8008bc2:	4461      	add	r1, ip
 8008bc4:	000b      	movs	r3, r1
 8008bc6:	0020      	movs	r0, r4
 8008bc8:	0029      	movs	r1, r5
 8008bca:	9a08      	ldr	r2, [sp, #32]
 8008bcc:	f7f7 fc44 	bl	8000458 <__aeabi_dcmplt>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d000      	beq.n	8008bd6 <_dtoa_r+0x496>
 8008bd4:	e29f      	b.n	8009116 <_dtoa_r+0x9d6>
 8008bd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bd8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008bda:	9308      	str	r3, [sp, #32]
 8008bdc:	9409      	str	r4, [sp, #36]	; 0x24
 8008bde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	da00      	bge.n	8008be6 <_dtoa_r+0x4a6>
 8008be4:	e172      	b.n	8008ecc <_dtoa_r+0x78c>
 8008be6:	9a02      	ldr	r2, [sp, #8]
 8008be8:	2a0e      	cmp	r2, #14
 8008bea:	dd00      	ble.n	8008bee <_dtoa_r+0x4ae>
 8008bec:	e16e      	b.n	8008ecc <_dtoa_r+0x78c>
 8008bee:	4b78      	ldr	r3, [pc, #480]	; (8008dd0 <_dtoa_r+0x690>)
 8008bf0:	00d2      	lsls	r2, r2, #3
 8008bf2:	189b      	adds	r3, r3, r2
 8008bf4:	685c      	ldr	r4, [r3, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	930a      	str	r3, [sp, #40]	; 0x28
 8008bfa:	940b      	str	r4, [sp, #44]	; 0x2c
 8008bfc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	db00      	blt.n	8008c04 <_dtoa_r+0x4c4>
 8008c02:	e0f7      	b.n	8008df4 <_dtoa_r+0x6b4>
 8008c04:	9b07      	ldr	r3, [sp, #28]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	dd00      	ble.n	8008c0c <_dtoa_r+0x4cc>
 8008c0a:	e0f3      	b.n	8008df4 <_dtoa_r+0x6b4>
 8008c0c:	d000      	beq.n	8008c10 <_dtoa_r+0x4d0>
 8008c0e:	e282      	b.n	8009116 <_dtoa_r+0x9d6>
 8008c10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c14:	2200      	movs	r2, #0
 8008c16:	4b74      	ldr	r3, [pc, #464]	; (8008de8 <_dtoa_r+0x6a8>)
 8008c18:	f7f8 fc9e 	bl	8001558 <__aeabi_dmul>
 8008c1c:	9a08      	ldr	r2, [sp, #32]
 8008c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c20:	f7f7 fc38 	bl	8000494 <__aeabi_dcmpge>
 8008c24:	9e07      	ldr	r6, [sp, #28]
 8008c26:	0035      	movs	r5, r6
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d000      	beq.n	8008c2e <_dtoa_r+0x4ee>
 8008c2c:	e259      	b.n	80090e2 <_dtoa_r+0x9a2>
 8008c2e:	9b06      	ldr	r3, [sp, #24]
 8008c30:	9a06      	ldr	r2, [sp, #24]
 8008c32:	3301      	adds	r3, #1
 8008c34:	9308      	str	r3, [sp, #32]
 8008c36:	2331      	movs	r3, #49	; 0x31
 8008c38:	7013      	strb	r3, [r2, #0]
 8008c3a:	9b02      	ldr	r3, [sp, #8]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	9302      	str	r3, [sp, #8]
 8008c40:	e254      	b.n	80090ec <_dtoa_r+0x9ac>
 8008c42:	4234      	tst	r4, r6
 8008c44:	d007      	beq.n	8008c56 <_dtoa_r+0x516>
 8008c46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c48:	3301      	adds	r3, #1
 8008c4a:	9310      	str	r3, [sp, #64]	; 0x40
 8008c4c:	682a      	ldr	r2, [r5, #0]
 8008c4e:	686b      	ldr	r3, [r5, #4]
 8008c50:	f7f8 fc82 	bl	8001558 <__aeabi_dmul>
 8008c54:	0033      	movs	r3, r6
 8008c56:	1064      	asrs	r4, r4, #1
 8008c58:	3508      	adds	r5, #8
 8008c5a:	e75a      	b.n	8008b12 <_dtoa_r+0x3d2>
 8008c5c:	9e02      	ldr	r6, [sp, #8]
 8008c5e:	9b07      	ldr	r3, [sp, #28]
 8008c60:	e780      	b.n	8008b64 <_dtoa_r+0x424>
 8008c62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008c66:	1e5a      	subs	r2, r3, #1
 8008c68:	4b59      	ldr	r3, [pc, #356]	; (8008dd0 <_dtoa_r+0x690>)
 8008c6a:	00d2      	lsls	r2, r2, #3
 8008c6c:	189b      	adds	r3, r3, r2
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	2900      	cmp	r1, #0
 8008c74:	d051      	beq.n	8008d1a <_dtoa_r+0x5da>
 8008c76:	2000      	movs	r0, #0
 8008c78:	495d      	ldr	r1, [pc, #372]	; (8008df0 <_dtoa_r+0x6b0>)
 8008c7a:	f7f8 f86b 	bl	8000d54 <__aeabi_ddiv>
 8008c7e:	9a08      	ldr	r2, [sp, #32]
 8008c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c82:	f7f8 fed5 	bl	8001a30 <__aeabi_dsub>
 8008c86:	9a06      	ldr	r2, [sp, #24]
 8008c88:	9b06      	ldr	r3, [sp, #24]
 8008c8a:	4694      	mov	ip, r2
 8008c8c:	9317      	str	r3, [sp, #92]	; 0x5c
 8008c8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c90:	9010      	str	r0, [sp, #64]	; 0x40
 8008c92:	9111      	str	r1, [sp, #68]	; 0x44
 8008c94:	4463      	add	r3, ip
 8008c96:	9319      	str	r3, [sp, #100]	; 0x64
 8008c98:	0029      	movs	r1, r5
 8008c9a:	0020      	movs	r0, r4
 8008c9c:	f7f9 fa78 	bl	8002190 <__aeabi_d2iz>
 8008ca0:	9014      	str	r0, [sp, #80]	; 0x50
 8008ca2:	f7f9 faab 	bl	80021fc <__aeabi_i2d>
 8008ca6:	0002      	movs	r2, r0
 8008ca8:	000b      	movs	r3, r1
 8008caa:	0020      	movs	r0, r4
 8008cac:	0029      	movs	r1, r5
 8008cae:	f7f8 febf 	bl	8001a30 <__aeabi_dsub>
 8008cb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	9308      	str	r3, [sp, #32]
 8008cba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cbc:	0004      	movs	r4, r0
 8008cbe:	3330      	adds	r3, #48	; 0x30
 8008cc0:	7013      	strb	r3, [r2, #0]
 8008cc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008cc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cc6:	000d      	movs	r5, r1
 8008cc8:	f7f7 fbc6 	bl	8000458 <__aeabi_dcmplt>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d175      	bne.n	8008dbc <_dtoa_r+0x67c>
 8008cd0:	0022      	movs	r2, r4
 8008cd2:	002b      	movs	r3, r5
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	4940      	ldr	r1, [pc, #256]	; (8008dd8 <_dtoa_r+0x698>)
 8008cd8:	f7f8 feaa 	bl	8001a30 <__aeabi_dsub>
 8008cdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008cde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ce0:	f7f7 fbba 	bl	8000458 <__aeabi_dcmplt>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d000      	beq.n	8008cea <_dtoa_r+0x5aa>
 8008ce8:	e0d2      	b.n	8008e90 <_dtoa_r+0x750>
 8008cea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cec:	9a08      	ldr	r2, [sp, #32]
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d100      	bne.n	8008cf4 <_dtoa_r+0x5b4>
 8008cf2:	e770      	b.n	8008bd6 <_dtoa_r+0x496>
 8008cf4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008cf6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	4b38      	ldr	r3, [pc, #224]	; (8008ddc <_dtoa_r+0x69c>)
 8008cfc:	f7f8 fc2c 	bl	8001558 <__aeabi_dmul>
 8008d00:	4b36      	ldr	r3, [pc, #216]	; (8008ddc <_dtoa_r+0x69c>)
 8008d02:	9010      	str	r0, [sp, #64]	; 0x40
 8008d04:	9111      	str	r1, [sp, #68]	; 0x44
 8008d06:	2200      	movs	r2, #0
 8008d08:	0020      	movs	r0, r4
 8008d0a:	0029      	movs	r1, r5
 8008d0c:	f7f8 fc24 	bl	8001558 <__aeabi_dmul>
 8008d10:	9b08      	ldr	r3, [sp, #32]
 8008d12:	0004      	movs	r4, r0
 8008d14:	000d      	movs	r5, r1
 8008d16:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d18:	e7be      	b.n	8008c98 <_dtoa_r+0x558>
 8008d1a:	9808      	ldr	r0, [sp, #32]
 8008d1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d1e:	f7f8 fc1b 	bl	8001558 <__aeabi_dmul>
 8008d22:	9a06      	ldr	r2, [sp, #24]
 8008d24:	9b06      	ldr	r3, [sp, #24]
 8008d26:	4694      	mov	ip, r2
 8008d28:	9308      	str	r3, [sp, #32]
 8008d2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d2c:	9010      	str	r0, [sp, #64]	; 0x40
 8008d2e:	9111      	str	r1, [sp, #68]	; 0x44
 8008d30:	4463      	add	r3, ip
 8008d32:	9319      	str	r3, [sp, #100]	; 0x64
 8008d34:	0029      	movs	r1, r5
 8008d36:	0020      	movs	r0, r4
 8008d38:	f7f9 fa2a 	bl	8002190 <__aeabi_d2iz>
 8008d3c:	9017      	str	r0, [sp, #92]	; 0x5c
 8008d3e:	f7f9 fa5d 	bl	80021fc <__aeabi_i2d>
 8008d42:	0002      	movs	r2, r0
 8008d44:	000b      	movs	r3, r1
 8008d46:	0020      	movs	r0, r4
 8008d48:	0029      	movs	r1, r5
 8008d4a:	f7f8 fe71 	bl	8001a30 <__aeabi_dsub>
 8008d4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d50:	9a08      	ldr	r2, [sp, #32]
 8008d52:	3330      	adds	r3, #48	; 0x30
 8008d54:	7013      	strb	r3, [r2, #0]
 8008d56:	0013      	movs	r3, r2
 8008d58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	0004      	movs	r4, r0
 8008d5e:	000d      	movs	r5, r1
 8008d60:	9308      	str	r3, [sp, #32]
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d12c      	bne.n	8008dc0 <_dtoa_r+0x680>
 8008d66:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008d68:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008d6a:	9a06      	ldr	r2, [sp, #24]
 8008d6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d6e:	4694      	mov	ip, r2
 8008d70:	4463      	add	r3, ip
 8008d72:	2200      	movs	r2, #0
 8008d74:	9308      	str	r3, [sp, #32]
 8008d76:	4b1e      	ldr	r3, [pc, #120]	; (8008df0 <_dtoa_r+0x6b0>)
 8008d78:	f7f7 fcb0 	bl	80006dc <__aeabi_dadd>
 8008d7c:	0002      	movs	r2, r0
 8008d7e:	000b      	movs	r3, r1
 8008d80:	0020      	movs	r0, r4
 8008d82:	0029      	movs	r1, r5
 8008d84:	f7f7 fb7c 	bl	8000480 <__aeabi_dcmpgt>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d000      	beq.n	8008d8e <_dtoa_r+0x64e>
 8008d8c:	e080      	b.n	8008e90 <_dtoa_r+0x750>
 8008d8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d92:	2000      	movs	r0, #0
 8008d94:	4916      	ldr	r1, [pc, #88]	; (8008df0 <_dtoa_r+0x6b0>)
 8008d96:	f7f8 fe4b 	bl	8001a30 <__aeabi_dsub>
 8008d9a:	0002      	movs	r2, r0
 8008d9c:	000b      	movs	r3, r1
 8008d9e:	0020      	movs	r0, r4
 8008da0:	0029      	movs	r1, r5
 8008da2:	f7f7 fb59 	bl	8000458 <__aeabi_dcmplt>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d100      	bne.n	8008dac <_dtoa_r+0x66c>
 8008daa:	e714      	b.n	8008bd6 <_dtoa_r+0x496>
 8008dac:	9b08      	ldr	r3, [sp, #32]
 8008dae:	001a      	movs	r2, r3
 8008db0:	3a01      	subs	r2, #1
 8008db2:	9208      	str	r2, [sp, #32]
 8008db4:	7812      	ldrb	r2, [r2, #0]
 8008db6:	2a30      	cmp	r2, #48	; 0x30
 8008db8:	d0f8      	beq.n	8008dac <_dtoa_r+0x66c>
 8008dba:	9308      	str	r3, [sp, #32]
 8008dbc:	9602      	str	r6, [sp, #8]
 8008dbe:	e055      	b.n	8008e6c <_dtoa_r+0x72c>
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	4b06      	ldr	r3, [pc, #24]	; (8008ddc <_dtoa_r+0x69c>)
 8008dc4:	f7f8 fbc8 	bl	8001558 <__aeabi_dmul>
 8008dc8:	0004      	movs	r4, r0
 8008dca:	000d      	movs	r5, r1
 8008dcc:	e7b2      	b.n	8008d34 <_dtoa_r+0x5f4>
 8008dce:	46c0      	nop			; (mov r8, r8)
 8008dd0:	0800aec8 	.word	0x0800aec8
 8008dd4:	0800aea0 	.word	0x0800aea0
 8008dd8:	3ff00000 	.word	0x3ff00000
 8008ddc:	40240000 	.word	0x40240000
 8008de0:	401c0000 	.word	0x401c0000
 8008de4:	fcc00000 	.word	0xfcc00000
 8008de8:	40140000 	.word	0x40140000
 8008dec:	7cc00000 	.word	0x7cc00000
 8008df0:	3fe00000 	.word	0x3fe00000
 8008df4:	9b07      	ldr	r3, [sp, #28]
 8008df6:	9e06      	ldr	r6, [sp, #24]
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	199b      	adds	r3, r3, r6
 8008dfc:	930c      	str	r3, [sp, #48]	; 0x30
 8008dfe:	9c08      	ldr	r4, [sp, #32]
 8008e00:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008e02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e06:	0020      	movs	r0, r4
 8008e08:	0029      	movs	r1, r5
 8008e0a:	f7f7 ffa3 	bl	8000d54 <__aeabi_ddiv>
 8008e0e:	f7f9 f9bf 	bl	8002190 <__aeabi_d2iz>
 8008e12:	9007      	str	r0, [sp, #28]
 8008e14:	f7f9 f9f2 	bl	80021fc <__aeabi_i2d>
 8008e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e1c:	f7f8 fb9c 	bl	8001558 <__aeabi_dmul>
 8008e20:	0002      	movs	r2, r0
 8008e22:	000b      	movs	r3, r1
 8008e24:	0020      	movs	r0, r4
 8008e26:	0029      	movs	r1, r5
 8008e28:	f7f8 fe02 	bl	8001a30 <__aeabi_dsub>
 8008e2c:	0033      	movs	r3, r6
 8008e2e:	9a07      	ldr	r2, [sp, #28]
 8008e30:	3601      	adds	r6, #1
 8008e32:	3230      	adds	r2, #48	; 0x30
 8008e34:	701a      	strb	r2, [r3, #0]
 8008e36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e38:	9608      	str	r6, [sp, #32]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d139      	bne.n	8008eb2 <_dtoa_r+0x772>
 8008e3e:	0002      	movs	r2, r0
 8008e40:	000b      	movs	r3, r1
 8008e42:	f7f7 fc4b 	bl	80006dc <__aeabi_dadd>
 8008e46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e4a:	0004      	movs	r4, r0
 8008e4c:	000d      	movs	r5, r1
 8008e4e:	f7f7 fb17 	bl	8000480 <__aeabi_dcmpgt>
 8008e52:	2800      	cmp	r0, #0
 8008e54:	d11b      	bne.n	8008e8e <_dtoa_r+0x74e>
 8008e56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e5a:	0020      	movs	r0, r4
 8008e5c:	0029      	movs	r1, r5
 8008e5e:	f7f7 faf5 	bl	800044c <__aeabi_dcmpeq>
 8008e62:	2800      	cmp	r0, #0
 8008e64:	d002      	beq.n	8008e6c <_dtoa_r+0x72c>
 8008e66:	9b07      	ldr	r3, [sp, #28]
 8008e68:	07db      	lsls	r3, r3, #31
 8008e6a:	d410      	bmi.n	8008e8e <_dtoa_r+0x74e>
 8008e6c:	0038      	movs	r0, r7
 8008e6e:	9905      	ldr	r1, [sp, #20]
 8008e70:	f000 fade 	bl	8009430 <_Bfree>
 8008e74:	2300      	movs	r3, #0
 8008e76:	9a08      	ldr	r2, [sp, #32]
 8008e78:	9802      	ldr	r0, [sp, #8]
 8008e7a:	7013      	strb	r3, [r2, #0]
 8008e7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e7e:	3001      	adds	r0, #1
 8008e80:	6018      	str	r0, [r3, #0]
 8008e82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d100      	bne.n	8008e8a <_dtoa_r+0x74a>
 8008e88:	e4a6      	b.n	80087d8 <_dtoa_r+0x98>
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	e4a4      	b.n	80087d8 <_dtoa_r+0x98>
 8008e8e:	9e02      	ldr	r6, [sp, #8]
 8008e90:	9b08      	ldr	r3, [sp, #32]
 8008e92:	9308      	str	r3, [sp, #32]
 8008e94:	3b01      	subs	r3, #1
 8008e96:	781a      	ldrb	r2, [r3, #0]
 8008e98:	2a39      	cmp	r2, #57	; 0x39
 8008e9a:	d106      	bne.n	8008eaa <_dtoa_r+0x76a>
 8008e9c:	9a06      	ldr	r2, [sp, #24]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d1f7      	bne.n	8008e92 <_dtoa_r+0x752>
 8008ea2:	2230      	movs	r2, #48	; 0x30
 8008ea4:	9906      	ldr	r1, [sp, #24]
 8008ea6:	3601      	adds	r6, #1
 8008ea8:	700a      	strb	r2, [r1, #0]
 8008eaa:	781a      	ldrb	r2, [r3, #0]
 8008eac:	3201      	adds	r2, #1
 8008eae:	701a      	strb	r2, [r3, #0]
 8008eb0:	e784      	b.n	8008dbc <_dtoa_r+0x67c>
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	4baa      	ldr	r3, [pc, #680]	; (8009160 <_dtoa_r+0xa20>)
 8008eb6:	f7f8 fb4f 	bl	8001558 <__aeabi_dmul>
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	0004      	movs	r4, r0
 8008ec0:	000d      	movs	r5, r1
 8008ec2:	f7f7 fac3 	bl	800044c <__aeabi_dcmpeq>
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d09b      	beq.n	8008e02 <_dtoa_r+0x6c2>
 8008eca:	e7cf      	b.n	8008e6c <_dtoa_r+0x72c>
 8008ecc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ece:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008ed0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008ed2:	2d00      	cmp	r5, #0
 8008ed4:	d012      	beq.n	8008efc <_dtoa_r+0x7bc>
 8008ed6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008ed8:	2a01      	cmp	r2, #1
 8008eda:	dc66      	bgt.n	8008faa <_dtoa_r+0x86a>
 8008edc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008ede:	2a00      	cmp	r2, #0
 8008ee0:	d05d      	beq.n	8008f9e <_dtoa_r+0x85e>
 8008ee2:	4aa0      	ldr	r2, [pc, #640]	; (8009164 <_dtoa_r+0xa24>)
 8008ee4:	189b      	adds	r3, r3, r2
 8008ee6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ee8:	2101      	movs	r1, #1
 8008eea:	18d2      	adds	r2, r2, r3
 8008eec:	920a      	str	r2, [sp, #40]	; 0x28
 8008eee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ef0:	0038      	movs	r0, r7
 8008ef2:	18d3      	adds	r3, r2, r3
 8008ef4:	930d      	str	r3, [sp, #52]	; 0x34
 8008ef6:	f000 fb4b 	bl	8009590 <__i2b>
 8008efa:	0005      	movs	r5, r0
 8008efc:	2c00      	cmp	r4, #0
 8008efe:	dd0e      	ble.n	8008f1e <_dtoa_r+0x7de>
 8008f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	dd0b      	ble.n	8008f1e <_dtoa_r+0x7de>
 8008f06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f08:	0023      	movs	r3, r4
 8008f0a:	4294      	cmp	r4, r2
 8008f0c:	dd00      	ble.n	8008f10 <_dtoa_r+0x7d0>
 8008f0e:	0013      	movs	r3, r2
 8008f10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f12:	1ae4      	subs	r4, r4, r3
 8008f14:	1ad2      	subs	r2, r2, r3
 8008f16:	920a      	str	r2, [sp, #40]	; 0x28
 8008f18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f1a:	1ad3      	subs	r3, r2, r3
 8008f1c:	930d      	str	r3, [sp, #52]	; 0x34
 8008f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d01f      	beq.n	8008f64 <_dtoa_r+0x824>
 8008f24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d054      	beq.n	8008fd4 <_dtoa_r+0x894>
 8008f2a:	2e00      	cmp	r6, #0
 8008f2c:	dd11      	ble.n	8008f52 <_dtoa_r+0x812>
 8008f2e:	0029      	movs	r1, r5
 8008f30:	0032      	movs	r2, r6
 8008f32:	0038      	movs	r0, r7
 8008f34:	f000 fbf2 	bl	800971c <__pow5mult>
 8008f38:	9a05      	ldr	r2, [sp, #20]
 8008f3a:	0001      	movs	r1, r0
 8008f3c:	0005      	movs	r5, r0
 8008f3e:	0038      	movs	r0, r7
 8008f40:	f000 fb3c 	bl	80095bc <__multiply>
 8008f44:	9905      	ldr	r1, [sp, #20]
 8008f46:	9014      	str	r0, [sp, #80]	; 0x50
 8008f48:	0038      	movs	r0, r7
 8008f4a:	f000 fa71 	bl	8009430 <_Bfree>
 8008f4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f50:	9305      	str	r3, [sp, #20]
 8008f52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f54:	1b9a      	subs	r2, r3, r6
 8008f56:	42b3      	cmp	r3, r6
 8008f58:	d004      	beq.n	8008f64 <_dtoa_r+0x824>
 8008f5a:	0038      	movs	r0, r7
 8008f5c:	9905      	ldr	r1, [sp, #20]
 8008f5e:	f000 fbdd 	bl	800971c <__pow5mult>
 8008f62:	9005      	str	r0, [sp, #20]
 8008f64:	2101      	movs	r1, #1
 8008f66:	0038      	movs	r0, r7
 8008f68:	f000 fb12 	bl	8009590 <__i2b>
 8008f6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f6e:	0006      	movs	r6, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	dd31      	ble.n	8008fd8 <_dtoa_r+0x898>
 8008f74:	001a      	movs	r2, r3
 8008f76:	0001      	movs	r1, r0
 8008f78:	0038      	movs	r0, r7
 8008f7a:	f000 fbcf 	bl	800971c <__pow5mult>
 8008f7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f80:	0006      	movs	r6, r0
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	dd2d      	ble.n	8008fe2 <_dtoa_r+0x8a2>
 8008f86:	2300      	movs	r3, #0
 8008f88:	930e      	str	r3, [sp, #56]	; 0x38
 8008f8a:	6933      	ldr	r3, [r6, #16]
 8008f8c:	3303      	adds	r3, #3
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	18f3      	adds	r3, r6, r3
 8008f92:	6858      	ldr	r0, [r3, #4]
 8008f94:	f000 fab4 	bl	8009500 <__hi0bits>
 8008f98:	2320      	movs	r3, #32
 8008f9a:	1a18      	subs	r0, r3, r0
 8008f9c:	e039      	b.n	8009012 <_dtoa_r+0x8d2>
 8008f9e:	2336      	movs	r3, #54	; 0x36
 8008fa0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008fa2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008fa4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008fa6:	1a9b      	subs	r3, r3, r2
 8008fa8:	e79d      	b.n	8008ee6 <_dtoa_r+0x7a6>
 8008faa:	9b07      	ldr	r3, [sp, #28]
 8008fac:	1e5e      	subs	r6, r3, #1
 8008fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fb0:	42b3      	cmp	r3, r6
 8008fb2:	db07      	blt.n	8008fc4 <_dtoa_r+0x884>
 8008fb4:	1b9e      	subs	r6, r3, r6
 8008fb6:	9b07      	ldr	r3, [sp, #28]
 8008fb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	da93      	bge.n	8008ee6 <_dtoa_r+0x7a6>
 8008fbe:	1ae4      	subs	r4, r4, r3
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	e790      	b.n	8008ee6 <_dtoa_r+0x7a6>
 8008fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008fc8:	1af3      	subs	r3, r6, r3
 8008fca:	18d3      	adds	r3, r2, r3
 8008fcc:	960e      	str	r6, [sp, #56]	; 0x38
 8008fce:	9315      	str	r3, [sp, #84]	; 0x54
 8008fd0:	2600      	movs	r6, #0
 8008fd2:	e7f0      	b.n	8008fb6 <_dtoa_r+0x876>
 8008fd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fd6:	e7c0      	b.n	8008f5a <_dtoa_r+0x81a>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	930e      	str	r3, [sp, #56]	; 0x38
 8008fdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	dc13      	bgt.n	800900a <_dtoa_r+0x8ca>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	930e      	str	r3, [sp, #56]	; 0x38
 8008fe6:	9b08      	ldr	r3, [sp, #32]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10e      	bne.n	800900a <_dtoa_r+0x8ca>
 8008fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fee:	031b      	lsls	r3, r3, #12
 8008ff0:	d10b      	bne.n	800900a <_dtoa_r+0x8ca>
 8008ff2:	4b5d      	ldr	r3, [pc, #372]	; (8009168 <_dtoa_r+0xa28>)
 8008ff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ff6:	4213      	tst	r3, r2
 8008ff8:	d007      	beq.n	800900a <_dtoa_r+0x8ca>
 8008ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8009000:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009002:	3301      	adds	r3, #1
 8009004:	930d      	str	r3, [sp, #52]	; 0x34
 8009006:	2301      	movs	r3, #1
 8009008:	930e      	str	r3, [sp, #56]	; 0x38
 800900a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800900c:	2001      	movs	r0, #1
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1bb      	bne.n	8008f8a <_dtoa_r+0x84a>
 8009012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009014:	221f      	movs	r2, #31
 8009016:	1818      	adds	r0, r3, r0
 8009018:	0003      	movs	r3, r0
 800901a:	4013      	ands	r3, r2
 800901c:	4210      	tst	r0, r2
 800901e:	d046      	beq.n	80090ae <_dtoa_r+0x96e>
 8009020:	3201      	adds	r2, #1
 8009022:	1ad2      	subs	r2, r2, r3
 8009024:	2a04      	cmp	r2, #4
 8009026:	dd3f      	ble.n	80090a8 <_dtoa_r+0x968>
 8009028:	221c      	movs	r2, #28
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800902e:	18e4      	adds	r4, r4, r3
 8009030:	18d2      	adds	r2, r2, r3
 8009032:	920a      	str	r2, [sp, #40]	; 0x28
 8009034:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009036:	18d3      	adds	r3, r2, r3
 8009038:	930d      	str	r3, [sp, #52]	; 0x34
 800903a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800903c:	2b00      	cmp	r3, #0
 800903e:	dd05      	ble.n	800904c <_dtoa_r+0x90c>
 8009040:	001a      	movs	r2, r3
 8009042:	0038      	movs	r0, r7
 8009044:	9905      	ldr	r1, [sp, #20]
 8009046:	f000 fbc5 	bl	80097d4 <__lshift>
 800904a:	9005      	str	r0, [sp, #20]
 800904c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800904e:	2b00      	cmp	r3, #0
 8009050:	dd05      	ble.n	800905e <_dtoa_r+0x91e>
 8009052:	0031      	movs	r1, r6
 8009054:	001a      	movs	r2, r3
 8009056:	0038      	movs	r0, r7
 8009058:	f000 fbbc 	bl	80097d4 <__lshift>
 800905c:	0006      	movs	r6, r0
 800905e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009060:	2b00      	cmp	r3, #0
 8009062:	d026      	beq.n	80090b2 <_dtoa_r+0x972>
 8009064:	0031      	movs	r1, r6
 8009066:	9805      	ldr	r0, [sp, #20]
 8009068:	f000 fc22 	bl	80098b0 <__mcmp>
 800906c:	2800      	cmp	r0, #0
 800906e:	da20      	bge.n	80090b2 <_dtoa_r+0x972>
 8009070:	9b02      	ldr	r3, [sp, #8]
 8009072:	220a      	movs	r2, #10
 8009074:	3b01      	subs	r3, #1
 8009076:	9302      	str	r3, [sp, #8]
 8009078:	0038      	movs	r0, r7
 800907a:	2300      	movs	r3, #0
 800907c:	9905      	ldr	r1, [sp, #20]
 800907e:	f000 f9fb 	bl	8009478 <__multadd>
 8009082:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009084:	9005      	str	r0, [sp, #20]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d100      	bne.n	800908c <_dtoa_r+0x94c>
 800908a:	e166      	b.n	800935a <_dtoa_r+0xc1a>
 800908c:	2300      	movs	r3, #0
 800908e:	0029      	movs	r1, r5
 8009090:	220a      	movs	r2, #10
 8009092:	0038      	movs	r0, r7
 8009094:	f000 f9f0 	bl	8009478 <__multadd>
 8009098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800909a:	0005      	movs	r5, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	dc47      	bgt.n	8009130 <_dtoa_r+0x9f0>
 80090a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	dc0d      	bgt.n	80090c2 <_dtoa_r+0x982>
 80090a6:	e043      	b.n	8009130 <_dtoa_r+0x9f0>
 80090a8:	2a04      	cmp	r2, #4
 80090aa:	d0c6      	beq.n	800903a <_dtoa_r+0x8fa>
 80090ac:	0013      	movs	r3, r2
 80090ae:	331c      	adds	r3, #28
 80090b0:	e7bc      	b.n	800902c <_dtoa_r+0x8ec>
 80090b2:	9b07      	ldr	r3, [sp, #28]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	dc35      	bgt.n	8009124 <_dtoa_r+0x9e4>
 80090b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	dd32      	ble.n	8009124 <_dtoa_r+0x9e4>
 80090be:	9b07      	ldr	r3, [sp, #28]
 80090c0:	930c      	str	r3, [sp, #48]	; 0x30
 80090c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10c      	bne.n	80090e2 <_dtoa_r+0x9a2>
 80090c8:	0031      	movs	r1, r6
 80090ca:	2205      	movs	r2, #5
 80090cc:	0038      	movs	r0, r7
 80090ce:	f000 f9d3 	bl	8009478 <__multadd>
 80090d2:	0006      	movs	r6, r0
 80090d4:	0001      	movs	r1, r0
 80090d6:	9805      	ldr	r0, [sp, #20]
 80090d8:	f000 fbea 	bl	80098b0 <__mcmp>
 80090dc:	2800      	cmp	r0, #0
 80090de:	dd00      	ble.n	80090e2 <_dtoa_r+0x9a2>
 80090e0:	e5a5      	b.n	8008c2e <_dtoa_r+0x4ee>
 80090e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80090e4:	43db      	mvns	r3, r3
 80090e6:	9302      	str	r3, [sp, #8]
 80090e8:	9b06      	ldr	r3, [sp, #24]
 80090ea:	9308      	str	r3, [sp, #32]
 80090ec:	2400      	movs	r4, #0
 80090ee:	0031      	movs	r1, r6
 80090f0:	0038      	movs	r0, r7
 80090f2:	f000 f99d 	bl	8009430 <_Bfree>
 80090f6:	2d00      	cmp	r5, #0
 80090f8:	d100      	bne.n	80090fc <_dtoa_r+0x9bc>
 80090fa:	e6b7      	b.n	8008e6c <_dtoa_r+0x72c>
 80090fc:	2c00      	cmp	r4, #0
 80090fe:	d005      	beq.n	800910c <_dtoa_r+0x9cc>
 8009100:	42ac      	cmp	r4, r5
 8009102:	d003      	beq.n	800910c <_dtoa_r+0x9cc>
 8009104:	0021      	movs	r1, r4
 8009106:	0038      	movs	r0, r7
 8009108:	f000 f992 	bl	8009430 <_Bfree>
 800910c:	0029      	movs	r1, r5
 800910e:	0038      	movs	r0, r7
 8009110:	f000 f98e 	bl	8009430 <_Bfree>
 8009114:	e6aa      	b.n	8008e6c <_dtoa_r+0x72c>
 8009116:	2600      	movs	r6, #0
 8009118:	0035      	movs	r5, r6
 800911a:	e7e2      	b.n	80090e2 <_dtoa_r+0x9a2>
 800911c:	9602      	str	r6, [sp, #8]
 800911e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009120:	0035      	movs	r5, r6
 8009122:	e584      	b.n	8008c2e <_dtoa_r+0x4ee>
 8009124:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009126:	2b00      	cmp	r3, #0
 8009128:	d100      	bne.n	800912c <_dtoa_r+0x9ec>
 800912a:	e0ce      	b.n	80092ca <_dtoa_r+0xb8a>
 800912c:	9b07      	ldr	r3, [sp, #28]
 800912e:	930c      	str	r3, [sp, #48]	; 0x30
 8009130:	2c00      	cmp	r4, #0
 8009132:	dd05      	ble.n	8009140 <_dtoa_r+0xa00>
 8009134:	0029      	movs	r1, r5
 8009136:	0022      	movs	r2, r4
 8009138:	0038      	movs	r0, r7
 800913a:	f000 fb4b 	bl	80097d4 <__lshift>
 800913e:	0005      	movs	r5, r0
 8009140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009142:	0028      	movs	r0, r5
 8009144:	2b00      	cmp	r3, #0
 8009146:	d022      	beq.n	800918e <_dtoa_r+0xa4e>
 8009148:	0038      	movs	r0, r7
 800914a:	6869      	ldr	r1, [r5, #4]
 800914c:	f000 f92c 	bl	80093a8 <_Balloc>
 8009150:	1e04      	subs	r4, r0, #0
 8009152:	d10f      	bne.n	8009174 <_dtoa_r+0xa34>
 8009154:	0002      	movs	r2, r0
 8009156:	4b05      	ldr	r3, [pc, #20]	; (800916c <_dtoa_r+0xa2c>)
 8009158:	4905      	ldr	r1, [pc, #20]	; (8009170 <_dtoa_r+0xa30>)
 800915a:	f7ff fb06 	bl	800876a <_dtoa_r+0x2a>
 800915e:	46c0      	nop			; (mov r8, r8)
 8009160:	40240000 	.word	0x40240000
 8009164:	00000433 	.word	0x00000433
 8009168:	7ff00000 	.word	0x7ff00000
 800916c:	0800ae2f 	.word	0x0800ae2f
 8009170:	000002ea 	.word	0x000002ea
 8009174:	0029      	movs	r1, r5
 8009176:	692b      	ldr	r3, [r5, #16]
 8009178:	310c      	adds	r1, #12
 800917a:	1c9a      	adds	r2, r3, #2
 800917c:	0092      	lsls	r2, r2, #2
 800917e:	300c      	adds	r0, #12
 8009180:	f7fe fd9e 	bl	8007cc0 <memcpy>
 8009184:	2201      	movs	r2, #1
 8009186:	0021      	movs	r1, r4
 8009188:	0038      	movs	r0, r7
 800918a:	f000 fb23 	bl	80097d4 <__lshift>
 800918e:	9b06      	ldr	r3, [sp, #24]
 8009190:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009192:	930a      	str	r3, [sp, #40]	; 0x28
 8009194:	3b01      	subs	r3, #1
 8009196:	189b      	adds	r3, r3, r2
 8009198:	2201      	movs	r2, #1
 800919a:	002c      	movs	r4, r5
 800919c:	0005      	movs	r5, r0
 800919e:	9314      	str	r3, [sp, #80]	; 0x50
 80091a0:	9b08      	ldr	r3, [sp, #32]
 80091a2:	4013      	ands	r3, r2
 80091a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80091a6:	0031      	movs	r1, r6
 80091a8:	9805      	ldr	r0, [sp, #20]
 80091aa:	f7ff fa3e 	bl	800862a <quorem>
 80091ae:	0003      	movs	r3, r0
 80091b0:	0021      	movs	r1, r4
 80091b2:	3330      	adds	r3, #48	; 0x30
 80091b4:	900d      	str	r0, [sp, #52]	; 0x34
 80091b6:	9805      	ldr	r0, [sp, #20]
 80091b8:	9307      	str	r3, [sp, #28]
 80091ba:	f000 fb79 	bl	80098b0 <__mcmp>
 80091be:	002a      	movs	r2, r5
 80091c0:	900e      	str	r0, [sp, #56]	; 0x38
 80091c2:	0031      	movs	r1, r6
 80091c4:	0038      	movs	r0, r7
 80091c6:	f000 fb8f 	bl	80098e8 <__mdiff>
 80091ca:	68c3      	ldr	r3, [r0, #12]
 80091cc:	9008      	str	r0, [sp, #32]
 80091ce:	9310      	str	r3, [sp, #64]	; 0x40
 80091d0:	2301      	movs	r3, #1
 80091d2:	930c      	str	r3, [sp, #48]	; 0x30
 80091d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d104      	bne.n	80091e4 <_dtoa_r+0xaa4>
 80091da:	0001      	movs	r1, r0
 80091dc:	9805      	ldr	r0, [sp, #20]
 80091de:	f000 fb67 	bl	80098b0 <__mcmp>
 80091e2:	900c      	str	r0, [sp, #48]	; 0x30
 80091e4:	0038      	movs	r0, r7
 80091e6:	9908      	ldr	r1, [sp, #32]
 80091e8:	f000 f922 	bl	8009430 <_Bfree>
 80091ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091f0:	3301      	adds	r3, #1
 80091f2:	9308      	str	r3, [sp, #32]
 80091f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091f6:	4313      	orrs	r3, r2
 80091f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80091fa:	4313      	orrs	r3, r2
 80091fc:	d10c      	bne.n	8009218 <_dtoa_r+0xad8>
 80091fe:	9b07      	ldr	r3, [sp, #28]
 8009200:	2b39      	cmp	r3, #57	; 0x39
 8009202:	d026      	beq.n	8009252 <_dtoa_r+0xb12>
 8009204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009206:	2b00      	cmp	r3, #0
 8009208:	dd02      	ble.n	8009210 <_dtoa_r+0xad0>
 800920a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800920c:	3331      	adds	r3, #49	; 0x31
 800920e:	9307      	str	r3, [sp, #28]
 8009210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009212:	9a07      	ldr	r2, [sp, #28]
 8009214:	701a      	strb	r2, [r3, #0]
 8009216:	e76a      	b.n	80090ee <_dtoa_r+0x9ae>
 8009218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800921a:	2b00      	cmp	r3, #0
 800921c:	db04      	blt.n	8009228 <_dtoa_r+0xae8>
 800921e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009220:	4313      	orrs	r3, r2
 8009222:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009224:	4313      	orrs	r3, r2
 8009226:	d11f      	bne.n	8009268 <_dtoa_r+0xb28>
 8009228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800922a:	2b00      	cmp	r3, #0
 800922c:	ddf0      	ble.n	8009210 <_dtoa_r+0xad0>
 800922e:	9905      	ldr	r1, [sp, #20]
 8009230:	2201      	movs	r2, #1
 8009232:	0038      	movs	r0, r7
 8009234:	f000 face 	bl	80097d4 <__lshift>
 8009238:	0031      	movs	r1, r6
 800923a:	9005      	str	r0, [sp, #20]
 800923c:	f000 fb38 	bl	80098b0 <__mcmp>
 8009240:	2800      	cmp	r0, #0
 8009242:	dc03      	bgt.n	800924c <_dtoa_r+0xb0c>
 8009244:	d1e4      	bne.n	8009210 <_dtoa_r+0xad0>
 8009246:	9b07      	ldr	r3, [sp, #28]
 8009248:	07db      	lsls	r3, r3, #31
 800924a:	d5e1      	bpl.n	8009210 <_dtoa_r+0xad0>
 800924c:	9b07      	ldr	r3, [sp, #28]
 800924e:	2b39      	cmp	r3, #57	; 0x39
 8009250:	d1db      	bne.n	800920a <_dtoa_r+0xaca>
 8009252:	2339      	movs	r3, #57	; 0x39
 8009254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009256:	7013      	strb	r3, [r2, #0]
 8009258:	9b08      	ldr	r3, [sp, #32]
 800925a:	9308      	str	r3, [sp, #32]
 800925c:	3b01      	subs	r3, #1
 800925e:	781a      	ldrb	r2, [r3, #0]
 8009260:	2a39      	cmp	r2, #57	; 0x39
 8009262:	d068      	beq.n	8009336 <_dtoa_r+0xbf6>
 8009264:	3201      	adds	r2, #1
 8009266:	e7d5      	b.n	8009214 <_dtoa_r+0xad4>
 8009268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800926a:	2b00      	cmp	r3, #0
 800926c:	dd07      	ble.n	800927e <_dtoa_r+0xb3e>
 800926e:	9b07      	ldr	r3, [sp, #28]
 8009270:	2b39      	cmp	r3, #57	; 0x39
 8009272:	d0ee      	beq.n	8009252 <_dtoa_r+0xb12>
 8009274:	9b07      	ldr	r3, [sp, #28]
 8009276:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009278:	3301      	adds	r3, #1
 800927a:	7013      	strb	r3, [r2, #0]
 800927c:	e737      	b.n	80090ee <_dtoa_r+0x9ae>
 800927e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009280:	9a07      	ldr	r2, [sp, #28]
 8009282:	701a      	strb	r2, [r3, #0]
 8009284:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009286:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009288:	4293      	cmp	r3, r2
 800928a:	d03e      	beq.n	800930a <_dtoa_r+0xbca>
 800928c:	2300      	movs	r3, #0
 800928e:	220a      	movs	r2, #10
 8009290:	9905      	ldr	r1, [sp, #20]
 8009292:	0038      	movs	r0, r7
 8009294:	f000 f8f0 	bl	8009478 <__multadd>
 8009298:	2300      	movs	r3, #0
 800929a:	9005      	str	r0, [sp, #20]
 800929c:	220a      	movs	r2, #10
 800929e:	0021      	movs	r1, r4
 80092a0:	0038      	movs	r0, r7
 80092a2:	42ac      	cmp	r4, r5
 80092a4:	d106      	bne.n	80092b4 <_dtoa_r+0xb74>
 80092a6:	f000 f8e7 	bl	8009478 <__multadd>
 80092aa:	0004      	movs	r4, r0
 80092ac:	0005      	movs	r5, r0
 80092ae:	9b08      	ldr	r3, [sp, #32]
 80092b0:	930a      	str	r3, [sp, #40]	; 0x28
 80092b2:	e778      	b.n	80091a6 <_dtoa_r+0xa66>
 80092b4:	f000 f8e0 	bl	8009478 <__multadd>
 80092b8:	0029      	movs	r1, r5
 80092ba:	0004      	movs	r4, r0
 80092bc:	2300      	movs	r3, #0
 80092be:	220a      	movs	r2, #10
 80092c0:	0038      	movs	r0, r7
 80092c2:	f000 f8d9 	bl	8009478 <__multadd>
 80092c6:	0005      	movs	r5, r0
 80092c8:	e7f1      	b.n	80092ae <_dtoa_r+0xb6e>
 80092ca:	9b07      	ldr	r3, [sp, #28]
 80092cc:	930c      	str	r3, [sp, #48]	; 0x30
 80092ce:	2400      	movs	r4, #0
 80092d0:	0031      	movs	r1, r6
 80092d2:	9805      	ldr	r0, [sp, #20]
 80092d4:	f7ff f9a9 	bl	800862a <quorem>
 80092d8:	9b06      	ldr	r3, [sp, #24]
 80092da:	3030      	adds	r0, #48	; 0x30
 80092dc:	5518      	strb	r0, [r3, r4]
 80092de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092e0:	3401      	adds	r4, #1
 80092e2:	9007      	str	r0, [sp, #28]
 80092e4:	42a3      	cmp	r3, r4
 80092e6:	dd07      	ble.n	80092f8 <_dtoa_r+0xbb8>
 80092e8:	2300      	movs	r3, #0
 80092ea:	220a      	movs	r2, #10
 80092ec:	0038      	movs	r0, r7
 80092ee:	9905      	ldr	r1, [sp, #20]
 80092f0:	f000 f8c2 	bl	8009478 <__multadd>
 80092f4:	9005      	str	r0, [sp, #20]
 80092f6:	e7eb      	b.n	80092d0 <_dtoa_r+0xb90>
 80092f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092fa:	2001      	movs	r0, #1
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	dd00      	ble.n	8009302 <_dtoa_r+0xbc2>
 8009300:	0018      	movs	r0, r3
 8009302:	2400      	movs	r4, #0
 8009304:	9b06      	ldr	r3, [sp, #24]
 8009306:	181b      	adds	r3, r3, r0
 8009308:	9308      	str	r3, [sp, #32]
 800930a:	9905      	ldr	r1, [sp, #20]
 800930c:	2201      	movs	r2, #1
 800930e:	0038      	movs	r0, r7
 8009310:	f000 fa60 	bl	80097d4 <__lshift>
 8009314:	0031      	movs	r1, r6
 8009316:	9005      	str	r0, [sp, #20]
 8009318:	f000 faca 	bl	80098b0 <__mcmp>
 800931c:	2800      	cmp	r0, #0
 800931e:	dc9b      	bgt.n	8009258 <_dtoa_r+0xb18>
 8009320:	d102      	bne.n	8009328 <_dtoa_r+0xbe8>
 8009322:	9b07      	ldr	r3, [sp, #28]
 8009324:	07db      	lsls	r3, r3, #31
 8009326:	d497      	bmi.n	8009258 <_dtoa_r+0xb18>
 8009328:	9b08      	ldr	r3, [sp, #32]
 800932a:	9308      	str	r3, [sp, #32]
 800932c:	3b01      	subs	r3, #1
 800932e:	781a      	ldrb	r2, [r3, #0]
 8009330:	2a30      	cmp	r2, #48	; 0x30
 8009332:	d0fa      	beq.n	800932a <_dtoa_r+0xbea>
 8009334:	e6db      	b.n	80090ee <_dtoa_r+0x9ae>
 8009336:	9a06      	ldr	r2, [sp, #24]
 8009338:	429a      	cmp	r2, r3
 800933a:	d18e      	bne.n	800925a <_dtoa_r+0xb1a>
 800933c:	9b02      	ldr	r3, [sp, #8]
 800933e:	3301      	adds	r3, #1
 8009340:	9302      	str	r3, [sp, #8]
 8009342:	2331      	movs	r3, #49	; 0x31
 8009344:	e799      	b.n	800927a <_dtoa_r+0xb3a>
 8009346:	4b09      	ldr	r3, [pc, #36]	; (800936c <_dtoa_r+0xc2c>)
 8009348:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800934a:	9306      	str	r3, [sp, #24]
 800934c:	4b08      	ldr	r3, [pc, #32]	; (8009370 <_dtoa_r+0xc30>)
 800934e:	2a00      	cmp	r2, #0
 8009350:	d001      	beq.n	8009356 <_dtoa_r+0xc16>
 8009352:	f7ff fa3f 	bl	80087d4 <_dtoa_r+0x94>
 8009356:	f7ff fa3f 	bl	80087d8 <_dtoa_r+0x98>
 800935a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800935c:	2b00      	cmp	r3, #0
 800935e:	dcb6      	bgt.n	80092ce <_dtoa_r+0xb8e>
 8009360:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009362:	2b02      	cmp	r3, #2
 8009364:	dd00      	ble.n	8009368 <_dtoa_r+0xc28>
 8009366:	e6ac      	b.n	80090c2 <_dtoa_r+0x982>
 8009368:	e7b1      	b.n	80092ce <_dtoa_r+0xb8e>
 800936a:	46c0      	nop			; (mov r8, r8)
 800936c:	0800adb0 	.word	0x0800adb0
 8009370:	0800adb8 	.word	0x0800adb8

08009374 <_localeconv_r>:
 8009374:	4800      	ldr	r0, [pc, #0]	; (8009378 <_localeconv_r+0x4>)
 8009376:	4770      	bx	lr
 8009378:	20000160 	.word	0x20000160

0800937c <malloc>:
 800937c:	b510      	push	{r4, lr}
 800937e:	4b03      	ldr	r3, [pc, #12]	; (800938c <malloc+0x10>)
 8009380:	0001      	movs	r1, r0
 8009382:	6818      	ldr	r0, [r3, #0]
 8009384:	f000 fc44 	bl	8009c10 <_malloc_r>
 8009388:	bd10      	pop	{r4, pc}
 800938a:	46c0      	nop			; (mov r8, r8)
 800938c:	2000000c 	.word	0x2000000c

08009390 <memchr>:
 8009390:	b2c9      	uxtb	r1, r1
 8009392:	1882      	adds	r2, r0, r2
 8009394:	4290      	cmp	r0, r2
 8009396:	d101      	bne.n	800939c <memchr+0xc>
 8009398:	2000      	movs	r0, #0
 800939a:	4770      	bx	lr
 800939c:	7803      	ldrb	r3, [r0, #0]
 800939e:	428b      	cmp	r3, r1
 80093a0:	d0fb      	beq.n	800939a <memchr+0xa>
 80093a2:	3001      	adds	r0, #1
 80093a4:	e7f6      	b.n	8009394 <memchr+0x4>
	...

080093a8 <_Balloc>:
 80093a8:	b570      	push	{r4, r5, r6, lr}
 80093aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80093ac:	0006      	movs	r6, r0
 80093ae:	000c      	movs	r4, r1
 80093b0:	2d00      	cmp	r5, #0
 80093b2:	d10e      	bne.n	80093d2 <_Balloc+0x2a>
 80093b4:	2010      	movs	r0, #16
 80093b6:	f7ff ffe1 	bl	800937c <malloc>
 80093ba:	1e02      	subs	r2, r0, #0
 80093bc:	6270      	str	r0, [r6, #36]	; 0x24
 80093be:	d104      	bne.n	80093ca <_Balloc+0x22>
 80093c0:	2166      	movs	r1, #102	; 0x66
 80093c2:	4b19      	ldr	r3, [pc, #100]	; (8009428 <_Balloc+0x80>)
 80093c4:	4819      	ldr	r0, [pc, #100]	; (800942c <_Balloc+0x84>)
 80093c6:	f000 fe0d 	bl	8009fe4 <__assert_func>
 80093ca:	6045      	str	r5, [r0, #4]
 80093cc:	6085      	str	r5, [r0, #8]
 80093ce:	6005      	str	r5, [r0, #0]
 80093d0:	60c5      	str	r5, [r0, #12]
 80093d2:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80093d4:	68eb      	ldr	r3, [r5, #12]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d013      	beq.n	8009402 <_Balloc+0x5a>
 80093da:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80093dc:	00a2      	lsls	r2, r4, #2
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	189b      	adds	r3, r3, r2
 80093e2:	6818      	ldr	r0, [r3, #0]
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d118      	bne.n	800941a <_Balloc+0x72>
 80093e8:	2101      	movs	r1, #1
 80093ea:	000d      	movs	r5, r1
 80093ec:	40a5      	lsls	r5, r4
 80093ee:	1d6a      	adds	r2, r5, #5
 80093f0:	0030      	movs	r0, r6
 80093f2:	0092      	lsls	r2, r2, #2
 80093f4:	f000 fb74 	bl	8009ae0 <_calloc_r>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	d00c      	beq.n	8009416 <_Balloc+0x6e>
 80093fc:	6044      	str	r4, [r0, #4]
 80093fe:	6085      	str	r5, [r0, #8]
 8009400:	e00d      	b.n	800941e <_Balloc+0x76>
 8009402:	2221      	movs	r2, #33	; 0x21
 8009404:	2104      	movs	r1, #4
 8009406:	0030      	movs	r0, r6
 8009408:	f000 fb6a 	bl	8009ae0 <_calloc_r>
 800940c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800940e:	60e8      	str	r0, [r5, #12]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1e1      	bne.n	80093da <_Balloc+0x32>
 8009416:	2000      	movs	r0, #0
 8009418:	bd70      	pop	{r4, r5, r6, pc}
 800941a:	6802      	ldr	r2, [r0, #0]
 800941c:	601a      	str	r2, [r3, #0]
 800941e:	2300      	movs	r3, #0
 8009420:	6103      	str	r3, [r0, #16]
 8009422:	60c3      	str	r3, [r0, #12]
 8009424:	e7f8      	b.n	8009418 <_Balloc+0x70>
 8009426:	46c0      	nop			; (mov r8, r8)
 8009428:	0800adbd 	.word	0x0800adbd
 800942c:	0800ae40 	.word	0x0800ae40

08009430 <_Bfree>:
 8009430:	b570      	push	{r4, r5, r6, lr}
 8009432:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009434:	0005      	movs	r5, r0
 8009436:	000c      	movs	r4, r1
 8009438:	2e00      	cmp	r6, #0
 800943a:	d10e      	bne.n	800945a <_Bfree+0x2a>
 800943c:	2010      	movs	r0, #16
 800943e:	f7ff ff9d 	bl	800937c <malloc>
 8009442:	1e02      	subs	r2, r0, #0
 8009444:	6268      	str	r0, [r5, #36]	; 0x24
 8009446:	d104      	bne.n	8009452 <_Bfree+0x22>
 8009448:	218a      	movs	r1, #138	; 0x8a
 800944a:	4b09      	ldr	r3, [pc, #36]	; (8009470 <_Bfree+0x40>)
 800944c:	4809      	ldr	r0, [pc, #36]	; (8009474 <_Bfree+0x44>)
 800944e:	f000 fdc9 	bl	8009fe4 <__assert_func>
 8009452:	6046      	str	r6, [r0, #4]
 8009454:	6086      	str	r6, [r0, #8]
 8009456:	6006      	str	r6, [r0, #0]
 8009458:	60c6      	str	r6, [r0, #12]
 800945a:	2c00      	cmp	r4, #0
 800945c:	d007      	beq.n	800946e <_Bfree+0x3e>
 800945e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009460:	6862      	ldr	r2, [r4, #4]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	0092      	lsls	r2, r2, #2
 8009466:	189b      	adds	r3, r3, r2
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	6022      	str	r2, [r4, #0]
 800946c:	601c      	str	r4, [r3, #0]
 800946e:	bd70      	pop	{r4, r5, r6, pc}
 8009470:	0800adbd 	.word	0x0800adbd
 8009474:	0800ae40 	.word	0x0800ae40

08009478 <__multadd>:
 8009478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800947a:	000e      	movs	r6, r1
 800947c:	9001      	str	r0, [sp, #4]
 800947e:	000c      	movs	r4, r1
 8009480:	001d      	movs	r5, r3
 8009482:	2000      	movs	r0, #0
 8009484:	690f      	ldr	r7, [r1, #16]
 8009486:	3614      	adds	r6, #20
 8009488:	6833      	ldr	r3, [r6, #0]
 800948a:	3001      	adds	r0, #1
 800948c:	b299      	uxth	r1, r3
 800948e:	4351      	muls	r1, r2
 8009490:	0c1b      	lsrs	r3, r3, #16
 8009492:	4353      	muls	r3, r2
 8009494:	1949      	adds	r1, r1, r5
 8009496:	0c0d      	lsrs	r5, r1, #16
 8009498:	195b      	adds	r3, r3, r5
 800949a:	0c1d      	lsrs	r5, r3, #16
 800949c:	b289      	uxth	r1, r1
 800949e:	041b      	lsls	r3, r3, #16
 80094a0:	185b      	adds	r3, r3, r1
 80094a2:	c608      	stmia	r6!, {r3}
 80094a4:	4287      	cmp	r7, r0
 80094a6:	dcef      	bgt.n	8009488 <__multadd+0x10>
 80094a8:	2d00      	cmp	r5, #0
 80094aa:	d022      	beq.n	80094f2 <__multadd+0x7a>
 80094ac:	68a3      	ldr	r3, [r4, #8]
 80094ae:	42bb      	cmp	r3, r7
 80094b0:	dc19      	bgt.n	80094e6 <__multadd+0x6e>
 80094b2:	6863      	ldr	r3, [r4, #4]
 80094b4:	9801      	ldr	r0, [sp, #4]
 80094b6:	1c59      	adds	r1, r3, #1
 80094b8:	f7ff ff76 	bl	80093a8 <_Balloc>
 80094bc:	1e06      	subs	r6, r0, #0
 80094be:	d105      	bne.n	80094cc <__multadd+0x54>
 80094c0:	0002      	movs	r2, r0
 80094c2:	21b5      	movs	r1, #181	; 0xb5
 80094c4:	4b0c      	ldr	r3, [pc, #48]	; (80094f8 <__multadd+0x80>)
 80094c6:	480d      	ldr	r0, [pc, #52]	; (80094fc <__multadd+0x84>)
 80094c8:	f000 fd8c 	bl	8009fe4 <__assert_func>
 80094cc:	0021      	movs	r1, r4
 80094ce:	6923      	ldr	r3, [r4, #16]
 80094d0:	310c      	adds	r1, #12
 80094d2:	1c9a      	adds	r2, r3, #2
 80094d4:	0092      	lsls	r2, r2, #2
 80094d6:	300c      	adds	r0, #12
 80094d8:	f7fe fbf2 	bl	8007cc0 <memcpy>
 80094dc:	0021      	movs	r1, r4
 80094de:	9801      	ldr	r0, [sp, #4]
 80094e0:	f7ff ffa6 	bl	8009430 <_Bfree>
 80094e4:	0034      	movs	r4, r6
 80094e6:	1d3b      	adds	r3, r7, #4
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	18e3      	adds	r3, r4, r3
 80094ec:	605d      	str	r5, [r3, #4]
 80094ee:	1c7b      	adds	r3, r7, #1
 80094f0:	6123      	str	r3, [r4, #16]
 80094f2:	0020      	movs	r0, r4
 80094f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80094f6:	46c0      	nop			; (mov r8, r8)
 80094f8:	0800ae2f 	.word	0x0800ae2f
 80094fc:	0800ae40 	.word	0x0800ae40

08009500 <__hi0bits>:
 8009500:	0003      	movs	r3, r0
 8009502:	0c02      	lsrs	r2, r0, #16
 8009504:	2000      	movs	r0, #0
 8009506:	4282      	cmp	r2, r0
 8009508:	d101      	bne.n	800950e <__hi0bits+0xe>
 800950a:	041b      	lsls	r3, r3, #16
 800950c:	3010      	adds	r0, #16
 800950e:	0e1a      	lsrs	r2, r3, #24
 8009510:	d101      	bne.n	8009516 <__hi0bits+0x16>
 8009512:	3008      	adds	r0, #8
 8009514:	021b      	lsls	r3, r3, #8
 8009516:	0f1a      	lsrs	r2, r3, #28
 8009518:	d101      	bne.n	800951e <__hi0bits+0x1e>
 800951a:	3004      	adds	r0, #4
 800951c:	011b      	lsls	r3, r3, #4
 800951e:	0f9a      	lsrs	r2, r3, #30
 8009520:	d101      	bne.n	8009526 <__hi0bits+0x26>
 8009522:	3002      	adds	r0, #2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	2b00      	cmp	r3, #0
 8009528:	db03      	blt.n	8009532 <__hi0bits+0x32>
 800952a:	3001      	adds	r0, #1
 800952c:	005b      	lsls	r3, r3, #1
 800952e:	d400      	bmi.n	8009532 <__hi0bits+0x32>
 8009530:	2020      	movs	r0, #32
 8009532:	4770      	bx	lr

08009534 <__lo0bits>:
 8009534:	6803      	ldr	r3, [r0, #0]
 8009536:	0002      	movs	r2, r0
 8009538:	2107      	movs	r1, #7
 800953a:	0018      	movs	r0, r3
 800953c:	4008      	ands	r0, r1
 800953e:	420b      	tst	r3, r1
 8009540:	d00d      	beq.n	800955e <__lo0bits+0x2a>
 8009542:	3906      	subs	r1, #6
 8009544:	2000      	movs	r0, #0
 8009546:	420b      	tst	r3, r1
 8009548:	d105      	bne.n	8009556 <__lo0bits+0x22>
 800954a:	3002      	adds	r0, #2
 800954c:	4203      	tst	r3, r0
 800954e:	d003      	beq.n	8009558 <__lo0bits+0x24>
 8009550:	40cb      	lsrs	r3, r1
 8009552:	0008      	movs	r0, r1
 8009554:	6013      	str	r3, [r2, #0]
 8009556:	4770      	bx	lr
 8009558:	089b      	lsrs	r3, r3, #2
 800955a:	6013      	str	r3, [r2, #0]
 800955c:	e7fb      	b.n	8009556 <__lo0bits+0x22>
 800955e:	b299      	uxth	r1, r3
 8009560:	2900      	cmp	r1, #0
 8009562:	d101      	bne.n	8009568 <__lo0bits+0x34>
 8009564:	2010      	movs	r0, #16
 8009566:	0c1b      	lsrs	r3, r3, #16
 8009568:	b2d9      	uxtb	r1, r3
 800956a:	2900      	cmp	r1, #0
 800956c:	d101      	bne.n	8009572 <__lo0bits+0x3e>
 800956e:	3008      	adds	r0, #8
 8009570:	0a1b      	lsrs	r3, r3, #8
 8009572:	0719      	lsls	r1, r3, #28
 8009574:	d101      	bne.n	800957a <__lo0bits+0x46>
 8009576:	3004      	adds	r0, #4
 8009578:	091b      	lsrs	r3, r3, #4
 800957a:	0799      	lsls	r1, r3, #30
 800957c:	d101      	bne.n	8009582 <__lo0bits+0x4e>
 800957e:	3002      	adds	r0, #2
 8009580:	089b      	lsrs	r3, r3, #2
 8009582:	07d9      	lsls	r1, r3, #31
 8009584:	d4e9      	bmi.n	800955a <__lo0bits+0x26>
 8009586:	3001      	adds	r0, #1
 8009588:	085b      	lsrs	r3, r3, #1
 800958a:	d1e6      	bne.n	800955a <__lo0bits+0x26>
 800958c:	2020      	movs	r0, #32
 800958e:	e7e2      	b.n	8009556 <__lo0bits+0x22>

08009590 <__i2b>:
 8009590:	b510      	push	{r4, lr}
 8009592:	000c      	movs	r4, r1
 8009594:	2101      	movs	r1, #1
 8009596:	f7ff ff07 	bl	80093a8 <_Balloc>
 800959a:	2800      	cmp	r0, #0
 800959c:	d106      	bne.n	80095ac <__i2b+0x1c>
 800959e:	21a0      	movs	r1, #160	; 0xa0
 80095a0:	0002      	movs	r2, r0
 80095a2:	4b04      	ldr	r3, [pc, #16]	; (80095b4 <__i2b+0x24>)
 80095a4:	4804      	ldr	r0, [pc, #16]	; (80095b8 <__i2b+0x28>)
 80095a6:	0049      	lsls	r1, r1, #1
 80095a8:	f000 fd1c 	bl	8009fe4 <__assert_func>
 80095ac:	2301      	movs	r3, #1
 80095ae:	6144      	str	r4, [r0, #20]
 80095b0:	6103      	str	r3, [r0, #16]
 80095b2:	bd10      	pop	{r4, pc}
 80095b4:	0800ae2f 	.word	0x0800ae2f
 80095b8:	0800ae40 	.word	0x0800ae40

080095bc <__multiply>:
 80095bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095be:	690b      	ldr	r3, [r1, #16]
 80095c0:	0014      	movs	r4, r2
 80095c2:	6912      	ldr	r2, [r2, #16]
 80095c4:	000d      	movs	r5, r1
 80095c6:	b089      	sub	sp, #36	; 0x24
 80095c8:	4293      	cmp	r3, r2
 80095ca:	da01      	bge.n	80095d0 <__multiply+0x14>
 80095cc:	0025      	movs	r5, r4
 80095ce:	000c      	movs	r4, r1
 80095d0:	692f      	ldr	r7, [r5, #16]
 80095d2:	6926      	ldr	r6, [r4, #16]
 80095d4:	6869      	ldr	r1, [r5, #4]
 80095d6:	19bb      	adds	r3, r7, r6
 80095d8:	9302      	str	r3, [sp, #8]
 80095da:	68ab      	ldr	r3, [r5, #8]
 80095dc:	19ba      	adds	r2, r7, r6
 80095de:	4293      	cmp	r3, r2
 80095e0:	da00      	bge.n	80095e4 <__multiply+0x28>
 80095e2:	3101      	adds	r1, #1
 80095e4:	f7ff fee0 	bl	80093a8 <_Balloc>
 80095e8:	9001      	str	r0, [sp, #4]
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d106      	bne.n	80095fc <__multiply+0x40>
 80095ee:	215e      	movs	r1, #94	; 0x5e
 80095f0:	0002      	movs	r2, r0
 80095f2:	4b48      	ldr	r3, [pc, #288]	; (8009714 <__multiply+0x158>)
 80095f4:	4848      	ldr	r0, [pc, #288]	; (8009718 <__multiply+0x15c>)
 80095f6:	31ff      	adds	r1, #255	; 0xff
 80095f8:	f000 fcf4 	bl	8009fe4 <__assert_func>
 80095fc:	9b01      	ldr	r3, [sp, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	3314      	adds	r3, #20
 8009602:	469c      	mov	ip, r3
 8009604:	19bb      	adds	r3, r7, r6
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4463      	add	r3, ip
 800960a:	9303      	str	r3, [sp, #12]
 800960c:	4663      	mov	r3, ip
 800960e:	9903      	ldr	r1, [sp, #12]
 8009610:	428b      	cmp	r3, r1
 8009612:	d32c      	bcc.n	800966e <__multiply+0xb2>
 8009614:	002b      	movs	r3, r5
 8009616:	0022      	movs	r2, r4
 8009618:	3314      	adds	r3, #20
 800961a:	00bf      	lsls	r7, r7, #2
 800961c:	3214      	adds	r2, #20
 800961e:	9306      	str	r3, [sp, #24]
 8009620:	00b6      	lsls	r6, r6, #2
 8009622:	19db      	adds	r3, r3, r7
 8009624:	9304      	str	r3, [sp, #16]
 8009626:	1993      	adds	r3, r2, r6
 8009628:	9307      	str	r3, [sp, #28]
 800962a:	2304      	movs	r3, #4
 800962c:	9305      	str	r3, [sp, #20]
 800962e:	002b      	movs	r3, r5
 8009630:	9904      	ldr	r1, [sp, #16]
 8009632:	3315      	adds	r3, #21
 8009634:	9200      	str	r2, [sp, #0]
 8009636:	4299      	cmp	r1, r3
 8009638:	d305      	bcc.n	8009646 <__multiply+0x8a>
 800963a:	1b4b      	subs	r3, r1, r5
 800963c:	3b15      	subs	r3, #21
 800963e:	089b      	lsrs	r3, r3, #2
 8009640:	3301      	adds	r3, #1
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	9305      	str	r3, [sp, #20]
 8009646:	9b07      	ldr	r3, [sp, #28]
 8009648:	9a00      	ldr	r2, [sp, #0]
 800964a:	429a      	cmp	r2, r3
 800964c:	d311      	bcc.n	8009672 <__multiply+0xb6>
 800964e:	9b02      	ldr	r3, [sp, #8]
 8009650:	2b00      	cmp	r3, #0
 8009652:	dd06      	ble.n	8009662 <__multiply+0xa6>
 8009654:	9b03      	ldr	r3, [sp, #12]
 8009656:	3b04      	subs	r3, #4
 8009658:	9303      	str	r3, [sp, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d053      	beq.n	800970a <__multiply+0x14e>
 8009662:	9b01      	ldr	r3, [sp, #4]
 8009664:	9a02      	ldr	r2, [sp, #8]
 8009666:	0018      	movs	r0, r3
 8009668:	611a      	str	r2, [r3, #16]
 800966a:	b009      	add	sp, #36	; 0x24
 800966c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800966e:	c304      	stmia	r3!, {r2}
 8009670:	e7cd      	b.n	800960e <__multiply+0x52>
 8009672:	9b00      	ldr	r3, [sp, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	b298      	uxth	r0, r3
 8009678:	2800      	cmp	r0, #0
 800967a:	d01b      	beq.n	80096b4 <__multiply+0xf8>
 800967c:	4667      	mov	r7, ip
 800967e:	2400      	movs	r4, #0
 8009680:	9e06      	ldr	r6, [sp, #24]
 8009682:	ce02      	ldmia	r6!, {r1}
 8009684:	683a      	ldr	r2, [r7, #0]
 8009686:	b28b      	uxth	r3, r1
 8009688:	4343      	muls	r3, r0
 800968a:	b292      	uxth	r2, r2
 800968c:	189b      	adds	r3, r3, r2
 800968e:	191b      	adds	r3, r3, r4
 8009690:	0c0c      	lsrs	r4, r1, #16
 8009692:	4344      	muls	r4, r0
 8009694:	683a      	ldr	r2, [r7, #0]
 8009696:	0c11      	lsrs	r1, r2, #16
 8009698:	1861      	adds	r1, r4, r1
 800969a:	0c1c      	lsrs	r4, r3, #16
 800969c:	1909      	adds	r1, r1, r4
 800969e:	0c0c      	lsrs	r4, r1, #16
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	0409      	lsls	r1, r1, #16
 80096a4:	430b      	orrs	r3, r1
 80096a6:	c708      	stmia	r7!, {r3}
 80096a8:	9b04      	ldr	r3, [sp, #16]
 80096aa:	42b3      	cmp	r3, r6
 80096ac:	d8e9      	bhi.n	8009682 <__multiply+0xc6>
 80096ae:	4663      	mov	r3, ip
 80096b0:	9a05      	ldr	r2, [sp, #20]
 80096b2:	509c      	str	r4, [r3, r2]
 80096b4:	9b00      	ldr	r3, [sp, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	0c1e      	lsrs	r6, r3, #16
 80096ba:	d020      	beq.n	80096fe <__multiply+0x142>
 80096bc:	4663      	mov	r3, ip
 80096be:	002c      	movs	r4, r5
 80096c0:	4660      	mov	r0, ip
 80096c2:	2700      	movs	r7, #0
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	3414      	adds	r4, #20
 80096c8:	6822      	ldr	r2, [r4, #0]
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	b291      	uxth	r1, r2
 80096ce:	4371      	muls	r1, r6
 80096d0:	6802      	ldr	r2, [r0, #0]
 80096d2:	0c12      	lsrs	r2, r2, #16
 80096d4:	1889      	adds	r1, r1, r2
 80096d6:	19cf      	adds	r7, r1, r7
 80096d8:	0439      	lsls	r1, r7, #16
 80096da:	430b      	orrs	r3, r1
 80096dc:	6003      	str	r3, [r0, #0]
 80096de:	cc02      	ldmia	r4!, {r1}
 80096e0:	6843      	ldr	r3, [r0, #4]
 80096e2:	0c09      	lsrs	r1, r1, #16
 80096e4:	4371      	muls	r1, r6
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	0c3f      	lsrs	r7, r7, #16
 80096ea:	18cb      	adds	r3, r1, r3
 80096ec:	9a04      	ldr	r2, [sp, #16]
 80096ee:	19db      	adds	r3, r3, r7
 80096f0:	0c1f      	lsrs	r7, r3, #16
 80096f2:	3004      	adds	r0, #4
 80096f4:	42a2      	cmp	r2, r4
 80096f6:	d8e7      	bhi.n	80096c8 <__multiply+0x10c>
 80096f8:	4662      	mov	r2, ip
 80096fa:	9905      	ldr	r1, [sp, #20]
 80096fc:	5053      	str	r3, [r2, r1]
 80096fe:	9b00      	ldr	r3, [sp, #0]
 8009700:	3304      	adds	r3, #4
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	2304      	movs	r3, #4
 8009706:	449c      	add	ip, r3
 8009708:	e79d      	b.n	8009646 <__multiply+0x8a>
 800970a:	9b02      	ldr	r3, [sp, #8]
 800970c:	3b01      	subs	r3, #1
 800970e:	9302      	str	r3, [sp, #8]
 8009710:	e79d      	b.n	800964e <__multiply+0x92>
 8009712:	46c0      	nop			; (mov r8, r8)
 8009714:	0800ae2f 	.word	0x0800ae2f
 8009718:	0800ae40 	.word	0x0800ae40

0800971c <__pow5mult>:
 800971c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800971e:	2303      	movs	r3, #3
 8009720:	0015      	movs	r5, r2
 8009722:	0007      	movs	r7, r0
 8009724:	000e      	movs	r6, r1
 8009726:	401a      	ands	r2, r3
 8009728:	421d      	tst	r5, r3
 800972a:	d008      	beq.n	800973e <__pow5mult+0x22>
 800972c:	4925      	ldr	r1, [pc, #148]	; (80097c4 <__pow5mult+0xa8>)
 800972e:	3a01      	subs	r2, #1
 8009730:	0092      	lsls	r2, r2, #2
 8009732:	5852      	ldr	r2, [r2, r1]
 8009734:	2300      	movs	r3, #0
 8009736:	0031      	movs	r1, r6
 8009738:	f7ff fe9e 	bl	8009478 <__multadd>
 800973c:	0006      	movs	r6, r0
 800973e:	10ad      	asrs	r5, r5, #2
 8009740:	d03d      	beq.n	80097be <__pow5mult+0xa2>
 8009742:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009744:	2c00      	cmp	r4, #0
 8009746:	d10f      	bne.n	8009768 <__pow5mult+0x4c>
 8009748:	2010      	movs	r0, #16
 800974a:	f7ff fe17 	bl	800937c <malloc>
 800974e:	1e02      	subs	r2, r0, #0
 8009750:	6278      	str	r0, [r7, #36]	; 0x24
 8009752:	d105      	bne.n	8009760 <__pow5mult+0x44>
 8009754:	21d7      	movs	r1, #215	; 0xd7
 8009756:	4b1c      	ldr	r3, [pc, #112]	; (80097c8 <__pow5mult+0xac>)
 8009758:	481c      	ldr	r0, [pc, #112]	; (80097cc <__pow5mult+0xb0>)
 800975a:	0049      	lsls	r1, r1, #1
 800975c:	f000 fc42 	bl	8009fe4 <__assert_func>
 8009760:	6044      	str	r4, [r0, #4]
 8009762:	6084      	str	r4, [r0, #8]
 8009764:	6004      	str	r4, [r0, #0]
 8009766:	60c4      	str	r4, [r0, #12]
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	689c      	ldr	r4, [r3, #8]
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	2c00      	cmp	r4, #0
 8009770:	d108      	bne.n	8009784 <__pow5mult+0x68>
 8009772:	0038      	movs	r0, r7
 8009774:	4916      	ldr	r1, [pc, #88]	; (80097d0 <__pow5mult+0xb4>)
 8009776:	f7ff ff0b 	bl	8009590 <__i2b>
 800977a:	9b01      	ldr	r3, [sp, #4]
 800977c:	0004      	movs	r4, r0
 800977e:	6098      	str	r0, [r3, #8]
 8009780:	2300      	movs	r3, #0
 8009782:	6003      	str	r3, [r0, #0]
 8009784:	2301      	movs	r3, #1
 8009786:	421d      	tst	r5, r3
 8009788:	d00a      	beq.n	80097a0 <__pow5mult+0x84>
 800978a:	0031      	movs	r1, r6
 800978c:	0022      	movs	r2, r4
 800978e:	0038      	movs	r0, r7
 8009790:	f7ff ff14 	bl	80095bc <__multiply>
 8009794:	0031      	movs	r1, r6
 8009796:	9001      	str	r0, [sp, #4]
 8009798:	0038      	movs	r0, r7
 800979a:	f7ff fe49 	bl	8009430 <_Bfree>
 800979e:	9e01      	ldr	r6, [sp, #4]
 80097a0:	106d      	asrs	r5, r5, #1
 80097a2:	d00c      	beq.n	80097be <__pow5mult+0xa2>
 80097a4:	6820      	ldr	r0, [r4, #0]
 80097a6:	2800      	cmp	r0, #0
 80097a8:	d107      	bne.n	80097ba <__pow5mult+0x9e>
 80097aa:	0022      	movs	r2, r4
 80097ac:	0021      	movs	r1, r4
 80097ae:	0038      	movs	r0, r7
 80097b0:	f7ff ff04 	bl	80095bc <__multiply>
 80097b4:	2300      	movs	r3, #0
 80097b6:	6020      	str	r0, [r4, #0]
 80097b8:	6003      	str	r3, [r0, #0]
 80097ba:	0004      	movs	r4, r0
 80097bc:	e7e2      	b.n	8009784 <__pow5mult+0x68>
 80097be:	0030      	movs	r0, r6
 80097c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097c2:	46c0      	nop			; (mov r8, r8)
 80097c4:	0800af90 	.word	0x0800af90
 80097c8:	0800adbd 	.word	0x0800adbd
 80097cc:	0800ae40 	.word	0x0800ae40
 80097d0:	00000271 	.word	0x00000271

080097d4 <__lshift>:
 80097d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097d6:	000c      	movs	r4, r1
 80097d8:	0017      	movs	r7, r2
 80097da:	6923      	ldr	r3, [r4, #16]
 80097dc:	1155      	asrs	r5, r2, #5
 80097de:	b087      	sub	sp, #28
 80097e0:	18eb      	adds	r3, r5, r3
 80097e2:	9302      	str	r3, [sp, #8]
 80097e4:	3301      	adds	r3, #1
 80097e6:	9301      	str	r3, [sp, #4]
 80097e8:	6849      	ldr	r1, [r1, #4]
 80097ea:	68a3      	ldr	r3, [r4, #8]
 80097ec:	9004      	str	r0, [sp, #16]
 80097ee:	9a01      	ldr	r2, [sp, #4]
 80097f0:	4293      	cmp	r3, r2
 80097f2:	db10      	blt.n	8009816 <__lshift+0x42>
 80097f4:	9804      	ldr	r0, [sp, #16]
 80097f6:	f7ff fdd7 	bl	80093a8 <_Balloc>
 80097fa:	2300      	movs	r3, #0
 80097fc:	0002      	movs	r2, r0
 80097fe:	0006      	movs	r6, r0
 8009800:	0019      	movs	r1, r3
 8009802:	3214      	adds	r2, #20
 8009804:	4298      	cmp	r0, r3
 8009806:	d10c      	bne.n	8009822 <__lshift+0x4e>
 8009808:	21da      	movs	r1, #218	; 0xda
 800980a:	0002      	movs	r2, r0
 800980c:	4b26      	ldr	r3, [pc, #152]	; (80098a8 <__lshift+0xd4>)
 800980e:	4827      	ldr	r0, [pc, #156]	; (80098ac <__lshift+0xd8>)
 8009810:	31ff      	adds	r1, #255	; 0xff
 8009812:	f000 fbe7 	bl	8009fe4 <__assert_func>
 8009816:	3101      	adds	r1, #1
 8009818:	005b      	lsls	r3, r3, #1
 800981a:	e7e8      	b.n	80097ee <__lshift+0x1a>
 800981c:	0098      	lsls	r0, r3, #2
 800981e:	5011      	str	r1, [r2, r0]
 8009820:	3301      	adds	r3, #1
 8009822:	42ab      	cmp	r3, r5
 8009824:	dbfa      	blt.n	800981c <__lshift+0x48>
 8009826:	43eb      	mvns	r3, r5
 8009828:	17db      	asrs	r3, r3, #31
 800982a:	401d      	ands	r5, r3
 800982c:	211f      	movs	r1, #31
 800982e:	0023      	movs	r3, r4
 8009830:	0038      	movs	r0, r7
 8009832:	00ad      	lsls	r5, r5, #2
 8009834:	1955      	adds	r5, r2, r5
 8009836:	6922      	ldr	r2, [r4, #16]
 8009838:	3314      	adds	r3, #20
 800983a:	0092      	lsls	r2, r2, #2
 800983c:	4008      	ands	r0, r1
 800983e:	4684      	mov	ip, r0
 8009840:	189a      	adds	r2, r3, r2
 8009842:	420f      	tst	r7, r1
 8009844:	d02a      	beq.n	800989c <__lshift+0xc8>
 8009846:	3101      	adds	r1, #1
 8009848:	1a09      	subs	r1, r1, r0
 800984a:	9105      	str	r1, [sp, #20]
 800984c:	2100      	movs	r1, #0
 800984e:	9503      	str	r5, [sp, #12]
 8009850:	4667      	mov	r7, ip
 8009852:	6818      	ldr	r0, [r3, #0]
 8009854:	40b8      	lsls	r0, r7
 8009856:	4301      	orrs	r1, r0
 8009858:	9803      	ldr	r0, [sp, #12]
 800985a:	c002      	stmia	r0!, {r1}
 800985c:	cb02      	ldmia	r3!, {r1}
 800985e:	9003      	str	r0, [sp, #12]
 8009860:	9805      	ldr	r0, [sp, #20]
 8009862:	40c1      	lsrs	r1, r0
 8009864:	429a      	cmp	r2, r3
 8009866:	d8f3      	bhi.n	8009850 <__lshift+0x7c>
 8009868:	0020      	movs	r0, r4
 800986a:	3015      	adds	r0, #21
 800986c:	2304      	movs	r3, #4
 800986e:	4282      	cmp	r2, r0
 8009870:	d304      	bcc.n	800987c <__lshift+0xa8>
 8009872:	1b13      	subs	r3, r2, r4
 8009874:	3b15      	subs	r3, #21
 8009876:	089b      	lsrs	r3, r3, #2
 8009878:	3301      	adds	r3, #1
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	50e9      	str	r1, [r5, r3]
 800987e:	2900      	cmp	r1, #0
 8009880:	d002      	beq.n	8009888 <__lshift+0xb4>
 8009882:	9b02      	ldr	r3, [sp, #8]
 8009884:	3302      	adds	r3, #2
 8009886:	9301      	str	r3, [sp, #4]
 8009888:	9b01      	ldr	r3, [sp, #4]
 800988a:	9804      	ldr	r0, [sp, #16]
 800988c:	3b01      	subs	r3, #1
 800988e:	0021      	movs	r1, r4
 8009890:	6133      	str	r3, [r6, #16]
 8009892:	f7ff fdcd 	bl	8009430 <_Bfree>
 8009896:	0030      	movs	r0, r6
 8009898:	b007      	add	sp, #28
 800989a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800989c:	cb02      	ldmia	r3!, {r1}
 800989e:	c502      	stmia	r5!, {r1}
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d8fb      	bhi.n	800989c <__lshift+0xc8>
 80098a4:	e7f0      	b.n	8009888 <__lshift+0xb4>
 80098a6:	46c0      	nop			; (mov r8, r8)
 80098a8:	0800ae2f 	.word	0x0800ae2f
 80098ac:	0800ae40 	.word	0x0800ae40

080098b0 <__mcmp>:
 80098b0:	6902      	ldr	r2, [r0, #16]
 80098b2:	690b      	ldr	r3, [r1, #16]
 80098b4:	b530      	push	{r4, r5, lr}
 80098b6:	0004      	movs	r4, r0
 80098b8:	1ad0      	subs	r0, r2, r3
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d10d      	bne.n	80098da <__mcmp+0x2a>
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	3414      	adds	r4, #20
 80098c2:	3114      	adds	r1, #20
 80098c4:	18e2      	adds	r2, r4, r3
 80098c6:	18c9      	adds	r1, r1, r3
 80098c8:	3a04      	subs	r2, #4
 80098ca:	3904      	subs	r1, #4
 80098cc:	6815      	ldr	r5, [r2, #0]
 80098ce:	680b      	ldr	r3, [r1, #0]
 80098d0:	429d      	cmp	r5, r3
 80098d2:	d003      	beq.n	80098dc <__mcmp+0x2c>
 80098d4:	2001      	movs	r0, #1
 80098d6:	429d      	cmp	r5, r3
 80098d8:	d303      	bcc.n	80098e2 <__mcmp+0x32>
 80098da:	bd30      	pop	{r4, r5, pc}
 80098dc:	4294      	cmp	r4, r2
 80098de:	d3f3      	bcc.n	80098c8 <__mcmp+0x18>
 80098e0:	e7fb      	b.n	80098da <__mcmp+0x2a>
 80098e2:	4240      	negs	r0, r0
 80098e4:	e7f9      	b.n	80098da <__mcmp+0x2a>
	...

080098e8 <__mdiff>:
 80098e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ea:	000e      	movs	r6, r1
 80098ec:	0007      	movs	r7, r0
 80098ee:	0011      	movs	r1, r2
 80098f0:	0030      	movs	r0, r6
 80098f2:	b087      	sub	sp, #28
 80098f4:	0014      	movs	r4, r2
 80098f6:	f7ff ffdb 	bl	80098b0 <__mcmp>
 80098fa:	1e05      	subs	r5, r0, #0
 80098fc:	d110      	bne.n	8009920 <__mdiff+0x38>
 80098fe:	0001      	movs	r1, r0
 8009900:	0038      	movs	r0, r7
 8009902:	f7ff fd51 	bl	80093a8 <_Balloc>
 8009906:	1e02      	subs	r2, r0, #0
 8009908:	d104      	bne.n	8009914 <__mdiff+0x2c>
 800990a:	4b40      	ldr	r3, [pc, #256]	; (8009a0c <__mdiff+0x124>)
 800990c:	4940      	ldr	r1, [pc, #256]	; (8009a10 <__mdiff+0x128>)
 800990e:	4841      	ldr	r0, [pc, #260]	; (8009a14 <__mdiff+0x12c>)
 8009910:	f000 fb68 	bl	8009fe4 <__assert_func>
 8009914:	2301      	movs	r3, #1
 8009916:	6145      	str	r5, [r0, #20]
 8009918:	6103      	str	r3, [r0, #16]
 800991a:	0010      	movs	r0, r2
 800991c:	b007      	add	sp, #28
 800991e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009920:	2301      	movs	r3, #1
 8009922:	9301      	str	r3, [sp, #4]
 8009924:	2800      	cmp	r0, #0
 8009926:	db04      	blt.n	8009932 <__mdiff+0x4a>
 8009928:	0023      	movs	r3, r4
 800992a:	0034      	movs	r4, r6
 800992c:	001e      	movs	r6, r3
 800992e:	2300      	movs	r3, #0
 8009930:	9301      	str	r3, [sp, #4]
 8009932:	0038      	movs	r0, r7
 8009934:	6861      	ldr	r1, [r4, #4]
 8009936:	f7ff fd37 	bl	80093a8 <_Balloc>
 800993a:	1e02      	subs	r2, r0, #0
 800993c:	d103      	bne.n	8009946 <__mdiff+0x5e>
 800993e:	2190      	movs	r1, #144	; 0x90
 8009940:	4b32      	ldr	r3, [pc, #200]	; (8009a0c <__mdiff+0x124>)
 8009942:	0089      	lsls	r1, r1, #2
 8009944:	e7e3      	b.n	800990e <__mdiff+0x26>
 8009946:	9b01      	ldr	r3, [sp, #4]
 8009948:	2700      	movs	r7, #0
 800994a:	60c3      	str	r3, [r0, #12]
 800994c:	6920      	ldr	r0, [r4, #16]
 800994e:	3414      	adds	r4, #20
 8009950:	9401      	str	r4, [sp, #4]
 8009952:	9b01      	ldr	r3, [sp, #4]
 8009954:	0084      	lsls	r4, r0, #2
 8009956:	191b      	adds	r3, r3, r4
 8009958:	0034      	movs	r4, r6
 800995a:	9302      	str	r3, [sp, #8]
 800995c:	6933      	ldr	r3, [r6, #16]
 800995e:	3414      	adds	r4, #20
 8009960:	0099      	lsls	r1, r3, #2
 8009962:	1863      	adds	r3, r4, r1
 8009964:	9303      	str	r3, [sp, #12]
 8009966:	0013      	movs	r3, r2
 8009968:	3314      	adds	r3, #20
 800996a:	469c      	mov	ip, r3
 800996c:	9305      	str	r3, [sp, #20]
 800996e:	9b01      	ldr	r3, [sp, #4]
 8009970:	9304      	str	r3, [sp, #16]
 8009972:	9b04      	ldr	r3, [sp, #16]
 8009974:	cc02      	ldmia	r4!, {r1}
 8009976:	cb20      	ldmia	r3!, {r5}
 8009978:	9304      	str	r3, [sp, #16]
 800997a:	b2ab      	uxth	r3, r5
 800997c:	19df      	adds	r7, r3, r7
 800997e:	b28b      	uxth	r3, r1
 8009980:	1afb      	subs	r3, r7, r3
 8009982:	0c09      	lsrs	r1, r1, #16
 8009984:	0c2d      	lsrs	r5, r5, #16
 8009986:	1a6d      	subs	r5, r5, r1
 8009988:	1419      	asrs	r1, r3, #16
 800998a:	186d      	adds	r5, r5, r1
 800998c:	4661      	mov	r1, ip
 800998e:	142f      	asrs	r7, r5, #16
 8009990:	b29b      	uxth	r3, r3
 8009992:	042d      	lsls	r5, r5, #16
 8009994:	432b      	orrs	r3, r5
 8009996:	c108      	stmia	r1!, {r3}
 8009998:	9b03      	ldr	r3, [sp, #12]
 800999a:	468c      	mov	ip, r1
 800999c:	42a3      	cmp	r3, r4
 800999e:	d8e8      	bhi.n	8009972 <__mdiff+0x8a>
 80099a0:	0031      	movs	r1, r6
 80099a2:	9c03      	ldr	r4, [sp, #12]
 80099a4:	3115      	adds	r1, #21
 80099a6:	2304      	movs	r3, #4
 80099a8:	428c      	cmp	r4, r1
 80099aa:	d304      	bcc.n	80099b6 <__mdiff+0xce>
 80099ac:	1ba3      	subs	r3, r4, r6
 80099ae:	3b15      	subs	r3, #21
 80099b0:	089b      	lsrs	r3, r3, #2
 80099b2:	3301      	adds	r3, #1
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	9901      	ldr	r1, [sp, #4]
 80099b8:	18cc      	adds	r4, r1, r3
 80099ba:	9905      	ldr	r1, [sp, #20]
 80099bc:	0026      	movs	r6, r4
 80099be:	18cb      	adds	r3, r1, r3
 80099c0:	469c      	mov	ip, r3
 80099c2:	9902      	ldr	r1, [sp, #8]
 80099c4:	428e      	cmp	r6, r1
 80099c6:	d310      	bcc.n	80099ea <__mdiff+0x102>
 80099c8:	9e02      	ldr	r6, [sp, #8]
 80099ca:	1ee1      	subs	r1, r4, #3
 80099cc:	2500      	movs	r5, #0
 80099ce:	428e      	cmp	r6, r1
 80099d0:	d304      	bcc.n	80099dc <__mdiff+0xf4>
 80099d2:	0031      	movs	r1, r6
 80099d4:	3103      	adds	r1, #3
 80099d6:	1b0c      	subs	r4, r1, r4
 80099d8:	08a4      	lsrs	r4, r4, #2
 80099da:	00a5      	lsls	r5, r4, #2
 80099dc:	195b      	adds	r3, r3, r5
 80099de:	3b04      	subs	r3, #4
 80099e0:	6819      	ldr	r1, [r3, #0]
 80099e2:	2900      	cmp	r1, #0
 80099e4:	d00f      	beq.n	8009a06 <__mdiff+0x11e>
 80099e6:	6110      	str	r0, [r2, #16]
 80099e8:	e797      	b.n	800991a <__mdiff+0x32>
 80099ea:	ce02      	ldmia	r6!, {r1}
 80099ec:	b28d      	uxth	r5, r1
 80099ee:	19ed      	adds	r5, r5, r7
 80099f0:	0c0f      	lsrs	r7, r1, #16
 80099f2:	1429      	asrs	r1, r5, #16
 80099f4:	1879      	adds	r1, r7, r1
 80099f6:	140f      	asrs	r7, r1, #16
 80099f8:	b2ad      	uxth	r5, r5
 80099fa:	0409      	lsls	r1, r1, #16
 80099fc:	430d      	orrs	r5, r1
 80099fe:	4661      	mov	r1, ip
 8009a00:	c120      	stmia	r1!, {r5}
 8009a02:	468c      	mov	ip, r1
 8009a04:	e7dd      	b.n	80099c2 <__mdiff+0xda>
 8009a06:	3801      	subs	r0, #1
 8009a08:	e7e9      	b.n	80099de <__mdiff+0xf6>
 8009a0a:	46c0      	nop			; (mov r8, r8)
 8009a0c:	0800ae2f 	.word	0x0800ae2f
 8009a10:	00000232 	.word	0x00000232
 8009a14:	0800ae40 	.word	0x0800ae40

08009a18 <__d2b>:
 8009a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a1a:	2101      	movs	r1, #1
 8009a1c:	0014      	movs	r4, r2
 8009a1e:	001e      	movs	r6, r3
 8009a20:	9f08      	ldr	r7, [sp, #32]
 8009a22:	f7ff fcc1 	bl	80093a8 <_Balloc>
 8009a26:	1e05      	subs	r5, r0, #0
 8009a28:	d105      	bne.n	8009a36 <__d2b+0x1e>
 8009a2a:	0002      	movs	r2, r0
 8009a2c:	4b26      	ldr	r3, [pc, #152]	; (8009ac8 <__d2b+0xb0>)
 8009a2e:	4927      	ldr	r1, [pc, #156]	; (8009acc <__d2b+0xb4>)
 8009a30:	4827      	ldr	r0, [pc, #156]	; (8009ad0 <__d2b+0xb8>)
 8009a32:	f000 fad7 	bl	8009fe4 <__assert_func>
 8009a36:	0333      	lsls	r3, r6, #12
 8009a38:	0076      	lsls	r6, r6, #1
 8009a3a:	0b1b      	lsrs	r3, r3, #12
 8009a3c:	0d76      	lsrs	r6, r6, #21
 8009a3e:	d124      	bne.n	8009a8a <__d2b+0x72>
 8009a40:	9301      	str	r3, [sp, #4]
 8009a42:	2c00      	cmp	r4, #0
 8009a44:	d027      	beq.n	8009a96 <__d2b+0x7e>
 8009a46:	4668      	mov	r0, sp
 8009a48:	9400      	str	r4, [sp, #0]
 8009a4a:	f7ff fd73 	bl	8009534 <__lo0bits>
 8009a4e:	9c00      	ldr	r4, [sp, #0]
 8009a50:	2800      	cmp	r0, #0
 8009a52:	d01e      	beq.n	8009a92 <__d2b+0x7a>
 8009a54:	9b01      	ldr	r3, [sp, #4]
 8009a56:	2120      	movs	r1, #32
 8009a58:	001a      	movs	r2, r3
 8009a5a:	1a09      	subs	r1, r1, r0
 8009a5c:	408a      	lsls	r2, r1
 8009a5e:	40c3      	lsrs	r3, r0
 8009a60:	4322      	orrs	r2, r4
 8009a62:	616a      	str	r2, [r5, #20]
 8009a64:	9301      	str	r3, [sp, #4]
 8009a66:	9c01      	ldr	r4, [sp, #4]
 8009a68:	61ac      	str	r4, [r5, #24]
 8009a6a:	1e63      	subs	r3, r4, #1
 8009a6c:	419c      	sbcs	r4, r3
 8009a6e:	3401      	adds	r4, #1
 8009a70:	612c      	str	r4, [r5, #16]
 8009a72:	2e00      	cmp	r6, #0
 8009a74:	d018      	beq.n	8009aa8 <__d2b+0x90>
 8009a76:	4b17      	ldr	r3, [pc, #92]	; (8009ad4 <__d2b+0xbc>)
 8009a78:	18f6      	adds	r6, r6, r3
 8009a7a:	2335      	movs	r3, #53	; 0x35
 8009a7c:	1836      	adds	r6, r6, r0
 8009a7e:	1a18      	subs	r0, r3, r0
 8009a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a82:	603e      	str	r6, [r7, #0]
 8009a84:	6018      	str	r0, [r3, #0]
 8009a86:	0028      	movs	r0, r5
 8009a88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a8a:	2280      	movs	r2, #128	; 0x80
 8009a8c:	0352      	lsls	r2, r2, #13
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	e7d6      	b.n	8009a40 <__d2b+0x28>
 8009a92:	616c      	str	r4, [r5, #20]
 8009a94:	e7e7      	b.n	8009a66 <__d2b+0x4e>
 8009a96:	a801      	add	r0, sp, #4
 8009a98:	f7ff fd4c 	bl	8009534 <__lo0bits>
 8009a9c:	2401      	movs	r4, #1
 8009a9e:	9b01      	ldr	r3, [sp, #4]
 8009aa0:	612c      	str	r4, [r5, #16]
 8009aa2:	616b      	str	r3, [r5, #20]
 8009aa4:	3020      	adds	r0, #32
 8009aa6:	e7e4      	b.n	8009a72 <__d2b+0x5a>
 8009aa8:	4b0b      	ldr	r3, [pc, #44]	; (8009ad8 <__d2b+0xc0>)
 8009aaa:	18c0      	adds	r0, r0, r3
 8009aac:	4b0b      	ldr	r3, [pc, #44]	; (8009adc <__d2b+0xc4>)
 8009aae:	6038      	str	r0, [r7, #0]
 8009ab0:	18e3      	adds	r3, r4, r3
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	18eb      	adds	r3, r5, r3
 8009ab6:	6958      	ldr	r0, [r3, #20]
 8009ab8:	f7ff fd22 	bl	8009500 <__hi0bits>
 8009abc:	0164      	lsls	r4, r4, #5
 8009abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac0:	1a24      	subs	r4, r4, r0
 8009ac2:	601c      	str	r4, [r3, #0]
 8009ac4:	e7df      	b.n	8009a86 <__d2b+0x6e>
 8009ac6:	46c0      	nop			; (mov r8, r8)
 8009ac8:	0800ae2f 	.word	0x0800ae2f
 8009acc:	0000030a 	.word	0x0000030a
 8009ad0:	0800ae40 	.word	0x0800ae40
 8009ad4:	fffffbcd 	.word	0xfffffbcd
 8009ad8:	fffffbce 	.word	0xfffffbce
 8009adc:	3fffffff 	.word	0x3fffffff

08009ae0 <_calloc_r>:
 8009ae0:	b570      	push	{r4, r5, r6, lr}
 8009ae2:	0c13      	lsrs	r3, r2, #16
 8009ae4:	0c0d      	lsrs	r5, r1, #16
 8009ae6:	d11e      	bne.n	8009b26 <_calloc_r+0x46>
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10c      	bne.n	8009b06 <_calloc_r+0x26>
 8009aec:	b289      	uxth	r1, r1
 8009aee:	b294      	uxth	r4, r2
 8009af0:	434c      	muls	r4, r1
 8009af2:	0021      	movs	r1, r4
 8009af4:	f000 f88c 	bl	8009c10 <_malloc_r>
 8009af8:	1e05      	subs	r5, r0, #0
 8009afa:	d01b      	beq.n	8009b34 <_calloc_r+0x54>
 8009afc:	0022      	movs	r2, r4
 8009afe:	2100      	movs	r1, #0
 8009b00:	f7fe f8e7 	bl	8007cd2 <memset>
 8009b04:	e016      	b.n	8009b34 <_calloc_r+0x54>
 8009b06:	1c1d      	adds	r5, r3, #0
 8009b08:	1c0b      	adds	r3, r1, #0
 8009b0a:	b292      	uxth	r2, r2
 8009b0c:	b289      	uxth	r1, r1
 8009b0e:	b29c      	uxth	r4, r3
 8009b10:	4351      	muls	r1, r2
 8009b12:	b2ab      	uxth	r3, r5
 8009b14:	4363      	muls	r3, r4
 8009b16:	0c0c      	lsrs	r4, r1, #16
 8009b18:	191c      	adds	r4, r3, r4
 8009b1a:	0c22      	lsrs	r2, r4, #16
 8009b1c:	d107      	bne.n	8009b2e <_calloc_r+0x4e>
 8009b1e:	0424      	lsls	r4, r4, #16
 8009b20:	b289      	uxth	r1, r1
 8009b22:	430c      	orrs	r4, r1
 8009b24:	e7e5      	b.n	8009af2 <_calloc_r+0x12>
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d101      	bne.n	8009b2e <_calloc_r+0x4e>
 8009b2a:	1c13      	adds	r3, r2, #0
 8009b2c:	e7ed      	b.n	8009b0a <_calloc_r+0x2a>
 8009b2e:	230c      	movs	r3, #12
 8009b30:	2500      	movs	r5, #0
 8009b32:	6003      	str	r3, [r0, #0]
 8009b34:	0028      	movs	r0, r5
 8009b36:	bd70      	pop	{r4, r5, r6, pc}

08009b38 <_free_r>:
 8009b38:	b570      	push	{r4, r5, r6, lr}
 8009b3a:	0005      	movs	r5, r0
 8009b3c:	2900      	cmp	r1, #0
 8009b3e:	d010      	beq.n	8009b62 <_free_r+0x2a>
 8009b40:	1f0c      	subs	r4, r1, #4
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	da00      	bge.n	8009b4a <_free_r+0x12>
 8009b48:	18e4      	adds	r4, r4, r3
 8009b4a:	0028      	movs	r0, r5
 8009b4c:	f000 fa9e 	bl	800a08c <__malloc_lock>
 8009b50:	4a1d      	ldr	r2, [pc, #116]	; (8009bc8 <_free_r+0x90>)
 8009b52:	6813      	ldr	r3, [r2, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d105      	bne.n	8009b64 <_free_r+0x2c>
 8009b58:	6063      	str	r3, [r4, #4]
 8009b5a:	6014      	str	r4, [r2, #0]
 8009b5c:	0028      	movs	r0, r5
 8009b5e:	f000 fa9d 	bl	800a09c <__malloc_unlock>
 8009b62:	bd70      	pop	{r4, r5, r6, pc}
 8009b64:	42a3      	cmp	r3, r4
 8009b66:	d908      	bls.n	8009b7a <_free_r+0x42>
 8009b68:	6821      	ldr	r1, [r4, #0]
 8009b6a:	1860      	adds	r0, r4, r1
 8009b6c:	4283      	cmp	r3, r0
 8009b6e:	d1f3      	bne.n	8009b58 <_free_r+0x20>
 8009b70:	6818      	ldr	r0, [r3, #0]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	1841      	adds	r1, r0, r1
 8009b76:	6021      	str	r1, [r4, #0]
 8009b78:	e7ee      	b.n	8009b58 <_free_r+0x20>
 8009b7a:	001a      	movs	r2, r3
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <_free_r+0x4e>
 8009b82:	42a3      	cmp	r3, r4
 8009b84:	d9f9      	bls.n	8009b7a <_free_r+0x42>
 8009b86:	6811      	ldr	r1, [r2, #0]
 8009b88:	1850      	adds	r0, r2, r1
 8009b8a:	42a0      	cmp	r0, r4
 8009b8c:	d10b      	bne.n	8009ba6 <_free_r+0x6e>
 8009b8e:	6820      	ldr	r0, [r4, #0]
 8009b90:	1809      	adds	r1, r1, r0
 8009b92:	1850      	adds	r0, r2, r1
 8009b94:	6011      	str	r1, [r2, #0]
 8009b96:	4283      	cmp	r3, r0
 8009b98:	d1e0      	bne.n	8009b5c <_free_r+0x24>
 8009b9a:	6818      	ldr	r0, [r3, #0]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	1841      	adds	r1, r0, r1
 8009ba0:	6011      	str	r1, [r2, #0]
 8009ba2:	6053      	str	r3, [r2, #4]
 8009ba4:	e7da      	b.n	8009b5c <_free_r+0x24>
 8009ba6:	42a0      	cmp	r0, r4
 8009ba8:	d902      	bls.n	8009bb0 <_free_r+0x78>
 8009baa:	230c      	movs	r3, #12
 8009bac:	602b      	str	r3, [r5, #0]
 8009bae:	e7d5      	b.n	8009b5c <_free_r+0x24>
 8009bb0:	6821      	ldr	r1, [r4, #0]
 8009bb2:	1860      	adds	r0, r4, r1
 8009bb4:	4283      	cmp	r3, r0
 8009bb6:	d103      	bne.n	8009bc0 <_free_r+0x88>
 8009bb8:	6818      	ldr	r0, [r3, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	1841      	adds	r1, r0, r1
 8009bbe:	6021      	str	r1, [r4, #0]
 8009bc0:	6063      	str	r3, [r4, #4]
 8009bc2:	6054      	str	r4, [r2, #4]
 8009bc4:	e7ca      	b.n	8009b5c <_free_r+0x24>
 8009bc6:	46c0      	nop			; (mov r8, r8)
 8009bc8:	20000430 	.word	0x20000430

08009bcc <sbrk_aligned>:
 8009bcc:	b570      	push	{r4, r5, r6, lr}
 8009bce:	4e0f      	ldr	r6, [pc, #60]	; (8009c0c <sbrk_aligned+0x40>)
 8009bd0:	000d      	movs	r5, r1
 8009bd2:	6831      	ldr	r1, [r6, #0]
 8009bd4:	0004      	movs	r4, r0
 8009bd6:	2900      	cmp	r1, #0
 8009bd8:	d102      	bne.n	8009be0 <sbrk_aligned+0x14>
 8009bda:	f000 f9f1 	bl	8009fc0 <_sbrk_r>
 8009bde:	6030      	str	r0, [r6, #0]
 8009be0:	0029      	movs	r1, r5
 8009be2:	0020      	movs	r0, r4
 8009be4:	f000 f9ec 	bl	8009fc0 <_sbrk_r>
 8009be8:	1c43      	adds	r3, r0, #1
 8009bea:	d00a      	beq.n	8009c02 <sbrk_aligned+0x36>
 8009bec:	2303      	movs	r3, #3
 8009bee:	1cc5      	adds	r5, r0, #3
 8009bf0:	439d      	bics	r5, r3
 8009bf2:	42a8      	cmp	r0, r5
 8009bf4:	d007      	beq.n	8009c06 <sbrk_aligned+0x3a>
 8009bf6:	1a29      	subs	r1, r5, r0
 8009bf8:	0020      	movs	r0, r4
 8009bfa:	f000 f9e1 	bl	8009fc0 <_sbrk_r>
 8009bfe:	1c43      	adds	r3, r0, #1
 8009c00:	d101      	bne.n	8009c06 <sbrk_aligned+0x3a>
 8009c02:	2501      	movs	r5, #1
 8009c04:	426d      	negs	r5, r5
 8009c06:	0028      	movs	r0, r5
 8009c08:	bd70      	pop	{r4, r5, r6, pc}
 8009c0a:	46c0      	nop			; (mov r8, r8)
 8009c0c:	20000434 	.word	0x20000434

08009c10 <_malloc_r>:
 8009c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c12:	2203      	movs	r2, #3
 8009c14:	1ccb      	adds	r3, r1, #3
 8009c16:	4393      	bics	r3, r2
 8009c18:	3308      	adds	r3, #8
 8009c1a:	0006      	movs	r6, r0
 8009c1c:	001f      	movs	r7, r3
 8009c1e:	2b0c      	cmp	r3, #12
 8009c20:	d232      	bcs.n	8009c88 <_malloc_r+0x78>
 8009c22:	270c      	movs	r7, #12
 8009c24:	42b9      	cmp	r1, r7
 8009c26:	d831      	bhi.n	8009c8c <_malloc_r+0x7c>
 8009c28:	0030      	movs	r0, r6
 8009c2a:	f000 fa2f 	bl	800a08c <__malloc_lock>
 8009c2e:	4d32      	ldr	r5, [pc, #200]	; (8009cf8 <_malloc_r+0xe8>)
 8009c30:	682b      	ldr	r3, [r5, #0]
 8009c32:	001c      	movs	r4, r3
 8009c34:	2c00      	cmp	r4, #0
 8009c36:	d12e      	bne.n	8009c96 <_malloc_r+0x86>
 8009c38:	0039      	movs	r1, r7
 8009c3a:	0030      	movs	r0, r6
 8009c3c:	f7ff ffc6 	bl	8009bcc <sbrk_aligned>
 8009c40:	0004      	movs	r4, r0
 8009c42:	1c43      	adds	r3, r0, #1
 8009c44:	d11e      	bne.n	8009c84 <_malloc_r+0x74>
 8009c46:	682c      	ldr	r4, [r5, #0]
 8009c48:	0025      	movs	r5, r4
 8009c4a:	2d00      	cmp	r5, #0
 8009c4c:	d14a      	bne.n	8009ce4 <_malloc_r+0xd4>
 8009c4e:	6823      	ldr	r3, [r4, #0]
 8009c50:	0029      	movs	r1, r5
 8009c52:	18e3      	adds	r3, r4, r3
 8009c54:	0030      	movs	r0, r6
 8009c56:	9301      	str	r3, [sp, #4]
 8009c58:	f000 f9b2 	bl	8009fc0 <_sbrk_r>
 8009c5c:	9b01      	ldr	r3, [sp, #4]
 8009c5e:	4283      	cmp	r3, r0
 8009c60:	d143      	bne.n	8009cea <_malloc_r+0xda>
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	3703      	adds	r7, #3
 8009c66:	1aff      	subs	r7, r7, r3
 8009c68:	2303      	movs	r3, #3
 8009c6a:	439f      	bics	r7, r3
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	2f0c      	cmp	r7, #12
 8009c70:	d200      	bcs.n	8009c74 <_malloc_r+0x64>
 8009c72:	270c      	movs	r7, #12
 8009c74:	0039      	movs	r1, r7
 8009c76:	0030      	movs	r0, r6
 8009c78:	f7ff ffa8 	bl	8009bcc <sbrk_aligned>
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	d034      	beq.n	8009cea <_malloc_r+0xda>
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	19df      	adds	r7, r3, r7
 8009c84:	6027      	str	r7, [r4, #0]
 8009c86:	e013      	b.n	8009cb0 <_malloc_r+0xa0>
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	dacb      	bge.n	8009c24 <_malloc_r+0x14>
 8009c8c:	230c      	movs	r3, #12
 8009c8e:	2500      	movs	r5, #0
 8009c90:	6033      	str	r3, [r6, #0]
 8009c92:	0028      	movs	r0, r5
 8009c94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c96:	6822      	ldr	r2, [r4, #0]
 8009c98:	1bd1      	subs	r1, r2, r7
 8009c9a:	d420      	bmi.n	8009cde <_malloc_r+0xce>
 8009c9c:	290b      	cmp	r1, #11
 8009c9e:	d917      	bls.n	8009cd0 <_malloc_r+0xc0>
 8009ca0:	19e2      	adds	r2, r4, r7
 8009ca2:	6027      	str	r7, [r4, #0]
 8009ca4:	42a3      	cmp	r3, r4
 8009ca6:	d111      	bne.n	8009ccc <_malloc_r+0xbc>
 8009ca8:	602a      	str	r2, [r5, #0]
 8009caa:	6863      	ldr	r3, [r4, #4]
 8009cac:	6011      	str	r1, [r2, #0]
 8009cae:	6053      	str	r3, [r2, #4]
 8009cb0:	0030      	movs	r0, r6
 8009cb2:	0025      	movs	r5, r4
 8009cb4:	f000 f9f2 	bl	800a09c <__malloc_unlock>
 8009cb8:	2207      	movs	r2, #7
 8009cba:	350b      	adds	r5, #11
 8009cbc:	1d23      	adds	r3, r4, #4
 8009cbe:	4395      	bics	r5, r2
 8009cc0:	1aea      	subs	r2, r5, r3
 8009cc2:	429d      	cmp	r5, r3
 8009cc4:	d0e5      	beq.n	8009c92 <_malloc_r+0x82>
 8009cc6:	1b5b      	subs	r3, r3, r5
 8009cc8:	50a3      	str	r3, [r4, r2]
 8009cca:	e7e2      	b.n	8009c92 <_malloc_r+0x82>
 8009ccc:	605a      	str	r2, [r3, #4]
 8009cce:	e7ec      	b.n	8009caa <_malloc_r+0x9a>
 8009cd0:	6862      	ldr	r2, [r4, #4]
 8009cd2:	42a3      	cmp	r3, r4
 8009cd4:	d101      	bne.n	8009cda <_malloc_r+0xca>
 8009cd6:	602a      	str	r2, [r5, #0]
 8009cd8:	e7ea      	b.n	8009cb0 <_malloc_r+0xa0>
 8009cda:	605a      	str	r2, [r3, #4]
 8009cdc:	e7e8      	b.n	8009cb0 <_malloc_r+0xa0>
 8009cde:	0023      	movs	r3, r4
 8009ce0:	6864      	ldr	r4, [r4, #4]
 8009ce2:	e7a7      	b.n	8009c34 <_malloc_r+0x24>
 8009ce4:	002c      	movs	r4, r5
 8009ce6:	686d      	ldr	r5, [r5, #4]
 8009ce8:	e7af      	b.n	8009c4a <_malloc_r+0x3a>
 8009cea:	230c      	movs	r3, #12
 8009cec:	0030      	movs	r0, r6
 8009cee:	6033      	str	r3, [r6, #0]
 8009cf0:	f000 f9d4 	bl	800a09c <__malloc_unlock>
 8009cf4:	e7cd      	b.n	8009c92 <_malloc_r+0x82>
 8009cf6:	46c0      	nop			; (mov r8, r8)
 8009cf8:	20000430 	.word	0x20000430

08009cfc <__ssputs_r>:
 8009cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cfe:	688e      	ldr	r6, [r1, #8]
 8009d00:	b085      	sub	sp, #20
 8009d02:	0007      	movs	r7, r0
 8009d04:	000c      	movs	r4, r1
 8009d06:	9203      	str	r2, [sp, #12]
 8009d08:	9301      	str	r3, [sp, #4]
 8009d0a:	429e      	cmp	r6, r3
 8009d0c:	d83c      	bhi.n	8009d88 <__ssputs_r+0x8c>
 8009d0e:	2390      	movs	r3, #144	; 0x90
 8009d10:	898a      	ldrh	r2, [r1, #12]
 8009d12:	00db      	lsls	r3, r3, #3
 8009d14:	421a      	tst	r2, r3
 8009d16:	d034      	beq.n	8009d82 <__ssputs_r+0x86>
 8009d18:	6909      	ldr	r1, [r1, #16]
 8009d1a:	6823      	ldr	r3, [r4, #0]
 8009d1c:	6960      	ldr	r0, [r4, #20]
 8009d1e:	1a5b      	subs	r3, r3, r1
 8009d20:	9302      	str	r3, [sp, #8]
 8009d22:	2303      	movs	r3, #3
 8009d24:	4343      	muls	r3, r0
 8009d26:	0fdd      	lsrs	r5, r3, #31
 8009d28:	18ed      	adds	r5, r5, r3
 8009d2a:	9b01      	ldr	r3, [sp, #4]
 8009d2c:	9802      	ldr	r0, [sp, #8]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	181b      	adds	r3, r3, r0
 8009d32:	106d      	asrs	r5, r5, #1
 8009d34:	42ab      	cmp	r3, r5
 8009d36:	d900      	bls.n	8009d3a <__ssputs_r+0x3e>
 8009d38:	001d      	movs	r5, r3
 8009d3a:	0553      	lsls	r3, r2, #21
 8009d3c:	d532      	bpl.n	8009da4 <__ssputs_r+0xa8>
 8009d3e:	0029      	movs	r1, r5
 8009d40:	0038      	movs	r0, r7
 8009d42:	f7ff ff65 	bl	8009c10 <_malloc_r>
 8009d46:	1e06      	subs	r6, r0, #0
 8009d48:	d109      	bne.n	8009d5e <__ssputs_r+0x62>
 8009d4a:	230c      	movs	r3, #12
 8009d4c:	603b      	str	r3, [r7, #0]
 8009d4e:	2340      	movs	r3, #64	; 0x40
 8009d50:	2001      	movs	r0, #1
 8009d52:	89a2      	ldrh	r2, [r4, #12]
 8009d54:	4240      	negs	r0, r0
 8009d56:	4313      	orrs	r3, r2
 8009d58:	81a3      	strh	r3, [r4, #12]
 8009d5a:	b005      	add	sp, #20
 8009d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d5e:	9a02      	ldr	r2, [sp, #8]
 8009d60:	6921      	ldr	r1, [r4, #16]
 8009d62:	f7fd ffad 	bl	8007cc0 <memcpy>
 8009d66:	89a3      	ldrh	r3, [r4, #12]
 8009d68:	4a14      	ldr	r2, [pc, #80]	; (8009dbc <__ssputs_r+0xc0>)
 8009d6a:	401a      	ands	r2, r3
 8009d6c:	2380      	movs	r3, #128	; 0x80
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	81a3      	strh	r3, [r4, #12]
 8009d72:	9b02      	ldr	r3, [sp, #8]
 8009d74:	6126      	str	r6, [r4, #16]
 8009d76:	18f6      	adds	r6, r6, r3
 8009d78:	6026      	str	r6, [r4, #0]
 8009d7a:	6165      	str	r5, [r4, #20]
 8009d7c:	9e01      	ldr	r6, [sp, #4]
 8009d7e:	1aed      	subs	r5, r5, r3
 8009d80:	60a5      	str	r5, [r4, #8]
 8009d82:	9b01      	ldr	r3, [sp, #4]
 8009d84:	429e      	cmp	r6, r3
 8009d86:	d900      	bls.n	8009d8a <__ssputs_r+0x8e>
 8009d88:	9e01      	ldr	r6, [sp, #4]
 8009d8a:	0032      	movs	r2, r6
 8009d8c:	9903      	ldr	r1, [sp, #12]
 8009d8e:	6820      	ldr	r0, [r4, #0]
 8009d90:	f000 f968 	bl	800a064 <memmove>
 8009d94:	68a3      	ldr	r3, [r4, #8]
 8009d96:	2000      	movs	r0, #0
 8009d98:	1b9b      	subs	r3, r3, r6
 8009d9a:	60a3      	str	r3, [r4, #8]
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	199e      	adds	r6, r3, r6
 8009da0:	6026      	str	r6, [r4, #0]
 8009da2:	e7da      	b.n	8009d5a <__ssputs_r+0x5e>
 8009da4:	002a      	movs	r2, r5
 8009da6:	0038      	movs	r0, r7
 8009da8:	f000 f980 	bl	800a0ac <_realloc_r>
 8009dac:	1e06      	subs	r6, r0, #0
 8009dae:	d1e0      	bne.n	8009d72 <__ssputs_r+0x76>
 8009db0:	0038      	movs	r0, r7
 8009db2:	6921      	ldr	r1, [r4, #16]
 8009db4:	f7ff fec0 	bl	8009b38 <_free_r>
 8009db8:	e7c7      	b.n	8009d4a <__ssputs_r+0x4e>
 8009dba:	46c0      	nop			; (mov r8, r8)
 8009dbc:	fffffb7f 	.word	0xfffffb7f

08009dc0 <_svfiprintf_r>:
 8009dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dc2:	b0a1      	sub	sp, #132	; 0x84
 8009dc4:	9003      	str	r0, [sp, #12]
 8009dc6:	001d      	movs	r5, r3
 8009dc8:	898b      	ldrh	r3, [r1, #12]
 8009dca:	000f      	movs	r7, r1
 8009dcc:	0016      	movs	r6, r2
 8009dce:	061b      	lsls	r3, r3, #24
 8009dd0:	d511      	bpl.n	8009df6 <_svfiprintf_r+0x36>
 8009dd2:	690b      	ldr	r3, [r1, #16]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10e      	bne.n	8009df6 <_svfiprintf_r+0x36>
 8009dd8:	2140      	movs	r1, #64	; 0x40
 8009dda:	f7ff ff19 	bl	8009c10 <_malloc_r>
 8009dde:	6038      	str	r0, [r7, #0]
 8009de0:	6138      	str	r0, [r7, #16]
 8009de2:	2800      	cmp	r0, #0
 8009de4:	d105      	bne.n	8009df2 <_svfiprintf_r+0x32>
 8009de6:	230c      	movs	r3, #12
 8009de8:	9a03      	ldr	r2, [sp, #12]
 8009dea:	3801      	subs	r0, #1
 8009dec:	6013      	str	r3, [r2, #0]
 8009dee:	b021      	add	sp, #132	; 0x84
 8009df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009df2:	2340      	movs	r3, #64	; 0x40
 8009df4:	617b      	str	r3, [r7, #20]
 8009df6:	2300      	movs	r3, #0
 8009df8:	ac08      	add	r4, sp, #32
 8009dfa:	6163      	str	r3, [r4, #20]
 8009dfc:	3320      	adds	r3, #32
 8009dfe:	7663      	strb	r3, [r4, #25]
 8009e00:	3310      	adds	r3, #16
 8009e02:	76a3      	strb	r3, [r4, #26]
 8009e04:	9507      	str	r5, [sp, #28]
 8009e06:	0035      	movs	r5, r6
 8009e08:	782b      	ldrb	r3, [r5, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d001      	beq.n	8009e12 <_svfiprintf_r+0x52>
 8009e0e:	2b25      	cmp	r3, #37	; 0x25
 8009e10:	d147      	bne.n	8009ea2 <_svfiprintf_r+0xe2>
 8009e12:	1bab      	subs	r3, r5, r6
 8009e14:	9305      	str	r3, [sp, #20]
 8009e16:	42b5      	cmp	r5, r6
 8009e18:	d00c      	beq.n	8009e34 <_svfiprintf_r+0x74>
 8009e1a:	0032      	movs	r2, r6
 8009e1c:	0039      	movs	r1, r7
 8009e1e:	9803      	ldr	r0, [sp, #12]
 8009e20:	f7ff ff6c 	bl	8009cfc <__ssputs_r>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	d100      	bne.n	8009e2a <_svfiprintf_r+0x6a>
 8009e28:	e0ae      	b.n	8009f88 <_svfiprintf_r+0x1c8>
 8009e2a:	6962      	ldr	r2, [r4, #20]
 8009e2c:	9b05      	ldr	r3, [sp, #20]
 8009e2e:	4694      	mov	ip, r2
 8009e30:	4463      	add	r3, ip
 8009e32:	6163      	str	r3, [r4, #20]
 8009e34:	782b      	ldrb	r3, [r5, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d100      	bne.n	8009e3c <_svfiprintf_r+0x7c>
 8009e3a:	e0a5      	b.n	8009f88 <_svfiprintf_r+0x1c8>
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	2300      	movs	r3, #0
 8009e40:	4252      	negs	r2, r2
 8009e42:	6062      	str	r2, [r4, #4]
 8009e44:	a904      	add	r1, sp, #16
 8009e46:	3254      	adds	r2, #84	; 0x54
 8009e48:	1852      	adds	r2, r2, r1
 8009e4a:	1c6e      	adds	r6, r5, #1
 8009e4c:	6023      	str	r3, [r4, #0]
 8009e4e:	60e3      	str	r3, [r4, #12]
 8009e50:	60a3      	str	r3, [r4, #8]
 8009e52:	7013      	strb	r3, [r2, #0]
 8009e54:	65a3      	str	r3, [r4, #88]	; 0x58
 8009e56:	2205      	movs	r2, #5
 8009e58:	7831      	ldrb	r1, [r6, #0]
 8009e5a:	4854      	ldr	r0, [pc, #336]	; (8009fac <_svfiprintf_r+0x1ec>)
 8009e5c:	f7ff fa98 	bl	8009390 <memchr>
 8009e60:	1c75      	adds	r5, r6, #1
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d11f      	bne.n	8009ea6 <_svfiprintf_r+0xe6>
 8009e66:	6822      	ldr	r2, [r4, #0]
 8009e68:	06d3      	lsls	r3, r2, #27
 8009e6a:	d504      	bpl.n	8009e76 <_svfiprintf_r+0xb6>
 8009e6c:	2353      	movs	r3, #83	; 0x53
 8009e6e:	a904      	add	r1, sp, #16
 8009e70:	185b      	adds	r3, r3, r1
 8009e72:	2120      	movs	r1, #32
 8009e74:	7019      	strb	r1, [r3, #0]
 8009e76:	0713      	lsls	r3, r2, #28
 8009e78:	d504      	bpl.n	8009e84 <_svfiprintf_r+0xc4>
 8009e7a:	2353      	movs	r3, #83	; 0x53
 8009e7c:	a904      	add	r1, sp, #16
 8009e7e:	185b      	adds	r3, r3, r1
 8009e80:	212b      	movs	r1, #43	; 0x2b
 8009e82:	7019      	strb	r1, [r3, #0]
 8009e84:	7833      	ldrb	r3, [r6, #0]
 8009e86:	2b2a      	cmp	r3, #42	; 0x2a
 8009e88:	d016      	beq.n	8009eb8 <_svfiprintf_r+0xf8>
 8009e8a:	0035      	movs	r5, r6
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	200a      	movs	r0, #10
 8009e90:	68e3      	ldr	r3, [r4, #12]
 8009e92:	782a      	ldrb	r2, [r5, #0]
 8009e94:	1c6e      	adds	r6, r5, #1
 8009e96:	3a30      	subs	r2, #48	; 0x30
 8009e98:	2a09      	cmp	r2, #9
 8009e9a:	d94e      	bls.n	8009f3a <_svfiprintf_r+0x17a>
 8009e9c:	2900      	cmp	r1, #0
 8009e9e:	d111      	bne.n	8009ec4 <_svfiprintf_r+0x104>
 8009ea0:	e017      	b.n	8009ed2 <_svfiprintf_r+0x112>
 8009ea2:	3501      	adds	r5, #1
 8009ea4:	e7b0      	b.n	8009e08 <_svfiprintf_r+0x48>
 8009ea6:	4b41      	ldr	r3, [pc, #260]	; (8009fac <_svfiprintf_r+0x1ec>)
 8009ea8:	6822      	ldr	r2, [r4, #0]
 8009eaa:	1ac0      	subs	r0, r0, r3
 8009eac:	2301      	movs	r3, #1
 8009eae:	4083      	lsls	r3, r0
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	002e      	movs	r6, r5
 8009eb4:	6023      	str	r3, [r4, #0]
 8009eb6:	e7ce      	b.n	8009e56 <_svfiprintf_r+0x96>
 8009eb8:	9b07      	ldr	r3, [sp, #28]
 8009eba:	1d19      	adds	r1, r3, #4
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	9107      	str	r1, [sp, #28]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	db01      	blt.n	8009ec8 <_svfiprintf_r+0x108>
 8009ec4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ec6:	e004      	b.n	8009ed2 <_svfiprintf_r+0x112>
 8009ec8:	425b      	negs	r3, r3
 8009eca:	60e3      	str	r3, [r4, #12]
 8009ecc:	2302      	movs	r3, #2
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	782b      	ldrb	r3, [r5, #0]
 8009ed4:	2b2e      	cmp	r3, #46	; 0x2e
 8009ed6:	d10a      	bne.n	8009eee <_svfiprintf_r+0x12e>
 8009ed8:	786b      	ldrb	r3, [r5, #1]
 8009eda:	2b2a      	cmp	r3, #42	; 0x2a
 8009edc:	d135      	bne.n	8009f4a <_svfiprintf_r+0x18a>
 8009ede:	9b07      	ldr	r3, [sp, #28]
 8009ee0:	3502      	adds	r5, #2
 8009ee2:	1d1a      	adds	r2, r3, #4
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	9207      	str	r2, [sp, #28]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	db2b      	blt.n	8009f44 <_svfiprintf_r+0x184>
 8009eec:	9309      	str	r3, [sp, #36]	; 0x24
 8009eee:	4e30      	ldr	r6, [pc, #192]	; (8009fb0 <_svfiprintf_r+0x1f0>)
 8009ef0:	2203      	movs	r2, #3
 8009ef2:	0030      	movs	r0, r6
 8009ef4:	7829      	ldrb	r1, [r5, #0]
 8009ef6:	f7ff fa4b 	bl	8009390 <memchr>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d006      	beq.n	8009f0c <_svfiprintf_r+0x14c>
 8009efe:	2340      	movs	r3, #64	; 0x40
 8009f00:	1b80      	subs	r0, r0, r6
 8009f02:	4083      	lsls	r3, r0
 8009f04:	6822      	ldr	r2, [r4, #0]
 8009f06:	3501      	adds	r5, #1
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	6023      	str	r3, [r4, #0]
 8009f0c:	7829      	ldrb	r1, [r5, #0]
 8009f0e:	2206      	movs	r2, #6
 8009f10:	4828      	ldr	r0, [pc, #160]	; (8009fb4 <_svfiprintf_r+0x1f4>)
 8009f12:	1c6e      	adds	r6, r5, #1
 8009f14:	7621      	strb	r1, [r4, #24]
 8009f16:	f7ff fa3b 	bl	8009390 <memchr>
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d03c      	beq.n	8009f98 <_svfiprintf_r+0x1d8>
 8009f1e:	4b26      	ldr	r3, [pc, #152]	; (8009fb8 <_svfiprintf_r+0x1f8>)
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d125      	bne.n	8009f70 <_svfiprintf_r+0x1b0>
 8009f24:	2207      	movs	r2, #7
 8009f26:	9b07      	ldr	r3, [sp, #28]
 8009f28:	3307      	adds	r3, #7
 8009f2a:	4393      	bics	r3, r2
 8009f2c:	3308      	adds	r3, #8
 8009f2e:	9307      	str	r3, [sp, #28]
 8009f30:	6963      	ldr	r3, [r4, #20]
 8009f32:	9a04      	ldr	r2, [sp, #16]
 8009f34:	189b      	adds	r3, r3, r2
 8009f36:	6163      	str	r3, [r4, #20]
 8009f38:	e765      	b.n	8009e06 <_svfiprintf_r+0x46>
 8009f3a:	4343      	muls	r3, r0
 8009f3c:	0035      	movs	r5, r6
 8009f3e:	2101      	movs	r1, #1
 8009f40:	189b      	adds	r3, r3, r2
 8009f42:	e7a6      	b.n	8009e92 <_svfiprintf_r+0xd2>
 8009f44:	2301      	movs	r3, #1
 8009f46:	425b      	negs	r3, r3
 8009f48:	e7d0      	b.n	8009eec <_svfiprintf_r+0x12c>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	200a      	movs	r0, #10
 8009f4e:	001a      	movs	r2, r3
 8009f50:	3501      	adds	r5, #1
 8009f52:	6063      	str	r3, [r4, #4]
 8009f54:	7829      	ldrb	r1, [r5, #0]
 8009f56:	1c6e      	adds	r6, r5, #1
 8009f58:	3930      	subs	r1, #48	; 0x30
 8009f5a:	2909      	cmp	r1, #9
 8009f5c:	d903      	bls.n	8009f66 <_svfiprintf_r+0x1a6>
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d0c5      	beq.n	8009eee <_svfiprintf_r+0x12e>
 8009f62:	9209      	str	r2, [sp, #36]	; 0x24
 8009f64:	e7c3      	b.n	8009eee <_svfiprintf_r+0x12e>
 8009f66:	4342      	muls	r2, r0
 8009f68:	0035      	movs	r5, r6
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	1852      	adds	r2, r2, r1
 8009f6e:	e7f1      	b.n	8009f54 <_svfiprintf_r+0x194>
 8009f70:	ab07      	add	r3, sp, #28
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	003a      	movs	r2, r7
 8009f76:	0021      	movs	r1, r4
 8009f78:	4b10      	ldr	r3, [pc, #64]	; (8009fbc <_svfiprintf_r+0x1fc>)
 8009f7a:	9803      	ldr	r0, [sp, #12]
 8009f7c:	f7fd ff5c 	bl	8007e38 <_printf_float>
 8009f80:	9004      	str	r0, [sp, #16]
 8009f82:	9b04      	ldr	r3, [sp, #16]
 8009f84:	3301      	adds	r3, #1
 8009f86:	d1d3      	bne.n	8009f30 <_svfiprintf_r+0x170>
 8009f88:	89bb      	ldrh	r3, [r7, #12]
 8009f8a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009f8c:	065b      	lsls	r3, r3, #25
 8009f8e:	d400      	bmi.n	8009f92 <_svfiprintf_r+0x1d2>
 8009f90:	e72d      	b.n	8009dee <_svfiprintf_r+0x2e>
 8009f92:	2001      	movs	r0, #1
 8009f94:	4240      	negs	r0, r0
 8009f96:	e72a      	b.n	8009dee <_svfiprintf_r+0x2e>
 8009f98:	ab07      	add	r3, sp, #28
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	003a      	movs	r2, r7
 8009f9e:	0021      	movs	r1, r4
 8009fa0:	4b06      	ldr	r3, [pc, #24]	; (8009fbc <_svfiprintf_r+0x1fc>)
 8009fa2:	9803      	ldr	r0, [sp, #12]
 8009fa4:	f7fe f9fa 	bl	800839c <_printf_i>
 8009fa8:	e7ea      	b.n	8009f80 <_svfiprintf_r+0x1c0>
 8009faa:	46c0      	nop			; (mov r8, r8)
 8009fac:	0800af9c 	.word	0x0800af9c
 8009fb0:	0800afa2 	.word	0x0800afa2
 8009fb4:	0800afa6 	.word	0x0800afa6
 8009fb8:	08007e39 	.word	0x08007e39
 8009fbc:	08009cfd 	.word	0x08009cfd

08009fc0 <_sbrk_r>:
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	b570      	push	{r4, r5, r6, lr}
 8009fc4:	4d06      	ldr	r5, [pc, #24]	; (8009fe0 <_sbrk_r+0x20>)
 8009fc6:	0004      	movs	r4, r0
 8009fc8:	0008      	movs	r0, r1
 8009fca:	602b      	str	r3, [r5, #0]
 8009fcc:	f7f9 ffe6 	bl	8003f9c <_sbrk>
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	d103      	bne.n	8009fdc <_sbrk_r+0x1c>
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d000      	beq.n	8009fdc <_sbrk_r+0x1c>
 8009fda:	6023      	str	r3, [r4, #0]
 8009fdc:	bd70      	pop	{r4, r5, r6, pc}
 8009fde:	46c0      	nop			; (mov r8, r8)
 8009fe0:	20000438 	.word	0x20000438

08009fe4 <__assert_func>:
 8009fe4:	b530      	push	{r4, r5, lr}
 8009fe6:	0014      	movs	r4, r2
 8009fe8:	001a      	movs	r2, r3
 8009fea:	4b09      	ldr	r3, [pc, #36]	; (800a010 <__assert_func+0x2c>)
 8009fec:	0005      	movs	r5, r0
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	b085      	sub	sp, #20
 8009ff2:	68d8      	ldr	r0, [r3, #12]
 8009ff4:	4b07      	ldr	r3, [pc, #28]	; (800a014 <__assert_func+0x30>)
 8009ff6:	2c00      	cmp	r4, #0
 8009ff8:	d101      	bne.n	8009ffe <__assert_func+0x1a>
 8009ffa:	4b07      	ldr	r3, [pc, #28]	; (800a018 <__assert_func+0x34>)
 8009ffc:	001c      	movs	r4, r3
 8009ffe:	9301      	str	r3, [sp, #4]
 800a000:	9100      	str	r1, [sp, #0]
 800a002:	002b      	movs	r3, r5
 800a004:	4905      	ldr	r1, [pc, #20]	; (800a01c <__assert_func+0x38>)
 800a006:	9402      	str	r4, [sp, #8]
 800a008:	f000 f80a 	bl	800a020 <fiprintf>
 800a00c:	f000 faba 	bl	800a584 <abort>
 800a010:	2000000c 	.word	0x2000000c
 800a014:	0800afad 	.word	0x0800afad
 800a018:	0800afe8 	.word	0x0800afe8
 800a01c:	0800afba 	.word	0x0800afba

0800a020 <fiprintf>:
 800a020:	b40e      	push	{r1, r2, r3}
 800a022:	b503      	push	{r0, r1, lr}
 800a024:	0001      	movs	r1, r0
 800a026:	ab03      	add	r3, sp, #12
 800a028:	4804      	ldr	r0, [pc, #16]	; (800a03c <fiprintf+0x1c>)
 800a02a:	cb04      	ldmia	r3!, {r2}
 800a02c:	6800      	ldr	r0, [r0, #0]
 800a02e:	9301      	str	r3, [sp, #4]
 800a030:	f000 f892 	bl	800a158 <_vfiprintf_r>
 800a034:	b002      	add	sp, #8
 800a036:	bc08      	pop	{r3}
 800a038:	b003      	add	sp, #12
 800a03a:	4718      	bx	r3
 800a03c:	2000000c 	.word	0x2000000c

0800a040 <__ascii_mbtowc>:
 800a040:	b082      	sub	sp, #8
 800a042:	2900      	cmp	r1, #0
 800a044:	d100      	bne.n	800a048 <__ascii_mbtowc+0x8>
 800a046:	a901      	add	r1, sp, #4
 800a048:	1e10      	subs	r0, r2, #0
 800a04a:	d006      	beq.n	800a05a <__ascii_mbtowc+0x1a>
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d006      	beq.n	800a05e <__ascii_mbtowc+0x1e>
 800a050:	7813      	ldrb	r3, [r2, #0]
 800a052:	600b      	str	r3, [r1, #0]
 800a054:	7810      	ldrb	r0, [r2, #0]
 800a056:	1e43      	subs	r3, r0, #1
 800a058:	4198      	sbcs	r0, r3
 800a05a:	b002      	add	sp, #8
 800a05c:	4770      	bx	lr
 800a05e:	2002      	movs	r0, #2
 800a060:	4240      	negs	r0, r0
 800a062:	e7fa      	b.n	800a05a <__ascii_mbtowc+0x1a>

0800a064 <memmove>:
 800a064:	b510      	push	{r4, lr}
 800a066:	4288      	cmp	r0, r1
 800a068:	d902      	bls.n	800a070 <memmove+0xc>
 800a06a:	188b      	adds	r3, r1, r2
 800a06c:	4298      	cmp	r0, r3
 800a06e:	d303      	bcc.n	800a078 <memmove+0x14>
 800a070:	2300      	movs	r3, #0
 800a072:	e007      	b.n	800a084 <memmove+0x20>
 800a074:	5c8b      	ldrb	r3, [r1, r2]
 800a076:	5483      	strb	r3, [r0, r2]
 800a078:	3a01      	subs	r2, #1
 800a07a:	d2fb      	bcs.n	800a074 <memmove+0x10>
 800a07c:	bd10      	pop	{r4, pc}
 800a07e:	5ccc      	ldrb	r4, [r1, r3]
 800a080:	54c4      	strb	r4, [r0, r3]
 800a082:	3301      	adds	r3, #1
 800a084:	429a      	cmp	r2, r3
 800a086:	d1fa      	bne.n	800a07e <memmove+0x1a>
 800a088:	e7f8      	b.n	800a07c <memmove+0x18>
	...

0800a08c <__malloc_lock>:
 800a08c:	b510      	push	{r4, lr}
 800a08e:	4802      	ldr	r0, [pc, #8]	; (800a098 <__malloc_lock+0xc>)
 800a090:	f000 fc4f 	bl	800a932 <__retarget_lock_acquire_recursive>
 800a094:	bd10      	pop	{r4, pc}
 800a096:	46c0      	nop			; (mov r8, r8)
 800a098:	2000043c 	.word	0x2000043c

0800a09c <__malloc_unlock>:
 800a09c:	b510      	push	{r4, lr}
 800a09e:	4802      	ldr	r0, [pc, #8]	; (800a0a8 <__malloc_unlock+0xc>)
 800a0a0:	f000 fc48 	bl	800a934 <__retarget_lock_release_recursive>
 800a0a4:	bd10      	pop	{r4, pc}
 800a0a6:	46c0      	nop			; (mov r8, r8)
 800a0a8:	2000043c 	.word	0x2000043c

0800a0ac <_realloc_r>:
 800a0ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0ae:	0007      	movs	r7, r0
 800a0b0:	000e      	movs	r6, r1
 800a0b2:	0014      	movs	r4, r2
 800a0b4:	2900      	cmp	r1, #0
 800a0b6:	d105      	bne.n	800a0c4 <_realloc_r+0x18>
 800a0b8:	0011      	movs	r1, r2
 800a0ba:	f7ff fda9 	bl	8009c10 <_malloc_r>
 800a0be:	0005      	movs	r5, r0
 800a0c0:	0028      	movs	r0, r5
 800a0c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a0c4:	2a00      	cmp	r2, #0
 800a0c6:	d103      	bne.n	800a0d0 <_realloc_r+0x24>
 800a0c8:	f7ff fd36 	bl	8009b38 <_free_r>
 800a0cc:	0025      	movs	r5, r4
 800a0ce:	e7f7      	b.n	800a0c0 <_realloc_r+0x14>
 800a0d0:	f000 fc9e 	bl	800aa10 <_malloc_usable_size_r>
 800a0d4:	9001      	str	r0, [sp, #4]
 800a0d6:	4284      	cmp	r4, r0
 800a0d8:	d803      	bhi.n	800a0e2 <_realloc_r+0x36>
 800a0da:	0035      	movs	r5, r6
 800a0dc:	0843      	lsrs	r3, r0, #1
 800a0de:	42a3      	cmp	r3, r4
 800a0e0:	d3ee      	bcc.n	800a0c0 <_realloc_r+0x14>
 800a0e2:	0021      	movs	r1, r4
 800a0e4:	0038      	movs	r0, r7
 800a0e6:	f7ff fd93 	bl	8009c10 <_malloc_r>
 800a0ea:	1e05      	subs	r5, r0, #0
 800a0ec:	d0e8      	beq.n	800a0c0 <_realloc_r+0x14>
 800a0ee:	9b01      	ldr	r3, [sp, #4]
 800a0f0:	0022      	movs	r2, r4
 800a0f2:	429c      	cmp	r4, r3
 800a0f4:	d900      	bls.n	800a0f8 <_realloc_r+0x4c>
 800a0f6:	001a      	movs	r2, r3
 800a0f8:	0031      	movs	r1, r6
 800a0fa:	0028      	movs	r0, r5
 800a0fc:	f7fd fde0 	bl	8007cc0 <memcpy>
 800a100:	0031      	movs	r1, r6
 800a102:	0038      	movs	r0, r7
 800a104:	f7ff fd18 	bl	8009b38 <_free_r>
 800a108:	e7da      	b.n	800a0c0 <_realloc_r+0x14>

0800a10a <__sfputc_r>:
 800a10a:	6893      	ldr	r3, [r2, #8]
 800a10c:	b510      	push	{r4, lr}
 800a10e:	3b01      	subs	r3, #1
 800a110:	6093      	str	r3, [r2, #8]
 800a112:	2b00      	cmp	r3, #0
 800a114:	da04      	bge.n	800a120 <__sfputc_r+0x16>
 800a116:	6994      	ldr	r4, [r2, #24]
 800a118:	42a3      	cmp	r3, r4
 800a11a:	db07      	blt.n	800a12c <__sfputc_r+0x22>
 800a11c:	290a      	cmp	r1, #10
 800a11e:	d005      	beq.n	800a12c <__sfputc_r+0x22>
 800a120:	6813      	ldr	r3, [r2, #0]
 800a122:	1c58      	adds	r0, r3, #1
 800a124:	6010      	str	r0, [r2, #0]
 800a126:	7019      	strb	r1, [r3, #0]
 800a128:	0008      	movs	r0, r1
 800a12a:	bd10      	pop	{r4, pc}
 800a12c:	f000 f94e 	bl	800a3cc <__swbuf_r>
 800a130:	0001      	movs	r1, r0
 800a132:	e7f9      	b.n	800a128 <__sfputc_r+0x1e>

0800a134 <__sfputs_r>:
 800a134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a136:	0006      	movs	r6, r0
 800a138:	000f      	movs	r7, r1
 800a13a:	0014      	movs	r4, r2
 800a13c:	18d5      	adds	r5, r2, r3
 800a13e:	42ac      	cmp	r4, r5
 800a140:	d101      	bne.n	800a146 <__sfputs_r+0x12>
 800a142:	2000      	movs	r0, #0
 800a144:	e007      	b.n	800a156 <__sfputs_r+0x22>
 800a146:	7821      	ldrb	r1, [r4, #0]
 800a148:	003a      	movs	r2, r7
 800a14a:	0030      	movs	r0, r6
 800a14c:	f7ff ffdd 	bl	800a10a <__sfputc_r>
 800a150:	3401      	adds	r4, #1
 800a152:	1c43      	adds	r3, r0, #1
 800a154:	d1f3      	bne.n	800a13e <__sfputs_r+0xa>
 800a156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a158 <_vfiprintf_r>:
 800a158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a15a:	b0a1      	sub	sp, #132	; 0x84
 800a15c:	0006      	movs	r6, r0
 800a15e:	000c      	movs	r4, r1
 800a160:	001f      	movs	r7, r3
 800a162:	9203      	str	r2, [sp, #12]
 800a164:	2800      	cmp	r0, #0
 800a166:	d004      	beq.n	800a172 <_vfiprintf_r+0x1a>
 800a168:	6983      	ldr	r3, [r0, #24]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d101      	bne.n	800a172 <_vfiprintf_r+0x1a>
 800a16e:	f000 fb3f 	bl	800a7f0 <__sinit>
 800a172:	4b8e      	ldr	r3, [pc, #568]	; (800a3ac <_vfiprintf_r+0x254>)
 800a174:	429c      	cmp	r4, r3
 800a176:	d11c      	bne.n	800a1b2 <_vfiprintf_r+0x5a>
 800a178:	6874      	ldr	r4, [r6, #4]
 800a17a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a17c:	07db      	lsls	r3, r3, #31
 800a17e:	d405      	bmi.n	800a18c <_vfiprintf_r+0x34>
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	059b      	lsls	r3, r3, #22
 800a184:	d402      	bmi.n	800a18c <_vfiprintf_r+0x34>
 800a186:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a188:	f000 fbd3 	bl	800a932 <__retarget_lock_acquire_recursive>
 800a18c:	89a3      	ldrh	r3, [r4, #12]
 800a18e:	071b      	lsls	r3, r3, #28
 800a190:	d502      	bpl.n	800a198 <_vfiprintf_r+0x40>
 800a192:	6923      	ldr	r3, [r4, #16]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d11d      	bne.n	800a1d4 <_vfiprintf_r+0x7c>
 800a198:	0021      	movs	r1, r4
 800a19a:	0030      	movs	r0, r6
 800a19c:	f000 f97a 	bl	800a494 <__swsetup_r>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d017      	beq.n	800a1d4 <_vfiprintf_r+0x7c>
 800a1a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1a6:	07db      	lsls	r3, r3, #31
 800a1a8:	d50d      	bpl.n	800a1c6 <_vfiprintf_r+0x6e>
 800a1aa:	2001      	movs	r0, #1
 800a1ac:	4240      	negs	r0, r0
 800a1ae:	b021      	add	sp, #132	; 0x84
 800a1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1b2:	4b7f      	ldr	r3, [pc, #508]	; (800a3b0 <_vfiprintf_r+0x258>)
 800a1b4:	429c      	cmp	r4, r3
 800a1b6:	d101      	bne.n	800a1bc <_vfiprintf_r+0x64>
 800a1b8:	68b4      	ldr	r4, [r6, #8]
 800a1ba:	e7de      	b.n	800a17a <_vfiprintf_r+0x22>
 800a1bc:	4b7d      	ldr	r3, [pc, #500]	; (800a3b4 <_vfiprintf_r+0x25c>)
 800a1be:	429c      	cmp	r4, r3
 800a1c0:	d1db      	bne.n	800a17a <_vfiprintf_r+0x22>
 800a1c2:	68f4      	ldr	r4, [r6, #12]
 800a1c4:	e7d9      	b.n	800a17a <_vfiprintf_r+0x22>
 800a1c6:	89a3      	ldrh	r3, [r4, #12]
 800a1c8:	059b      	lsls	r3, r3, #22
 800a1ca:	d4ee      	bmi.n	800a1aa <_vfiprintf_r+0x52>
 800a1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1ce:	f000 fbb1 	bl	800a934 <__retarget_lock_release_recursive>
 800a1d2:	e7ea      	b.n	800a1aa <_vfiprintf_r+0x52>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	ad08      	add	r5, sp, #32
 800a1d8:	616b      	str	r3, [r5, #20]
 800a1da:	3320      	adds	r3, #32
 800a1dc:	766b      	strb	r3, [r5, #25]
 800a1de:	3310      	adds	r3, #16
 800a1e0:	76ab      	strb	r3, [r5, #26]
 800a1e2:	9707      	str	r7, [sp, #28]
 800a1e4:	9f03      	ldr	r7, [sp, #12]
 800a1e6:	783b      	ldrb	r3, [r7, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d001      	beq.n	800a1f0 <_vfiprintf_r+0x98>
 800a1ec:	2b25      	cmp	r3, #37	; 0x25
 800a1ee:	d14e      	bne.n	800a28e <_vfiprintf_r+0x136>
 800a1f0:	9b03      	ldr	r3, [sp, #12]
 800a1f2:	1afb      	subs	r3, r7, r3
 800a1f4:	9305      	str	r3, [sp, #20]
 800a1f6:	9b03      	ldr	r3, [sp, #12]
 800a1f8:	429f      	cmp	r7, r3
 800a1fa:	d00d      	beq.n	800a218 <_vfiprintf_r+0xc0>
 800a1fc:	9b05      	ldr	r3, [sp, #20]
 800a1fe:	0021      	movs	r1, r4
 800a200:	0030      	movs	r0, r6
 800a202:	9a03      	ldr	r2, [sp, #12]
 800a204:	f7ff ff96 	bl	800a134 <__sfputs_r>
 800a208:	1c43      	adds	r3, r0, #1
 800a20a:	d100      	bne.n	800a20e <_vfiprintf_r+0xb6>
 800a20c:	e0b5      	b.n	800a37a <_vfiprintf_r+0x222>
 800a20e:	696a      	ldr	r2, [r5, #20]
 800a210:	9b05      	ldr	r3, [sp, #20]
 800a212:	4694      	mov	ip, r2
 800a214:	4463      	add	r3, ip
 800a216:	616b      	str	r3, [r5, #20]
 800a218:	783b      	ldrb	r3, [r7, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d100      	bne.n	800a220 <_vfiprintf_r+0xc8>
 800a21e:	e0ac      	b.n	800a37a <_vfiprintf_r+0x222>
 800a220:	2201      	movs	r2, #1
 800a222:	1c7b      	adds	r3, r7, #1
 800a224:	9303      	str	r3, [sp, #12]
 800a226:	2300      	movs	r3, #0
 800a228:	4252      	negs	r2, r2
 800a22a:	606a      	str	r2, [r5, #4]
 800a22c:	a904      	add	r1, sp, #16
 800a22e:	3254      	adds	r2, #84	; 0x54
 800a230:	1852      	adds	r2, r2, r1
 800a232:	602b      	str	r3, [r5, #0]
 800a234:	60eb      	str	r3, [r5, #12]
 800a236:	60ab      	str	r3, [r5, #8]
 800a238:	7013      	strb	r3, [r2, #0]
 800a23a:	65ab      	str	r3, [r5, #88]	; 0x58
 800a23c:	9b03      	ldr	r3, [sp, #12]
 800a23e:	2205      	movs	r2, #5
 800a240:	7819      	ldrb	r1, [r3, #0]
 800a242:	485d      	ldr	r0, [pc, #372]	; (800a3b8 <_vfiprintf_r+0x260>)
 800a244:	f7ff f8a4 	bl	8009390 <memchr>
 800a248:	9b03      	ldr	r3, [sp, #12]
 800a24a:	1c5f      	adds	r7, r3, #1
 800a24c:	2800      	cmp	r0, #0
 800a24e:	d120      	bne.n	800a292 <_vfiprintf_r+0x13a>
 800a250:	682a      	ldr	r2, [r5, #0]
 800a252:	06d3      	lsls	r3, r2, #27
 800a254:	d504      	bpl.n	800a260 <_vfiprintf_r+0x108>
 800a256:	2353      	movs	r3, #83	; 0x53
 800a258:	a904      	add	r1, sp, #16
 800a25a:	185b      	adds	r3, r3, r1
 800a25c:	2120      	movs	r1, #32
 800a25e:	7019      	strb	r1, [r3, #0]
 800a260:	0713      	lsls	r3, r2, #28
 800a262:	d504      	bpl.n	800a26e <_vfiprintf_r+0x116>
 800a264:	2353      	movs	r3, #83	; 0x53
 800a266:	a904      	add	r1, sp, #16
 800a268:	185b      	adds	r3, r3, r1
 800a26a:	212b      	movs	r1, #43	; 0x2b
 800a26c:	7019      	strb	r1, [r3, #0]
 800a26e:	9b03      	ldr	r3, [sp, #12]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	2b2a      	cmp	r3, #42	; 0x2a
 800a274:	d016      	beq.n	800a2a4 <_vfiprintf_r+0x14c>
 800a276:	2100      	movs	r1, #0
 800a278:	68eb      	ldr	r3, [r5, #12]
 800a27a:	9f03      	ldr	r7, [sp, #12]
 800a27c:	783a      	ldrb	r2, [r7, #0]
 800a27e:	1c78      	adds	r0, r7, #1
 800a280:	3a30      	subs	r2, #48	; 0x30
 800a282:	4684      	mov	ip, r0
 800a284:	2a09      	cmp	r2, #9
 800a286:	d94f      	bls.n	800a328 <_vfiprintf_r+0x1d0>
 800a288:	2900      	cmp	r1, #0
 800a28a:	d111      	bne.n	800a2b0 <_vfiprintf_r+0x158>
 800a28c:	e017      	b.n	800a2be <_vfiprintf_r+0x166>
 800a28e:	3701      	adds	r7, #1
 800a290:	e7a9      	b.n	800a1e6 <_vfiprintf_r+0x8e>
 800a292:	4b49      	ldr	r3, [pc, #292]	; (800a3b8 <_vfiprintf_r+0x260>)
 800a294:	682a      	ldr	r2, [r5, #0]
 800a296:	1ac0      	subs	r0, r0, r3
 800a298:	2301      	movs	r3, #1
 800a29a:	4083      	lsls	r3, r0
 800a29c:	4313      	orrs	r3, r2
 800a29e:	602b      	str	r3, [r5, #0]
 800a2a0:	9703      	str	r7, [sp, #12]
 800a2a2:	e7cb      	b.n	800a23c <_vfiprintf_r+0xe4>
 800a2a4:	9b07      	ldr	r3, [sp, #28]
 800a2a6:	1d19      	adds	r1, r3, #4
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	9107      	str	r1, [sp, #28]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	db01      	blt.n	800a2b4 <_vfiprintf_r+0x15c>
 800a2b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2b2:	e004      	b.n	800a2be <_vfiprintf_r+0x166>
 800a2b4:	425b      	negs	r3, r3
 800a2b6:	60eb      	str	r3, [r5, #12]
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	602b      	str	r3, [r5, #0]
 800a2be:	783b      	ldrb	r3, [r7, #0]
 800a2c0:	2b2e      	cmp	r3, #46	; 0x2e
 800a2c2:	d10a      	bne.n	800a2da <_vfiprintf_r+0x182>
 800a2c4:	787b      	ldrb	r3, [r7, #1]
 800a2c6:	2b2a      	cmp	r3, #42	; 0x2a
 800a2c8:	d137      	bne.n	800a33a <_vfiprintf_r+0x1e2>
 800a2ca:	9b07      	ldr	r3, [sp, #28]
 800a2cc:	3702      	adds	r7, #2
 800a2ce:	1d1a      	adds	r2, r3, #4
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	9207      	str	r2, [sp, #28]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	db2d      	blt.n	800a334 <_vfiprintf_r+0x1dc>
 800a2d8:	9309      	str	r3, [sp, #36]	; 0x24
 800a2da:	2203      	movs	r2, #3
 800a2dc:	7839      	ldrb	r1, [r7, #0]
 800a2de:	4837      	ldr	r0, [pc, #220]	; (800a3bc <_vfiprintf_r+0x264>)
 800a2e0:	f7ff f856 	bl	8009390 <memchr>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	d007      	beq.n	800a2f8 <_vfiprintf_r+0x1a0>
 800a2e8:	4b34      	ldr	r3, [pc, #208]	; (800a3bc <_vfiprintf_r+0x264>)
 800a2ea:	682a      	ldr	r2, [r5, #0]
 800a2ec:	1ac0      	subs	r0, r0, r3
 800a2ee:	2340      	movs	r3, #64	; 0x40
 800a2f0:	4083      	lsls	r3, r0
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	3701      	adds	r7, #1
 800a2f6:	602b      	str	r3, [r5, #0]
 800a2f8:	7839      	ldrb	r1, [r7, #0]
 800a2fa:	1c7b      	adds	r3, r7, #1
 800a2fc:	2206      	movs	r2, #6
 800a2fe:	4830      	ldr	r0, [pc, #192]	; (800a3c0 <_vfiprintf_r+0x268>)
 800a300:	9303      	str	r3, [sp, #12]
 800a302:	7629      	strb	r1, [r5, #24]
 800a304:	f7ff f844 	bl	8009390 <memchr>
 800a308:	2800      	cmp	r0, #0
 800a30a:	d045      	beq.n	800a398 <_vfiprintf_r+0x240>
 800a30c:	4b2d      	ldr	r3, [pc, #180]	; (800a3c4 <_vfiprintf_r+0x26c>)
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d127      	bne.n	800a362 <_vfiprintf_r+0x20a>
 800a312:	2207      	movs	r2, #7
 800a314:	9b07      	ldr	r3, [sp, #28]
 800a316:	3307      	adds	r3, #7
 800a318:	4393      	bics	r3, r2
 800a31a:	3308      	adds	r3, #8
 800a31c:	9307      	str	r3, [sp, #28]
 800a31e:	696b      	ldr	r3, [r5, #20]
 800a320:	9a04      	ldr	r2, [sp, #16]
 800a322:	189b      	adds	r3, r3, r2
 800a324:	616b      	str	r3, [r5, #20]
 800a326:	e75d      	b.n	800a1e4 <_vfiprintf_r+0x8c>
 800a328:	210a      	movs	r1, #10
 800a32a:	434b      	muls	r3, r1
 800a32c:	4667      	mov	r7, ip
 800a32e:	189b      	adds	r3, r3, r2
 800a330:	3909      	subs	r1, #9
 800a332:	e7a3      	b.n	800a27c <_vfiprintf_r+0x124>
 800a334:	2301      	movs	r3, #1
 800a336:	425b      	negs	r3, r3
 800a338:	e7ce      	b.n	800a2d8 <_vfiprintf_r+0x180>
 800a33a:	2300      	movs	r3, #0
 800a33c:	001a      	movs	r2, r3
 800a33e:	3701      	adds	r7, #1
 800a340:	606b      	str	r3, [r5, #4]
 800a342:	7839      	ldrb	r1, [r7, #0]
 800a344:	1c78      	adds	r0, r7, #1
 800a346:	3930      	subs	r1, #48	; 0x30
 800a348:	4684      	mov	ip, r0
 800a34a:	2909      	cmp	r1, #9
 800a34c:	d903      	bls.n	800a356 <_vfiprintf_r+0x1fe>
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d0c3      	beq.n	800a2da <_vfiprintf_r+0x182>
 800a352:	9209      	str	r2, [sp, #36]	; 0x24
 800a354:	e7c1      	b.n	800a2da <_vfiprintf_r+0x182>
 800a356:	230a      	movs	r3, #10
 800a358:	435a      	muls	r2, r3
 800a35a:	4667      	mov	r7, ip
 800a35c:	1852      	adds	r2, r2, r1
 800a35e:	3b09      	subs	r3, #9
 800a360:	e7ef      	b.n	800a342 <_vfiprintf_r+0x1ea>
 800a362:	ab07      	add	r3, sp, #28
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	0022      	movs	r2, r4
 800a368:	0029      	movs	r1, r5
 800a36a:	0030      	movs	r0, r6
 800a36c:	4b16      	ldr	r3, [pc, #88]	; (800a3c8 <_vfiprintf_r+0x270>)
 800a36e:	f7fd fd63 	bl	8007e38 <_printf_float>
 800a372:	9004      	str	r0, [sp, #16]
 800a374:	9b04      	ldr	r3, [sp, #16]
 800a376:	3301      	adds	r3, #1
 800a378:	d1d1      	bne.n	800a31e <_vfiprintf_r+0x1c6>
 800a37a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a37c:	07db      	lsls	r3, r3, #31
 800a37e:	d405      	bmi.n	800a38c <_vfiprintf_r+0x234>
 800a380:	89a3      	ldrh	r3, [r4, #12]
 800a382:	059b      	lsls	r3, r3, #22
 800a384:	d402      	bmi.n	800a38c <_vfiprintf_r+0x234>
 800a386:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a388:	f000 fad4 	bl	800a934 <__retarget_lock_release_recursive>
 800a38c:	89a3      	ldrh	r3, [r4, #12]
 800a38e:	065b      	lsls	r3, r3, #25
 800a390:	d500      	bpl.n	800a394 <_vfiprintf_r+0x23c>
 800a392:	e70a      	b.n	800a1aa <_vfiprintf_r+0x52>
 800a394:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a396:	e70a      	b.n	800a1ae <_vfiprintf_r+0x56>
 800a398:	ab07      	add	r3, sp, #28
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	0022      	movs	r2, r4
 800a39e:	0029      	movs	r1, r5
 800a3a0:	0030      	movs	r0, r6
 800a3a2:	4b09      	ldr	r3, [pc, #36]	; (800a3c8 <_vfiprintf_r+0x270>)
 800a3a4:	f7fd fffa 	bl	800839c <_printf_i>
 800a3a8:	e7e3      	b.n	800a372 <_vfiprintf_r+0x21a>
 800a3aa:	46c0      	nop			; (mov r8, r8)
 800a3ac:	0800b114 	.word	0x0800b114
 800a3b0:	0800b134 	.word	0x0800b134
 800a3b4:	0800b0f4 	.word	0x0800b0f4
 800a3b8:	0800af9c 	.word	0x0800af9c
 800a3bc:	0800afa2 	.word	0x0800afa2
 800a3c0:	0800afa6 	.word	0x0800afa6
 800a3c4:	08007e39 	.word	0x08007e39
 800a3c8:	0800a135 	.word	0x0800a135

0800a3cc <__swbuf_r>:
 800a3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ce:	0005      	movs	r5, r0
 800a3d0:	000e      	movs	r6, r1
 800a3d2:	0014      	movs	r4, r2
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	d004      	beq.n	800a3e2 <__swbuf_r+0x16>
 800a3d8:	6983      	ldr	r3, [r0, #24]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d101      	bne.n	800a3e2 <__swbuf_r+0x16>
 800a3de:	f000 fa07 	bl	800a7f0 <__sinit>
 800a3e2:	4b22      	ldr	r3, [pc, #136]	; (800a46c <__swbuf_r+0xa0>)
 800a3e4:	429c      	cmp	r4, r3
 800a3e6:	d12e      	bne.n	800a446 <__swbuf_r+0x7a>
 800a3e8:	686c      	ldr	r4, [r5, #4]
 800a3ea:	69a3      	ldr	r3, [r4, #24]
 800a3ec:	60a3      	str	r3, [r4, #8]
 800a3ee:	89a3      	ldrh	r3, [r4, #12]
 800a3f0:	071b      	lsls	r3, r3, #28
 800a3f2:	d532      	bpl.n	800a45a <__swbuf_r+0x8e>
 800a3f4:	6923      	ldr	r3, [r4, #16]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d02f      	beq.n	800a45a <__swbuf_r+0x8e>
 800a3fa:	6823      	ldr	r3, [r4, #0]
 800a3fc:	6922      	ldr	r2, [r4, #16]
 800a3fe:	b2f7      	uxtb	r7, r6
 800a400:	1a98      	subs	r0, r3, r2
 800a402:	6963      	ldr	r3, [r4, #20]
 800a404:	b2f6      	uxtb	r6, r6
 800a406:	4283      	cmp	r3, r0
 800a408:	dc05      	bgt.n	800a416 <__swbuf_r+0x4a>
 800a40a:	0021      	movs	r1, r4
 800a40c:	0028      	movs	r0, r5
 800a40e:	f000 f94d 	bl	800a6ac <_fflush_r>
 800a412:	2800      	cmp	r0, #0
 800a414:	d127      	bne.n	800a466 <__swbuf_r+0x9a>
 800a416:	68a3      	ldr	r3, [r4, #8]
 800a418:	3001      	adds	r0, #1
 800a41a:	3b01      	subs	r3, #1
 800a41c:	60a3      	str	r3, [r4, #8]
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	1c5a      	adds	r2, r3, #1
 800a422:	6022      	str	r2, [r4, #0]
 800a424:	701f      	strb	r7, [r3, #0]
 800a426:	6963      	ldr	r3, [r4, #20]
 800a428:	4283      	cmp	r3, r0
 800a42a:	d004      	beq.n	800a436 <__swbuf_r+0x6a>
 800a42c:	89a3      	ldrh	r3, [r4, #12]
 800a42e:	07db      	lsls	r3, r3, #31
 800a430:	d507      	bpl.n	800a442 <__swbuf_r+0x76>
 800a432:	2e0a      	cmp	r6, #10
 800a434:	d105      	bne.n	800a442 <__swbuf_r+0x76>
 800a436:	0021      	movs	r1, r4
 800a438:	0028      	movs	r0, r5
 800a43a:	f000 f937 	bl	800a6ac <_fflush_r>
 800a43e:	2800      	cmp	r0, #0
 800a440:	d111      	bne.n	800a466 <__swbuf_r+0x9a>
 800a442:	0030      	movs	r0, r6
 800a444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a446:	4b0a      	ldr	r3, [pc, #40]	; (800a470 <__swbuf_r+0xa4>)
 800a448:	429c      	cmp	r4, r3
 800a44a:	d101      	bne.n	800a450 <__swbuf_r+0x84>
 800a44c:	68ac      	ldr	r4, [r5, #8]
 800a44e:	e7cc      	b.n	800a3ea <__swbuf_r+0x1e>
 800a450:	4b08      	ldr	r3, [pc, #32]	; (800a474 <__swbuf_r+0xa8>)
 800a452:	429c      	cmp	r4, r3
 800a454:	d1c9      	bne.n	800a3ea <__swbuf_r+0x1e>
 800a456:	68ec      	ldr	r4, [r5, #12]
 800a458:	e7c7      	b.n	800a3ea <__swbuf_r+0x1e>
 800a45a:	0021      	movs	r1, r4
 800a45c:	0028      	movs	r0, r5
 800a45e:	f000 f819 	bl	800a494 <__swsetup_r>
 800a462:	2800      	cmp	r0, #0
 800a464:	d0c9      	beq.n	800a3fa <__swbuf_r+0x2e>
 800a466:	2601      	movs	r6, #1
 800a468:	4276      	negs	r6, r6
 800a46a:	e7ea      	b.n	800a442 <__swbuf_r+0x76>
 800a46c:	0800b114 	.word	0x0800b114
 800a470:	0800b134 	.word	0x0800b134
 800a474:	0800b0f4 	.word	0x0800b0f4

0800a478 <__ascii_wctomb>:
 800a478:	0003      	movs	r3, r0
 800a47a:	1e08      	subs	r0, r1, #0
 800a47c:	d005      	beq.n	800a48a <__ascii_wctomb+0x12>
 800a47e:	2aff      	cmp	r2, #255	; 0xff
 800a480:	d904      	bls.n	800a48c <__ascii_wctomb+0x14>
 800a482:	228a      	movs	r2, #138	; 0x8a
 800a484:	2001      	movs	r0, #1
 800a486:	601a      	str	r2, [r3, #0]
 800a488:	4240      	negs	r0, r0
 800a48a:	4770      	bx	lr
 800a48c:	2001      	movs	r0, #1
 800a48e:	700a      	strb	r2, [r1, #0]
 800a490:	e7fb      	b.n	800a48a <__ascii_wctomb+0x12>
	...

0800a494 <__swsetup_r>:
 800a494:	4b37      	ldr	r3, [pc, #220]	; (800a574 <__swsetup_r+0xe0>)
 800a496:	b570      	push	{r4, r5, r6, lr}
 800a498:	681d      	ldr	r5, [r3, #0]
 800a49a:	0006      	movs	r6, r0
 800a49c:	000c      	movs	r4, r1
 800a49e:	2d00      	cmp	r5, #0
 800a4a0:	d005      	beq.n	800a4ae <__swsetup_r+0x1a>
 800a4a2:	69ab      	ldr	r3, [r5, #24]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d102      	bne.n	800a4ae <__swsetup_r+0x1a>
 800a4a8:	0028      	movs	r0, r5
 800a4aa:	f000 f9a1 	bl	800a7f0 <__sinit>
 800a4ae:	4b32      	ldr	r3, [pc, #200]	; (800a578 <__swsetup_r+0xe4>)
 800a4b0:	429c      	cmp	r4, r3
 800a4b2:	d10f      	bne.n	800a4d4 <__swsetup_r+0x40>
 800a4b4:	686c      	ldr	r4, [r5, #4]
 800a4b6:	230c      	movs	r3, #12
 800a4b8:	5ee2      	ldrsh	r2, [r4, r3]
 800a4ba:	b293      	uxth	r3, r2
 800a4bc:	0711      	lsls	r1, r2, #28
 800a4be:	d42d      	bmi.n	800a51c <__swsetup_r+0x88>
 800a4c0:	06d9      	lsls	r1, r3, #27
 800a4c2:	d411      	bmi.n	800a4e8 <__swsetup_r+0x54>
 800a4c4:	2309      	movs	r3, #9
 800a4c6:	2001      	movs	r0, #1
 800a4c8:	6033      	str	r3, [r6, #0]
 800a4ca:	3337      	adds	r3, #55	; 0x37
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	81a3      	strh	r3, [r4, #12]
 800a4d0:	4240      	negs	r0, r0
 800a4d2:	bd70      	pop	{r4, r5, r6, pc}
 800a4d4:	4b29      	ldr	r3, [pc, #164]	; (800a57c <__swsetup_r+0xe8>)
 800a4d6:	429c      	cmp	r4, r3
 800a4d8:	d101      	bne.n	800a4de <__swsetup_r+0x4a>
 800a4da:	68ac      	ldr	r4, [r5, #8]
 800a4dc:	e7eb      	b.n	800a4b6 <__swsetup_r+0x22>
 800a4de:	4b28      	ldr	r3, [pc, #160]	; (800a580 <__swsetup_r+0xec>)
 800a4e0:	429c      	cmp	r4, r3
 800a4e2:	d1e8      	bne.n	800a4b6 <__swsetup_r+0x22>
 800a4e4:	68ec      	ldr	r4, [r5, #12]
 800a4e6:	e7e6      	b.n	800a4b6 <__swsetup_r+0x22>
 800a4e8:	075b      	lsls	r3, r3, #29
 800a4ea:	d513      	bpl.n	800a514 <__swsetup_r+0x80>
 800a4ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4ee:	2900      	cmp	r1, #0
 800a4f0:	d008      	beq.n	800a504 <__swsetup_r+0x70>
 800a4f2:	0023      	movs	r3, r4
 800a4f4:	3344      	adds	r3, #68	; 0x44
 800a4f6:	4299      	cmp	r1, r3
 800a4f8:	d002      	beq.n	800a500 <__swsetup_r+0x6c>
 800a4fa:	0030      	movs	r0, r6
 800a4fc:	f7ff fb1c 	bl	8009b38 <_free_r>
 800a500:	2300      	movs	r3, #0
 800a502:	6363      	str	r3, [r4, #52]	; 0x34
 800a504:	2224      	movs	r2, #36	; 0x24
 800a506:	89a3      	ldrh	r3, [r4, #12]
 800a508:	4393      	bics	r3, r2
 800a50a:	81a3      	strh	r3, [r4, #12]
 800a50c:	2300      	movs	r3, #0
 800a50e:	6063      	str	r3, [r4, #4]
 800a510:	6923      	ldr	r3, [r4, #16]
 800a512:	6023      	str	r3, [r4, #0]
 800a514:	2308      	movs	r3, #8
 800a516:	89a2      	ldrh	r2, [r4, #12]
 800a518:	4313      	orrs	r3, r2
 800a51a:	81a3      	strh	r3, [r4, #12]
 800a51c:	6923      	ldr	r3, [r4, #16]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d10b      	bne.n	800a53a <__swsetup_r+0xa6>
 800a522:	21a0      	movs	r1, #160	; 0xa0
 800a524:	2280      	movs	r2, #128	; 0x80
 800a526:	89a3      	ldrh	r3, [r4, #12]
 800a528:	0089      	lsls	r1, r1, #2
 800a52a:	0092      	lsls	r2, r2, #2
 800a52c:	400b      	ands	r3, r1
 800a52e:	4293      	cmp	r3, r2
 800a530:	d003      	beq.n	800a53a <__swsetup_r+0xa6>
 800a532:	0021      	movs	r1, r4
 800a534:	0030      	movs	r0, r6
 800a536:	f000 fa27 	bl	800a988 <__smakebuf_r>
 800a53a:	220c      	movs	r2, #12
 800a53c:	5ea3      	ldrsh	r3, [r4, r2]
 800a53e:	2001      	movs	r0, #1
 800a540:	001a      	movs	r2, r3
 800a542:	b299      	uxth	r1, r3
 800a544:	4002      	ands	r2, r0
 800a546:	4203      	tst	r3, r0
 800a548:	d00f      	beq.n	800a56a <__swsetup_r+0xd6>
 800a54a:	2200      	movs	r2, #0
 800a54c:	60a2      	str	r2, [r4, #8]
 800a54e:	6962      	ldr	r2, [r4, #20]
 800a550:	4252      	negs	r2, r2
 800a552:	61a2      	str	r2, [r4, #24]
 800a554:	2000      	movs	r0, #0
 800a556:	6922      	ldr	r2, [r4, #16]
 800a558:	4282      	cmp	r2, r0
 800a55a:	d1ba      	bne.n	800a4d2 <__swsetup_r+0x3e>
 800a55c:	060a      	lsls	r2, r1, #24
 800a55e:	d5b8      	bpl.n	800a4d2 <__swsetup_r+0x3e>
 800a560:	2240      	movs	r2, #64	; 0x40
 800a562:	4313      	orrs	r3, r2
 800a564:	81a3      	strh	r3, [r4, #12]
 800a566:	3801      	subs	r0, #1
 800a568:	e7b3      	b.n	800a4d2 <__swsetup_r+0x3e>
 800a56a:	0788      	lsls	r0, r1, #30
 800a56c:	d400      	bmi.n	800a570 <__swsetup_r+0xdc>
 800a56e:	6962      	ldr	r2, [r4, #20]
 800a570:	60a2      	str	r2, [r4, #8]
 800a572:	e7ef      	b.n	800a554 <__swsetup_r+0xc0>
 800a574:	2000000c 	.word	0x2000000c
 800a578:	0800b114 	.word	0x0800b114
 800a57c:	0800b134 	.word	0x0800b134
 800a580:	0800b0f4 	.word	0x0800b0f4

0800a584 <abort>:
 800a584:	2006      	movs	r0, #6
 800a586:	b510      	push	{r4, lr}
 800a588:	f000 fa74 	bl	800aa74 <raise>
 800a58c:	2001      	movs	r0, #1
 800a58e:	f7f9 fc93 	bl	8003eb8 <_exit>
	...

0800a594 <__sflush_r>:
 800a594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a596:	898b      	ldrh	r3, [r1, #12]
 800a598:	0005      	movs	r5, r0
 800a59a:	000c      	movs	r4, r1
 800a59c:	071a      	lsls	r2, r3, #28
 800a59e:	d45f      	bmi.n	800a660 <__sflush_r+0xcc>
 800a5a0:	684a      	ldr	r2, [r1, #4]
 800a5a2:	2a00      	cmp	r2, #0
 800a5a4:	dc04      	bgt.n	800a5b0 <__sflush_r+0x1c>
 800a5a6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a5a8:	2a00      	cmp	r2, #0
 800a5aa:	dc01      	bgt.n	800a5b0 <__sflush_r+0x1c>
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5b0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a5b2:	2f00      	cmp	r7, #0
 800a5b4:	d0fa      	beq.n	800a5ac <__sflush_r+0x18>
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	2180      	movs	r1, #128	; 0x80
 800a5ba:	682e      	ldr	r6, [r5, #0]
 800a5bc:	602a      	str	r2, [r5, #0]
 800a5be:	001a      	movs	r2, r3
 800a5c0:	0149      	lsls	r1, r1, #5
 800a5c2:	400a      	ands	r2, r1
 800a5c4:	420b      	tst	r3, r1
 800a5c6:	d034      	beq.n	800a632 <__sflush_r+0x9e>
 800a5c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a5ca:	89a3      	ldrh	r3, [r4, #12]
 800a5cc:	075b      	lsls	r3, r3, #29
 800a5ce:	d506      	bpl.n	800a5de <__sflush_r+0x4a>
 800a5d0:	6863      	ldr	r3, [r4, #4]
 800a5d2:	1ac0      	subs	r0, r0, r3
 800a5d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d001      	beq.n	800a5de <__sflush_r+0x4a>
 800a5da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5dc:	1ac0      	subs	r0, r0, r3
 800a5de:	0002      	movs	r2, r0
 800a5e0:	6a21      	ldr	r1, [r4, #32]
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	0028      	movs	r0, r5
 800a5e6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a5e8:	47b8      	blx	r7
 800a5ea:	89a1      	ldrh	r1, [r4, #12]
 800a5ec:	1c43      	adds	r3, r0, #1
 800a5ee:	d106      	bne.n	800a5fe <__sflush_r+0x6a>
 800a5f0:	682b      	ldr	r3, [r5, #0]
 800a5f2:	2b1d      	cmp	r3, #29
 800a5f4:	d831      	bhi.n	800a65a <__sflush_r+0xc6>
 800a5f6:	4a2c      	ldr	r2, [pc, #176]	; (800a6a8 <__sflush_r+0x114>)
 800a5f8:	40da      	lsrs	r2, r3
 800a5fa:	07d3      	lsls	r3, r2, #31
 800a5fc:	d52d      	bpl.n	800a65a <__sflush_r+0xc6>
 800a5fe:	2300      	movs	r3, #0
 800a600:	6063      	str	r3, [r4, #4]
 800a602:	6923      	ldr	r3, [r4, #16]
 800a604:	6023      	str	r3, [r4, #0]
 800a606:	04cb      	lsls	r3, r1, #19
 800a608:	d505      	bpl.n	800a616 <__sflush_r+0x82>
 800a60a:	1c43      	adds	r3, r0, #1
 800a60c:	d102      	bne.n	800a614 <__sflush_r+0x80>
 800a60e:	682b      	ldr	r3, [r5, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d100      	bne.n	800a616 <__sflush_r+0x82>
 800a614:	6560      	str	r0, [r4, #84]	; 0x54
 800a616:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a618:	602e      	str	r6, [r5, #0]
 800a61a:	2900      	cmp	r1, #0
 800a61c:	d0c6      	beq.n	800a5ac <__sflush_r+0x18>
 800a61e:	0023      	movs	r3, r4
 800a620:	3344      	adds	r3, #68	; 0x44
 800a622:	4299      	cmp	r1, r3
 800a624:	d002      	beq.n	800a62c <__sflush_r+0x98>
 800a626:	0028      	movs	r0, r5
 800a628:	f7ff fa86 	bl	8009b38 <_free_r>
 800a62c:	2000      	movs	r0, #0
 800a62e:	6360      	str	r0, [r4, #52]	; 0x34
 800a630:	e7bd      	b.n	800a5ae <__sflush_r+0x1a>
 800a632:	2301      	movs	r3, #1
 800a634:	0028      	movs	r0, r5
 800a636:	6a21      	ldr	r1, [r4, #32]
 800a638:	47b8      	blx	r7
 800a63a:	1c43      	adds	r3, r0, #1
 800a63c:	d1c5      	bne.n	800a5ca <__sflush_r+0x36>
 800a63e:	682b      	ldr	r3, [r5, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d0c2      	beq.n	800a5ca <__sflush_r+0x36>
 800a644:	2b1d      	cmp	r3, #29
 800a646:	d001      	beq.n	800a64c <__sflush_r+0xb8>
 800a648:	2b16      	cmp	r3, #22
 800a64a:	d101      	bne.n	800a650 <__sflush_r+0xbc>
 800a64c:	602e      	str	r6, [r5, #0]
 800a64e:	e7ad      	b.n	800a5ac <__sflush_r+0x18>
 800a650:	2340      	movs	r3, #64	; 0x40
 800a652:	89a2      	ldrh	r2, [r4, #12]
 800a654:	4313      	orrs	r3, r2
 800a656:	81a3      	strh	r3, [r4, #12]
 800a658:	e7a9      	b.n	800a5ae <__sflush_r+0x1a>
 800a65a:	2340      	movs	r3, #64	; 0x40
 800a65c:	430b      	orrs	r3, r1
 800a65e:	e7fa      	b.n	800a656 <__sflush_r+0xc2>
 800a660:	690f      	ldr	r7, [r1, #16]
 800a662:	2f00      	cmp	r7, #0
 800a664:	d0a2      	beq.n	800a5ac <__sflush_r+0x18>
 800a666:	680a      	ldr	r2, [r1, #0]
 800a668:	600f      	str	r7, [r1, #0]
 800a66a:	1bd2      	subs	r2, r2, r7
 800a66c:	9201      	str	r2, [sp, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	079b      	lsls	r3, r3, #30
 800a672:	d100      	bne.n	800a676 <__sflush_r+0xe2>
 800a674:	694a      	ldr	r2, [r1, #20]
 800a676:	60a2      	str	r2, [r4, #8]
 800a678:	9b01      	ldr	r3, [sp, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	dc00      	bgt.n	800a680 <__sflush_r+0xec>
 800a67e:	e795      	b.n	800a5ac <__sflush_r+0x18>
 800a680:	003a      	movs	r2, r7
 800a682:	0028      	movs	r0, r5
 800a684:	9b01      	ldr	r3, [sp, #4]
 800a686:	6a21      	ldr	r1, [r4, #32]
 800a688:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a68a:	47b0      	blx	r6
 800a68c:	2800      	cmp	r0, #0
 800a68e:	dc06      	bgt.n	800a69e <__sflush_r+0x10a>
 800a690:	2340      	movs	r3, #64	; 0x40
 800a692:	2001      	movs	r0, #1
 800a694:	89a2      	ldrh	r2, [r4, #12]
 800a696:	4240      	negs	r0, r0
 800a698:	4313      	orrs	r3, r2
 800a69a:	81a3      	strh	r3, [r4, #12]
 800a69c:	e787      	b.n	800a5ae <__sflush_r+0x1a>
 800a69e:	9b01      	ldr	r3, [sp, #4]
 800a6a0:	183f      	adds	r7, r7, r0
 800a6a2:	1a1b      	subs	r3, r3, r0
 800a6a4:	9301      	str	r3, [sp, #4]
 800a6a6:	e7e7      	b.n	800a678 <__sflush_r+0xe4>
 800a6a8:	20400001 	.word	0x20400001

0800a6ac <_fflush_r>:
 800a6ac:	690b      	ldr	r3, [r1, #16]
 800a6ae:	b570      	push	{r4, r5, r6, lr}
 800a6b0:	0005      	movs	r5, r0
 800a6b2:	000c      	movs	r4, r1
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d102      	bne.n	800a6be <_fflush_r+0x12>
 800a6b8:	2500      	movs	r5, #0
 800a6ba:	0028      	movs	r0, r5
 800a6bc:	bd70      	pop	{r4, r5, r6, pc}
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	d004      	beq.n	800a6cc <_fflush_r+0x20>
 800a6c2:	6983      	ldr	r3, [r0, #24]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d101      	bne.n	800a6cc <_fflush_r+0x20>
 800a6c8:	f000 f892 	bl	800a7f0 <__sinit>
 800a6cc:	4b14      	ldr	r3, [pc, #80]	; (800a720 <_fflush_r+0x74>)
 800a6ce:	429c      	cmp	r4, r3
 800a6d0:	d11b      	bne.n	800a70a <_fflush_r+0x5e>
 800a6d2:	686c      	ldr	r4, [r5, #4]
 800a6d4:	220c      	movs	r2, #12
 800a6d6:	5ea3      	ldrsh	r3, [r4, r2]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d0ed      	beq.n	800a6b8 <_fflush_r+0xc>
 800a6dc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a6de:	07d2      	lsls	r2, r2, #31
 800a6e0:	d404      	bmi.n	800a6ec <_fflush_r+0x40>
 800a6e2:	059b      	lsls	r3, r3, #22
 800a6e4:	d402      	bmi.n	800a6ec <_fflush_r+0x40>
 800a6e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6e8:	f000 f923 	bl	800a932 <__retarget_lock_acquire_recursive>
 800a6ec:	0028      	movs	r0, r5
 800a6ee:	0021      	movs	r1, r4
 800a6f0:	f7ff ff50 	bl	800a594 <__sflush_r>
 800a6f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6f6:	0005      	movs	r5, r0
 800a6f8:	07db      	lsls	r3, r3, #31
 800a6fa:	d4de      	bmi.n	800a6ba <_fflush_r+0xe>
 800a6fc:	89a3      	ldrh	r3, [r4, #12]
 800a6fe:	059b      	lsls	r3, r3, #22
 800a700:	d4db      	bmi.n	800a6ba <_fflush_r+0xe>
 800a702:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a704:	f000 f916 	bl	800a934 <__retarget_lock_release_recursive>
 800a708:	e7d7      	b.n	800a6ba <_fflush_r+0xe>
 800a70a:	4b06      	ldr	r3, [pc, #24]	; (800a724 <_fflush_r+0x78>)
 800a70c:	429c      	cmp	r4, r3
 800a70e:	d101      	bne.n	800a714 <_fflush_r+0x68>
 800a710:	68ac      	ldr	r4, [r5, #8]
 800a712:	e7df      	b.n	800a6d4 <_fflush_r+0x28>
 800a714:	4b04      	ldr	r3, [pc, #16]	; (800a728 <_fflush_r+0x7c>)
 800a716:	429c      	cmp	r4, r3
 800a718:	d1dc      	bne.n	800a6d4 <_fflush_r+0x28>
 800a71a:	68ec      	ldr	r4, [r5, #12]
 800a71c:	e7da      	b.n	800a6d4 <_fflush_r+0x28>
 800a71e:	46c0      	nop			; (mov r8, r8)
 800a720:	0800b114 	.word	0x0800b114
 800a724:	0800b134 	.word	0x0800b134
 800a728:	0800b0f4 	.word	0x0800b0f4

0800a72c <std>:
 800a72c:	2300      	movs	r3, #0
 800a72e:	b510      	push	{r4, lr}
 800a730:	0004      	movs	r4, r0
 800a732:	6003      	str	r3, [r0, #0]
 800a734:	6043      	str	r3, [r0, #4]
 800a736:	6083      	str	r3, [r0, #8]
 800a738:	8181      	strh	r1, [r0, #12]
 800a73a:	6643      	str	r3, [r0, #100]	; 0x64
 800a73c:	0019      	movs	r1, r3
 800a73e:	81c2      	strh	r2, [r0, #14]
 800a740:	6103      	str	r3, [r0, #16]
 800a742:	6143      	str	r3, [r0, #20]
 800a744:	6183      	str	r3, [r0, #24]
 800a746:	2208      	movs	r2, #8
 800a748:	305c      	adds	r0, #92	; 0x5c
 800a74a:	f7fd fac2 	bl	8007cd2 <memset>
 800a74e:	4b05      	ldr	r3, [pc, #20]	; (800a764 <std+0x38>)
 800a750:	6224      	str	r4, [r4, #32]
 800a752:	6263      	str	r3, [r4, #36]	; 0x24
 800a754:	4b04      	ldr	r3, [pc, #16]	; (800a768 <std+0x3c>)
 800a756:	62a3      	str	r3, [r4, #40]	; 0x28
 800a758:	4b04      	ldr	r3, [pc, #16]	; (800a76c <std+0x40>)
 800a75a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a75c:	4b04      	ldr	r3, [pc, #16]	; (800a770 <std+0x44>)
 800a75e:	6323      	str	r3, [r4, #48]	; 0x30
 800a760:	bd10      	pop	{r4, pc}
 800a762:	46c0      	nop			; (mov r8, r8)
 800a764:	0800aab5 	.word	0x0800aab5
 800a768:	0800aadd 	.word	0x0800aadd
 800a76c:	0800ab15 	.word	0x0800ab15
 800a770:	0800ab41 	.word	0x0800ab41

0800a774 <_cleanup_r>:
 800a774:	b510      	push	{r4, lr}
 800a776:	4902      	ldr	r1, [pc, #8]	; (800a780 <_cleanup_r+0xc>)
 800a778:	f000 f8ba 	bl	800a8f0 <_fwalk_reent>
 800a77c:	bd10      	pop	{r4, pc}
 800a77e:	46c0      	nop			; (mov r8, r8)
 800a780:	0800a6ad 	.word	0x0800a6ad

0800a784 <__sfmoreglue>:
 800a784:	b570      	push	{r4, r5, r6, lr}
 800a786:	2568      	movs	r5, #104	; 0x68
 800a788:	1e4a      	subs	r2, r1, #1
 800a78a:	4355      	muls	r5, r2
 800a78c:	000e      	movs	r6, r1
 800a78e:	0029      	movs	r1, r5
 800a790:	3174      	adds	r1, #116	; 0x74
 800a792:	f7ff fa3d 	bl	8009c10 <_malloc_r>
 800a796:	1e04      	subs	r4, r0, #0
 800a798:	d008      	beq.n	800a7ac <__sfmoreglue+0x28>
 800a79a:	2100      	movs	r1, #0
 800a79c:	002a      	movs	r2, r5
 800a79e:	6001      	str	r1, [r0, #0]
 800a7a0:	6046      	str	r6, [r0, #4]
 800a7a2:	300c      	adds	r0, #12
 800a7a4:	60a0      	str	r0, [r4, #8]
 800a7a6:	3268      	adds	r2, #104	; 0x68
 800a7a8:	f7fd fa93 	bl	8007cd2 <memset>
 800a7ac:	0020      	movs	r0, r4
 800a7ae:	bd70      	pop	{r4, r5, r6, pc}

0800a7b0 <__sfp_lock_acquire>:
 800a7b0:	b510      	push	{r4, lr}
 800a7b2:	4802      	ldr	r0, [pc, #8]	; (800a7bc <__sfp_lock_acquire+0xc>)
 800a7b4:	f000 f8bd 	bl	800a932 <__retarget_lock_acquire_recursive>
 800a7b8:	bd10      	pop	{r4, pc}
 800a7ba:	46c0      	nop			; (mov r8, r8)
 800a7bc:	2000043d 	.word	0x2000043d

0800a7c0 <__sfp_lock_release>:
 800a7c0:	b510      	push	{r4, lr}
 800a7c2:	4802      	ldr	r0, [pc, #8]	; (800a7cc <__sfp_lock_release+0xc>)
 800a7c4:	f000 f8b6 	bl	800a934 <__retarget_lock_release_recursive>
 800a7c8:	bd10      	pop	{r4, pc}
 800a7ca:	46c0      	nop			; (mov r8, r8)
 800a7cc:	2000043d 	.word	0x2000043d

0800a7d0 <__sinit_lock_acquire>:
 800a7d0:	b510      	push	{r4, lr}
 800a7d2:	4802      	ldr	r0, [pc, #8]	; (800a7dc <__sinit_lock_acquire+0xc>)
 800a7d4:	f000 f8ad 	bl	800a932 <__retarget_lock_acquire_recursive>
 800a7d8:	bd10      	pop	{r4, pc}
 800a7da:	46c0      	nop			; (mov r8, r8)
 800a7dc:	2000043e 	.word	0x2000043e

0800a7e0 <__sinit_lock_release>:
 800a7e0:	b510      	push	{r4, lr}
 800a7e2:	4802      	ldr	r0, [pc, #8]	; (800a7ec <__sinit_lock_release+0xc>)
 800a7e4:	f000 f8a6 	bl	800a934 <__retarget_lock_release_recursive>
 800a7e8:	bd10      	pop	{r4, pc}
 800a7ea:	46c0      	nop			; (mov r8, r8)
 800a7ec:	2000043e 	.word	0x2000043e

0800a7f0 <__sinit>:
 800a7f0:	b513      	push	{r0, r1, r4, lr}
 800a7f2:	0004      	movs	r4, r0
 800a7f4:	f7ff ffec 	bl	800a7d0 <__sinit_lock_acquire>
 800a7f8:	69a3      	ldr	r3, [r4, #24]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d002      	beq.n	800a804 <__sinit+0x14>
 800a7fe:	f7ff ffef 	bl	800a7e0 <__sinit_lock_release>
 800a802:	bd13      	pop	{r0, r1, r4, pc}
 800a804:	64a3      	str	r3, [r4, #72]	; 0x48
 800a806:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a808:	6523      	str	r3, [r4, #80]	; 0x50
 800a80a:	4b13      	ldr	r3, [pc, #76]	; (800a858 <__sinit+0x68>)
 800a80c:	4a13      	ldr	r2, [pc, #76]	; (800a85c <__sinit+0x6c>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	62a2      	str	r2, [r4, #40]	; 0x28
 800a812:	9301      	str	r3, [sp, #4]
 800a814:	42a3      	cmp	r3, r4
 800a816:	d101      	bne.n	800a81c <__sinit+0x2c>
 800a818:	2301      	movs	r3, #1
 800a81a:	61a3      	str	r3, [r4, #24]
 800a81c:	0020      	movs	r0, r4
 800a81e:	f000 f81f 	bl	800a860 <__sfp>
 800a822:	6060      	str	r0, [r4, #4]
 800a824:	0020      	movs	r0, r4
 800a826:	f000 f81b 	bl	800a860 <__sfp>
 800a82a:	60a0      	str	r0, [r4, #8]
 800a82c:	0020      	movs	r0, r4
 800a82e:	f000 f817 	bl	800a860 <__sfp>
 800a832:	2200      	movs	r2, #0
 800a834:	2104      	movs	r1, #4
 800a836:	60e0      	str	r0, [r4, #12]
 800a838:	6860      	ldr	r0, [r4, #4]
 800a83a:	f7ff ff77 	bl	800a72c <std>
 800a83e:	2201      	movs	r2, #1
 800a840:	2109      	movs	r1, #9
 800a842:	68a0      	ldr	r0, [r4, #8]
 800a844:	f7ff ff72 	bl	800a72c <std>
 800a848:	2202      	movs	r2, #2
 800a84a:	2112      	movs	r1, #18
 800a84c:	68e0      	ldr	r0, [r4, #12]
 800a84e:	f7ff ff6d 	bl	800a72c <std>
 800a852:	2301      	movs	r3, #1
 800a854:	61a3      	str	r3, [r4, #24]
 800a856:	e7d2      	b.n	800a7fe <__sinit+0xe>
 800a858:	0800ad78 	.word	0x0800ad78
 800a85c:	0800a775 	.word	0x0800a775

0800a860 <__sfp>:
 800a860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a862:	0007      	movs	r7, r0
 800a864:	f7ff ffa4 	bl	800a7b0 <__sfp_lock_acquire>
 800a868:	4b1f      	ldr	r3, [pc, #124]	; (800a8e8 <__sfp+0x88>)
 800a86a:	681e      	ldr	r6, [r3, #0]
 800a86c:	69b3      	ldr	r3, [r6, #24]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d102      	bne.n	800a878 <__sfp+0x18>
 800a872:	0030      	movs	r0, r6
 800a874:	f7ff ffbc 	bl	800a7f0 <__sinit>
 800a878:	3648      	adds	r6, #72	; 0x48
 800a87a:	68b4      	ldr	r4, [r6, #8]
 800a87c:	6873      	ldr	r3, [r6, #4]
 800a87e:	3b01      	subs	r3, #1
 800a880:	d504      	bpl.n	800a88c <__sfp+0x2c>
 800a882:	6833      	ldr	r3, [r6, #0]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d022      	beq.n	800a8ce <__sfp+0x6e>
 800a888:	6836      	ldr	r6, [r6, #0]
 800a88a:	e7f6      	b.n	800a87a <__sfp+0x1a>
 800a88c:	220c      	movs	r2, #12
 800a88e:	5ea5      	ldrsh	r5, [r4, r2]
 800a890:	2d00      	cmp	r5, #0
 800a892:	d11a      	bne.n	800a8ca <__sfp+0x6a>
 800a894:	0020      	movs	r0, r4
 800a896:	4b15      	ldr	r3, [pc, #84]	; (800a8ec <__sfp+0x8c>)
 800a898:	3058      	adds	r0, #88	; 0x58
 800a89a:	60e3      	str	r3, [r4, #12]
 800a89c:	6665      	str	r5, [r4, #100]	; 0x64
 800a89e:	f000 f847 	bl	800a930 <__retarget_lock_init_recursive>
 800a8a2:	f7ff ff8d 	bl	800a7c0 <__sfp_lock_release>
 800a8a6:	0020      	movs	r0, r4
 800a8a8:	2208      	movs	r2, #8
 800a8aa:	0029      	movs	r1, r5
 800a8ac:	6025      	str	r5, [r4, #0]
 800a8ae:	60a5      	str	r5, [r4, #8]
 800a8b0:	6065      	str	r5, [r4, #4]
 800a8b2:	6125      	str	r5, [r4, #16]
 800a8b4:	6165      	str	r5, [r4, #20]
 800a8b6:	61a5      	str	r5, [r4, #24]
 800a8b8:	305c      	adds	r0, #92	; 0x5c
 800a8ba:	f7fd fa0a 	bl	8007cd2 <memset>
 800a8be:	6365      	str	r5, [r4, #52]	; 0x34
 800a8c0:	63a5      	str	r5, [r4, #56]	; 0x38
 800a8c2:	64a5      	str	r5, [r4, #72]	; 0x48
 800a8c4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a8c6:	0020      	movs	r0, r4
 800a8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ca:	3468      	adds	r4, #104	; 0x68
 800a8cc:	e7d7      	b.n	800a87e <__sfp+0x1e>
 800a8ce:	2104      	movs	r1, #4
 800a8d0:	0038      	movs	r0, r7
 800a8d2:	f7ff ff57 	bl	800a784 <__sfmoreglue>
 800a8d6:	1e04      	subs	r4, r0, #0
 800a8d8:	6030      	str	r0, [r6, #0]
 800a8da:	d1d5      	bne.n	800a888 <__sfp+0x28>
 800a8dc:	f7ff ff70 	bl	800a7c0 <__sfp_lock_release>
 800a8e0:	230c      	movs	r3, #12
 800a8e2:	603b      	str	r3, [r7, #0]
 800a8e4:	e7ef      	b.n	800a8c6 <__sfp+0x66>
 800a8e6:	46c0      	nop			; (mov r8, r8)
 800a8e8:	0800ad78 	.word	0x0800ad78
 800a8ec:	ffff0001 	.word	0xffff0001

0800a8f0 <_fwalk_reent>:
 800a8f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8f2:	0004      	movs	r4, r0
 800a8f4:	0006      	movs	r6, r0
 800a8f6:	2700      	movs	r7, #0
 800a8f8:	9101      	str	r1, [sp, #4]
 800a8fa:	3448      	adds	r4, #72	; 0x48
 800a8fc:	6863      	ldr	r3, [r4, #4]
 800a8fe:	68a5      	ldr	r5, [r4, #8]
 800a900:	9300      	str	r3, [sp, #0]
 800a902:	9b00      	ldr	r3, [sp, #0]
 800a904:	3b01      	subs	r3, #1
 800a906:	9300      	str	r3, [sp, #0]
 800a908:	d504      	bpl.n	800a914 <_fwalk_reent+0x24>
 800a90a:	6824      	ldr	r4, [r4, #0]
 800a90c:	2c00      	cmp	r4, #0
 800a90e:	d1f5      	bne.n	800a8fc <_fwalk_reent+0xc>
 800a910:	0038      	movs	r0, r7
 800a912:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a914:	89ab      	ldrh	r3, [r5, #12]
 800a916:	2b01      	cmp	r3, #1
 800a918:	d908      	bls.n	800a92c <_fwalk_reent+0x3c>
 800a91a:	220e      	movs	r2, #14
 800a91c:	5eab      	ldrsh	r3, [r5, r2]
 800a91e:	3301      	adds	r3, #1
 800a920:	d004      	beq.n	800a92c <_fwalk_reent+0x3c>
 800a922:	0029      	movs	r1, r5
 800a924:	0030      	movs	r0, r6
 800a926:	9b01      	ldr	r3, [sp, #4]
 800a928:	4798      	blx	r3
 800a92a:	4307      	orrs	r7, r0
 800a92c:	3568      	adds	r5, #104	; 0x68
 800a92e:	e7e8      	b.n	800a902 <_fwalk_reent+0x12>

0800a930 <__retarget_lock_init_recursive>:
 800a930:	4770      	bx	lr

0800a932 <__retarget_lock_acquire_recursive>:
 800a932:	4770      	bx	lr

0800a934 <__retarget_lock_release_recursive>:
 800a934:	4770      	bx	lr
	...

0800a938 <__swhatbuf_r>:
 800a938:	b570      	push	{r4, r5, r6, lr}
 800a93a:	000e      	movs	r6, r1
 800a93c:	001d      	movs	r5, r3
 800a93e:	230e      	movs	r3, #14
 800a940:	5ec9      	ldrsh	r1, [r1, r3]
 800a942:	0014      	movs	r4, r2
 800a944:	b096      	sub	sp, #88	; 0x58
 800a946:	2900      	cmp	r1, #0
 800a948:	da08      	bge.n	800a95c <__swhatbuf_r+0x24>
 800a94a:	220c      	movs	r2, #12
 800a94c:	5eb3      	ldrsh	r3, [r6, r2]
 800a94e:	2200      	movs	r2, #0
 800a950:	602a      	str	r2, [r5, #0]
 800a952:	061b      	lsls	r3, r3, #24
 800a954:	d411      	bmi.n	800a97a <__swhatbuf_r+0x42>
 800a956:	2380      	movs	r3, #128	; 0x80
 800a958:	00db      	lsls	r3, r3, #3
 800a95a:	e00f      	b.n	800a97c <__swhatbuf_r+0x44>
 800a95c:	466a      	mov	r2, sp
 800a95e:	f000 f91b 	bl	800ab98 <_fstat_r>
 800a962:	2800      	cmp	r0, #0
 800a964:	dbf1      	blt.n	800a94a <__swhatbuf_r+0x12>
 800a966:	23f0      	movs	r3, #240	; 0xf0
 800a968:	9901      	ldr	r1, [sp, #4]
 800a96a:	021b      	lsls	r3, r3, #8
 800a96c:	4019      	ands	r1, r3
 800a96e:	4b05      	ldr	r3, [pc, #20]	; (800a984 <__swhatbuf_r+0x4c>)
 800a970:	18c9      	adds	r1, r1, r3
 800a972:	424b      	negs	r3, r1
 800a974:	4159      	adcs	r1, r3
 800a976:	6029      	str	r1, [r5, #0]
 800a978:	e7ed      	b.n	800a956 <__swhatbuf_r+0x1e>
 800a97a:	2340      	movs	r3, #64	; 0x40
 800a97c:	2000      	movs	r0, #0
 800a97e:	6023      	str	r3, [r4, #0]
 800a980:	b016      	add	sp, #88	; 0x58
 800a982:	bd70      	pop	{r4, r5, r6, pc}
 800a984:	ffffe000 	.word	0xffffe000

0800a988 <__smakebuf_r>:
 800a988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a98a:	2602      	movs	r6, #2
 800a98c:	898b      	ldrh	r3, [r1, #12]
 800a98e:	0005      	movs	r5, r0
 800a990:	000c      	movs	r4, r1
 800a992:	4233      	tst	r3, r6
 800a994:	d006      	beq.n	800a9a4 <__smakebuf_r+0x1c>
 800a996:	0023      	movs	r3, r4
 800a998:	3347      	adds	r3, #71	; 0x47
 800a99a:	6023      	str	r3, [r4, #0]
 800a99c:	6123      	str	r3, [r4, #16]
 800a99e:	2301      	movs	r3, #1
 800a9a0:	6163      	str	r3, [r4, #20]
 800a9a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a9a4:	466a      	mov	r2, sp
 800a9a6:	ab01      	add	r3, sp, #4
 800a9a8:	f7ff ffc6 	bl	800a938 <__swhatbuf_r>
 800a9ac:	9900      	ldr	r1, [sp, #0]
 800a9ae:	0007      	movs	r7, r0
 800a9b0:	0028      	movs	r0, r5
 800a9b2:	f7ff f92d 	bl	8009c10 <_malloc_r>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	d108      	bne.n	800a9cc <__smakebuf_r+0x44>
 800a9ba:	220c      	movs	r2, #12
 800a9bc:	5ea3      	ldrsh	r3, [r4, r2]
 800a9be:	059a      	lsls	r2, r3, #22
 800a9c0:	d4ef      	bmi.n	800a9a2 <__smakebuf_r+0x1a>
 800a9c2:	2203      	movs	r2, #3
 800a9c4:	4393      	bics	r3, r2
 800a9c6:	431e      	orrs	r6, r3
 800a9c8:	81a6      	strh	r6, [r4, #12]
 800a9ca:	e7e4      	b.n	800a996 <__smakebuf_r+0xe>
 800a9cc:	4b0f      	ldr	r3, [pc, #60]	; (800aa0c <__smakebuf_r+0x84>)
 800a9ce:	62ab      	str	r3, [r5, #40]	; 0x28
 800a9d0:	2380      	movs	r3, #128	; 0x80
 800a9d2:	89a2      	ldrh	r2, [r4, #12]
 800a9d4:	6020      	str	r0, [r4, #0]
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	81a3      	strh	r3, [r4, #12]
 800a9da:	9b00      	ldr	r3, [sp, #0]
 800a9dc:	6120      	str	r0, [r4, #16]
 800a9de:	6163      	str	r3, [r4, #20]
 800a9e0:	9b01      	ldr	r3, [sp, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d00d      	beq.n	800aa02 <__smakebuf_r+0x7a>
 800a9e6:	0028      	movs	r0, r5
 800a9e8:	230e      	movs	r3, #14
 800a9ea:	5ee1      	ldrsh	r1, [r4, r3]
 800a9ec:	f000 f8e6 	bl	800abbc <_isatty_r>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d006      	beq.n	800aa02 <__smakebuf_r+0x7a>
 800a9f4:	2203      	movs	r2, #3
 800a9f6:	89a3      	ldrh	r3, [r4, #12]
 800a9f8:	4393      	bics	r3, r2
 800a9fa:	001a      	movs	r2, r3
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	81a3      	strh	r3, [r4, #12]
 800aa02:	89a0      	ldrh	r0, [r4, #12]
 800aa04:	4307      	orrs	r7, r0
 800aa06:	81a7      	strh	r7, [r4, #12]
 800aa08:	e7cb      	b.n	800a9a2 <__smakebuf_r+0x1a>
 800aa0a:	46c0      	nop			; (mov r8, r8)
 800aa0c:	0800a775 	.word	0x0800a775

0800aa10 <_malloc_usable_size_r>:
 800aa10:	1f0b      	subs	r3, r1, #4
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	1f18      	subs	r0, r3, #4
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	da01      	bge.n	800aa1e <_malloc_usable_size_r+0xe>
 800aa1a:	580b      	ldr	r3, [r1, r0]
 800aa1c:	18c0      	adds	r0, r0, r3
 800aa1e:	4770      	bx	lr

0800aa20 <_raise_r>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	0004      	movs	r4, r0
 800aa24:	000d      	movs	r5, r1
 800aa26:	291f      	cmp	r1, #31
 800aa28:	d904      	bls.n	800aa34 <_raise_r+0x14>
 800aa2a:	2316      	movs	r3, #22
 800aa2c:	6003      	str	r3, [r0, #0]
 800aa2e:	2001      	movs	r0, #1
 800aa30:	4240      	negs	r0, r0
 800aa32:	bd70      	pop	{r4, r5, r6, pc}
 800aa34:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d004      	beq.n	800aa44 <_raise_r+0x24>
 800aa3a:	008a      	lsls	r2, r1, #2
 800aa3c:	189b      	adds	r3, r3, r2
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	2a00      	cmp	r2, #0
 800aa42:	d108      	bne.n	800aa56 <_raise_r+0x36>
 800aa44:	0020      	movs	r0, r4
 800aa46:	f000 f831 	bl	800aaac <_getpid_r>
 800aa4a:	002a      	movs	r2, r5
 800aa4c:	0001      	movs	r1, r0
 800aa4e:	0020      	movs	r0, r4
 800aa50:	f000 f81a 	bl	800aa88 <_kill_r>
 800aa54:	e7ed      	b.n	800aa32 <_raise_r+0x12>
 800aa56:	2000      	movs	r0, #0
 800aa58:	2a01      	cmp	r2, #1
 800aa5a:	d0ea      	beq.n	800aa32 <_raise_r+0x12>
 800aa5c:	1c51      	adds	r1, r2, #1
 800aa5e:	d103      	bne.n	800aa68 <_raise_r+0x48>
 800aa60:	2316      	movs	r3, #22
 800aa62:	3001      	adds	r0, #1
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	e7e4      	b.n	800aa32 <_raise_r+0x12>
 800aa68:	2400      	movs	r4, #0
 800aa6a:	0028      	movs	r0, r5
 800aa6c:	601c      	str	r4, [r3, #0]
 800aa6e:	4790      	blx	r2
 800aa70:	0020      	movs	r0, r4
 800aa72:	e7de      	b.n	800aa32 <_raise_r+0x12>

0800aa74 <raise>:
 800aa74:	b510      	push	{r4, lr}
 800aa76:	4b03      	ldr	r3, [pc, #12]	; (800aa84 <raise+0x10>)
 800aa78:	0001      	movs	r1, r0
 800aa7a:	6818      	ldr	r0, [r3, #0]
 800aa7c:	f7ff ffd0 	bl	800aa20 <_raise_r>
 800aa80:	bd10      	pop	{r4, pc}
 800aa82:	46c0      	nop			; (mov r8, r8)
 800aa84:	2000000c 	.word	0x2000000c

0800aa88 <_kill_r>:
 800aa88:	2300      	movs	r3, #0
 800aa8a:	b570      	push	{r4, r5, r6, lr}
 800aa8c:	4d06      	ldr	r5, [pc, #24]	; (800aaa8 <_kill_r+0x20>)
 800aa8e:	0004      	movs	r4, r0
 800aa90:	0008      	movs	r0, r1
 800aa92:	0011      	movs	r1, r2
 800aa94:	602b      	str	r3, [r5, #0]
 800aa96:	f7f9 f9ff 	bl	8003e98 <_kill>
 800aa9a:	1c43      	adds	r3, r0, #1
 800aa9c:	d103      	bne.n	800aaa6 <_kill_r+0x1e>
 800aa9e:	682b      	ldr	r3, [r5, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d000      	beq.n	800aaa6 <_kill_r+0x1e>
 800aaa4:	6023      	str	r3, [r4, #0]
 800aaa6:	bd70      	pop	{r4, r5, r6, pc}
 800aaa8:	20000438 	.word	0x20000438

0800aaac <_getpid_r>:
 800aaac:	b510      	push	{r4, lr}
 800aaae:	f7f9 f9ed 	bl	8003e8c <_getpid>
 800aab2:	bd10      	pop	{r4, pc}

0800aab4 <__sread>:
 800aab4:	b570      	push	{r4, r5, r6, lr}
 800aab6:	000c      	movs	r4, r1
 800aab8:	250e      	movs	r5, #14
 800aaba:	5f49      	ldrsh	r1, [r1, r5]
 800aabc:	f000 f8a4 	bl	800ac08 <_read_r>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	db03      	blt.n	800aacc <__sread+0x18>
 800aac4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800aac6:	181b      	adds	r3, r3, r0
 800aac8:	6563      	str	r3, [r4, #84]	; 0x54
 800aaca:	bd70      	pop	{r4, r5, r6, pc}
 800aacc:	89a3      	ldrh	r3, [r4, #12]
 800aace:	4a02      	ldr	r2, [pc, #8]	; (800aad8 <__sread+0x24>)
 800aad0:	4013      	ands	r3, r2
 800aad2:	81a3      	strh	r3, [r4, #12]
 800aad4:	e7f9      	b.n	800aaca <__sread+0x16>
 800aad6:	46c0      	nop			; (mov r8, r8)
 800aad8:	ffffefff 	.word	0xffffefff

0800aadc <__swrite>:
 800aadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aade:	001f      	movs	r7, r3
 800aae0:	898b      	ldrh	r3, [r1, #12]
 800aae2:	0005      	movs	r5, r0
 800aae4:	000c      	movs	r4, r1
 800aae6:	0016      	movs	r6, r2
 800aae8:	05db      	lsls	r3, r3, #23
 800aaea:	d505      	bpl.n	800aaf8 <__swrite+0x1c>
 800aaec:	230e      	movs	r3, #14
 800aaee:	5ec9      	ldrsh	r1, [r1, r3]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	2302      	movs	r3, #2
 800aaf4:	f000 f874 	bl	800abe0 <_lseek_r>
 800aaf8:	89a3      	ldrh	r3, [r4, #12]
 800aafa:	4a05      	ldr	r2, [pc, #20]	; (800ab10 <__swrite+0x34>)
 800aafc:	0028      	movs	r0, r5
 800aafe:	4013      	ands	r3, r2
 800ab00:	81a3      	strh	r3, [r4, #12]
 800ab02:	0032      	movs	r2, r6
 800ab04:	230e      	movs	r3, #14
 800ab06:	5ee1      	ldrsh	r1, [r4, r3]
 800ab08:	003b      	movs	r3, r7
 800ab0a:	f000 f81f 	bl	800ab4c <_write_r>
 800ab0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab10:	ffffefff 	.word	0xffffefff

0800ab14 <__sseek>:
 800ab14:	b570      	push	{r4, r5, r6, lr}
 800ab16:	000c      	movs	r4, r1
 800ab18:	250e      	movs	r5, #14
 800ab1a:	5f49      	ldrsh	r1, [r1, r5]
 800ab1c:	f000 f860 	bl	800abe0 <_lseek_r>
 800ab20:	89a3      	ldrh	r3, [r4, #12]
 800ab22:	1c42      	adds	r2, r0, #1
 800ab24:	d103      	bne.n	800ab2e <__sseek+0x1a>
 800ab26:	4a05      	ldr	r2, [pc, #20]	; (800ab3c <__sseek+0x28>)
 800ab28:	4013      	ands	r3, r2
 800ab2a:	81a3      	strh	r3, [r4, #12]
 800ab2c:	bd70      	pop	{r4, r5, r6, pc}
 800ab2e:	2280      	movs	r2, #128	; 0x80
 800ab30:	0152      	lsls	r2, r2, #5
 800ab32:	4313      	orrs	r3, r2
 800ab34:	81a3      	strh	r3, [r4, #12]
 800ab36:	6560      	str	r0, [r4, #84]	; 0x54
 800ab38:	e7f8      	b.n	800ab2c <__sseek+0x18>
 800ab3a:	46c0      	nop			; (mov r8, r8)
 800ab3c:	ffffefff 	.word	0xffffefff

0800ab40 <__sclose>:
 800ab40:	b510      	push	{r4, lr}
 800ab42:	230e      	movs	r3, #14
 800ab44:	5ec9      	ldrsh	r1, [r1, r3]
 800ab46:	f000 f815 	bl	800ab74 <_close_r>
 800ab4a:	bd10      	pop	{r4, pc}

0800ab4c <_write_r>:
 800ab4c:	b570      	push	{r4, r5, r6, lr}
 800ab4e:	0004      	movs	r4, r0
 800ab50:	0008      	movs	r0, r1
 800ab52:	0011      	movs	r1, r2
 800ab54:	001a      	movs	r2, r3
 800ab56:	2300      	movs	r3, #0
 800ab58:	4d05      	ldr	r5, [pc, #20]	; (800ab70 <_write_r+0x24>)
 800ab5a:	602b      	str	r3, [r5, #0]
 800ab5c:	f7f9 f9d5 	bl	8003f0a <_write>
 800ab60:	1c43      	adds	r3, r0, #1
 800ab62:	d103      	bne.n	800ab6c <_write_r+0x20>
 800ab64:	682b      	ldr	r3, [r5, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d000      	beq.n	800ab6c <_write_r+0x20>
 800ab6a:	6023      	str	r3, [r4, #0]
 800ab6c:	bd70      	pop	{r4, r5, r6, pc}
 800ab6e:	46c0      	nop			; (mov r8, r8)
 800ab70:	20000438 	.word	0x20000438

0800ab74 <_close_r>:
 800ab74:	2300      	movs	r3, #0
 800ab76:	b570      	push	{r4, r5, r6, lr}
 800ab78:	4d06      	ldr	r5, [pc, #24]	; (800ab94 <_close_r+0x20>)
 800ab7a:	0004      	movs	r4, r0
 800ab7c:	0008      	movs	r0, r1
 800ab7e:	602b      	str	r3, [r5, #0]
 800ab80:	f7f9 f9df 	bl	8003f42 <_close>
 800ab84:	1c43      	adds	r3, r0, #1
 800ab86:	d103      	bne.n	800ab90 <_close_r+0x1c>
 800ab88:	682b      	ldr	r3, [r5, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d000      	beq.n	800ab90 <_close_r+0x1c>
 800ab8e:	6023      	str	r3, [r4, #0]
 800ab90:	bd70      	pop	{r4, r5, r6, pc}
 800ab92:	46c0      	nop			; (mov r8, r8)
 800ab94:	20000438 	.word	0x20000438

0800ab98 <_fstat_r>:
 800ab98:	2300      	movs	r3, #0
 800ab9a:	b570      	push	{r4, r5, r6, lr}
 800ab9c:	4d06      	ldr	r5, [pc, #24]	; (800abb8 <_fstat_r+0x20>)
 800ab9e:	0004      	movs	r4, r0
 800aba0:	0008      	movs	r0, r1
 800aba2:	0011      	movs	r1, r2
 800aba4:	602b      	str	r3, [r5, #0]
 800aba6:	f7f9 f9d6 	bl	8003f56 <_fstat>
 800abaa:	1c43      	adds	r3, r0, #1
 800abac:	d103      	bne.n	800abb6 <_fstat_r+0x1e>
 800abae:	682b      	ldr	r3, [r5, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d000      	beq.n	800abb6 <_fstat_r+0x1e>
 800abb4:	6023      	str	r3, [r4, #0]
 800abb6:	bd70      	pop	{r4, r5, r6, pc}
 800abb8:	20000438 	.word	0x20000438

0800abbc <_isatty_r>:
 800abbc:	2300      	movs	r3, #0
 800abbe:	b570      	push	{r4, r5, r6, lr}
 800abc0:	4d06      	ldr	r5, [pc, #24]	; (800abdc <_isatty_r+0x20>)
 800abc2:	0004      	movs	r4, r0
 800abc4:	0008      	movs	r0, r1
 800abc6:	602b      	str	r3, [r5, #0]
 800abc8:	f7f9 f9d3 	bl	8003f72 <_isatty>
 800abcc:	1c43      	adds	r3, r0, #1
 800abce:	d103      	bne.n	800abd8 <_isatty_r+0x1c>
 800abd0:	682b      	ldr	r3, [r5, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d000      	beq.n	800abd8 <_isatty_r+0x1c>
 800abd6:	6023      	str	r3, [r4, #0]
 800abd8:	bd70      	pop	{r4, r5, r6, pc}
 800abda:	46c0      	nop			; (mov r8, r8)
 800abdc:	20000438 	.word	0x20000438

0800abe0 <_lseek_r>:
 800abe0:	b570      	push	{r4, r5, r6, lr}
 800abe2:	0004      	movs	r4, r0
 800abe4:	0008      	movs	r0, r1
 800abe6:	0011      	movs	r1, r2
 800abe8:	001a      	movs	r2, r3
 800abea:	2300      	movs	r3, #0
 800abec:	4d05      	ldr	r5, [pc, #20]	; (800ac04 <_lseek_r+0x24>)
 800abee:	602b      	str	r3, [r5, #0]
 800abf0:	f7f9 f9c8 	bl	8003f84 <_lseek>
 800abf4:	1c43      	adds	r3, r0, #1
 800abf6:	d103      	bne.n	800ac00 <_lseek_r+0x20>
 800abf8:	682b      	ldr	r3, [r5, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d000      	beq.n	800ac00 <_lseek_r+0x20>
 800abfe:	6023      	str	r3, [r4, #0]
 800ac00:	bd70      	pop	{r4, r5, r6, pc}
 800ac02:	46c0      	nop			; (mov r8, r8)
 800ac04:	20000438 	.word	0x20000438

0800ac08 <_read_r>:
 800ac08:	b570      	push	{r4, r5, r6, lr}
 800ac0a:	0004      	movs	r4, r0
 800ac0c:	0008      	movs	r0, r1
 800ac0e:	0011      	movs	r1, r2
 800ac10:	001a      	movs	r2, r3
 800ac12:	2300      	movs	r3, #0
 800ac14:	4d05      	ldr	r5, [pc, #20]	; (800ac2c <_read_r+0x24>)
 800ac16:	602b      	str	r3, [r5, #0]
 800ac18:	f7f9 f95a 	bl	8003ed0 <_read>
 800ac1c:	1c43      	adds	r3, r0, #1
 800ac1e:	d103      	bne.n	800ac28 <_read_r+0x20>
 800ac20:	682b      	ldr	r3, [r5, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d000      	beq.n	800ac28 <_read_r+0x20>
 800ac26:	6023      	str	r3, [r4, #0]
 800ac28:	bd70      	pop	{r4, r5, r6, pc}
 800ac2a:	46c0      	nop			; (mov r8, r8)
 800ac2c:	20000438 	.word	0x20000438

0800ac30 <_init>:
 800ac30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac32:	46c0      	nop			; (mov r8, r8)
 800ac34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac36:	bc08      	pop	{r3}
 800ac38:	469e      	mov	lr, r3
 800ac3a:	4770      	bx	lr

0800ac3c <_fini>:
 800ac3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3e:	46c0      	nop			; (mov r8, r8)
 800ac40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac42:	bc08      	pop	{r3}
 800ac44:	469e      	mov	lr, r3
 800ac46:	4770      	bx	lr
