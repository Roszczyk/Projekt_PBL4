
SweetDreams.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f9c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800505c  0800505c  0001505c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050f0  080050f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080050f0  080050f0  000150f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050f8  080050f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050f8  080050f8  000150f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000000c  0800510c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  0800510c  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb54  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000242b  00000000  00000000  0002fb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00031fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  00032d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013971  00000000  00000000  00033a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010724  00000000  00000000  000473f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078e0f  00000000  00000000  00057b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d092c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003254  00000000  00000000  000d097c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005044 	.word	0x08005044

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005044 	.word	0x08005044

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4647      	mov	r7, r8
 8000276:	b580      	push	{r7, lr}
 8000278:	0007      	movs	r7, r0
 800027a:	4699      	mov	r9, r3
 800027c:	0c3b      	lsrs	r3, r7, #16
 800027e:	469c      	mov	ip, r3
 8000280:	0413      	lsls	r3, r2, #16
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0400      	lsls	r0, r0, #16
 800028c:	0c14      	lsrs	r4, r2, #16
 800028e:	0c00      	lsrs	r0, r0, #16
 8000290:	4345      	muls	r5, r0
 8000292:	434b      	muls	r3, r1
 8000294:	4360      	muls	r0, r4
 8000296:	4361      	muls	r1, r4
 8000298:	18c0      	adds	r0, r0, r3
 800029a:	0c2c      	lsrs	r4, r5, #16
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4372      	muls	r2, r6
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	4463      	add	r3, ip
 80002b6:	042d      	lsls	r5, r5, #16
 80002b8:	0c2d      	lsrs	r5, r5, #16
 80002ba:	18c9      	adds	r1, r1, r3
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	1889      	adds	r1, r1, r2
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8d8 	bl	80004a0 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8d3 	bl	80004a0 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	469b      	mov	fp, r3
 8000302:	d433      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000304:	465a      	mov	r2, fp
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83a      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e078      	b.n	8000410 <__udivmoddi4+0x144>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e075      	b.n	8000416 <__udivmoddi4+0x14a>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e028      	b.n	8000396 <__udivmoddi4+0xca>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	2320      	movs	r3, #32
 8000370:	1a9b      	subs	r3, r3, r2
 8000372:	4652      	mov	r2, sl
 8000374:	40da      	lsrs	r2, r3
 8000376:	4641      	mov	r1, r8
 8000378:	0013      	movs	r3, r2
 800037a:	464a      	mov	r2, r9
 800037c:	408a      	lsls	r2, r1
 800037e:	0017      	movs	r7, r2
 8000380:	4642      	mov	r2, r8
 8000382:	431f      	orrs	r7, r3
 8000384:	4653      	mov	r3, sl
 8000386:	4093      	lsls	r3, r2
 8000388:	001e      	movs	r6, r3
 800038a:	42af      	cmp	r7, r5
 800038c:	d9c4      	bls.n	8000318 <__udivmoddi4+0x4c>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	4643      	mov	r3, r8
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0d9      	beq.n	8000350 <__udivmoddi4+0x84>
 800039c:	07fb      	lsls	r3, r7, #31
 800039e:	0872      	lsrs	r2, r6, #1
 80003a0:	431a      	orrs	r2, r3
 80003a2:	4646      	mov	r6, r8
 80003a4:	087b      	lsrs	r3, r7, #1
 80003a6:	e00e      	b.n	80003c6 <__udivmoddi4+0xfa>
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	d101      	bne.n	80003b0 <__udivmoddi4+0xe4>
 80003ac:	42a2      	cmp	r2, r4
 80003ae:	d80c      	bhi.n	80003ca <__udivmoddi4+0xfe>
 80003b0:	1aa4      	subs	r4, r4, r2
 80003b2:	419d      	sbcs	r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	1924      	adds	r4, r4, r4
 80003b8:	416d      	adcs	r5, r5
 80003ba:	2100      	movs	r1, #0
 80003bc:	3e01      	subs	r6, #1
 80003be:	1824      	adds	r4, r4, r0
 80003c0:	414d      	adcs	r5, r1
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d006      	beq.n	80003d4 <__udivmoddi4+0x108>
 80003c6:	42ab      	cmp	r3, r5
 80003c8:	d9ee      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80003ca:	3e01      	subs	r6, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2e00      	cmp	r6, #0
 80003d2:	d1f8      	bne.n	80003c6 <__udivmoddi4+0xfa>
 80003d4:	9800      	ldr	r0, [sp, #0]
 80003d6:	9901      	ldr	r1, [sp, #4]
 80003d8:	465b      	mov	r3, fp
 80003da:	1900      	adds	r0, r0, r4
 80003dc:	4169      	adcs	r1, r5
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db24      	blt.n	800042c <__udivmoddi4+0x160>
 80003e2:	002b      	movs	r3, r5
 80003e4:	465a      	mov	r2, fp
 80003e6:	4644      	mov	r4, r8
 80003e8:	40d3      	lsrs	r3, r2
 80003ea:	002a      	movs	r2, r5
 80003ec:	40e2      	lsrs	r2, r4
 80003ee:	001c      	movs	r4, r3
 80003f0:	465b      	mov	r3, fp
 80003f2:	0015      	movs	r5, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db2a      	blt.n	800044e <__udivmoddi4+0x182>
 80003f8:	0026      	movs	r6, r4
 80003fa:	409e      	lsls	r6, r3
 80003fc:	0033      	movs	r3, r6
 80003fe:	0026      	movs	r6, r4
 8000400:	4647      	mov	r7, r8
 8000402:	40be      	lsls	r6, r7
 8000404:	0032      	movs	r2, r6
 8000406:	1a80      	subs	r0, r0, r2
 8000408:	4199      	sbcs	r1, r3
 800040a:	9000      	str	r0, [sp, #0]
 800040c:	9101      	str	r1, [sp, #4]
 800040e:	e79f      	b.n	8000350 <__udivmoddi4+0x84>
 8000410:	42a3      	cmp	r3, r4
 8000412:	d8bc      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000414:	e783      	b.n	800031e <__udivmoddi4+0x52>
 8000416:	4642      	mov	r2, r8
 8000418:	2320      	movs	r3, #32
 800041a:	2100      	movs	r1, #0
 800041c:	1a9b      	subs	r3, r3, r2
 800041e:	2200      	movs	r2, #0
 8000420:	9100      	str	r1, [sp, #0]
 8000422:	9201      	str	r2, [sp, #4]
 8000424:	2201      	movs	r2, #1
 8000426:	40da      	lsrs	r2, r3
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	e786      	b.n	800033a <__udivmoddi4+0x6e>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	4646      	mov	r6, r8
 8000436:	409a      	lsls	r2, r3
 8000438:	0023      	movs	r3, r4
 800043a:	40f3      	lsrs	r3, r6
 800043c:	4644      	mov	r4, r8
 800043e:	4313      	orrs	r3, r2
 8000440:	002a      	movs	r2, r5
 8000442:	40e2      	lsrs	r2, r4
 8000444:	001c      	movs	r4, r3
 8000446:	465b      	mov	r3, fp
 8000448:	0015      	movs	r5, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	dad4      	bge.n	80003f8 <__udivmoddi4+0x12c>
 800044e:	4642      	mov	r2, r8
 8000450:	002f      	movs	r7, r5
 8000452:	2320      	movs	r3, #32
 8000454:	0026      	movs	r6, r4
 8000456:	4097      	lsls	r7, r2
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	40de      	lsrs	r6, r3
 800045c:	003b      	movs	r3, r7
 800045e:	4333      	orrs	r3, r6
 8000460:	e7cd      	b.n	80003fe <__udivmoddi4+0x132>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__clzsi2>:
 8000464:	211c      	movs	r1, #28
 8000466:	2301      	movs	r3, #1
 8000468:	041b      	lsls	r3, r3, #16
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0xe>
 800046e:	0c00      	lsrs	r0, r0, #16
 8000470:	3910      	subs	r1, #16
 8000472:	0a1b      	lsrs	r3, r3, #8
 8000474:	4298      	cmp	r0, r3
 8000476:	d301      	bcc.n	800047c <__clzsi2+0x18>
 8000478:	0a00      	lsrs	r0, r0, #8
 800047a:	3908      	subs	r1, #8
 800047c:	091b      	lsrs	r3, r3, #4
 800047e:	4298      	cmp	r0, r3
 8000480:	d301      	bcc.n	8000486 <__clzsi2+0x22>
 8000482:	0900      	lsrs	r0, r0, #4
 8000484:	3904      	subs	r1, #4
 8000486:	a202      	add	r2, pc, #8	; (adr r2, 8000490 <__clzsi2+0x2c>)
 8000488:	5c10      	ldrb	r0, [r2, r0]
 800048a:	1840      	adds	r0, r0, r1
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	02020304 	.word	0x02020304
 8000494:	01010101 	.word	0x01010101
	...

080004a0 <__clzdi2>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	2900      	cmp	r1, #0
 80004a4:	d103      	bne.n	80004ae <__clzdi2+0xe>
 80004a6:	f7ff ffdd 	bl	8000464 <__clzsi2>
 80004aa:	3020      	adds	r0, #32
 80004ac:	e002      	b.n	80004b4 <__clzdi2+0x14>
 80004ae:	0008      	movs	r0, r1
 80004b0:	f7ff ffd8 	bl	8000464 <__clzsi2>
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 80004c0:	230f      	movs	r3, #15
 80004c2:	18fb      	adds	r3, r7, r3
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]

    /* chip id read try count */
    uint8_t try_count = 5;
 80004c8:	230e      	movs	r3, #14
 80004ca:	18fb      	adds	r3, r7, r3
 80004cc:	2205      	movs	r2, #5
 80004ce:	701a      	strb	r2, [r3, #0]
    uint8_t chip_id = 0;
 80004d0:	230d      	movs	r3, #13
 80004d2:	18fb      	adds	r3, r7, r3
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
    //rslt = null_ptr_check(dev);

    /* Proceed if null check is fine */
    //if (rslt == BME280_OK)
    //{
        while (try_count)
 80004d8:	e026      	b.n	8000528 <bme280_init+0x70>
        {
            /* Read the chip-id of bme280 sensor */
        	BME280_SPI_Read(BME280_CHIP_ID_ADDR, &chip_id, 1);
 80004da:	240d      	movs	r4, #13
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	2201      	movs	r2, #1
 80004e0:	0019      	movs	r1, r3
 80004e2:	20d0      	movs	r0, #208	; 0xd0
 80004e4:	f000 fd30 	bl	8000f48 <BME280_SPI_Read>
            //rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);

            /* Check for chip id validity */
            if (chip_id == BME280_CHIP_ID) // (rslt == BME280_OK) &&
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b60      	cmp	r3, #96	; 0x60
 80004ee:	d112      	bne.n	8000516 <bme280_init+0x5e>

                /* Reset the sensor */
                //bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
                //HAL_Delay(2);
                //bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
                rslt = bme280_soft_reset(); //dev
 80004f0:	250f      	movs	r5, #15
 80004f2:	197c      	adds	r4, r7, r5
 80004f4:	f000 f88c 	bl	8000610 <bme280_soft_reset>
 80004f8:	0003      	movs	r3, r0
 80004fa:	7023      	strb	r3, [r4, #0]

                if (rslt == BME280_OK)
 80004fc:	197b      	adds	r3, r7, r5
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	b25b      	sxtb	r3, r3
 8000502:	2b00      	cmp	r3, #0
 8000504:	d116      	bne.n	8000534 <bme280_init+0x7c>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000506:	197c      	adds	r4, r7, r5
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	0018      	movs	r0, r3
 800050c:	f000 f8c3 	bl	8000696 <get_calib_data>
 8000510:	0003      	movs	r3, r0
 8000512:	7023      	strb	r3, [r4, #0]
                }

                break;
 8000514:	e00e      	b.n	8000534 <bme280_init+0x7c>
            }

            /* Wait for 1 ms */
            //dev->delay_us(1000, dev->intf_ptr);
            HAL_Delay(1);
 8000516:	2001      	movs	r0, #1
 8000518:	f000 ff7a 	bl	8001410 <HAL_Delay>
            --try_count;
 800051c:	220e      	movs	r2, #14
 800051e:	18bb      	adds	r3, r7, r2
 8000520:	18ba      	adds	r2, r7, r2
 8000522:	7812      	ldrb	r2, [r2, #0]
 8000524:	3a01      	subs	r2, #1
 8000526:	701a      	strb	r2, [r3, #0]
        while (try_count)
 8000528:	230e      	movs	r3, #14
 800052a:	18fb      	adds	r3, r7, r3
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d1d3      	bne.n	80004da <bme280_init+0x22>
 8000532:	e000      	b.n	8000536 <bme280_init+0x7e>
                break;
 8000534:	46c0      	nop			; (mov r8, r8)
        }

        /* Chip id check failed */
        if (!try_count)
 8000536:	230e      	movs	r3, #14
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d103      	bne.n	8000548 <bme280_init+0x90>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8000540:	230f      	movs	r3, #15
 8000542:	18fb      	adds	r3, r7, r3
 8000544:	22fe      	movs	r2, #254	; 0xfe
 8000546:	701a      	strb	r2, [r3, #0]
        }
    //}

    return rslt;
 8000548:	230f      	movs	r3, #15
 800054a:	18fb      	adds	r3, r7, r3
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	b25b      	sxtb	r3, r3
}
 8000550:	0018      	movs	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	b004      	add	sp, #16
 8000556:	bdb0      	pop	{r4, r5, r7, pc}

08000558 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
void bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	; 0x28
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	1dfb      	adds	r3, r7, #7
 8000564:	701a      	strb	r2, [r3, #0]
    //int8_t rslt = 0;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8000566:	1dfb      	adds	r3, r7, #7
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b0a      	cmp	r3, #10
 800056c:	d902      	bls.n	8000574 <bme280_set_regs+0x1c>
    {
        len = 10;
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	220a      	movs	r2, #10
 8000572:	701a      	strb	r2, [r3, #0]
    /* Check for arguments validity */
    //if ((reg_addr != NULL) && (reg_data != NULL)) // (rslt == BME280_OK) &&
    //{
    //    if (len != 0)
    //    {
            temp_buff[0] = reg_data[0];
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	781a      	ldrb	r2, [r3, #0]
 8000578:	2310      	movs	r3, #16
 800057a:	18fb      	adds	r3, r7, r3
 800057c:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
//            if (dev->intf != BME280_I2C_INTF)
//            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800057e:	2325      	movs	r3, #37	; 0x25
 8000580:	18fb      	adds	r3, r7, r3
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
 8000586:	e012      	b.n	80005ae <bme280_set_regs+0x56>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000588:	2025      	movs	r0, #37	; 0x25
 800058a:	183b      	adds	r3, r7, r0
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	68fa      	ldr	r2, [r7, #12]
 8000590:	18d3      	adds	r3, r2, r3
 8000592:	781a      	ldrb	r2, [r3, #0]
 8000594:	183b      	adds	r3, r7, r0
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	68f9      	ldr	r1, [r7, #12]
 800059a:	18cb      	adds	r3, r1, r3
 800059c:	217f      	movs	r1, #127	; 0x7f
 800059e:	400a      	ands	r2, r1
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80005a4:	183b      	adds	r3, r7, r0
 80005a6:	781a      	ldrb	r2, [r3, #0]
 80005a8:	183b      	adds	r3, r7, r0
 80005aa:	3201      	adds	r2, #1
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	2325      	movs	r3, #37	; 0x25
 80005b0:	18fa      	adds	r2, r7, r3
 80005b2:	1dfb      	adds	r3, r7, #7
 80005b4:	7812      	ldrb	r2, [r2, #0]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d3e5      	bcc.n	8000588 <bme280_set_regs+0x30>
                }
 //           }

            /* Burst write mode */
            if (len > 1)
 80005bc:	1dfb      	adds	r3, r7, #7
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d911      	bls.n	80005e8 <bme280_set_regs+0x90>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80005c4:	1dfb      	adds	r3, r7, #7
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	68ba      	ldr	r2, [r7, #8]
 80005ca:	2110      	movs	r1, #16
 80005cc:	1879      	adds	r1, r7, r1
 80005ce:	68f8      	ldr	r0, [r7, #12]
 80005d0:	f000 f89b 	bl	800070a <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 80005d4:	1dfb      	adds	r3, r7, #7
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b29b      	uxth	r3, r3
 80005da:	18db      	adds	r3, r3, r3
 80005dc:	b29a      	uxth	r2, r3
 80005de:	2326      	movs	r3, #38	; 0x26
 80005e0:	18fb      	adds	r3, r7, r3
 80005e2:	3a01      	subs	r2, #1
 80005e4:	801a      	strh	r2, [r3, #0]
 80005e6:	e004      	b.n	80005f2 <bme280_set_regs+0x9a>
            }
            else
            {
                temp_len = len;
 80005e8:	2326      	movs	r3, #38	; 0x26
 80005ea:	18fb      	adds	r3, r7, r3
 80005ec:	1dfa      	adds	r2, r7, #7
 80005ee:	7812      	ldrb	r2, [r2, #0]
 80005f0:	801a      	strh	r2, [r3, #0]
            }

            BME280_SPI_Write(reg_addr[0], temp_buff, temp_len);
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	0018      	movs	r0, r3
 80005f8:	2326      	movs	r3, #38	; 0x26
 80005fa:	18fb      	adds	r3, r7, r3
 80005fc:	881a      	ldrh	r2, [r3, #0]
 80005fe:	2310      	movs	r3, #16
 8000600:	18fb      	adds	r3, r7, r3
 8000602:	0019      	movs	r1, r3
 8000604:	f000 fcd4 	bl	8000fb0 <BME280_SPI_Write>
//    {
//        rslt = BME280_E_NULL_PTR;
//    }

    //return rslt;
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	b00a      	add	sp, #40	; 0x28
 800060e:	bd80      	pop	{r7, pc}

08000610 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset() //struct bme280_dev *dev
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
    int8_t rslt = 0;
 8000616:	1dfb      	adds	r3, r7, #7
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME280_RESET_ADDR;
 800061c:	1d7b      	adds	r3, r7, #5
 800061e:	22e0      	movs	r2, #224	; 0xe0
 8000620:	701a      	strb	r2, [r3, #0]
    uint8_t status_reg = 0;
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
    uint8_t try_run = 5;
 8000628:	1dbb      	adds	r3, r7, #6
 800062a:	2205      	movs	r2, #5
 800062c:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 800062e:	1cfb      	adds	r3, r7, #3
 8000630:	22b6      	movs	r2, #182	; 0xb6
 8000632:	701a      	strb	r2, [r3, #0]

    /* Proceed if null check is fine */
    //if (rslt == BME280_OK)
    //{
        /* Write the soft reset command in the sensor */
         bme280_set_regs(&reg_addr, &soft_rst_cmd, 1);
 8000634:	1cf9      	adds	r1, r7, #3
 8000636:	1d7b      	adds	r3, r7, #5
 8000638:	2201      	movs	r2, #1
 800063a:	0018      	movs	r0, r3
 800063c:	f7ff ff8c 	bl	8000558 <bme280_set_regs>

        if (rslt == BME280_OK)
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	b25b      	sxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d11e      	bne.n	8000688 <bme280_soft_reset+0x78>
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                //dev->delay_us(2000, dev->intf_ptr);
            	HAL_Delay(2);
 800064a:	2002      	movs	r0, #2
 800064c:	f000 fee0 	bl	8001410 <HAL_Delay>
            	BME280_SPI_Read(BME280_STATUS_REG_ADDR, &status_reg, 1);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2201      	movs	r2, #1
 8000654:	0019      	movs	r1, r3
 8000656:	20f3      	movs	r0, #243	; 0xf3
 8000658:	f000 fc76 	bl	8000f48 <BME280_SPI_Read>
                //rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);

            } while ((try_run--) && (status_reg & BME280_STATUS_IM_UPDATE)); // (rslt == BME280_OK) &&
 800065c:	1dbb      	adds	r3, r7, #6
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	1dba      	adds	r2, r7, #6
 8000662:	1e59      	subs	r1, r3, #1
 8000664:	7011      	strb	r1, [r2, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d005      	beq.n	8000676 <bme280_soft_reset+0x66>
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	001a      	movs	r2, r3
 8000670:	2301      	movs	r3, #1
 8000672:	4013      	ands	r3, r2
 8000674:	d1e9      	bne.n	800064a <bme280_soft_reset+0x3a>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	001a      	movs	r2, r3
 800067c:	2301      	movs	r3, #1
 800067e:	4013      	ands	r3, r2
 8000680:	d002      	beq.n	8000688 <bme280_soft_reset+0x78>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8000682:	1dfb      	adds	r3, r7, #7
 8000684:	22fa      	movs	r2, #250	; 0xfa
 8000686:	701a      	strb	r2, [r3, #0]
            }
        }
    //}

    return rslt;
 8000688:	1dfb      	adds	r3, r7, #7
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b25b      	sxtb	r3, r3
}
 800068e:	0018      	movs	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	b002      	add	sp, #8
 8000694:	bd80      	pop	{r7, pc}

08000696 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8000696:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000698:	b08b      	sub	sp, #44	; 0x2c
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 800069e:	2627      	movs	r6, #39	; 0x27
 80006a0:	19bb      	adds	r3, r7, r6
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 80006a6:	2526      	movs	r5, #38	; 0x26
 80006a8:	197b      	adds	r3, r7, r5
 80006aa:	2288      	movs	r2, #136	; 0x88
 80006ac:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 80006ae:	240c      	movs	r4, #12
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	3304      	adds	r3, #4
 80006b8:	2216      	movs	r2, #22
 80006ba:	2100      	movs	r1, #0
 80006bc:	0018      	movs	r0, r3
 80006be:	f004 fc79 	bl	8004fb4 <memset>

    /* Read the calibration data from the sensor */
    BME280_SPI_Read(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN);
 80006c2:	197b      	adds	r3, r7, r5
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	1939      	adds	r1, r7, r4
 80006c8:	221a      	movs	r2, #26
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 fc3c 	bl	8000f48 <BME280_SPI_Read>
    //if (rslt == BME280_OK)
    //{
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 f84f 	bl	800077a <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80006dc:	197b      	adds	r3, r7, r5
 80006de:	22e1      	movs	r2, #225	; 0xe1
 80006e0:	701a      	strb	r2, [r3, #0]

        /* Read the humidity calibration data from the sensor */
        BME280_SPI_Read(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN);
 80006e2:	197b      	adds	r3, r7, r5
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	1939      	adds	r1, r7, r4
 80006e8:	2207      	movs	r2, #7
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 fc2c 	bl	8000f48 <BME280_SPI_Read>
        //if (rslt == BME280_OK)
        //{
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	0011      	movs	r1, r2
 80006f6:	0018      	movs	r0, r3
 80006f8:	f000 f8eb 	bl	80008d2 <parse_humidity_calib_data>
        //}
    //}

    return rslt;
 80006fc:	19bb      	adds	r3, r7, r6
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b25b      	sxtb	r3, r3
}
 8000702:	0018      	movs	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	b00b      	add	sp, #44	; 0x2c
 8000708:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800070a <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b086      	sub	sp, #24
 800070e:	af00      	add	r7, sp, #0
 8000710:	60f8      	str	r0, [r7, #12]
 8000712:	60b9      	str	r1, [r7, #8]
 8000714:	607a      	str	r2, [r7, #4]
 8000716:	001a      	movs	r2, r3
 8000718:	1cfb      	adds	r3, r7, #3
 800071a:	701a      	strb	r2, [r3, #0]
    uint8_t index;

    for (index = 1; index < len; index++)
 800071c:	2317      	movs	r3, #23
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	e01d      	b.n	8000762 <interleave_reg_addr+0x58>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8000726:	2017      	movs	r0, #23
 8000728:	183b      	adds	r3, r7, r0
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	18d2      	adds	r2, r2, r3
 8000730:	183b      	adds	r3, r7, r0
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	3b01      	subs	r3, #1
 8000738:	68b9      	ldr	r1, [r7, #8]
 800073a:	18cb      	adds	r3, r1, r3
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8000740:	183b      	adds	r3, r7, r0
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	18d2      	adds	r2, r2, r3
 8000748:	183b      	adds	r3, r7, r0
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	0019      	movs	r1, r3
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	185b      	adds	r3, r3, r1
 8000754:	7812      	ldrb	r2, [r2, #0]
 8000756:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8000758:	183b      	adds	r3, r7, r0
 800075a:	781a      	ldrb	r2, [r3, #0]
 800075c:	183b      	adds	r3, r7, r0
 800075e:	3201      	adds	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
 8000762:	2317      	movs	r3, #23
 8000764:	18fa      	adds	r2, r7, r3
 8000766:	1cfb      	adds	r3, r7, #3
 8000768:	7812      	ldrb	r2, [r2, #0]
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	d3da      	bcc.n	8000726 <interleave_reg_addr+0x1c>
    }
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b006      	add	sp, #24
 8000778:	bd80      	pop	{r7, pc}

0800077a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3301      	adds	r3, #1
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	021b      	lsls	r3, r3, #8
 8000790:	b21a      	sxth	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b21b      	sxth	r3, r3
 8000798:	4313      	orrs	r3, r2
 800079a:	b21b      	sxth	r3, r3
 800079c:	b29a      	uxth	r2, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3303      	adds	r3, #3
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	021b      	lsls	r3, r3, #8
 80007aa:	b21a      	sxth	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3302      	adds	r3, #2
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b21a      	sxth	r2, r3
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3305      	adds	r3, #5
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	021b      	lsls	r3, r3, #8
 80007c4:	b21a      	sxth	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	3304      	adds	r3, #4
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b21b      	sxth	r3, r3
 80007ce:	4313      	orrs	r3, r2
 80007d0:	b21a      	sxth	r2, r3
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	3307      	adds	r3, #7
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	b21a      	sxth	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3306      	adds	r3, #6
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	4313      	orrs	r3, r2
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3309      	adds	r3, #9
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	b21a      	sxth	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3308      	adds	r3, #8
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b21b      	sxth	r3, r3
 8000804:	4313      	orrs	r3, r2
 8000806:	b21a      	sxth	r2, r3
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	330b      	adds	r3, #11
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	330a      	adds	r3, #10
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b21b      	sxth	r3, r3
 800081e:	4313      	orrs	r3, r2
 8000820:	b21a      	sxth	r2, r3
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	330d      	adds	r3, #13
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	021b      	lsls	r3, r3, #8
 800082e:	b21a      	sxth	r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	330c      	adds	r3, #12
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b21b      	sxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	b21a      	sxth	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	330f      	adds	r3, #15
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	021b      	lsls	r3, r3, #8
 8000848:	b21a      	sxth	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	330e      	adds	r3, #14
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b21b      	sxth	r3, r3
 8000852:	4313      	orrs	r3, r2
 8000854:	b21a      	sxth	r2, r3
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3311      	adds	r3, #17
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	021b      	lsls	r3, r3, #8
 8000862:	b21a      	sxth	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3310      	adds	r3, #16
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21a      	sxth	r2, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3313      	adds	r3, #19
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	021b      	lsls	r3, r3, #8
 800087c:	b21a      	sxth	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3312      	adds	r3, #18
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b21b      	sxth	r3, r3
 8000886:	4313      	orrs	r3, r2
 8000888:	b21a      	sxth	r2, r3
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3315      	adds	r3, #21
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	021b      	lsls	r3, r3, #8
 8000896:	b21a      	sxth	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3314      	adds	r3, #20
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b21b      	sxth	r3, r3
 80008a0:	4313      	orrs	r3, r2
 80008a2:	b21a      	sxth	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3317      	adds	r3, #23
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	021b      	lsls	r3, r3, #8
 80008b0:	b21a      	sxth	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3316      	adds	r3, #22
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	4313      	orrs	r3, r2
 80008bc:	b21a      	sxth	r2, r3
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	7e5a      	ldrb	r2, [r3, #25]
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	761a      	strb	r2, [r3, #24]
}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b004      	add	sp, #16
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80008d2:	b590      	push	{r4, r7, lr}
 80008d4:	b087      	sub	sp, #28
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
 80008da:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3301      	adds	r3, #1
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b21a      	sxth	r2, r3
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	789a      	ldrb	r2, [r3, #2]
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3303      	adds	r3, #3
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b25b      	sxtb	r3, r3
 8000908:	b29b      	uxth	r3, r3
 800090a:	011b      	lsls	r3, r3, #4
 800090c:	b29a      	uxth	r2, r3
 800090e:	2012      	movs	r0, #18
 8000910:	183b      	adds	r3, r7, r0
 8000912:	801a      	strh	r2, [r3, #0]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3304      	adds	r3, #4
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b21a      	sxth	r2, r3
 800091c:	2410      	movs	r4, #16
 800091e:	193b      	adds	r3, r7, r4
 8000920:	210f      	movs	r1, #15
 8000922:	400a      	ands	r2, r1
 8000924:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 8000926:	183a      	adds	r2, r7, r0
 8000928:	193b      	adds	r3, r7, r4
 800092a:	8812      	ldrh	r2, [r2, #0]
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	4313      	orrs	r3, r2
 8000930:	b21a      	sxth	r2, r3
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3305      	adds	r3, #5
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	b25b      	sxtb	r3, r3
 800093e:	b29b      	uxth	r3, r3
 8000940:	011b      	lsls	r3, r3, #4
 8000942:	b29a      	uxth	r2, r3
 8000944:	210e      	movs	r1, #14
 8000946:	187b      	adds	r3, r7, r1
 8000948:	801a      	strh	r2, [r3, #0]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3304      	adds	r3, #4
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	091b      	lsrs	r3, r3, #4
 8000952:	b2da      	uxtb	r2, r3
 8000954:	200c      	movs	r0, #12
 8000956:	183b      	adds	r3, r7, r0
 8000958:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 800095a:	187a      	adds	r2, r7, r1
 800095c:	183b      	adds	r3, r7, r0
 800095e:	8812      	ldrh	r2, [r2, #0]
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	4313      	orrs	r3, r2
 8000964:	b21a      	sxth	r2, r3
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3306      	adds	r3, #6
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b259      	sxtb	r1, r3
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	2222      	movs	r2, #34	; 0x22
 8000976:	5499      	strb	r1, [r3, r2]
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b007      	add	sp, #28
 800097e:	bd90      	pop	{r4, r7, pc}

08000980 <BMA456_Check_Connection>:
	  }


}
uint8_t BMA456_Check_Connection()
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af02      	add	r7, sp, #8
	uint8_t reg_addr = 0x00;
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
	reg_addr |= 0x80;
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	1dfa      	adds	r2, r7, #7
 8000990:	7812      	ldrb	r2, [r2, #0]
 8000992:	2180      	movs	r1, #128	; 0x80
 8000994:	4249      	negs	r1, r1
 8000996:	430a      	orrs	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
	uint8_t reg_addr_tab[2];
	reg_addr_tab[0] = reg_addr;
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	1dfa      	adds	r2, r7, #7
 800099e:	7812      	ldrb	r2, [r2, #0]
 80009a0:	701a      	strb	r2, [r3, #0]
	uint8_t reg_data[2];

	do{
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80009a2:	23a0      	movs	r3, #160	; 0xa0
 80009a4:	05db      	lsls	r3, r3, #23
 80009a6:	2200      	movs	r2, #0
 80009a8:	2101      	movs	r1, #1
 80009aa:	0018      	movs	r0, r3
 80009ac:	f001 fd0e 	bl	80023cc <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&hspi1, reg_addr_tab,reg_data, 2, 1000);
 80009b0:	003a      	movs	r2, r7
 80009b2:	1d39      	adds	r1, r7, #4
 80009b4:	480b      	ldr	r0, [pc, #44]	; (80009e4 <BMA456_Check_Connection+0x64>)
 80009b6:	23fa      	movs	r3, #250	; 0xfa
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2302      	movs	r3, #2
 80009be:	f003 fa0d 	bl	8003ddc <HAL_SPI_TransmitReceive>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80009c2:	23a0      	movs	r3, #160	; 0xa0
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	2201      	movs	r2, #1
 80009c8:	2101      	movs	r1, #1
 80009ca:	0018      	movs	r0, r3
 80009cc:	f001 fcfe 	bl	80023cc <HAL_GPIO_WritePin>
	}while(reg_data[1] != 0x16);
 80009d0:	003b      	movs	r3, r7
 80009d2:	785b      	ldrb	r3, [r3, #1]
 80009d4:	2b16      	cmp	r3, #22
 80009d6:	d1e4      	bne.n	80009a2 <BMA456_Check_Connection+0x22>

    //if( reg_data[1] == 0x16)
    //{
    	return 1;
 80009d8:	2301      	movs	r3, #1
    //}else{
    	//return 0;
    //}
}
 80009da:	0018      	movs	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	b002      	add	sp, #8
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	200000f0 	.word	0x200000f0

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b5b0      	push	{r4, r5, r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ee:	f000 fc9f 	bl	8001330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f2:	f000 f8bb 	bl	8000b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f6:	f000 fa4b 	bl	8000e90 <MX_GPIO_Init>
  MX_DMA_Init();
 80009fa:	f000 fa2b 	bl	8000e54 <MX_DMA_Init>
  MX_ADC_Init();
 80009fe:	f000 f923 	bl	8000c48 <MX_ADC_Init>
  MX_USART1_UART_Init();
 8000a02:	f000 f9f3 	bl	8000dec <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000a06:	f000 f9b9 	bl	8000d7c <MX_SPI1_Init>
  MX_RTC_Init();
 8000a0a:	f000 f983 	bl	8000d14 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(800);
 8000a0e:	23c8      	movs	r3, #200	; 0xc8
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 fcfc 	bl	8001410 <HAL_Delay>
  HAL_ADC_Start_DMA(&hadc, adc_buffer,64);
 8000a18:	494e      	ldr	r1, [pc, #312]	; (8000b54 <main+0x16c>)
 8000a1a:	4b4f      	ldr	r3, [pc, #316]	; (8000b58 <main+0x170>)
 8000a1c:	2240      	movs	r2, #64	; 0x40
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 feaa 	bl	8001778 <HAL_ADC_Start_DMA>
  //HAL_UART_Receive_IT(&huart1,  received_byte,2);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000a24:	23a0      	movs	r3, #160	; 0xa0
 8000a26:	05db      	lsls	r3, r3, #23
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2102      	movs	r1, #2
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f001 fccd 	bl	80023cc <HAL_GPIO_WritePin>
  //HAL_UART_IRQHandler(&huart1);
  HAL_Delay(800);
 8000a32:	23c8      	movs	r3, #200	; 0xc8
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 fcea 	bl	8001410 <HAL_Delay>
 // printf("Test UART\r\n");
 // SendMSG("\n");
  int8_t rslt_bme = bme280_init(&dev);
 8000a3c:	250f      	movs	r5, #15
 8000a3e:	197c      	adds	r4, r7, r5
 8000a40:	4b46      	ldr	r3, [pc, #280]	; (8000b5c <main+0x174>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff fd38 	bl	80004b8 <bme280_init>
 8000a48:	0003      	movs	r3, r0
 8000a4a:	7023      	strb	r3, [r4, #0]
  if (rslt_bme != BME280_OK)
 8000a4c:	197b      	adds	r3, r7, r5
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d000      	beq.n	8000a58 <main+0x70>
  {
	  while(1);
 8000a56:	e7fe      	b.n	8000a56 <main+0x6e>
  }
  uint8_t rslt_bma = BMA456_Check_Connection();
 8000a58:	250e      	movs	r5, #14
 8000a5a:	197c      	adds	r4, r7, r5
 8000a5c:	f7ff ff90 	bl	8000980 <BMA456_Check_Connection>
 8000a60:	0003      	movs	r3, r0
 8000a62:	7023      	strb	r3, [r4, #0]
  if(rslt_bma != 1)
 8000a64:	197b      	adds	r3, r7, r5
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d000      	beq.n	8000a6e <main+0x86>
  {
	  while(1);
 8000a6c:	e7fe      	b.n	8000a6c <main+0x84>
//
//
//  printf("Kuniec \r\n");
  //SendMSG("AT+LSCN, 500"); //start scanowania do vsp z limitem 500 sekund

  HAL_Delay(800);
 8000a6e:	23c8      	movs	r3, #200	; 0xc8
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 fccc 	bl	8001410 <HAL_Delay>
//  uint8_t Sum[2];
//  Sum[0] = rslt_a;
//  Sum[1] = rslt_e;
  char Sum_s[2][4];

  rslt_bma=100;
 8000a78:	210e      	movs	r1, #14
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2264      	movs	r2, #100	; 0x64
 8000a7e:	701a      	strb	r2, [r3, #0]
  rslt_bme=150;
 8000a80:	240f      	movs	r4, #15
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2296      	movs	r2, #150	; 0x96
 8000a86:	701a      	strb	r2, [r3, #0]

  itoa(rslt_bma, Sum_s[0], 10);
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	1d39      	adds	r1, r7, #4
 8000a8e:	220a      	movs	r2, #10
 8000a90:	0018      	movs	r0, r3
 8000a92:	f004 fa8b 	bl	8004fac <itoa>
  itoa(rslt_bme, Sum_s[1], 10);
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	2000      	movs	r0, #0
 8000a9a:	5618      	ldrsb	r0, [r3, r0]
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	3304      	adds	r3, #4
 8000aa0:	220a      	movs	r2, #10
 8000aa2:	0019      	movs	r1, r3
 8000aa4:	f004 fa82 	bl	8004fac <itoa>

  for(int i=strlen(Sum_s[0]); i<=3; i++){
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f7ff fb2c 	bl	8000108 <strlen>
 8000ab0:	0003      	movs	r3, r0
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	e007      	b.n	8000ac6 <main+0xde>
	  Sum_s[0][i]=' ';
 8000ab6:	1d3a      	adds	r2, r7, #4
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	18d3      	adds	r3, r2, r3
 8000abc:	2220      	movs	r2, #32
 8000abe:	701a      	strb	r2, [r3, #0]
  for(int i=strlen(Sum_s[0]); i<=3; i++){
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	2b03      	cmp	r3, #3
 8000aca:	ddf4      	ble.n	8000ab6 <main+0xce>
  }

  for(int i=strlen(Sum_s[1]); i<=3; i++){
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	3304      	adds	r3, #4
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f7ff fb19 	bl	8000108 <strlen>
 8000ad6:	0003      	movs	r3, r0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	e008      	b.n	8000aee <main+0x106>
	  Sum_s[1][i]=' ';
 8000adc:	1d3a      	adds	r2, r7, #4
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	18d3      	adds	r3, r2, r3
 8000ae2:	3304      	adds	r3, #4
 8000ae4:	2220      	movs	r2, #32
 8000ae6:	701a      	strb	r2, [r3, #0]
  for(int i=strlen(Sum_s[1]); i<=3; i++){
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	3301      	adds	r3, #1
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	ddf3      	ble.n	8000adc <main+0xf4>
  }


  while (1)
  {
	  HAL_Delay(1000);
 8000af4:	23fa      	movs	r3, #250	; 0xfa
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	0018      	movs	r0, r3
 8000afa:	f000 fc89 	bl	8001410 <HAL_Delay>
	  HAL_UART_Transmit(&huart1,Sum_s[0],4,HAL_MAX_DELAY);
 8000afe:	2301      	movs	r3, #1
 8000b00:	425b      	negs	r3, r3
 8000b02:	1d39      	adds	r1, r7, #4
 8000b04:	4816      	ldr	r0, [pc, #88]	; (8000b60 <main+0x178>)
 8000b06:	2204      	movs	r2, #4
 8000b08:	f003 fcc6 	bl	8004498 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,Sum_s[1],4,HAL_MAX_DELAY);
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	425a      	negs	r2, r3
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	1d19      	adds	r1, r3, #4
 8000b14:	4812      	ldr	r0, [pc, #72]	; (8000b60 <main+0x178>)
 8000b16:	0013      	movs	r3, r2
 8000b18:	2204      	movs	r2, #4
 8000b1a:	f003 fcbd 	bl	8004498 <HAL_UART_Transmit>
//	  HAL_UART_Transmit(&huart1,adc_buffer,strlen(adc_buffer),HAL_MAX_DELAY);
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
//	  HAL_SPI_Receive(&hspi2, tempbuff, 13, 1000);
//
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	    HAL_SuspendTick();
 8000b1e:	f000 fc9b 	bl	8001458 <HAL_SuspendTick>

	  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x5A56, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8000b22:	4910      	ldr	r1, [pc, #64]	; (8000b64 <main+0x17c>)
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <main+0x180>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f002 fcc3 	bl	80034b4 <HAL_RTCEx_SetWakeUpTimer_IT>


	  	 // HAL_PWREx_EnableLowPowerRunMode();
	  	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000b2e:	2101      	movs	r1, #1
 8000b30:	2001      	movs	r0, #1
 8000b32:	f001 fc69 	bl	8002408 <HAL_PWR_EnterSTOPMode>
	    //HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
	    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <main+0x180>)
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f002 fd93 	bl	8003664 <HAL_RTCEx_DeactivateWakeUpTimer>
	    SystemClock_Config();
 8000b3e:	f000 f815 	bl	8000b6c <SystemClock_Config>
	    HAL_ResumeTick();
 8000b42:	f000 fc97 	bl	8001474 <HAL_ResumeTick>
	    HAL_Delay(2000);
 8000b46:	23fa      	movs	r3, #250	; 0xfa
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 fc60 	bl	8001410 <HAL_Delay>
	  HAL_Delay(1000);
 8000b50:	e7d0      	b.n	8000af4 <main+0x10c>
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	200001d0 	.word	0x200001d0
 8000b58:	20000028 	.word	0x20000028
 8000b5c:	20000210 	.word	0x20000210
 8000b60:	20000148 	.word	0x20000148
 8000b64:	00005a56 	.word	0x00005a56
 8000b68:	200000cc 	.word	0x200000cc

08000b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b09b      	sub	sp, #108	; 0x6c
 8000b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b72:	2434      	movs	r4, #52	; 0x34
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	0018      	movs	r0, r3
 8000b78:	2334      	movs	r3, #52	; 0x34
 8000b7a:	001a      	movs	r2, r3
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	f004 fa19 	bl	8004fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b82:	2320      	movs	r3, #32
 8000b84:	18fb      	adds	r3, r7, r3
 8000b86:	0018      	movs	r0, r3
 8000b88:	2314      	movs	r3, #20
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	f004 fa11 	bl	8004fb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	0018      	movs	r0, r3
 8000b96:	231c      	movs	r3, #28
 8000b98:	001a      	movs	r2, r3
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	f004 fa0a 	bl	8004fb4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba0:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <SystemClock_Config+0xd4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a27      	ldr	r2, [pc, #156]	; (8000c44 <SystemClock_Config+0xd8>)
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <SystemClock_Config+0xd4>)
 8000baa:	2180      	movs	r1, #128	; 0x80
 8000bac:	0109      	lsls	r1, r1, #4
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000bb2:	0021      	movs	r1, r4
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	220a      	movs	r2, #10
 8000bb8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2210      	movs	r2, #16
 8000bc4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2201      	movs	r2, #1
 8000bca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f001 fc73 	bl	80024c0 <HAL_RCC_OscConfig>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000bde:	f000 fa1b 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be2:	2120      	movs	r1, #32
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	220f      	movs	r2, #15
 8000be8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2201      	movs	r2, #1
 8000bee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2100      	movs	r1, #0
 8000c06:	0018      	movs	r0, r3
 8000c08:	f001 ffc4 	bl	8002b94 <HAL_RCC_ClockConfig>
 8000c0c:	1e03      	subs	r3, r0, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000c10:	f000 fa02 	bl	8001018 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2221      	movs	r2, #33	; 0x21
 8000c18:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2280      	movs	r2, #128	; 0x80
 8000c24:	0292      	lsls	r2, r2, #10
 8000c26:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f002 f9d6 	bl	8002fdc <HAL_RCCEx_PeriphCLKConfig>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000c34:	f000 f9f0 	bl	8001018 <Error_Handler>
  }
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b01b      	add	sp, #108	; 0x6c
 8000c3e:	bd90      	pop	{r4, r7, pc}
 8000c40:	40007000 	.word	0x40007000
 8000c44:	ffffe7ff 	.word	0xffffe7ff

08000c48 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4e:	003b      	movs	r3, r7
 8000c50:	0018      	movs	r0, r3
 8000c52:	2308      	movs	r3, #8
 8000c54:	001a      	movs	r2, r3
 8000c56:	2100      	movs	r1, #0
 8000c58:	f004 f9ac 	bl	8004fb4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000c5c:	4b2a      	ldr	r3, [pc, #168]	; (8000d08 <MX_ADC_Init+0xc0>)
 8000c5e:	4a2b      	ldr	r2, [pc, #172]	; (8000d0c <MX_ADC_Init+0xc4>)
 8000c60:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000c62:	4b29      	ldr	r3, [pc, #164]	; (8000d08 <MX_ADC_Init+0xc0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000c68:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <MX_ADC_Init+0xc0>)
 8000c6a:	22c0      	movs	r2, #192	; 0xc0
 8000c6c:	0612      	lsls	r2, r2, #24
 8000c6e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c70:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <MX_ADC_Init+0xc0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c76:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <MX_ADC_Init+0xc0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000c7c:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <MX_ADC_Init+0xc0>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c82:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <MX_ADC_Init+0xc0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000c88:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <MX_ADC_Init+0xc0>)
 8000c8a:	2220      	movs	r2, #32
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_ADC_Init+0xc0>)
 8000c92:	2221      	movs	r2, #33	; 0x21
 8000c94:	2100      	movs	r1, #0
 8000c96:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <MX_ADC_Init+0xc0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_ADC_Init+0xc0>)
 8000ca0:	22c2      	movs	r2, #194	; 0xc2
 8000ca2:	32ff      	adds	r2, #255	; 0xff
 8000ca4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_ADC_Init+0xc0>)
 8000ca8:	222c      	movs	r2, #44	; 0x2c
 8000caa:	2101      	movs	r1, #1
 8000cac:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <MX_ADC_Init+0xc0>)
 8000cb0:	2204      	movs	r2, #4
 8000cb2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_ADC_Init+0xc0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <MX_ADC_Init+0xc0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_ADC_Init+0xc0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <MX_ADC_Init+0xc0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_ADC_Init+0xc0>)
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f000 fbde 	bl	8001490 <HAL_ADC_Init>
 8000cd4:	1e03      	subs	r3, r0, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000cd8:	f000 f99e 	bl	8001018 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000cdc:	003b      	movs	r3, r7
 8000cde:	4a0c      	ldr	r2, [pc, #48]	; (8000d10 <MX_ADC_Init+0xc8>)
 8000ce0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000ce2:	003b      	movs	r3, r7
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	0152      	lsls	r2, r2, #5
 8000ce8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cea:	003a      	movs	r2, r7
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_ADC_Init+0xc0>)
 8000cee:	0011      	movs	r1, r2
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f000 fdcb 	bl	800188c <HAL_ADC_ConfigChannel>
 8000cf6:	1e03      	subs	r3, r0, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000cfa:	f000 f98d 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	20000028 	.word	0x20000028
 8000d0c:	40012400 	.word	0x40012400
 8000d10:	24000200 	.word	0x24000200

08000d14 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <MX_RTC_Init+0x60>)
 8000d1a:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <MX_RTC_Init+0x64>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <MX_RTC_Init+0x60>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_RTC_Init+0x60>)
 8000d26:	227f      	movs	r2, #127	; 0x7f
 8000d28:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <MX_RTC_Init+0x60>)
 8000d2c:	22ff      	movs	r2, #255	; 0xff
 8000d2e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d30:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <MX_RTC_Init+0x60>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_RTC_Init+0x60>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <MX_RTC_Init+0x60>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_RTC_Init+0x60>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <MX_RTC_Init+0x60>)
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f002 fa80 	bl	8003250 <HAL_RTC_Init>
 8000d50:	1e03      	subs	r3, r0, #0
 8000d52:	d001      	beq.n	8000d58 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000d54:	f000 f960 	bl	8001018 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_RTC_Init+0x60>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f002 fba8 	bl	80034b4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000d64:	1e03      	subs	r3, r0, #0
 8000d66:	d001      	beq.n	8000d6c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000d68:	f000 f956 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d6c:	46c0      	nop			; (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	200000cc 	.word	0x200000cc
 8000d78:	40002800 	.word	0x40002800

08000d7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_SPI1_Init+0x68>)
 8000d82:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <MX_SPI1_Init+0x6c>)
 8000d84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_SPI1_Init+0x68>)
 8000d88:	2282      	movs	r2, #130	; 0x82
 8000d8a:	0052      	lsls	r2, r2, #1
 8000d8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <MX_SPI1_Init+0x68>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <MX_SPI1_Init+0x68>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_SPI1_Init+0x68>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <MX_SPI1_Init+0x68>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_SPI1_Init+0x68>)
 8000da8:	2280      	movs	r2, #128	; 0x80
 8000daa:	0092      	lsls	r2, r2, #2
 8000dac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <MX_SPI1_Init+0x68>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_SPI1_Init+0x68>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <MX_SPI1_Init+0x68>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <MX_SPI1_Init+0x68>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <MX_SPI1_Init+0x68>)
 8000dc8:	2207      	movs	r2, #7
 8000dca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <MX_SPI1_Init+0x68>)
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f002 fce4 	bl	800379c <HAL_SPI_Init>
 8000dd4:	1e03      	subs	r3, r0, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dd8:	f000 f91e 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	200000f0 	.word	0x200000f0
 8000de8:	40013000 	.word	0x40013000

08000dec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <MX_USART1_UART_Init+0x60>)
 8000df2:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <MX_USART1_UART_Init+0x64>)
 8000df4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <MX_USART1_UART_Init+0x60>)
 8000df8:	22e1      	movs	r2, #225	; 0xe1
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <MX_USART1_UART_Init+0x60>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_USART1_UART_Init+0x60>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <MX_USART1_UART_Init+0x60>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_USART1_UART_Init+0x60>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <MX_USART1_UART_Init+0x60>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_USART1_UART_Init+0x60>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <MX_USART1_UART_Init+0x60>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <MX_USART1_UART_Init+0x60>)
 8000e2a:	2208      	movs	r2, #8
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <MX_USART1_UART_Init+0x60>)
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	0212      	lsls	r2, r2, #8
 8000e34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <MX_USART1_UART_Init+0x60>)
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f003 fad9 	bl	80043f0 <HAL_UART_Init>
 8000e3e:	1e03      	subs	r3, r0, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000e42:	f000 f8e9 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000148 	.word	0x20000148
 8000e50:	40013800 	.word	0x40013800

08000e54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_DMA_Init+0x38>)
 8000e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_DMA_Init+0x38>)
 8000e60:	2101      	movs	r1, #1
 8000e62:	430a      	orrs	r2, r1
 8000e64:	631a      	str	r2, [r3, #48]	; 0x30
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_DMA_Init+0x38>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	2009      	movs	r0, #9
 8000e78:	f000 ff46 	bl	8001d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e7c:	2009      	movs	r0, #9
 8000e7e:	f000 ff58 	bl	8001d32 <HAL_NVIC_EnableIRQ>

}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b002      	add	sp, #8
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	40021000 	.word	0x40021000

08000e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	240c      	movs	r4, #12
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	2314      	movs	r3, #20
 8000e9e:	001a      	movs	r2, r3
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	f004 f887 	bl	8004fb4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <MX_GPIO_Init+0x94>)
 8000ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <MX_GPIO_Init+0x94>)
 8000eac:	2101      	movs	r1, #1
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <MX_GPIO_Init+0x94>)
 8000eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <MX_GPIO_Init+0x94>)
 8000ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <MX_GPIO_Init+0x94>)
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <MX_GPIO_Init+0x94>)
 8000ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ece:	2202      	movs	r2, #2
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_SET);
 8000ed6:	23a0      	movs	r3, #160	; 0xa0
 8000ed8:	05db      	lsls	r3, r3, #23
 8000eda:	2201      	movs	r2, #1
 8000edc:	2111      	movs	r1, #17
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f001 fa74 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ee4:	23a0      	movs	r3, #160	; 0xa0
 8000ee6:	05db      	lsls	r3, r3, #23
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2102      	movs	r1, #2
 8000eec:	0018      	movs	r0, r3
 8000eee:	f001 fa6d 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000ef2:	0021      	movs	r1, r4
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	2213      	movs	r2, #19
 8000ef8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	187b      	adds	r3, r7, r1
 8000efc:	2201      	movs	r2, #1
 8000efe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	187a      	adds	r2, r7, r1
 8000f0e:	23a0      	movs	r3, #160	; 0xa0
 8000f10:	05db      	lsls	r3, r3, #23
 8000f12:	0011      	movs	r1, r2
 8000f14:	0018      	movs	r0, r3
 8000f16:	f001 f8e3 	bl	80020e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b009      	add	sp, #36	; 0x24
 8000f20:	bd90      	pop	{r4, r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	40021000 	.word	0x40021000

08000f28 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]


}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b002      	add	sp, #8
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]


}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b002      	add	sp, #8
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <BME280_SPI_Read>:
void BME280_SPI_Read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	240f      	movs	r4, #15
 8000f54:	193b      	adds	r3, r7, r4
 8000f56:	1c02      	adds	r2, r0, #0
 8000f58:	701a      	strb	r2, [r3, #0]
    reg_addr = reg_addr | 0x80;
 8000f5a:	193b      	adds	r3, r7, r4
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2280      	movs	r2, #128	; 0x80
 8000f60:	4252      	negs	r2, r2
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f6a:	23a0      	movs	r3, #160	; 0xa0
 8000f6c:	05db      	lsls	r3, r3, #23
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2110      	movs	r1, #16
 8000f72:	0018      	movs	r0, r3
 8000f74:	f001 fa2a 	bl	80023cc <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, &reg_addr, 1, 1000);
 8000f78:	23fa      	movs	r3, #250	; 0xfa
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	1939      	adds	r1, r7, r4
 8000f7e:	480b      	ldr	r0, [pc, #44]	; (8000fac <BME280_SPI_Read+0x64>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	f002 fc9f 	bl	80038c4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, reg_data, len, 1000);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	23fa      	movs	r3, #250	; 0xfa
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	68b9      	ldr	r1, [r7, #8]
 8000f90:	4806      	ldr	r0, [pc, #24]	; (8000fac <BME280_SPI_Read+0x64>)
 8000f92:	f002 fdf5 	bl	8003b80 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000f96:	23a0      	movs	r3, #160	; 0xa0
 8000f98:	05db      	lsls	r3, r3, #23
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2110      	movs	r1, #16
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f001 fa14 	bl	80023cc <HAL_GPIO_WritePin>
}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b005      	add	sp, #20
 8000faa:	bd90      	pop	{r4, r7, pc}
 8000fac:	200000f0 	.word	0x200000f0

08000fb0 <BME280_SPI_Write>:

void BME280_SPI_Write(uint8_t reg_addr, uint8_t *reg_data, uint32_t len)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	240f      	movs	r4, #15
 8000fbc:	193b      	adds	r3, r7, r4
 8000fbe:	1c02      	adds	r2, r0, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
    reg_addr = reg_addr & 0x7F;
 8000fc2:	193b      	adds	r3, r7, r4
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	227f      	movs	r2, #127	; 0x7f
 8000fc8:	4013      	ands	r3, r2
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	193b      	adds	r3, r7, r4
 8000fce:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fd0:	23a0      	movs	r3, #160	; 0xa0
 8000fd2:	05db      	lsls	r3, r3, #23
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f001 f9f7 	bl	80023cc <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, &reg_addr, 1, 1000);
 8000fde:	23fa      	movs	r3, #250	; 0xfa
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	1939      	adds	r1, r7, r4
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <BME280_SPI_Write+0x64>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f002 fc6c 	bl	80038c4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, reg_data, len, 1000);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	23fa      	movs	r3, #250	; 0xfa
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	4807      	ldr	r0, [pc, #28]	; (8001014 <BME280_SPI_Write+0x64>)
 8000ff8:	f002 fc64 	bl	80038c4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000ffc:	23a0      	movs	r3, #160	; 0xa0
 8000ffe:	05db      	lsls	r3, r3, #23
 8001000:	2201      	movs	r2, #1
 8001002:	2110      	movs	r1, #16
 8001004:	0018      	movs	r0, r3
 8001006:	f001 f9e1 	bl	80023cc <HAL_GPIO_WritePin>
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b005      	add	sp, #20
 8001010:	bd90      	pop	{r4, r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	200000f0 	.word	0x200000f0

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001020:	e7fe      	b.n	8001020 <Error_Handler+0x8>
	...

08001024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <HAL_MspInit+0x24>)
 800102a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_MspInit+0x24>)
 800102e:	2101      	movs	r1, #1
 8001030:	430a      	orrs	r2, r1
 8001032:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <HAL_MspInit+0x24>)
 8001036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_MspInit+0x24>)
 800103a:	2180      	movs	r1, #128	; 0x80
 800103c:	0549      	lsls	r1, r1, #21
 800103e:	430a      	orrs	r2, r1
 8001040:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40021000 	.word	0x40021000

0800104c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	240c      	movs	r4, #12
 8001056:	193b      	adds	r3, r7, r4
 8001058:	0018      	movs	r0, r3
 800105a:	2314      	movs	r3, #20
 800105c:	001a      	movs	r2, r3
 800105e:	2100      	movs	r1, #0
 8001060:	f003 ffa8 	bl	8004fb4 <memset>
  if(hadc->Instance==ADC1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a28      	ldr	r2, [pc, #160]	; (800110c <HAL_ADC_MspInit+0xc0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d14a      	bne.n	8001104 <HAL_ADC_MspInit+0xb8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800106e:	4b28      	ldr	r3, [pc, #160]	; (8001110 <HAL_ADC_MspInit+0xc4>)
 8001070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <HAL_ADC_MspInit+0xc4>)
 8001074:	2180      	movs	r1, #128	; 0x80
 8001076:	0089      	lsls	r1, r1, #2
 8001078:	430a      	orrs	r2, r1
 800107a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	4b24      	ldr	r3, [pc, #144]	; (8001110 <HAL_ADC_MspInit+0xc4>)
 800107e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001080:	4b23      	ldr	r3, [pc, #140]	; (8001110 <HAL_ADC_MspInit+0xc4>)
 8001082:	2102      	movs	r1, #2
 8001084:	430a      	orrs	r2, r1
 8001086:	62da      	str	r2, [r3, #44]	; 0x2c
 8001088:	4b21      	ldr	r3, [pc, #132]	; (8001110 <HAL_ADC_MspInit+0xc4>)
 800108a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108c:	2202      	movs	r2, #2
 800108e:	4013      	ands	r3, r2
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001094:	193b      	adds	r3, r7, r4
 8001096:	2202      	movs	r2, #2
 8001098:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109a:	193b      	adds	r3, r7, r4
 800109c:	2203      	movs	r2, #3
 800109e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	193b      	adds	r3, r7, r4
 80010a8:	4a1a      	ldr	r2, [pc, #104]	; (8001114 <HAL_ADC_MspInit+0xc8>)
 80010aa:	0019      	movs	r1, r3
 80010ac:	0010      	movs	r0, r2
 80010ae:	f001 f817 	bl	80020e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <HAL_ADC_MspInit+0xcc>)
 80010b4:	4a19      	ldr	r2, [pc, #100]	; (800111c <HAL_ADC_MspInit+0xd0>)
 80010b6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <HAL_ADC_MspInit+0xcc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_ADC_MspInit+0xcc>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <HAL_ADC_MspInit+0xcc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <HAL_ADC_MspInit+0xcc>)
 80010cc:	2280      	movs	r2, #128	; 0x80
 80010ce:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <HAL_ADC_MspInit+0xcc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_ADC_MspInit+0xcc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_ADC_MspInit+0xcc>)
 80010de:	2220      	movs	r2, #32
 80010e0:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_ADC_MspInit+0xcc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_ADC_MspInit+0xcc>)
 80010ea:	0018      	movs	r0, r3
 80010ec:	f000 fe3e 	bl	8001d6c <HAL_DMA_Init>
 80010f0:	1e03      	subs	r3, r0, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_ADC_MspInit+0xac>
    {
      Error_Handler();
 80010f4:	f7ff ff90 	bl	8001018 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_ADC_MspInit+0xcc>)
 80010fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_ADC_MspInit+0xcc>)
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	b009      	add	sp, #36	; 0x24
 800110a:	bd90      	pop	{r4, r7, pc}
 800110c:	40012400 	.word	0x40012400
 8001110:	40021000 	.word	0x40021000
 8001114:	50000400 	.word	0x50000400
 8001118:	20000084 	.word	0x20000084
 800111c:	40020008 	.word	0x40020008

08001120 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <HAL_RTC_MspInit+0x38>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d10e      	bne.n	8001150 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_RTC_MspInit+0x3c>)
 8001134:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_RTC_MspInit+0x3c>)
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	02c9      	lsls	r1, r1, #11
 800113c:	430a      	orrs	r2, r1
 800113e:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	2002      	movs	r0, #2
 8001146:	f000 fddf 	bl	8001d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800114a:	2002      	movs	r0, #2
 800114c:	f000 fdf1 	bl	8001d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b002      	add	sp, #8
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40002800 	.word	0x40002800
 800115c:	40021000 	.word	0x40021000

08001160 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	240c      	movs	r4, #12
 800116a:	193b      	adds	r3, r7, r4
 800116c:	0018      	movs	r0, r3
 800116e:	2314      	movs	r3, #20
 8001170:	001a      	movs	r2, r3
 8001172:	2100      	movs	r1, #0
 8001174:	f003 ff1e 	bl	8004fb4 <memset>
  if(hspi->Instance==SPI1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <HAL_SPI_MspInit+0x80>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d129      	bne.n	80011d6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_SPI_MspInit+0x84>)
 8001184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <HAL_SPI_MspInit+0x84>)
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	0149      	lsls	r1, r1, #5
 800118c:	430a      	orrs	r2, r1
 800118e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <HAL_SPI_MspInit+0x84>)
 8001192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <HAL_SPI_MspInit+0x84>)
 8001196:	2101      	movs	r1, #1
 8001198:	430a      	orrs	r2, r1
 800119a:	62da      	str	r2, [r3, #44]	; 0x2c
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <HAL_SPI_MspInit+0x84>)
 800119e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a0:	2201      	movs	r2, #1
 80011a2:	4013      	ands	r3, r2
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011a8:	0021      	movs	r1, r4
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	22e0      	movs	r2, #224	; 0xe0
 80011ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	2202      	movs	r2, #2
 80011b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	2203      	movs	r2, #3
 80011c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	187a      	adds	r2, r7, r1
 80011ca:	23a0      	movs	r3, #160	; 0xa0
 80011cc:	05db      	lsls	r3, r3, #23
 80011ce:	0011      	movs	r1, r2
 80011d0:	0018      	movs	r0, r3
 80011d2:	f000 ff85 	bl	80020e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	b009      	add	sp, #36	; 0x24
 80011dc:	bd90      	pop	{r4, r7, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	40013000 	.word	0x40013000
 80011e4:	40021000 	.word	0x40021000

080011e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	240c      	movs	r4, #12
 80011f2:	193b      	adds	r3, r7, r4
 80011f4:	0018      	movs	r0, r3
 80011f6:	2314      	movs	r3, #20
 80011f8:	001a      	movs	r2, r3
 80011fa:	2100      	movs	r1, #0
 80011fc:	f003 feda 	bl	8004fb4 <memset>
  if(huart->Instance==USART1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a18      	ldr	r2, [pc, #96]	; (8001268 <HAL_UART_MspInit+0x80>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d12a      	bne.n	8001260 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <HAL_UART_MspInit+0x84>)
 800120c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_UART_MspInit+0x84>)
 8001210:	2180      	movs	r1, #128	; 0x80
 8001212:	01c9      	lsls	r1, r1, #7
 8001214:	430a      	orrs	r2, r1
 8001216:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_UART_MspInit+0x84>)
 800121a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <HAL_UART_MspInit+0x84>)
 800121e:	2101      	movs	r1, #1
 8001220:	430a      	orrs	r2, r1
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_UART_MspInit+0x84>)
 8001226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001228:	2201      	movs	r2, #1
 800122a:	4013      	ands	r3, r2
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001230:	193b      	adds	r3, r7, r4
 8001232:	22c0      	movs	r2, #192	; 0xc0
 8001234:	00d2      	lsls	r2, r2, #3
 8001236:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	0021      	movs	r1, r4
 800123a:	187b      	adds	r3, r7, r1
 800123c:	2202      	movs	r2, #2
 800123e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	187b      	adds	r3, r7, r1
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	187b      	adds	r3, r7, r1
 8001248:	2203      	movs	r2, #3
 800124a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800124c:	187b      	adds	r3, r7, r1
 800124e:	2204      	movs	r2, #4
 8001250:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001252:	187a      	adds	r2, r7, r1
 8001254:	23a0      	movs	r3, #160	; 0xa0
 8001256:	05db      	lsls	r3, r3, #23
 8001258:	0011      	movs	r1, r2
 800125a:	0018      	movs	r0, r3
 800125c:	f000 ff40 	bl	80020e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001260:	46c0      	nop			; (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	b009      	add	sp, #36	; 0x24
 8001266:	bd90      	pop	{r4, r7, pc}
 8001268:	40013800 	.word	0x40013800
 800126c:	40021000 	.word	0x40021000

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <NMI_Handler+0x4>

08001276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <HardFault_Handler+0x4>

0800127c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001280:	46c0      	nop			; (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001294:	f000 f8a0 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <RTC_IRQHandler+0x14>)
 80012a6:	0018      	movs	r0, r3
 80012a8:	f002 fa40 	bl	800372c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	200000cc 	.word	0x200000cc

080012b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <DMA1_Channel1_IRQHandler+0x14>)
 80012be:	0018      	movs	r0, r3
 80012c0:	f000 fe32 	bl	8001f28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	20000084 	.word	0x20000084

080012d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80012dc:	480d      	ldr	r0, [pc, #52]	; (8001314 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80012de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012e0:	f7ff fff6 	bl	80012d0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <LoopForever+0x6>)
  ldr r1, =_edata
 80012e6:	490d      	ldr	r1, [pc, #52]	; (800131c <LoopForever+0xa>)
  ldr r2, =_sidata
 80012e8:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <LoopForever+0xe>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ec:	e002      	b.n	80012f4 <LoopCopyDataInit>

080012ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f2:	3304      	adds	r3, #4

080012f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f8:	d3f9      	bcc.n	80012ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012fc:	4c0a      	ldr	r4, [pc, #40]	; (8001328 <LoopForever+0x16>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001300:	e001      	b.n	8001306 <LoopFillZerobss>

08001302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001304:	3204      	adds	r2, #4

08001306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001308:	d3fb      	bcc.n	8001302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800130a:	f003 fe13 	bl	8004f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130e:	f7ff fb6b 	bl	80009e8 <main>

08001312 <LoopForever>:

LoopForever:
    b LoopForever
 8001312:	e7fe      	b.n	8001312 <LoopForever>
   ldr   r0, =_estack
 8001314:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800131c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001320:	08005100 	.word	0x08005100
  ldr r2, =_sbss
 8001324:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001328:	20000244 	.word	0x20000244

0800132c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC1_COMP_IRQHandler>
	...

08001330 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_Init+0x3c>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_Init+0x3c>)
 8001342:	2140      	movs	r1, #64	; 0x40
 8001344:	430a      	orrs	r2, r1
 8001346:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001348:	2003      	movs	r0, #3
 800134a:	f000 f811 	bl	8001370 <HAL_InitTick>
 800134e:	1e03      	subs	r3, r0, #0
 8001350:	d003      	beq.n	800135a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	2201      	movs	r2, #1
 8001356:	701a      	strb	r2, [r3, #0]
 8001358:	e001      	b.n	800135e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800135a:	f7ff fe63 	bl	8001024 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
}
 8001362:	0018      	movs	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	b002      	add	sp, #8
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	40022000 	.word	0x40022000

08001370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <HAL_InitTick+0x5c>)
 800137a:	681c      	ldr	r4, [r3, #0]
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <HAL_InitTick+0x60>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	0019      	movs	r1, r3
 8001382:	23fa      	movs	r3, #250	; 0xfa
 8001384:	0098      	lsls	r0, r3, #2
 8001386:	f7fe fec7 	bl	8000118 <__udivsi3>
 800138a:	0003      	movs	r3, r0
 800138c:	0019      	movs	r1, r3
 800138e:	0020      	movs	r0, r4
 8001390:	f7fe fec2 	bl	8000118 <__udivsi3>
 8001394:	0003      	movs	r3, r0
 8001396:	0018      	movs	r0, r3
 8001398:	f000 fcdb 	bl	8001d52 <HAL_SYSTICK_Config>
 800139c:	1e03      	subs	r3, r0, #0
 800139e:	d001      	beq.n	80013a4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e00f      	b.n	80013c4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d80b      	bhi.n	80013c2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	2301      	movs	r3, #1
 80013ae:	425b      	negs	r3, r3
 80013b0:	2200      	movs	r2, #0
 80013b2:	0018      	movs	r0, r3
 80013b4:	f000 fca8 	bl	8001d08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_InitTick+0x64>)
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b003      	add	sp, #12
 80013ca:	bd90      	pop	{r4, r7, pc}
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000008 	.word	0x20000008
 80013d4:	20000004 	.word	0x20000004

080013d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_IncTick+0x1c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	001a      	movs	r2, r3
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_IncTick+0x20>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	18d2      	adds	r2, r2, r3
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <HAL_IncTick+0x20>)
 80013ea:	601a      	str	r2, [r3, #0]
}
 80013ec:	46c0      	nop			; (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	20000008 	.word	0x20000008
 80013f8:	20000240 	.word	0x20000240

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b02      	ldr	r3, [pc, #8]	; (800140c <HAL_GetTick+0x10>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	0018      	movs	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	20000240 	.word	0x20000240

08001410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff fff0 	bl	80013fc <HAL_GetTick>
 800141c:	0003      	movs	r3, r0
 800141e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3301      	adds	r3, #1
 8001428:	d005      	beq.n	8001436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_Delay+0x44>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	001a      	movs	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	189b      	adds	r3, r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	f7ff ffe0 	bl	80013fc <HAL_GetTick>
 800143c:	0002      	movs	r2, r0
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	429a      	cmp	r2, r3
 8001446:	d8f7      	bhi.n	8001438 <HAL_Delay+0x28>
  {
  }
}
 8001448:	46c0      	nop			; (mov r8, r8)
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	46bd      	mov	sp, r7
 800144e:	b004      	add	sp, #16
 8001450:	bd80      	pop	{r7, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	20000008 	.word	0x20000008

08001458 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <HAL_SuspendTick+0x18>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <HAL_SuspendTick+0x18>)
 8001462:	2102      	movs	r1, #2
 8001464:	438a      	bics	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
}
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	e000e010 	.word	0xe000e010

08001474 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <HAL_ResumeTick+0x18>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <HAL_ResumeTick+0x18>)
 800147e:	2102      	movs	r1, #2
 8001480:	430a      	orrs	r2, r1
 8001482:	601a      	str	r2, [r3, #0]
}
 8001484:	46c0      	nop			; (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e159      	b.n	8001756 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10a      	bne.n	80014c0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2250      	movs	r2, #80	; 0x50
 80014b4:	2100      	movs	r1, #0
 80014b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	0018      	movs	r0, r3
 80014bc:	f7ff fdc6 	bl	800104c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c4:	2210      	movs	r2, #16
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b10      	cmp	r3, #16
 80014ca:	d005      	beq.n	80014d8 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2204      	movs	r2, #4
 80014d4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80014d6:	d00b      	beq.n	80014f0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014dc:	2210      	movs	r2, #16
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2250      	movs	r2, #80	; 0x50
 80014e8:	2100      	movs	r1, #0
 80014ea:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e132      	b.n	8001756 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f4:	4a9a      	ldr	r2, [pc, #616]	; (8001760 <HAL_ADC_Init+0x2d0>)
 80014f6:	4013      	ands	r3, r2
 80014f8:	2202      	movs	r2, #2
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2203      	movs	r2, #3
 8001508:	4013      	ands	r3, r2
 800150a:	2b01      	cmp	r3, #1
 800150c:	d108      	bne.n	8001520 <HAL_ADC_Init+0x90>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2201      	movs	r2, #1
 8001516:	4013      	ands	r3, r2
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_ADC_Init+0x90>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <HAL_ADC_Init+0x92>
 8001520:	2300      	movs	r3, #0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d149      	bne.n	80015ba <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	23c0      	movs	r3, #192	; 0xc0
 800152c:	061b      	lsls	r3, r3, #24
 800152e:	429a      	cmp	r2, r3
 8001530:	d00b      	beq.n	800154a <HAL_ADC_Init+0xba>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	05db      	lsls	r3, r3, #23
 800153a:	429a      	cmp	r2, r3
 800153c:	d005      	beq.n	800154a <HAL_ADC_Init+0xba>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	061b      	lsls	r3, r3, #24
 8001546:	429a      	cmp	r2, r3
 8001548:	d111      	bne.n	800156e <HAL_ADC_Init+0xde>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	691a      	ldr	r2, [r3, #16]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	0892      	lsrs	r2, r2, #2
 8001558:	611a      	str	r2, [r3, #16]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6919      	ldr	r1, [r3, #16]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	611a      	str	r2, [r3, #16]
 800156c:	e014      	b.n	8001598 <HAL_ADC_Init+0x108>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	691a      	ldr	r2, [r3, #16]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	0092      	lsls	r2, r2, #2
 800157a:	0892      	lsrs	r2, r2, #2
 800157c:	611a      	str	r2, [r3, #16]
 800157e:	4b79      	ldr	r3, [pc, #484]	; (8001764 <HAL_ADC_Init+0x2d4>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4b78      	ldr	r3, [pc, #480]	; (8001764 <HAL_ADC_Init+0x2d4>)
 8001584:	4978      	ldr	r1, [pc, #480]	; (8001768 <HAL_ADC_Init+0x2d8>)
 8001586:	400a      	ands	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	4b76      	ldr	r3, [pc, #472]	; (8001764 <HAL_ADC_Init+0x2d4>)
 800158c:	6819      	ldr	r1, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	4b74      	ldr	r3, [pc, #464]	; (8001764 <HAL_ADC_Init+0x2d4>)
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2118      	movs	r1, #24
 80015a4:	438a      	bics	r2, r1
 80015a6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68d9      	ldr	r1, [r3, #12]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80015ba:	4b6a      	ldr	r3, [pc, #424]	; (8001764 <HAL_ADC_Init+0x2d4>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b69      	ldr	r3, [pc, #420]	; (8001764 <HAL_ADC_Init+0x2d4>)
 80015c0:	496a      	ldr	r1, [pc, #424]	; (800176c <HAL_ADC_Init+0x2dc>)
 80015c2:	400a      	ands	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80015c6:	4b67      	ldr	r3, [pc, #412]	; (8001764 <HAL_ADC_Init+0x2d4>)
 80015c8:	6819      	ldr	r1, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ce:	065a      	lsls	r2, r3, #25
 80015d0:	4b64      	ldr	r3, [pc, #400]	; (8001764 <HAL_ADC_Init+0x2d4>)
 80015d2:	430a      	orrs	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	055b      	lsls	r3, r3, #21
 80015e0:	4013      	ands	r3, r2
 80015e2:	d108      	bne.n	80015f6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	0549      	lsls	r1, r1, #21
 80015f2:	430a      	orrs	r2, r1
 80015f4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	495b      	ldr	r1, [pc, #364]	; (8001770 <HAL_ADC_Init+0x2e0>)
 8001602:	400a      	ands	r2, r1
 8001604:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68d9      	ldr	r1, [r3, #12]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d101      	bne.n	800161c <HAL_ADC_Init+0x18c>
 8001618:	2304      	movs	r3, #4
 800161a:	e000      	b.n	800161e <HAL_ADC_Init+0x18e>
 800161c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800161e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2020      	movs	r0, #32
 8001624:	5c1b      	ldrb	r3, [r3, r0]
 8001626:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001628:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	202c      	movs	r0, #44	; 0x2c
 800162e:	5c1b      	ldrb	r3, [r3, r0]
 8001630:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001632:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001638:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001640:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001648:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001656:	23c2      	movs	r3, #194	; 0xc2
 8001658:	33ff      	adds	r3, #255	; 0xff
 800165a:	429a      	cmp	r2, r3
 800165c:	d00b      	beq.n	8001676 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68d9      	ldr	r1, [r3, #12]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2221      	movs	r2, #33	; 0x21
 800167a:	5c9b      	ldrb	r3, [r3, r2]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d11a      	bne.n	80016b6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2220      	movs	r2, #32
 8001684:	5c9b      	ldrb	r3, [r3, r2]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d109      	bne.n	800169e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2180      	movs	r1, #128	; 0x80
 8001696:	0249      	lsls	r1, r1, #9
 8001698:	430a      	orrs	r2, r1
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	e00b      	b.n	80016b6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a2:	2220      	movs	r2, #32
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	2201      	movs	r2, #1
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d11f      	bne.n	80016fe <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	691a      	ldr	r2, [r3, #16]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	492a      	ldr	r1, [pc, #168]	; (8001774 <HAL_ADC_Init+0x2e4>)
 80016ca:	400a      	ands	r2, r1
 80016cc:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6919      	ldr	r1, [r3, #16]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80016dc:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80016e2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	691a      	ldr	r2, [r3, #16]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2101      	movs	r1, #1
 80016f8:	430a      	orrs	r2, r1
 80016fa:	611a      	str	r2, [r3, #16]
 80016fc:	e00e      	b.n	800171c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	2201      	movs	r2, #1
 8001706:	4013      	ands	r3, r2
 8001708:	2b01      	cmp	r3, #1
 800170a:	d107      	bne.n	800171c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	691a      	ldr	r2, [r3, #16]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2101      	movs	r1, #1
 8001718:	438a      	bics	r2, r1
 800171a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2107      	movs	r1, #7
 8001728:	438a      	bics	r2, r1
 800172a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6959      	ldr	r1, [r3, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001748:	2203      	movs	r2, #3
 800174a:	4393      	bics	r3, r2
 800174c:	2201      	movs	r2, #1
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	0018      	movs	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	b002      	add	sp, #8
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	fffffefd 	.word	0xfffffefd
 8001764:	40012708 	.word	0x40012708
 8001768:	ffc3ffff 	.word	0xffc3ffff
 800176c:	fdffffff 	.word	0xfdffffff
 8001770:	fffe0219 	.word	0xfffe0219
 8001774:	fffffc03 	.word	0xfffffc03

08001778 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001784:	2317      	movs	r3, #23
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2204      	movs	r2, #4
 8001794:	4013      	ands	r3, r2
 8001796:	d15e      	bne.n	8001856 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2250      	movs	r2, #80	; 0x50
 800179c:	5c9b      	ldrb	r3, [r3, r2]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_Start_DMA+0x2e>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e05e      	b.n	8001864 <HAL_ADC_Start_DMA+0xec>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2250      	movs	r2, #80	; 0x50
 80017aa:	2101      	movs	r1, #1
 80017ac:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2101      	movs	r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d007      	beq.n	80017d6 <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80017c6:	2317      	movs	r3, #23
 80017c8:	18fc      	adds	r4, r7, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f000 f8e3 	bl	8001998 <ADC_Enable>
 80017d2:	0003      	movs	r3, r0
 80017d4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017d6:	2317      	movs	r3, #23
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d13e      	bne.n	800185e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e4:	4a21      	ldr	r2, [pc, #132]	; (800186c <HAL_ADC_Start_DMA+0xf4>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	2280      	movs	r2, #128	; 0x80
 80017ea:	0052      	lsls	r2, r2, #1
 80017ec:	431a      	orrs	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2250      	movs	r2, #80	; 0x50
 80017fc:	2100      	movs	r1, #0
 80017fe:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001804:	4a1a      	ldr	r2, [pc, #104]	; (8001870 <HAL_ADC_Start_DMA+0xf8>)
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180c:	4a19      	ldr	r2, [pc, #100]	; (8001874 <HAL_ADC_Start_DMA+0xfc>)
 800180e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001814:	4a18      	ldr	r2, [pc, #96]	; (8001878 <HAL_ADC_Start_DMA+0x100>)
 8001816:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	221c      	movs	r2, #28
 800181e:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2110      	movs	r1, #16
 800182c:	430a      	orrs	r2, r1
 800182e:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	3340      	adds	r3, #64	; 0x40
 800183a:	0019      	movs	r1, r3
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f000 fb0c 	bl	8001e5c <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2104      	movs	r1, #4
 8001850:	430a      	orrs	r2, r1
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	e003      	b.n	800185e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001856:	2317      	movs	r3, #23
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	2202      	movs	r2, #2
 800185c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800185e:	2317      	movs	r3, #23
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	781b      	ldrb	r3, [r3, #0]
}
 8001864:	0018      	movs	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	b007      	add	sp, #28
 800186a:	bd90      	pop	{r4, r7, pc}
 800186c:	fffff0fe 	.word	0xfffff0fe
 8001870:	08001a69 	.word	0x08001a69
 8001874:	08001b1d 	.word	0x08001b1d
 8001878:	08001b3b 	.word	0x08001b3b

0800187c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	b002      	add	sp, #8
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2250      	movs	r2, #80	; 0x50
 800189a:	5c9b      	ldrb	r3, [r3, r2]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x18>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e06c      	b.n	800197e <HAL_ADC_ConfigChannel+0xf2>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2250      	movs	r2, #80	; 0x50
 80018a8:	2101      	movs	r1, #1
 80018aa:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2204      	movs	r2, #4
 80018b4:	4013      	ands	r3, r2
 80018b6:	d00b      	beq.n	80018d0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018bc:	2220      	movs	r2, #32
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2250      	movs	r2, #80	; 0x50
 80018c8:	2100      	movs	r1, #0
 80018ca:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e056      	b.n	800197e <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4a2c      	ldr	r2, [pc, #176]	; (8001988 <HAL_ADC_ConfigChannel+0xfc>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d028      	beq.n	800192c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	035b      	lsls	r3, r3, #13
 80018e6:	0b5a      	lsrs	r2, r3, #13
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	02db      	lsls	r3, r3, #11
 80018f8:	4013      	ands	r3, r2
 80018fa:	d009      	beq.n	8001910 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80018fc:	4b23      	ldr	r3, [pc, #140]	; (800198c <HAL_ADC_ConfigChannel+0x100>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <HAL_ADC_ConfigChannel+0x100>)
 8001902:	2180      	movs	r1, #128	; 0x80
 8001904:	0409      	lsls	r1, r1, #16
 8001906:	430a      	orrs	r2, r1
 8001908:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800190a:	200a      	movs	r0, #10
 800190c:	f000 f930 	bl	8001b70 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	029b      	lsls	r3, r3, #10
 8001918:	4013      	ands	r3, r2
 800191a:	d02b      	beq.n	8001974 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_ADC_ConfigChannel+0x100>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b1a      	ldr	r3, [pc, #104]	; (800198c <HAL_ADC_ConfigChannel+0x100>)
 8001922:	2180      	movs	r1, #128	; 0x80
 8001924:	03c9      	lsls	r1, r1, #15
 8001926:	430a      	orrs	r2, r1
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e023      	b.n	8001974 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	035b      	lsls	r3, r3, #13
 8001938:	0b5b      	lsrs	r3, r3, #13
 800193a:	43d9      	mvns	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	400a      	ands	r2, r1
 8001942:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	02db      	lsls	r3, r3, #11
 800194c:	4013      	ands	r3, r2
 800194e:	d005      	beq.n	800195c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_ADC_ConfigChannel+0x100>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b0d      	ldr	r3, [pc, #52]	; (800198c <HAL_ADC_ConfigChannel+0x100>)
 8001956:	490e      	ldr	r1, [pc, #56]	; (8001990 <HAL_ADC_ConfigChannel+0x104>)
 8001958:	400a      	ands	r2, r1
 800195a:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	029b      	lsls	r3, r3, #10
 8001964:	4013      	ands	r3, r2
 8001966:	d005      	beq.n	8001974 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_ADC_ConfigChannel+0x100>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <HAL_ADC_ConfigChannel+0x100>)
 800196e:	4909      	ldr	r1, [pc, #36]	; (8001994 <HAL_ADC_ConfigChannel+0x108>)
 8001970:	400a      	ands	r2, r1
 8001972:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2250      	movs	r2, #80	; 0x50
 8001978:	2100      	movs	r1, #0
 800197a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	0018      	movs	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	b002      	add	sp, #8
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	00001001 	.word	0x00001001
 800198c:	40012708 	.word	0x40012708
 8001990:	ff7fffff 	.word	0xff7fffff
 8001994:	ffbfffff 	.word	0xffbfffff

08001998 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2203      	movs	r2, #3
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d108      	bne.n	80019c4 <ADC_Enable+0x2c>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2201      	movs	r2, #1
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <ADC_Enable+0x2c>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <ADC_Enable+0x2e>
 80019c4:	2300      	movs	r3, #0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d146      	bne.n	8001a58 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4a24      	ldr	r2, [pc, #144]	; (8001a64 <ADC_Enable+0xcc>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	d00d      	beq.n	80019f2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019da:	2210      	movs	r2, #16
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	2201      	movs	r2, #1
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e033      	b.n	8001a5a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2101      	movs	r1, #1
 80019fe:	430a      	orrs	r2, r1
 8001a00:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001a02:	2001      	movs	r0, #1
 8001a04:	f000 f8b4 	bl	8001b70 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a08:	f7ff fcf8 	bl	80013fc <HAL_GetTick>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a10:	e01b      	b.n	8001a4a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a12:	f7ff fcf3 	bl	80013fc <HAL_GetTick>
 8001a16:	0002      	movs	r2, r0
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b0a      	cmp	r3, #10
 8001a1e:	d914      	bls.n	8001a4a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2201      	movs	r2, #1
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d00d      	beq.n	8001a4a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a32:	2210      	movs	r2, #16
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3e:	2201      	movs	r2, #1
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e007      	b.n	8001a5a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2201      	movs	r2, #1
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d1dc      	bne.n	8001a12 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b004      	add	sp, #16
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	80000017 	.word	0x80000017

08001a68 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a74:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7a:	2250      	movs	r2, #80	; 0x50
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d141      	bne.n	8001b04 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a84:	2280      	movs	r2, #128	; 0x80
 8001a86:	0092      	lsls	r2, r2, #2
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	23c0      	movs	r3, #192	; 0xc0
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d12e      	bne.n	8001afa <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d129      	bne.n	8001afa <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2208      	movs	r2, #8
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d122      	bne.n	8001afa <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2204      	movs	r2, #4
 8001abc:	4013      	ands	r3, r2
 8001abe:	d110      	bne.n	8001ae2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	210c      	movs	r1, #12
 8001acc:	438a      	bics	r2, r1
 8001ace:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad4:	4a10      	ldr	r2, [pc, #64]	; (8001b18 <ADC_DMAConvCplt+0xb0>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2201      	movs	r2, #1
 8001ada:	431a      	orrs	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	655a      	str	r2, [r3, #84]	; 0x54
 8001ae0:	e00b      	b.n	8001afa <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	2201      	movs	r2, #1
 8001af4:	431a      	orrs	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7ff fa1b 	bl	8000f38 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001b02:	e005      	b.n	8001b10 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	0010      	movs	r0, r2
 8001b0e:	4798      	blx	r3
}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b004      	add	sp, #16
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	fffffefe 	.word	0xfffffefe

08001b1c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f7ff f9fb 	bl	8000f28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b004      	add	sp, #16
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4c:	2240      	movs	r2, #64	; 0x40
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	2204      	movs	r2, #4
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	0018      	movs	r0, r3
 8001b64:	f7ff fe8a 	bl	800187c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b68:	46c0      	nop			; (mov r8, r8)
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b004      	add	sp, #16
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <ADC_DelayMicroSecond+0x38>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	490b      	ldr	r1, [pc, #44]	; (8001bac <ADC_DelayMicroSecond+0x3c>)
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f7fe faca 	bl	8000118 <__udivsi3>
 8001b84:	0003      	movs	r3, r0
 8001b86:	001a      	movs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4353      	muls	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001b8e:	e002      	b.n	8001b96 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f9      	bne.n	8001b90 <ADC_DelayMicroSecond+0x20>
  }
}
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b004      	add	sp, #16
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	000f4240 	.word	0x000f4240

08001bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	1dfb      	adds	r3, r7, #7
 8001bba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bbc:	1dfb      	adds	r3, r7, #7
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b7f      	cmp	r3, #127	; 0x7f
 8001bc2:	d809      	bhi.n	8001bd8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc4:	1dfb      	adds	r3, r7, #7
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	001a      	movs	r2, r3
 8001bca:	231f      	movs	r3, #31
 8001bcc:	401a      	ands	r2, r3
 8001bce:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <__NVIC_EnableIRQ+0x30>)
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	4091      	lsls	r1, r2
 8001bd4:	000a      	movs	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]
  }
}
 8001bd8:	46c0      	nop			; (mov r8, r8)
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	b002      	add	sp, #8
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	e000e100 	.word	0xe000e100

08001be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be4:	b590      	push	{r4, r7, lr}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	0002      	movs	r2, r0
 8001bec:	6039      	str	r1, [r7, #0]
 8001bee:	1dfb      	adds	r3, r7, #7
 8001bf0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	1dfb      	adds	r3, r7, #7
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8001bf8:	d828      	bhi.n	8001c4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bfa:	4a2f      	ldr	r2, [pc, #188]	; (8001cb8 <__NVIC_SetPriority+0xd4>)
 8001bfc:	1dfb      	adds	r3, r7, #7
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	b25b      	sxtb	r3, r3
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	33c0      	adds	r3, #192	; 0xc0
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	589b      	ldr	r3, [r3, r2]
 8001c0a:	1dfa      	adds	r2, r7, #7
 8001c0c:	7812      	ldrb	r2, [r2, #0]
 8001c0e:	0011      	movs	r1, r2
 8001c10:	2203      	movs	r2, #3
 8001c12:	400a      	ands	r2, r1
 8001c14:	00d2      	lsls	r2, r2, #3
 8001c16:	21ff      	movs	r1, #255	; 0xff
 8001c18:	4091      	lsls	r1, r2
 8001c1a:	000a      	movs	r2, r1
 8001c1c:	43d2      	mvns	r2, r2
 8001c1e:	401a      	ands	r2, r3
 8001c20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	019b      	lsls	r3, r3, #6
 8001c26:	22ff      	movs	r2, #255	; 0xff
 8001c28:	401a      	ands	r2, r3
 8001c2a:	1dfb      	adds	r3, r7, #7
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	0018      	movs	r0, r3
 8001c30:	2303      	movs	r3, #3
 8001c32:	4003      	ands	r3, r0
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c38:	481f      	ldr	r0, [pc, #124]	; (8001cb8 <__NVIC_SetPriority+0xd4>)
 8001c3a:	1dfb      	adds	r3, r7, #7
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	b25b      	sxtb	r3, r3
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	430a      	orrs	r2, r1
 8001c44:	33c0      	adds	r3, #192	; 0xc0
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c4a:	e031      	b.n	8001cb0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c4c:	4a1b      	ldr	r2, [pc, #108]	; (8001cbc <__NVIC_SetPriority+0xd8>)
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	0019      	movs	r1, r3
 8001c54:	230f      	movs	r3, #15
 8001c56:	400b      	ands	r3, r1
 8001c58:	3b08      	subs	r3, #8
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	3306      	adds	r3, #6
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	18d3      	adds	r3, r2, r3
 8001c62:	3304      	adds	r3, #4
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	1dfa      	adds	r2, r7, #7
 8001c68:	7812      	ldrb	r2, [r2, #0]
 8001c6a:	0011      	movs	r1, r2
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	400a      	ands	r2, r1
 8001c70:	00d2      	lsls	r2, r2, #3
 8001c72:	21ff      	movs	r1, #255	; 0xff
 8001c74:	4091      	lsls	r1, r2
 8001c76:	000a      	movs	r2, r1
 8001c78:	43d2      	mvns	r2, r2
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	019b      	lsls	r3, r3, #6
 8001c82:	22ff      	movs	r2, #255	; 0xff
 8001c84:	401a      	ands	r2, r3
 8001c86:	1dfb      	adds	r3, r7, #7
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	4003      	ands	r3, r0
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c94:	4809      	ldr	r0, [pc, #36]	; (8001cbc <__NVIC_SetPriority+0xd8>)
 8001c96:	1dfb      	adds	r3, r7, #7
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	001c      	movs	r4, r3
 8001c9c:	230f      	movs	r3, #15
 8001c9e:	4023      	ands	r3, r4
 8001ca0:	3b08      	subs	r3, #8
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	3306      	adds	r3, #6
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	18c3      	adds	r3, r0, r3
 8001cac:	3304      	adds	r3, #4
 8001cae:	601a      	str	r2, [r3, #0]
}
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b003      	add	sp, #12
 8001cb6:	bd90      	pop	{r4, r7, pc}
 8001cb8:	e000e100 	.word	0xe000e100
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	1e5a      	subs	r2, r3, #1
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	045b      	lsls	r3, r3, #17
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d301      	bcc.n	8001cd8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e010      	b.n	8001cfa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <SysTick_Config+0x44>)
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	3a01      	subs	r2, #1
 8001cde:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	425b      	negs	r3, r3
 8001ce4:	2103      	movs	r1, #3
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f7ff ff7c 	bl	8001be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <SysTick_Config+0x44>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf2:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <SysTick_Config+0x44>)
 8001cf4:	2207      	movs	r2, #7
 8001cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b002      	add	sp, #8
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	e000e010 	.word	0xe000e010

08001d08 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	210f      	movs	r1, #15
 8001d14:	187b      	adds	r3, r7, r1
 8001d16:	1c02      	adds	r2, r0, #0
 8001d18:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	b25b      	sxtb	r3, r3
 8001d22:	0011      	movs	r1, r2
 8001d24:	0018      	movs	r0, r3
 8001d26:	f7ff ff5d 	bl	8001be4 <__NVIC_SetPriority>
}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b004      	add	sp, #16
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	0002      	movs	r2, r0
 8001d3a:	1dfb      	adds	r3, r7, #7
 8001d3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d3e:	1dfb      	adds	r3, r7, #7
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff ff33 	bl	8001bb0 <__NVIC_EnableIRQ>
}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b002      	add	sp, #8
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f7ff ffaf 	bl	8001cc0 <SysTick_Config>
 8001d62:	0003      	movs	r3, r0
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e061      	b.n	8001e42 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a32      	ldr	r2, [pc, #200]	; (8001e4c <HAL_DMA_Init+0xe0>)
 8001d84:	4694      	mov	ip, r2
 8001d86:	4463      	add	r3, ip
 8001d88:	2114      	movs	r1, #20
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f7fe f9c4 	bl	8000118 <__udivsi3>
 8001d90:	0003      	movs	r3, r0
 8001d92:	009a      	lsls	r2, r3, #2
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a2d      	ldr	r2, [pc, #180]	; (8001e50 <HAL_DMA_Init+0xe4>)
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2225      	movs	r2, #37	; 0x25
 8001da2:	2102      	movs	r1, #2
 8001da4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4a28      	ldr	r2, [pc, #160]	; (8001e54 <HAL_DMA_Init+0xe8>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	01db      	lsls	r3, r3, #7
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d018      	beq.n	8001e2a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001df8:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <HAL_DMA_Init+0xec>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e00:	211c      	movs	r1, #28
 8001e02:	400b      	ands	r3, r1
 8001e04:	210f      	movs	r1, #15
 8001e06:	4099      	lsls	r1, r3
 8001e08:	000b      	movs	r3, r1
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_DMA_Init+0xec>)
 8001e0e:	400a      	ands	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_DMA_Init+0xec>)
 8001e14:	6819      	ldr	r1, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	201c      	movs	r0, #28
 8001e20:	4003      	ands	r3, r0
 8001e22:	409a      	lsls	r2, r3
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_DMA_Init+0xec>)
 8001e26:	430a      	orrs	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2225      	movs	r2, #37	; 0x25
 8001e34:	2101      	movs	r1, #1
 8001e36:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2224      	movs	r2, #36	; 0x24
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	0018      	movs	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b004      	add	sp, #16
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	bffdfff8 	.word	0xbffdfff8
 8001e50:	40020000 	.word	0x40020000
 8001e54:	ffff800f 	.word	0xffff800f
 8001e58:	400200a8 	.word	0x400200a8

08001e5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6a:	2317      	movs	r3, #23
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2224      	movs	r2, #36	; 0x24
 8001e76:	5c9b      	ldrb	r3, [r3, r2]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_DMA_Start_IT+0x24>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e04f      	b.n	8001f20 <HAL_DMA_Start_IT+0xc4>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2224      	movs	r2, #36	; 0x24
 8001e84:	2101      	movs	r1, #1
 8001e86:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2225      	movs	r2, #37	; 0x25
 8001e8c:	5c9b      	ldrb	r3, [r3, r2]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d13a      	bne.n	8001f0a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2225      	movs	r2, #37	; 0x25
 8001e98:	2102      	movs	r1, #2
 8001e9a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2101      	movs	r1, #1
 8001eae:	438a      	bics	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	68b9      	ldr	r1, [r7, #8]
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f000 f8e3 	bl	8002084 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d008      	beq.n	8001ed8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	210e      	movs	r1, #14
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e00f      	b.n	8001ef8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2104      	movs	r1, #4
 8001ee4:	438a      	bics	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	210a      	movs	r1, #10
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2101      	movs	r1, #1
 8001f04:	430a      	orrs	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	e007      	b.n	8001f1a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2224      	movs	r2, #36	; 0x24
 8001f0e:	2100      	movs	r1, #0
 8001f10:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f12:	2317      	movs	r3, #23
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	2202      	movs	r2, #2
 8001f18:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001f1a:	2317      	movs	r3, #23
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	781b      	ldrb	r3, [r3, #0]
}
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b006      	add	sp, #24
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f44:	221c      	movs	r2, #28
 8001f46:	4013      	ands	r3, r2
 8001f48:	2204      	movs	r2, #4
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	0013      	movs	r3, r2
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4013      	ands	r3, r2
 8001f52:	d026      	beq.n	8001fa2 <HAL_DMA_IRQHandler+0x7a>
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2204      	movs	r2, #4
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d022      	beq.n	8001fa2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2220      	movs	r2, #32
 8001f64:	4013      	ands	r3, r2
 8001f66:	d107      	bne.n	8001f78 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2104      	movs	r1, #4
 8001f74:	438a      	bics	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7c:	221c      	movs	r2, #28
 8001f7e:	401a      	ands	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	2104      	movs	r1, #4
 8001f86:	4091      	lsls	r1, r2
 8001f88:	000a      	movs	r2, r1
 8001f8a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d100      	bne.n	8001f96 <HAL_DMA_IRQHandler+0x6e>
 8001f94:	e071      	b.n	800207a <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	0010      	movs	r0, r2
 8001f9e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001fa0:	e06b      	b.n	800207a <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	221c      	movs	r2, #28
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2202      	movs	r2, #2
 8001fac:	409a      	lsls	r2, r3
 8001fae:	0013      	movs	r3, r2
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d02d      	beq.n	8002012 <HAL_DMA_IRQHandler+0xea>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d029      	beq.n	8002012 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d10b      	bne.n	8001fe2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	210a      	movs	r1, #10
 8001fd6:	438a      	bics	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2225      	movs	r2, #37	; 0x25
 8001fde:	2101      	movs	r1, #1
 8001fe0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	221c      	movs	r2, #28
 8001fe8:	401a      	ands	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	2102      	movs	r1, #2
 8001ff0:	4091      	lsls	r1, r2
 8001ff2:	000a      	movs	r2, r1
 8001ff4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2224      	movs	r2, #36	; 0x24
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	2b00      	cmp	r3, #0
 8002004:	d039      	beq.n	800207a <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	0010      	movs	r0, r2
 800200e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002010:	e033      	b.n	800207a <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	221c      	movs	r2, #28
 8002018:	4013      	ands	r3, r2
 800201a:	2208      	movs	r2, #8
 800201c:	409a      	lsls	r2, r3
 800201e:	0013      	movs	r3, r2
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4013      	ands	r3, r2
 8002024:	d02a      	beq.n	800207c <HAL_DMA_IRQHandler+0x154>
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2208      	movs	r2, #8
 800202a:	4013      	ands	r3, r2
 800202c:	d026      	beq.n	800207c <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	210e      	movs	r1, #14
 800203a:	438a      	bics	r2, r1
 800203c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	221c      	movs	r2, #28
 8002044:	401a      	ands	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	2101      	movs	r1, #1
 800204c:	4091      	lsls	r1, r2
 800204e:	000a      	movs	r2, r1
 8002050:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2225      	movs	r2, #37	; 0x25
 800205c:	2101      	movs	r1, #1
 800205e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2224      	movs	r2, #36	; 0x24
 8002064:	2100      	movs	r1, #0
 8002066:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	0010      	movs	r0, r2
 8002078:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	46c0      	nop			; (mov r8, r8)
}
 800207e:	46bd      	mov	sp, r7
 8002080:	b004      	add	sp, #16
 8002082:	bd80      	pop	{r7, pc}

08002084 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	221c      	movs	r2, #28
 8002098:	401a      	ands	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	2101      	movs	r1, #1
 80020a0:	4091      	lsls	r1, r2
 80020a2:	000a      	movs	r2, r1
 80020a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	d108      	bne.n	80020c8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020c6:	e007      	b.n	80020d8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	60da      	str	r2, [r3, #12]
}
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	b004      	add	sp, #16
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80020f6:	e14f      	b.n	8002398 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2101      	movs	r1, #1
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4091      	lsls	r1, r2
 8002102:	000a      	movs	r2, r1
 8002104:	4013      	ands	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d100      	bne.n	8002110 <HAL_GPIO_Init+0x30>
 800210e:	e140      	b.n	8002392 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2203      	movs	r2, #3
 8002116:	4013      	ands	r3, r2
 8002118:	2b01      	cmp	r3, #1
 800211a:	d005      	beq.n	8002128 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2203      	movs	r2, #3
 8002122:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002124:	2b02      	cmp	r3, #2
 8002126:	d130      	bne.n	800218a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	409a      	lsls	r2, r3
 8002136:	0013      	movs	r3, r2
 8002138:	43da      	mvns	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	409a      	lsls	r2, r3
 800214a:	0013      	movs	r3, r2
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800215e:	2201      	movs	r2, #1
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	409a      	lsls	r2, r3
 8002164:	0013      	movs	r3, r2
 8002166:	43da      	mvns	r2, r3
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4013      	ands	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	2201      	movs	r2, #1
 8002176:	401a      	ands	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	409a      	lsls	r2, r3
 800217c:	0013      	movs	r3, r2
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2203      	movs	r2, #3
 8002190:	4013      	ands	r3, r2
 8002192:	2b03      	cmp	r3, #3
 8002194:	d017      	beq.n	80021c6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	2203      	movs	r2, #3
 80021a2:	409a      	lsls	r2, r3
 80021a4:	0013      	movs	r3, r2
 80021a6:	43da      	mvns	r2, r3
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	409a      	lsls	r2, r3
 80021b8:	0013      	movs	r3, r2
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2203      	movs	r2, #3
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d123      	bne.n	800221a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	08da      	lsrs	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3208      	adds	r2, #8
 80021da:	0092      	lsls	r2, r2, #2
 80021dc:	58d3      	ldr	r3, [r2, r3]
 80021de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2207      	movs	r2, #7
 80021e4:	4013      	ands	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	220f      	movs	r2, #15
 80021ea:	409a      	lsls	r2, r3
 80021ec:	0013      	movs	r3, r2
 80021ee:	43da      	mvns	r2, r3
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4013      	ands	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2107      	movs	r1, #7
 80021fe:	400b      	ands	r3, r1
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	409a      	lsls	r2, r3
 8002204:	0013      	movs	r3, r2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	08da      	lsrs	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3208      	adds	r2, #8
 8002214:	0092      	lsls	r2, r2, #2
 8002216:	6939      	ldr	r1, [r7, #16]
 8002218:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	2203      	movs	r2, #3
 8002226:	409a      	lsls	r2, r3
 8002228:	0013      	movs	r3, r2
 800222a:	43da      	mvns	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2203      	movs	r2, #3
 8002238:	401a      	ands	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	409a      	lsls	r2, r3
 8002240:	0013      	movs	r3, r2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	23c0      	movs	r3, #192	; 0xc0
 8002254:	029b      	lsls	r3, r3, #10
 8002256:	4013      	ands	r3, r2
 8002258:	d100      	bne.n	800225c <HAL_GPIO_Init+0x17c>
 800225a:	e09a      	b.n	8002392 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225c:	4b54      	ldr	r3, [pc, #336]	; (80023b0 <HAL_GPIO_Init+0x2d0>)
 800225e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002260:	4b53      	ldr	r3, [pc, #332]	; (80023b0 <HAL_GPIO_Init+0x2d0>)
 8002262:	2101      	movs	r1, #1
 8002264:	430a      	orrs	r2, r1
 8002266:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002268:	4a52      	ldr	r2, [pc, #328]	; (80023b4 <HAL_GPIO_Init+0x2d4>)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	089b      	lsrs	r3, r3, #2
 800226e:	3302      	adds	r3, #2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	589b      	ldr	r3, [r3, r2]
 8002274:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2203      	movs	r2, #3
 800227a:	4013      	ands	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	220f      	movs	r2, #15
 8002280:	409a      	lsls	r2, r3
 8002282:	0013      	movs	r3, r2
 8002284:	43da      	mvns	r2, r3
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	23a0      	movs	r3, #160	; 0xa0
 8002290:	05db      	lsls	r3, r3, #23
 8002292:	429a      	cmp	r2, r3
 8002294:	d019      	beq.n	80022ca <HAL_GPIO_Init+0x1ea>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a47      	ldr	r2, [pc, #284]	; (80023b8 <HAL_GPIO_Init+0x2d8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <HAL_GPIO_Init+0x1e6>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a46      	ldr	r2, [pc, #280]	; (80023bc <HAL_GPIO_Init+0x2dc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00d      	beq.n	80022c2 <HAL_GPIO_Init+0x1e2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a45      	ldr	r2, [pc, #276]	; (80023c0 <HAL_GPIO_Init+0x2e0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d007      	beq.n	80022be <HAL_GPIO_Init+0x1de>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a44      	ldr	r2, [pc, #272]	; (80023c4 <HAL_GPIO_Init+0x2e4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_GPIO_Init+0x1da>
 80022b6:	2305      	movs	r3, #5
 80022b8:	e008      	b.n	80022cc <HAL_GPIO_Init+0x1ec>
 80022ba:	2306      	movs	r3, #6
 80022bc:	e006      	b.n	80022cc <HAL_GPIO_Init+0x1ec>
 80022be:	2303      	movs	r3, #3
 80022c0:	e004      	b.n	80022cc <HAL_GPIO_Init+0x1ec>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e002      	b.n	80022cc <HAL_GPIO_Init+0x1ec>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_GPIO_Init+0x1ec>
 80022ca:	2300      	movs	r3, #0
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	2103      	movs	r1, #3
 80022d0:	400a      	ands	r2, r1
 80022d2:	0092      	lsls	r2, r2, #2
 80022d4:	4093      	lsls	r3, r2
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022dc:	4935      	ldr	r1, [pc, #212]	; (80023b4 <HAL_GPIO_Init+0x2d4>)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	089b      	lsrs	r3, r3, #2
 80022e2:	3302      	adds	r3, #2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ea:	4b37      	ldr	r3, [pc, #220]	; (80023c8 <HAL_GPIO_Init+0x2e8>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	43da      	mvns	r2, r3
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	035b      	lsls	r3, r3, #13
 8002302:	4013      	ands	r3, r2
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800230e:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <HAL_GPIO_Init+0x2e8>)
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002314:	4b2c      	ldr	r3, [pc, #176]	; (80023c8 <HAL_GPIO_Init+0x2e8>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	43da      	mvns	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	2380      	movs	r3, #128	; 0x80
 800232a:	039b      	lsls	r3, r3, #14
 800232c:	4013      	ands	r3, r2
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002338:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <HAL_GPIO_Init+0x2e8>)
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800233e:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <HAL_GPIO_Init+0x2e8>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	43da      	mvns	r2, r3
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	2380      	movs	r3, #128	; 0x80
 8002354:	029b      	lsls	r3, r3, #10
 8002356:	4013      	ands	r3, r2
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002362:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_GPIO_Init+0x2e8>)
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002368:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <HAL_GPIO_Init+0x2e8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	43da      	mvns	r2, r3
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	025b      	lsls	r3, r3, #9
 8002380:	4013      	ands	r3, r2
 8002382:	d003      	beq.n	800238c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800238c:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <HAL_GPIO_Init+0x2e8>)
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	3301      	adds	r3, #1
 8002396:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	40da      	lsrs	r2, r3
 80023a0:	1e13      	subs	r3, r2, #0
 80023a2:	d000      	beq.n	80023a6 <HAL_GPIO_Init+0x2c6>
 80023a4:	e6a8      	b.n	80020f8 <HAL_GPIO_Init+0x18>
  }
}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b006      	add	sp, #24
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40010000 	.word	0x40010000
 80023b8:	50000400 	.word	0x50000400
 80023bc:	50000800 	.word	0x50000800
 80023c0:	50000c00 	.word	0x50000c00
 80023c4:	50001c00 	.word	0x50001c00
 80023c8:	40010400 	.word	0x40010400

080023cc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	0008      	movs	r0, r1
 80023d6:	0011      	movs	r1, r2
 80023d8:	1cbb      	adds	r3, r7, #2
 80023da:	1c02      	adds	r2, r0, #0
 80023dc:	801a      	strh	r2, [r3, #0]
 80023de:	1c7b      	adds	r3, r7, #1
 80023e0:	1c0a      	adds	r2, r1, #0
 80023e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023e4:	1c7b      	adds	r3, r7, #1
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d004      	beq.n	80023f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ec:	1cbb      	adds	r3, r7, #2
 80023ee:	881a      	ldrh	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80023f4:	e003      	b.n	80023fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80023f6:	1cbb      	adds	r3, r7, #2
 80023f8:	881a      	ldrh	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	46bd      	mov	sp, r7
 8002402:	b002      	add	sp, #8
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	000a      	movs	r2, r1
 8002412:	1cfb      	adds	r3, r7, #3
 8002414:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800241a:	4b25      	ldr	r3, [pc, #148]	; (80024b0 <HAL_PWR_EnterSTOPMode+0xa8>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8002426:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <HAL_PWR_EnterSTOPMode+0xac>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	2201      	movs	r2, #1
 800242c:	4013      	ands	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <HAL_PWR_EnterSTOPMode+0x40>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 800243c:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <HAL_PWR_EnterSTOPMode+0xa8>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002442:	491d      	ldr	r1, [pc, #116]	; (80024b8 <HAL_PWR_EnterSTOPMode+0xb0>)
 8002444:	400a      	ands	r2, r1
 8002446:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8002448:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_PWR_EnterSTOPMode+0xa8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2203      	movs	r2, #3
 8002452:	4393      	bics	r3, r2
 8002454:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002464:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_PWR_EnterSTOPMode+0xb4>)
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	4b14      	ldr	r3, [pc, #80]	; (80024bc <HAL_PWR_EnterSTOPMode+0xb4>)
 800246a:	2104      	movs	r1, #4
 800246c:	430a      	orrs	r2, r1
 800246e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002470:	1cfb      	adds	r3, r7, #3
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002478:	bf30      	wfi
 800247a:	e002      	b.n	8002482 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800247c:	bf40      	sev
    __WFE();
 800247e:	bf20      	wfe
    __WFE();
 8002480:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_PWR_EnterSTOPMode+0xb4>)
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <HAL_PWR_EnterSTOPMode+0xb4>)
 8002488:	2104      	movs	r1, #4
 800248a:	438a      	bics	r2, r1
 800248c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d009      	beq.n	80024a8 <HAL_PWR_EnterSTOPMode+0xa0>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d006      	beq.n	80024a8 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800249a:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_PWR_EnterSTOPMode+0xa8>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <HAL_PWR_EnterSTOPMode+0xa8>)
 80024a0:	2180      	movs	r1, #128	; 0x80
 80024a2:	0089      	lsls	r1, r1, #2
 80024a4:	430a      	orrs	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]
  }
}
 80024a8:	46c0      	nop			; (mov r8, r8)
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b006      	add	sp, #24
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40007000 	.word	0x40007000
 80024b4:	40010000 	.word	0x40010000
 80024b8:	fffffdff 	.word	0xfffffdff
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c0:	b5b0      	push	{r4, r5, r7, lr}
 80024c2:	b08a      	sub	sp, #40	; 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d102      	bne.n	80024d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	f000 fb5a 	bl	8002b88 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d4:	4bce      	ldr	r3, [pc, #824]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	220c      	movs	r2, #12
 80024da:	4013      	ands	r3, r2
 80024dc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024de:	4bcc      	ldr	r3, [pc, #816]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	025b      	lsls	r3, r3, #9
 80024e6:	4013      	ands	r3, r2
 80024e8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2201      	movs	r2, #1
 80024f0:	4013      	ands	r3, r2
 80024f2:	d100      	bne.n	80024f6 <HAL_RCC_OscConfig+0x36>
 80024f4:	e07c      	b.n	80025f0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d007      	beq.n	800250c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	d111      	bne.n	8002526 <HAL_RCC_OscConfig+0x66>
 8002502:	69fa      	ldr	r2, [r7, #28]
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	025b      	lsls	r3, r3, #9
 8002508:	429a      	cmp	r2, r3
 800250a:	d10c      	bne.n	8002526 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250c:	4bc0      	ldr	r3, [pc, #768]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	029b      	lsls	r3, r3, #10
 8002514:	4013      	ands	r3, r2
 8002516:	d100      	bne.n	800251a <HAL_RCC_OscConfig+0x5a>
 8002518:	e069      	b.n	80025ee <HAL_RCC_OscConfig+0x12e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d165      	bne.n	80025ee <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e330      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	025b      	lsls	r3, r3, #9
 800252e:	429a      	cmp	r2, r3
 8002530:	d107      	bne.n	8002542 <HAL_RCC_OscConfig+0x82>
 8002532:	4bb7      	ldr	r3, [pc, #732]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4bb6      	ldr	r3, [pc, #728]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 8002538:	2180      	movs	r1, #128	; 0x80
 800253a:	0249      	lsls	r1, r1, #9
 800253c:	430a      	orrs	r2, r1
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e027      	b.n	8002592 <HAL_RCC_OscConfig+0xd2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	23a0      	movs	r3, #160	; 0xa0
 8002548:	02db      	lsls	r3, r3, #11
 800254a:	429a      	cmp	r2, r3
 800254c:	d10e      	bne.n	800256c <HAL_RCC_OscConfig+0xac>
 800254e:	4bb0      	ldr	r3, [pc, #704]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4baf      	ldr	r3, [pc, #700]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 8002554:	2180      	movs	r1, #128	; 0x80
 8002556:	02c9      	lsls	r1, r1, #11
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	4bac      	ldr	r3, [pc, #688]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4bab      	ldr	r3, [pc, #684]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 8002562:	2180      	movs	r1, #128	; 0x80
 8002564:	0249      	lsls	r1, r1, #9
 8002566:	430a      	orrs	r2, r1
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	e012      	b.n	8002592 <HAL_RCC_OscConfig+0xd2>
 800256c:	4ba8      	ldr	r3, [pc, #672]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4ba7      	ldr	r3, [pc, #668]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 8002572:	49a8      	ldr	r1, [pc, #672]	; (8002814 <HAL_RCC_OscConfig+0x354>)
 8002574:	400a      	ands	r2, r1
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	4ba5      	ldr	r3, [pc, #660]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	025b      	lsls	r3, r3, #9
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4ba2      	ldr	r3, [pc, #648]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	4ba1      	ldr	r3, [pc, #644]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 800258c:	49a2      	ldr	r1, [pc, #648]	; (8002818 <HAL_RCC_OscConfig+0x358>)
 800258e:	400a      	ands	r2, r1
 8002590:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d014      	beq.n	80025c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7fe ff2f 	bl	80013fc <HAL_GetTick>
 800259e:	0003      	movs	r3, r0
 80025a0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a4:	f7fe ff2a 	bl	80013fc <HAL_GetTick>
 80025a8:	0002      	movs	r2, r0
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e2e8      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025b6:	4b96      	ldr	r3, [pc, #600]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	2380      	movs	r3, #128	; 0x80
 80025bc:	029b      	lsls	r3, r3, #10
 80025be:	4013      	ands	r3, r2
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0xe4>
 80025c2:	e015      	b.n	80025f0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7fe ff1a 	bl	80013fc <HAL_GetTick>
 80025c8:	0003      	movs	r3, r0
 80025ca:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ce:	f7fe ff15 	bl	80013fc <HAL_GetTick>
 80025d2:	0002      	movs	r2, r0
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b64      	cmp	r3, #100	; 0x64
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e2d3      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025e0:	4b8b      	ldr	r3, [pc, #556]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2380      	movs	r3, #128	; 0x80
 80025e6:	029b      	lsls	r3, r3, #10
 80025e8:	4013      	ands	r3, r2
 80025ea:	d1f0      	bne.n	80025ce <HAL_RCC_OscConfig+0x10e>
 80025ec:	e000      	b.n	80025f0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2202      	movs	r2, #2
 80025f6:	4013      	ands	r3, r2
 80025f8:	d100      	bne.n	80025fc <HAL_RCC_OscConfig+0x13c>
 80025fa:	e08b      	b.n	8002714 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	2b04      	cmp	r3, #4
 8002606:	d005      	beq.n	8002614 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	2b0c      	cmp	r3, #12
 800260c:	d13e      	bne.n	800268c <HAL_RCC_OscConfig+0x1cc>
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d13b      	bne.n	800268c <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002614:	4b7e      	ldr	r3, [pc, #504]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2204      	movs	r2, #4
 800261a:	4013      	ands	r3, r2
 800261c:	d004      	beq.n	8002628 <HAL_RCC_OscConfig+0x168>
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e2af      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002628:	4b79      	ldr	r3, [pc, #484]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a7b      	ldr	r2, [pc, #492]	; (800281c <HAL_RCC_OscConfig+0x35c>)
 800262e:	4013      	ands	r3, r2
 8002630:	0019      	movs	r1, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	021a      	lsls	r2, r3, #8
 8002638:	4b75      	ldr	r3, [pc, #468]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 800263a:	430a      	orrs	r2, r1
 800263c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800263e:	4b74      	ldr	r3, [pc, #464]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2209      	movs	r2, #9
 8002644:	4393      	bics	r3, r2
 8002646:	0019      	movs	r1, r3
 8002648:	4b71      	ldr	r3, [pc, #452]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	430a      	orrs	r2, r1
 800264e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002650:	f000 fbe8 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8002654:	0001      	movs	r1, r0
 8002656:	4b6e      	ldr	r3, [pc, #440]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	220f      	movs	r2, #15
 800265e:	4013      	ands	r3, r2
 8002660:	4a6f      	ldr	r2, [pc, #444]	; (8002820 <HAL_RCC_OscConfig+0x360>)
 8002662:	5cd3      	ldrb	r3, [r2, r3]
 8002664:	000a      	movs	r2, r1
 8002666:	40da      	lsrs	r2, r3
 8002668:	4b6e      	ldr	r3, [pc, #440]	; (8002824 <HAL_RCC_OscConfig+0x364>)
 800266a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800266c:	4b6e      	ldr	r3, [pc, #440]	; (8002828 <HAL_RCC_OscConfig+0x368>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2513      	movs	r5, #19
 8002672:	197c      	adds	r4, r7, r5
 8002674:	0018      	movs	r0, r3
 8002676:	f7fe fe7b 	bl	8001370 <HAL_InitTick>
 800267a:	0003      	movs	r3, r0
 800267c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800267e:	197b      	adds	r3, r7, r5
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d046      	beq.n	8002714 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8002686:	197b      	adds	r3, r7, r5
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	e27d      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d027      	beq.n	80026e2 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002692:	4b5f      	ldr	r3, [pc, #380]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2209      	movs	r2, #9
 8002698:	4393      	bics	r3, r2
 800269a:	0019      	movs	r1, r3
 800269c:	4b5c      	ldr	r3, [pc, #368]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe feaa 	bl	80013fc <HAL_GetTick>
 80026a8:	0003      	movs	r3, r0
 80026aa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ae:	f7fe fea5 	bl	80013fc <HAL_GetTick>
 80026b2:	0002      	movs	r2, r0
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e263      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026c0:	4b53      	ldr	r3, [pc, #332]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2204      	movs	r2, #4
 80026c6:	4013      	ands	r3, r2
 80026c8:	d0f1      	beq.n	80026ae <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ca:	4b51      	ldr	r3, [pc, #324]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4a53      	ldr	r2, [pc, #332]	; (800281c <HAL_RCC_OscConfig+0x35c>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	0019      	movs	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	021a      	lsls	r2, r3, #8
 80026da:	4b4d      	ldr	r3, [pc, #308]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 80026dc:	430a      	orrs	r2, r1
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	e018      	b.n	8002714 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e2:	4b4b      	ldr	r3, [pc, #300]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4b4a      	ldr	r3, [pc, #296]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 80026e8:	2101      	movs	r1, #1
 80026ea:	438a      	bics	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ee:	f7fe fe85 	bl	80013fc <HAL_GetTick>
 80026f2:	0003      	movs	r3, r0
 80026f4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f8:	f7fe fe80 	bl	80013fc <HAL_GetTick>
 80026fc:	0002      	movs	r2, r0
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e23e      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800270a:	4b41      	ldr	r3, [pc, #260]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2204      	movs	r2, #4
 8002710:	4013      	ands	r3, r2
 8002712:	d1f1      	bne.n	80026f8 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2210      	movs	r2, #16
 800271a:	4013      	ands	r3, r2
 800271c:	d100      	bne.n	8002720 <HAL_RCC_OscConfig+0x260>
 800271e:	e0a1      	b.n	8002864 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d140      	bne.n	80027a8 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002726:	4b3a      	ldr	r3, [pc, #232]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	2380      	movs	r3, #128	; 0x80
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4013      	ands	r3, r2
 8002730:	d005      	beq.n	800273e <HAL_RCC_OscConfig+0x27e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e224      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800273e:	4b34      	ldr	r3, [pc, #208]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4a3a      	ldr	r2, [pc, #232]	; (800282c <HAL_RCC_OscConfig+0x36c>)
 8002744:	4013      	ands	r3, r2
 8002746:	0019      	movs	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1a      	ldr	r2, [r3, #32]
 800274c:	4b30      	ldr	r3, [pc, #192]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 800274e:	430a      	orrs	r2, r1
 8002750:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002752:	4b2f      	ldr	r3, [pc, #188]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	0a19      	lsrs	r1, r3, #8
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	061a      	lsls	r2, r3, #24
 8002760:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	0b5b      	lsrs	r3, r3, #13
 800276c:	3301      	adds	r3, #1
 800276e:	2280      	movs	r2, #128	; 0x80
 8002770:	0212      	lsls	r2, r2, #8
 8002772:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002774:	4b26      	ldr	r3, [pc, #152]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	210f      	movs	r1, #15
 800277c:	400b      	ands	r3, r1
 800277e:	4928      	ldr	r1, [pc, #160]	; (8002820 <HAL_RCC_OscConfig+0x360>)
 8002780:	5ccb      	ldrb	r3, [r1, r3]
 8002782:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002784:	4b27      	ldr	r3, [pc, #156]	; (8002824 <HAL_RCC_OscConfig+0x364>)
 8002786:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002788:	4b27      	ldr	r3, [pc, #156]	; (8002828 <HAL_RCC_OscConfig+0x368>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2513      	movs	r5, #19
 800278e:	197c      	adds	r4, r7, r5
 8002790:	0018      	movs	r0, r3
 8002792:	f7fe fded 	bl	8001370 <HAL_InitTick>
 8002796:	0003      	movs	r3, r0
 8002798:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800279a:	197b      	adds	r3, r7, r5
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d060      	beq.n	8002864 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 80027a2:	197b      	adds	r3, r7, r5
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	e1ef      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d03f      	beq.n	8002830 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027b0:	4b17      	ldr	r3, [pc, #92]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b16      	ldr	r3, [pc, #88]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 80027b6:	2180      	movs	r1, #128	; 0x80
 80027b8:	0049      	lsls	r1, r1, #1
 80027ba:	430a      	orrs	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7fe fe1d 	bl	80013fc <HAL_GetTick>
 80027c2:	0003      	movs	r3, r0
 80027c4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027c8:	f7fe fe18 	bl	80013fc <HAL_GetTick>
 80027cc:	0002      	movs	r2, r0
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e1d6      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027da:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4013      	ands	r3, r2
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4a10      	ldr	r2, [pc, #64]	; (800282c <HAL_RCC_OscConfig+0x36c>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	0019      	movs	r1, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1a      	ldr	r2, [r3, #32]
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027fa:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	0a19      	lsrs	r1, r3, #8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	061a      	lsls	r2, r3, #24
 8002808:	4b01      	ldr	r3, [pc, #4]	; (8002810 <HAL_RCC_OscConfig+0x350>)
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	e029      	b.n	8002864 <HAL_RCC_OscConfig+0x3a4>
 8002810:	40021000 	.word	0x40021000
 8002814:	fffeffff 	.word	0xfffeffff
 8002818:	fffbffff 	.word	0xfffbffff
 800281c:	ffffe0ff 	.word	0xffffe0ff
 8002820:	0800505c 	.word	0x0800505c
 8002824:	20000000 	.word	0x20000000
 8002828:	20000004 	.word	0x20000004
 800282c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002830:	4bbe      	ldr	r3, [pc, #760]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4bbd      	ldr	r3, [pc, #756]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002836:	49be      	ldr	r1, [pc, #760]	; (8002b30 <HAL_RCC_OscConfig+0x670>)
 8002838:	400a      	ands	r2, r1
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe fdde 	bl	80013fc <HAL_GetTick>
 8002840:	0003      	movs	r3, r0
 8002842:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002846:	f7fe fdd9 	bl	80013fc <HAL_GetTick>
 800284a:	0002      	movs	r2, r0
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e197      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002858:	4bb4      	ldr	r3, [pc, #720]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4013      	ands	r3, r2
 8002862:	d1f0      	bne.n	8002846 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2208      	movs	r2, #8
 800286a:	4013      	ands	r3, r2
 800286c:	d036      	beq.n	80028dc <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d019      	beq.n	80028aa <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002876:	4bad      	ldr	r3, [pc, #692]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002878:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800287a:	4bac      	ldr	r3, [pc, #688]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 800287c:	2101      	movs	r1, #1
 800287e:	430a      	orrs	r2, r1
 8002880:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7fe fdbb 	bl	80013fc <HAL_GetTick>
 8002886:	0003      	movs	r3, r0
 8002888:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800288c:	f7fe fdb6 	bl	80013fc <HAL_GetTick>
 8002890:	0002      	movs	r2, r0
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e174      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800289e:	4ba3      	ldr	r3, [pc, #652]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 80028a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a2:	2202      	movs	r2, #2
 80028a4:	4013      	ands	r3, r2
 80028a6:	d0f1      	beq.n	800288c <HAL_RCC_OscConfig+0x3cc>
 80028a8:	e018      	b.n	80028dc <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028aa:	4ba0      	ldr	r3, [pc, #640]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 80028ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028ae:	4b9f      	ldr	r3, [pc, #636]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 80028b0:	2101      	movs	r1, #1
 80028b2:	438a      	bics	r2, r1
 80028b4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b6:	f7fe fda1 	bl	80013fc <HAL_GetTick>
 80028ba:	0003      	movs	r3, r0
 80028bc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c0:	f7fe fd9c 	bl	80013fc <HAL_GetTick>
 80028c4:	0002      	movs	r2, r0
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e15a      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028d2:	4b96      	ldr	r3, [pc, #600]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 80028d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d6:	2202      	movs	r2, #2
 80028d8:	4013      	ands	r3, r2
 80028da:	d1f1      	bne.n	80028c0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2204      	movs	r2, #4
 80028e2:	4013      	ands	r3, r2
 80028e4:	d100      	bne.n	80028e8 <HAL_RCC_OscConfig+0x428>
 80028e6:	e0ae      	b.n	8002a46 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e8:	2027      	movs	r0, #39	; 0x27
 80028ea:	183b      	adds	r3, r7, r0
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f0:	4b8e      	ldr	r3, [pc, #568]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 80028f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	055b      	lsls	r3, r3, #21
 80028f8:	4013      	ands	r3, r2
 80028fa:	d109      	bne.n	8002910 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fc:	4b8b      	ldr	r3, [pc, #556]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 80028fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002900:	4b8a      	ldr	r3, [pc, #552]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002902:	2180      	movs	r1, #128	; 0x80
 8002904:	0549      	lsls	r1, r1, #21
 8002906:	430a      	orrs	r2, r1
 8002908:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800290a:	183b      	adds	r3, r7, r0
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002910:	4b88      	ldr	r3, [pc, #544]	; (8002b34 <HAL_RCC_OscConfig+0x674>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4013      	ands	r3, r2
 800291a:	d11a      	bne.n	8002952 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800291c:	4b85      	ldr	r3, [pc, #532]	; (8002b34 <HAL_RCC_OscConfig+0x674>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b84      	ldr	r3, [pc, #528]	; (8002b34 <HAL_RCC_OscConfig+0x674>)
 8002922:	2180      	movs	r1, #128	; 0x80
 8002924:	0049      	lsls	r1, r1, #1
 8002926:	430a      	orrs	r2, r1
 8002928:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292a:	f7fe fd67 	bl	80013fc <HAL_GetTick>
 800292e:	0003      	movs	r3, r0
 8002930:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002934:	f7fe fd62 	bl	80013fc <HAL_GetTick>
 8002938:	0002      	movs	r2, r0
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e120      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002946:	4b7b      	ldr	r3, [pc, #492]	; (8002b34 <HAL_RCC_OscConfig+0x674>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4013      	ands	r3, r2
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	2380      	movs	r3, #128	; 0x80
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	429a      	cmp	r2, r3
 800295c:	d107      	bne.n	800296e <HAL_RCC_OscConfig+0x4ae>
 800295e:	4b73      	ldr	r3, [pc, #460]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002960:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002964:	2180      	movs	r1, #128	; 0x80
 8002966:	0049      	lsls	r1, r1, #1
 8002968:	430a      	orrs	r2, r1
 800296a:	651a      	str	r2, [r3, #80]	; 0x50
 800296c:	e031      	b.n	80029d2 <HAL_RCC_OscConfig+0x512>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x4d0>
 8002976:	4b6d      	ldr	r3, [pc, #436]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002978:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800297a:	4b6c      	ldr	r3, [pc, #432]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 800297c:	496c      	ldr	r1, [pc, #432]	; (8002b30 <HAL_RCC_OscConfig+0x670>)
 800297e:	400a      	ands	r2, r1
 8002980:	651a      	str	r2, [r3, #80]	; 0x50
 8002982:	4b6a      	ldr	r3, [pc, #424]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002984:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002986:	4b69      	ldr	r3, [pc, #420]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002988:	496b      	ldr	r1, [pc, #428]	; (8002b38 <HAL_RCC_OscConfig+0x678>)
 800298a:	400a      	ands	r2, r1
 800298c:	651a      	str	r2, [r3, #80]	; 0x50
 800298e:	e020      	b.n	80029d2 <HAL_RCC_OscConfig+0x512>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	23a0      	movs	r3, #160	; 0xa0
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	429a      	cmp	r2, r3
 800299a:	d10e      	bne.n	80029ba <HAL_RCC_OscConfig+0x4fa>
 800299c:	4b63      	ldr	r3, [pc, #396]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 800299e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029a0:	4b62      	ldr	r3, [pc, #392]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 80029a2:	2180      	movs	r1, #128	; 0x80
 80029a4:	00c9      	lsls	r1, r1, #3
 80029a6:	430a      	orrs	r2, r1
 80029a8:	651a      	str	r2, [r3, #80]	; 0x50
 80029aa:	4b60      	ldr	r3, [pc, #384]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 80029ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029ae:	4b5f      	ldr	r3, [pc, #380]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 80029b0:	2180      	movs	r1, #128	; 0x80
 80029b2:	0049      	lsls	r1, r1, #1
 80029b4:	430a      	orrs	r2, r1
 80029b6:	651a      	str	r2, [r3, #80]	; 0x50
 80029b8:	e00b      	b.n	80029d2 <HAL_RCC_OscConfig+0x512>
 80029ba:	4b5c      	ldr	r3, [pc, #368]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 80029bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029be:	4b5b      	ldr	r3, [pc, #364]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 80029c0:	495b      	ldr	r1, [pc, #364]	; (8002b30 <HAL_RCC_OscConfig+0x670>)
 80029c2:	400a      	ands	r2, r1
 80029c4:	651a      	str	r2, [r3, #80]	; 0x50
 80029c6:	4b59      	ldr	r3, [pc, #356]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 80029c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029ca:	4b58      	ldr	r3, [pc, #352]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 80029cc:	495a      	ldr	r1, [pc, #360]	; (8002b38 <HAL_RCC_OscConfig+0x678>)
 80029ce:	400a      	ands	r2, r1
 80029d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d015      	beq.n	8002a06 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029da:	f7fe fd0f 	bl	80013fc <HAL_GetTick>
 80029de:	0003      	movs	r3, r0
 80029e0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029e2:	e009      	b.n	80029f8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e4:	f7fe fd0a 	bl	80013fc <HAL_GetTick>
 80029e8:	0002      	movs	r2, r0
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	4a53      	ldr	r2, [pc, #332]	; (8002b3c <HAL_RCC_OscConfig+0x67c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e0c7      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029f8:	4b4c      	ldr	r3, [pc, #304]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 80029fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029fc:	2380      	movs	r3, #128	; 0x80
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4013      	ands	r3, r2
 8002a02:	d0ef      	beq.n	80029e4 <HAL_RCC_OscConfig+0x524>
 8002a04:	e014      	b.n	8002a30 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a06:	f7fe fcf9 	bl	80013fc <HAL_GetTick>
 8002a0a:	0003      	movs	r3, r0
 8002a0c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a0e:	e009      	b.n	8002a24 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a10:	f7fe fcf4 	bl	80013fc <HAL_GetTick>
 8002a14:	0002      	movs	r2, r0
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	4a48      	ldr	r2, [pc, #288]	; (8002b3c <HAL_RCC_OscConfig+0x67c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e0b1      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a24:	4b41      	ldr	r3, [pc, #260]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002a26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d1ef      	bne.n	8002a10 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a30:	2327      	movs	r3, #39	; 0x27
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d105      	bne.n	8002a46 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3a:	4b3c      	ldr	r3, [pc, #240]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a3e:	4b3b      	ldr	r3, [pc, #236]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002a40:	493f      	ldr	r1, [pc, #252]	; (8002b40 <HAL_RCC_OscConfig+0x680>)
 8002a42:	400a      	ands	r2, r1
 8002a44:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d100      	bne.n	8002a50 <HAL_RCC_OscConfig+0x590>
 8002a4e:	e09a      	b.n	8002b86 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	2b0c      	cmp	r3, #12
 8002a54:	d064      	beq.n	8002b20 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d145      	bne.n	8002aea <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5e:	4b33      	ldr	r3, [pc, #204]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	4b32      	ldr	r3, [pc, #200]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002a64:	4937      	ldr	r1, [pc, #220]	; (8002b44 <HAL_RCC_OscConfig+0x684>)
 8002a66:	400a      	ands	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fcc7 	bl	80013fc <HAL_GetTick>
 8002a6e:	0003      	movs	r3, r0
 8002a70:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a74:	f7fe fcc2 	bl	80013fc <HAL_GetTick>
 8002a78:	0002      	movs	r2, r0
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e080      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a86:	4b29      	ldr	r3, [pc, #164]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	049b      	lsls	r3, r3, #18
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a92:	4b26      	ldr	r3, [pc, #152]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	4a2c      	ldr	r2, [pc, #176]	; (8002b48 <HAL_RCC_OscConfig+0x688>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	0019      	movs	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	4b1f      	ldr	r3, [pc, #124]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab2:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002ab8:	2180      	movs	r1, #128	; 0x80
 8002aba:	0449      	lsls	r1, r1, #17
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fc9c 	bl	80013fc <HAL_GetTick>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aca:	f7fe fc97 	bl	80013fc <HAL_GetTick>
 8002ace:	0002      	movs	r2, r0
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e055      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	049b      	lsls	r3, r3, #18
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x60a>
 8002ae8:	e04d      	b.n	8002b86 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002af0:	4914      	ldr	r1, [pc, #80]	; (8002b44 <HAL_RCC_OscConfig+0x684>)
 8002af2:	400a      	ands	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af6:	f7fe fc81 	bl	80013fc <HAL_GetTick>
 8002afa:	0003      	movs	r3, r0
 8002afc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe fc7c 	bl	80013fc <HAL_GetTick>
 8002b04:	0002      	movs	r2, r0
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e03a      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_RCC_OscConfig+0x66c>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	049b      	lsls	r3, r3, #18
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x640>
 8002b1e:	e032      	b.n	8002b86 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d111      	bne.n	8002b4c <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e02d      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	fffffeff 	.word	0xfffffeff
 8002b34:	40007000 	.word	0x40007000
 8002b38:	fffffbff 	.word	0xfffffbff
 8002b3c:	00001388 	.word	0x00001388
 8002b40:	efffffff 	.word	0xefffffff
 8002b44:	feffffff 	.word	0xfeffffff
 8002b48:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b4c:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <HAL_RCC_OscConfig+0x6d0>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	025b      	lsls	r3, r3, #9
 8002b58:	401a      	ands	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d10f      	bne.n	8002b82 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	23f0      	movs	r3, #240	; 0xf0
 8002b66:	039b      	lsls	r3, r3, #14
 8002b68:	401a      	ands	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d107      	bne.n	8002b82 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	23c0      	movs	r3, #192	; 0xc0
 8002b76:	041b      	lsls	r3, r3, #16
 8002b78:	401a      	ands	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d001      	beq.n	8002b86 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	0018      	movs	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b00a      	add	sp, #40	; 0x28
 8002b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b90:	40021000 	.word	0x40021000

08002b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b94:	b5b0      	push	{r4, r5, r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e128      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b96      	ldr	r3, [pc, #600]	; (8002e04 <HAL_RCC_ClockConfig+0x270>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2201      	movs	r2, #1
 8002bae:	4013      	ands	r3, r2
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d91e      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b93      	ldr	r3, [pc, #588]	; (8002e04 <HAL_RCC_ClockConfig+0x270>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	4393      	bics	r3, r2
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	4b90      	ldr	r3, [pc, #576]	; (8002e04 <HAL_RCC_ClockConfig+0x270>)
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bc8:	f7fe fc18 	bl	80013fc <HAL_GetTick>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd0:	e009      	b.n	8002be6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd2:	f7fe fc13 	bl	80013fc <HAL_GetTick>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	4a8a      	ldr	r2, [pc, #552]	; (8002e08 <HAL_RCC_ClockConfig+0x274>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e109      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b87      	ldr	r3, [pc, #540]	; (8002e04 <HAL_RCC_ClockConfig+0x270>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2201      	movs	r2, #1
 8002bec:	4013      	ands	r3, r2
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d1ee      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d009      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bfe:	4b83      	ldr	r3, [pc, #524]	; (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	22f0      	movs	r2, #240	; 0xf0
 8002c04:	4393      	bics	r3, r2
 8002c06:	0019      	movs	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	4b7f      	ldr	r3, [pc, #508]	; (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2201      	movs	r2, #1
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d100      	bne.n	8002c1e <HAL_RCC_ClockConfig+0x8a>
 8002c1c:	e089      	b.n	8002d32 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d107      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c26:	4b79      	ldr	r3, [pc, #484]	; (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	029b      	lsls	r3, r3, #10
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d120      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e0e1      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c3e:	4b73      	ldr	r3, [pc, #460]	; (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	049b      	lsls	r3, r3, #18
 8002c46:	4013      	ands	r3, r2
 8002c48:	d114      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0d5      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d106      	bne.n	8002c64 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c56:	4b6d      	ldr	r3, [pc, #436]	; (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d109      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0ca      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c64:	4b69      	ldr	r3, [pc, #420]	; (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0c2      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c74:	4b65      	ldr	r3, [pc, #404]	; (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2203      	movs	r2, #3
 8002c7a:	4393      	bics	r3, r2
 8002c7c:	0019      	movs	r1, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	4b62      	ldr	r3, [pc, #392]	; (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002c84:	430a      	orrs	r2, r1
 8002c86:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c88:	f7fe fbb8 	bl	80013fc <HAL_GetTick>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d111      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c98:	e009      	b.n	8002cae <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c9a:	f7fe fbaf 	bl	80013fc <HAL_GetTick>
 8002c9e:	0002      	movs	r2, r0
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	4a58      	ldr	r2, [pc, #352]	; (8002e08 <HAL_RCC_ClockConfig+0x274>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e0a5      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cae:	4b57      	ldr	r3, [pc, #348]	; (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	220c      	movs	r2, #12
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d1ef      	bne.n	8002c9a <HAL_RCC_ClockConfig+0x106>
 8002cba:	e03a      	b.n	8002d32 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d111      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cc4:	e009      	b.n	8002cda <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc6:	f7fe fb99 	bl	80013fc <HAL_GetTick>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	4a4d      	ldr	r2, [pc, #308]	; (8002e08 <HAL_RCC_ClockConfig+0x274>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e08f      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cda:	4b4c      	ldr	r3, [pc, #304]	; (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	220c      	movs	r2, #12
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	d1ef      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0x132>
 8002ce6:	e024      	b.n	8002d32 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d11b      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cf0:	e009      	b.n	8002d06 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf2:	f7fe fb83 	bl	80013fc <HAL_GetTick>
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	4a42      	ldr	r2, [pc, #264]	; (8002e08 <HAL_RCC_ClockConfig+0x274>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e079      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d06:	4b41      	ldr	r3, [pc, #260]	; (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	220c      	movs	r2, #12
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d1ef      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0x15e>
 8002d12:	e00e      	b.n	8002d32 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d14:	f7fe fb72 	bl	80013fc <HAL_GetTick>
 8002d18:	0002      	movs	r2, r0
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	4a3a      	ldr	r2, [pc, #232]	; (8002e08 <HAL_RCC_ClockConfig+0x274>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e068      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d28:	4b38      	ldr	r3, [pc, #224]	; (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	220c      	movs	r2, #12
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d32:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <HAL_RCC_ClockConfig+0x270>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2201      	movs	r2, #1
 8002d38:	4013      	ands	r3, r2
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d21e      	bcs.n	8002d7e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d40:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <HAL_RCC_ClockConfig+0x270>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2201      	movs	r2, #1
 8002d46:	4393      	bics	r3, r2
 8002d48:	0019      	movs	r1, r3
 8002d4a:	4b2e      	ldr	r3, [pc, #184]	; (8002e04 <HAL_RCC_ClockConfig+0x270>)
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d52:	f7fe fb53 	bl	80013fc <HAL_GetTick>
 8002d56:	0003      	movs	r3, r0
 8002d58:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	e009      	b.n	8002d70 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5c:	f7fe fb4e 	bl	80013fc <HAL_GetTick>
 8002d60:	0002      	movs	r2, r0
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	4a28      	ldr	r2, [pc, #160]	; (8002e08 <HAL_RCC_ClockConfig+0x274>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e044      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d70:	4b24      	ldr	r3, [pc, #144]	; (8002e04 <HAL_RCC_ClockConfig+0x270>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2201      	movs	r2, #1
 8002d76:	4013      	ands	r3, r2
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d1ee      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2204      	movs	r2, #4
 8002d84:	4013      	ands	r3, r2
 8002d86:	d009      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d88:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a20      	ldr	r2, [pc, #128]	; (8002e10 <HAL_RCC_ClockConfig+0x27c>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	0019      	movs	r1, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2208      	movs	r2, #8
 8002da2:	4013      	ands	r3, r2
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002da6:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	4a1a      	ldr	r2, [pc, #104]	; (8002e14 <HAL_RCC_ClockConfig+0x280>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	0019      	movs	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	00da      	lsls	r2, r3, #3
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002db8:	430a      	orrs	r2, r1
 8002dba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dbc:	f000 f832 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8002dc0:	0001      	movs	r1, r0
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	220f      	movs	r2, #15
 8002dca:	4013      	ands	r3, r2
 8002dcc:	4a12      	ldr	r2, [pc, #72]	; (8002e18 <HAL_RCC_ClockConfig+0x284>)
 8002dce:	5cd3      	ldrb	r3, [r2, r3]
 8002dd0:	000a      	movs	r2, r1
 8002dd2:	40da      	lsrs	r2, r3
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <HAL_RCC_ClockConfig+0x288>)
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dd8:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <HAL_RCC_ClockConfig+0x28c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	250b      	movs	r5, #11
 8002dde:	197c      	adds	r4, r7, r5
 8002de0:	0018      	movs	r0, r3
 8002de2:	f7fe fac5 	bl	8001370 <HAL_InitTick>
 8002de6:	0003      	movs	r3, r0
 8002de8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002dea:	197b      	adds	r3, r7, r5
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002df2:	197b      	adds	r3, r7, r5
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	e000      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b004      	add	sp, #16
 8002e00:	bdb0      	pop	{r4, r5, r7, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	40022000 	.word	0x40022000
 8002e08:	00001388 	.word	0x00001388
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	fffff8ff 	.word	0xfffff8ff
 8002e14:	ffffc7ff 	.word	0xffffc7ff
 8002e18:	0800505c 	.word	0x0800505c
 8002e1c:	20000000 	.word	0x20000000
 8002e20:	20000004 	.word	0x20000004

08002e24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e24:	b5b0      	push	{r4, r5, r7, lr}
 8002e26:	b08e      	sub	sp, #56	; 0x38
 8002e28:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002e2a:	4b4c      	ldr	r3, [pc, #304]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x138>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e32:	230c      	movs	r3, #12
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	d014      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x40>
 8002e3a:	d900      	bls.n	8002e3e <HAL_RCC_GetSysClockFreq+0x1a>
 8002e3c:	e07b      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x112>
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d002      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x24>
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d00b      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e46:	e076      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002e48:	4b44      	ldr	r3, [pc, #272]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x138>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d002      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002e52:	4b43      	ldr	r3, [pc, #268]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002e54:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002e56:	e07c      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002e58:	4b42      	ldr	r3, [pc, #264]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x140>)
 8002e5a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e5c:	e079      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e5e:	4b42      	ldr	r3, [pc, #264]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x144>)
 8002e60:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e62:	e076      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e66:	0c9a      	lsrs	r2, r3, #18
 8002e68:	230f      	movs	r3, #15
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x148>)
 8002e6e:	5c9b      	ldrb	r3, [r3, r2]
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e74:	0d9a      	lsrs	r2, r3, #22
 8002e76:	2303      	movs	r3, #3
 8002e78:	4013      	ands	r3, r2
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e7e:	4b37      	ldr	r3, [pc, #220]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x138>)
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	025b      	lsls	r3, r3, #9
 8002e86:	4013      	ands	r3, r2
 8002e88:	d01a      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8c:	61bb      	str	r3, [r7, #24]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	4a35      	ldr	r2, [pc, #212]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x144>)
 8002e94:	2300      	movs	r3, #0
 8002e96:	69b8      	ldr	r0, [r7, #24]
 8002e98:	69f9      	ldr	r1, [r7, #28]
 8002e9a:	f7fd f9e9 	bl	8000270 <__aeabi_lmul>
 8002e9e:	0002      	movs	r2, r0
 8002ea0:	000b      	movs	r3, r1
 8002ea2:	0010      	movs	r0, r2
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f7fd f9bd 	bl	8000230 <__aeabi_uldivmod>
 8002eb6:	0002      	movs	r2, r0
 8002eb8:	000b      	movs	r3, r1
 8002eba:	0013      	movs	r3, r2
 8002ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ebe:	e037      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002ec0:	4b26      	ldr	r3, [pc, #152]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x138>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d01a      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	4a23      	ldr	r2, [pc, #140]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	68b8      	ldr	r0, [r7, #8]
 8002ed8:	68f9      	ldr	r1, [r7, #12]
 8002eda:	f7fd f9c9 	bl	8000270 <__aeabi_lmul>
 8002ede:	0002      	movs	r2, r0
 8002ee0:	000b      	movs	r3, r1
 8002ee2:	0010      	movs	r0, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	603b      	str	r3, [r7, #0]
 8002eea:	2300      	movs	r3, #0
 8002eec:	607b      	str	r3, [r7, #4]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f7fd f99d 	bl	8000230 <__aeabi_uldivmod>
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	000b      	movs	r3, r1
 8002efa:	0013      	movs	r3, r2
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
 8002efe:	e017      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	0018      	movs	r0, r3
 8002f04:	2300      	movs	r3, #0
 8002f06:	0019      	movs	r1, r3
 8002f08:	4a16      	ldr	r2, [pc, #88]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x140>)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f7fd f9b0 	bl	8000270 <__aeabi_lmul>
 8002f10:	0002      	movs	r2, r0
 8002f12:	000b      	movs	r3, r1
 8002f14:	0010      	movs	r0, r2
 8002f16:	0019      	movs	r1, r3
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	001c      	movs	r4, r3
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	001d      	movs	r5, r3
 8002f20:	0022      	movs	r2, r4
 8002f22:	002b      	movs	r3, r5
 8002f24:	f7fd f984 	bl	8000230 <__aeabi_uldivmod>
 8002f28:	0002      	movs	r2, r0
 8002f2a:	000b      	movs	r3, r1
 8002f2c:	0013      	movs	r3, r2
 8002f2e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f34:	e00d      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x138>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	0b5b      	lsrs	r3, r3, #13
 8002f3c:	2207      	movs	r2, #7
 8002f3e:	4013      	ands	r3, r2
 8002f40:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	3301      	adds	r3, #1
 8002f46:	2280      	movs	r2, #128	; 0x80
 8002f48:	0212      	lsls	r2, r2, #8
 8002f4a:	409a      	lsls	r2, r3
 8002f4c:	0013      	movs	r3, r2
 8002f4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f50:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b00e      	add	sp, #56	; 0x38
 8002f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	003d0900 	.word	0x003d0900
 8002f64:	00f42400 	.word	0x00f42400
 8002f68:	007a1200 	.word	0x007a1200
 8002f6c:	08005074 	.word	0x08005074

08002f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f74:	4b02      	ldr	r3, [pc, #8]	; (8002f80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	0018      	movs	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	20000000 	.word	0x20000000

08002f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f88:	f7ff fff2 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002f8c:	0001      	movs	r1, r0
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	0a1b      	lsrs	r3, r3, #8
 8002f94:	2207      	movs	r2, #7
 8002f96:	4013      	ands	r3, r2
 8002f98:	4a04      	ldr	r2, [pc, #16]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f9a:	5cd3      	ldrb	r3, [r2, r3]
 8002f9c:	40d9      	lsrs	r1, r3
 8002f9e:	000b      	movs	r3, r1
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	0800506c 	.word	0x0800506c

08002fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fb4:	f7ff ffdc 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002fb8:	0001      	movs	r1, r0
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	0adb      	lsrs	r3, r3, #11
 8002fc0:	2207      	movs	r2, #7
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	40d9      	lsrs	r1, r3
 8002fca:	000b      	movs	r3, r1
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	0800506c 	.word	0x0800506c

08002fdc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002fe4:	2017      	movs	r0, #23
 8002fe6:	183b      	adds	r3, r7, r0
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d100      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002ff6:	e0c7      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff8:	4b8b      	ldr	r3, [pc, #556]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	055b      	lsls	r3, r3, #21
 8003000:	4013      	ands	r3, r2
 8003002:	d109      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003004:	4b88      	ldr	r3, [pc, #544]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003008:	4b87      	ldr	r3, [pc, #540]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800300a:	2180      	movs	r1, #128	; 0x80
 800300c:	0549      	lsls	r1, r1, #21
 800300e:	430a      	orrs	r2, r1
 8003010:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003012:	183b      	adds	r3, r7, r0
 8003014:	2201      	movs	r2, #1
 8003016:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003018:	4b84      	ldr	r3, [pc, #528]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	2380      	movs	r3, #128	; 0x80
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4013      	ands	r3, r2
 8003022:	d11a      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003024:	4b81      	ldr	r3, [pc, #516]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4b80      	ldr	r3, [pc, #512]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800302a:	2180      	movs	r1, #128	; 0x80
 800302c:	0049      	lsls	r1, r1, #1
 800302e:	430a      	orrs	r2, r1
 8003030:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003032:	f7fe f9e3 	bl	80013fc <HAL_GetTick>
 8003036:	0003      	movs	r3, r0
 8003038:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303a:	e008      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303c:	f7fe f9de 	bl	80013fc <HAL_GetTick>
 8003040:	0002      	movs	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	; 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e0e8      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304e:	4b77      	ldr	r3, [pc, #476]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	4013      	ands	r3, r2
 8003058:	d0f0      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800305a:	4b73      	ldr	r3, [pc, #460]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	23c0      	movs	r3, #192	; 0xc0
 8003060:	039b      	lsls	r3, r3, #14
 8003062:	4013      	ands	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	23c0      	movs	r3, #192	; 0xc0
 800306c:	039b      	lsls	r3, r3, #14
 800306e:	4013      	ands	r3, r2
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	429a      	cmp	r2, r3
 8003074:	d013      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	23c0      	movs	r3, #192	; 0xc0
 800307c:	029b      	lsls	r3, r3, #10
 800307e:	401a      	ands	r2, r3
 8003080:	23c0      	movs	r3, #192	; 0xc0
 8003082:	029b      	lsls	r3, r3, #10
 8003084:	429a      	cmp	r2, r3
 8003086:	d10a      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003088:	4b67      	ldr	r3, [pc, #412]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	029b      	lsls	r3, r3, #10
 8003090:	401a      	ands	r2, r3
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	029b      	lsls	r3, r3, #10
 8003096:	429a      	cmp	r2, r3
 8003098:	d101      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e0c0      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800309e:	4b62      	ldr	r3, [pc, #392]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030a2:	23c0      	movs	r3, #192	; 0xc0
 80030a4:	029b      	lsls	r3, r3, #10
 80030a6:	4013      	ands	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d03b      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	23c0      	movs	r3, #192	; 0xc0
 80030b6:	029b      	lsls	r3, r3, #10
 80030b8:	4013      	ands	r3, r2
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d033      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2220      	movs	r2, #32
 80030c6:	4013      	ands	r3, r2
 80030c8:	d02e      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80030ca:	4b57      	ldr	r3, [pc, #348]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ce:	4a58      	ldr	r2, [pc, #352]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030d4:	4b54      	ldr	r3, [pc, #336]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030d8:	4b53      	ldr	r3, [pc, #332]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030da:	2180      	movs	r1, #128	; 0x80
 80030dc:	0309      	lsls	r1, r1, #12
 80030de:	430a      	orrs	r2, r1
 80030e0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030e2:	4b51      	ldr	r3, [pc, #324]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030e6:	4b50      	ldr	r3, [pc, #320]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030e8:	4952      	ldr	r1, [pc, #328]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030ea:	400a      	ands	r2, r1
 80030ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80030ee:	4b4e      	ldr	r3, [pc, #312]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4013      	ands	r3, r2
 80030fc:	d014      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fe f97d 	bl	80013fc <HAL_GetTick>
 8003102:	0003      	movs	r3, r0
 8003104:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003106:	e009      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003108:	f7fe f978 	bl	80013fc <HAL_GetTick>
 800310c:	0002      	movs	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	4a49      	ldr	r2, [pc, #292]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e081      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800311c:	4b42      	ldr	r3, [pc, #264]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800311e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4013      	ands	r3, r2
 8003126:	d0ef      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2220      	movs	r2, #32
 800312e:	4013      	ands	r3, r2
 8003130:	d01f      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	23c0      	movs	r3, #192	; 0xc0
 8003138:	029b      	lsls	r3, r3, #10
 800313a:	401a      	ands	r2, r3
 800313c:	23c0      	movs	r3, #192	; 0xc0
 800313e:	029b      	lsls	r3, r3, #10
 8003140:	429a      	cmp	r2, r3
 8003142:	d10c      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003144:	4b38      	ldr	r3, [pc, #224]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a3c      	ldr	r2, [pc, #240]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314a:	4013      	ands	r3, r2
 800314c:	0019      	movs	r1, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	23c0      	movs	r3, #192	; 0xc0
 8003154:	039b      	lsls	r3, r3, #14
 8003156:	401a      	ands	r2, r3
 8003158:	4b33      	ldr	r3, [pc, #204]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800315a:	430a      	orrs	r2, r1
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	4b32      	ldr	r3, [pc, #200]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003160:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	23c0      	movs	r3, #192	; 0xc0
 8003168:	029b      	lsls	r3, r3, #10
 800316a:	401a      	ands	r2, r3
 800316c:	4b2e      	ldr	r3, [pc, #184]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800316e:	430a      	orrs	r2, r1
 8003170:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003172:	2317      	movs	r3, #23
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d105      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317c:	4b2a      	ldr	r3, [pc, #168]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800317e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003180:	4b29      	ldr	r3, [pc, #164]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003182:	492f      	ldr	r1, [pc, #188]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003184:	400a      	ands	r2, r1
 8003186:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2201      	movs	r2, #1
 800318e:	4013      	ands	r3, r2
 8003190:	d009      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003192:	4b25      	ldr	r3, [pc, #148]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003196:	2203      	movs	r2, #3
 8003198:	4393      	bics	r3, r2
 800319a:	0019      	movs	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	4b21      	ldr	r3, [pc, #132]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031a2:	430a      	orrs	r2, r1
 80031a4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2202      	movs	r2, #2
 80031ac:	4013      	ands	r3, r2
 80031ae:	d009      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031b0:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b4:	220c      	movs	r2, #12
 80031b6:	4393      	bics	r3, r2
 80031b8:	0019      	movs	r1, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	4b1a      	ldr	r3, [pc, #104]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031c0:	430a      	orrs	r2, r1
 80031c2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2204      	movs	r2, #4
 80031ca:	4013      	ands	r3, r2
 80031cc:	d009      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031ce:	4b16      	ldr	r3, [pc, #88]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d2:	4a1c      	ldr	r2, [pc, #112]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	0019      	movs	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031de:	430a      	orrs	r2, r1
 80031e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2208      	movs	r2, #8
 80031e8:	4013      	ands	r3, r2
 80031ea:	d009      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ec:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f0:	4a15      	ldr	r2, [pc, #84]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031f2:	4013      	ands	r3, r2
 80031f4:	0019      	movs	r1, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031fc:	430a      	orrs	r2, r1
 80031fe:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	4013      	ands	r3, r2
 8003208:	d009      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800320a:	4b07      	ldr	r3, [pc, #28]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800320c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320e:	4a0f      	ldr	r2, [pc, #60]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003210:	4013      	ands	r3, r2
 8003212:	0019      	movs	r1, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699a      	ldr	r2, [r3, #24]
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800321a:	430a      	orrs	r2, r1
 800321c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	0018      	movs	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	b006      	add	sp, #24
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40021000 	.word	0x40021000
 800322c:	40007000 	.word	0x40007000
 8003230:	fffcffff 	.word	0xfffcffff
 8003234:	fff7ffff 	.word	0xfff7ffff
 8003238:	00001388 	.word	0x00001388
 800323c:	ffcfffff 	.word	0xffcfffff
 8003240:	efffffff 	.word	0xefffffff
 8003244:	fffff3ff 	.word	0xfffff3ff
 8003248:	ffffcfff 	.word	0xffffcfff
 800324c:	fff3ffff 	.word	0xfff3ffff

08003250 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003250:	b5b0      	push	{r4, r5, r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003258:	230f      	movs	r3, #15
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e088      	b.n	800337c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2221      	movs	r2, #33	; 0x21
 800326e:	5c9b      	ldrb	r3, [r3, r2]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d107      	bne.n	8003286 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	2100      	movs	r1, #0
 800327c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	0018      	movs	r0, r3
 8003282:	f7fd ff4d 	bl	8001120 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2221      	movs	r2, #33	; 0x21
 800328a:	2102      	movs	r1, #2
 800328c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2210      	movs	r2, #16
 8003296:	4013      	ands	r3, r2
 8003298:	2b10      	cmp	r3, #16
 800329a:	d05f      	beq.n	800335c <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	22ca      	movs	r2, #202	; 0xca
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2253      	movs	r2, #83	; 0x53
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80032ac:	250f      	movs	r5, #15
 80032ae:	197c      	adds	r4, r7, r5
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 f890 	bl	80033d8 <RTC_EnterInitMode>
 80032b8:	0003      	movs	r3, r0
 80032ba:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80032bc:	0028      	movs	r0, r5
 80032be:	183b      	adds	r3, r7, r0
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d12c      	bne.n	8003320 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	492c      	ldr	r1, [pc, #176]	; (8003384 <HAL_RTC_Init+0x134>)
 80032d2:	400a      	ands	r2, r1
 80032d4:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6899      	ldr	r1, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	68d2      	ldr	r2, [r2, #12]
 80032fc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6919      	ldr	r1, [r3, #16]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	041a      	lsls	r2, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003312:	183c      	adds	r4, r7, r0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	0018      	movs	r0, r3
 8003318:	f000 f8a2 	bl	8003460 <RTC_ExitInitMode>
 800331c:	0003      	movs	r3, r0
 800331e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8003320:	230f      	movs	r3, #15
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d113      	bne.n	8003352 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2103      	movs	r1, #3
 8003336:	438a      	bics	r2, r1
 8003338:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69da      	ldr	r2, [r3, #28]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	22ff      	movs	r2, #255	; 0xff
 8003358:	625a      	str	r2, [r3, #36]	; 0x24
 800335a:	e003      	b.n	8003364 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800335c:	230f      	movs	r3, #15
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8003364:	230f      	movs	r3, #15
 8003366:	18fb      	adds	r3, r7, r3
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d103      	bne.n	8003376 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2221      	movs	r2, #33	; 0x21
 8003372:	2101      	movs	r1, #1
 8003374:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003376:	230f      	movs	r3, #15
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	781b      	ldrb	r3, [r3, #0]
}
 800337c:	0018      	movs	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	b004      	add	sp, #16
 8003382:	bdb0      	pop	{r4, r5, r7, pc}
 8003384:	ff8fffbf 	.word	0xff8fffbf

08003388 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0e      	ldr	r2, [pc, #56]	; (80033d4 <HAL_RTC_WaitForSynchro+0x4c>)
 800339a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800339c:	f7fe f82e 	bl	80013fc <HAL_GetTick>
 80033a0:	0003      	movs	r3, r0
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80033a4:	e00a      	b.n	80033bc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80033a6:	f7fe f829 	bl	80013fc <HAL_GetTick>
 80033aa:	0002      	movs	r2, r0
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1ad2      	subs	r2, r2, r3
 80033b0:	23fa      	movs	r3, #250	; 0xfa
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d901      	bls.n	80033bc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e006      	b.n	80033ca <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	4013      	ands	r3, r2
 80033c6:	d0ee      	beq.n	80033a6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	0018      	movs	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b004      	add	sp, #16
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	00017f5f 	.word	0x00017f5f

080033d8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80033e4:	230f      	movs	r3, #15
 80033e6:	18fb      	adds	r3, r7, r3
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2240      	movs	r2, #64	; 0x40
 80033f4:	4013      	ands	r3, r2
 80033f6:	d12c      	bne.n	8003452 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2180      	movs	r1, #128	; 0x80
 8003404:	430a      	orrs	r2, r1
 8003406:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003408:	f7fd fff8 	bl	80013fc <HAL_GetTick>
 800340c:	0003      	movs	r3, r0
 800340e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003410:	e014      	b.n	800343c <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003412:	f7fd fff3 	bl	80013fc <HAL_GetTick>
 8003416:	0002      	movs	r2, r0
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	1ad2      	subs	r2, r2, r3
 800341c:	200f      	movs	r0, #15
 800341e:	183b      	adds	r3, r7, r0
 8003420:	1839      	adds	r1, r7, r0
 8003422:	7809      	ldrb	r1, [r1, #0]
 8003424:	7019      	strb	r1, [r3, #0]
 8003426:	23fa      	movs	r3, #250	; 0xfa
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	429a      	cmp	r2, r3
 800342c:	d906      	bls.n	800343c <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2221      	movs	r2, #33	; 0x21
 8003432:	2104      	movs	r1, #4
 8003434:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8003436:	183b      	adds	r3, r7, r0
 8003438:	2201      	movs	r2, #1
 800343a:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	2240      	movs	r2, #64	; 0x40
 8003444:	4013      	ands	r3, r2
 8003446:	d104      	bne.n	8003452 <RTC_EnterInitMode+0x7a>
 8003448:	230f      	movs	r3, #15
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d1df      	bne.n	8003412 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8003452:	230f      	movs	r3, #15
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	781b      	ldrb	r3, [r3, #0]
}
 8003458:	0018      	movs	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	b004      	add	sp, #16
 800345e:	bd80      	pop	{r7, pc}

08003460 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003468:	240f      	movs	r4, #15
 800346a:	193b      	adds	r3, r7, r4
 800346c:	2200      	movs	r2, #0
 800346e:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2180      	movs	r1, #128	; 0x80
 800347c:	438a      	bics	r2, r1
 800347e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2220      	movs	r2, #32
 8003488:	4013      	ands	r3, r2
 800348a:	d10c      	bne.n	80034a6 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	0018      	movs	r0, r3
 8003490:	f7ff ff7a 	bl	8003388 <HAL_RTC_WaitForSynchro>
 8003494:	1e03      	subs	r3, r0, #0
 8003496:	d006      	beq.n	80034a6 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2221      	movs	r2, #33	; 0x21
 800349c:	2104      	movs	r1, #4
 800349e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80034a0:	193b      	adds	r3, r7, r4
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80034a6:	230f      	movs	r3, #15
 80034a8:	18fb      	adds	r3, r7, r3
 80034aa:	781b      	ldrb	r3, [r3, #0]
}
 80034ac:	0018      	movs	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b005      	add	sp, #20
 80034b2:	bd90      	pop	{r4, r7, pc}

080034b4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80034c0:	4b64      	ldr	r3, [pc, #400]	; (8003654 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	22fa      	movs	r2, #250	; 0xfa
 80034c6:	01d1      	lsls	r1, r2, #7
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7fc fe25 	bl	8000118 <__udivsi3>
 80034ce:	0003      	movs	r3, r0
 80034d0:	001a      	movs	r2, r3
 80034d2:	0013      	movs	r3, r2
 80034d4:	015b      	lsls	r3, r3, #5
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	189b      	adds	r3, r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	5c9b      	ldrb	r3, [r3, r2]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e0ad      	b.n	800364a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2220      	movs	r2, #32
 80034f2:	2101      	movs	r1, #1
 80034f4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2221      	movs	r2, #33	; 0x21
 80034fa:	2102      	movs	r1, #2
 80034fc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	22ca      	movs	r2, #202	; 0xca
 8003504:	625a      	str	r2, [r3, #36]	; 0x24
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2253      	movs	r2, #83	; 0x53
 800350c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4013      	ands	r3, r2
 800351a:	d019      	beq.n	8003550 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	3b01      	subs	r3, #1
 8003520:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10d      	bne.n	8003544 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	22ff      	movs	r2, #255	; 0xff
 800352e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2221      	movs	r2, #33	; 0x21
 8003534:	2103      	movs	r1, #3
 8003536:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2220      	movs	r2, #32
 800353c:	2100      	movs	r1, #0
 800353e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e082      	b.n	800364a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2204      	movs	r2, #4
 800354c:	4013      	ands	r3, r2
 800354e:	d1e5      	bne.n	800351c <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	493f      	ldr	r1, [pc, #252]	; (8003658 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 800355c:	400a      	ands	r2, r1
 800355e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	22ff      	movs	r2, #255	; 0xff
 8003568:	401a      	ands	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	493b      	ldr	r1, [pc, #236]	; (800365c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8003570:	430a      	orrs	r2, r1
 8003572:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003574:	4b37      	ldr	r3, [pc, #220]	; (8003654 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	22fa      	movs	r2, #250	; 0xfa
 800357a:	01d1      	lsls	r1, r2, #7
 800357c:	0018      	movs	r0, r3
 800357e:	f7fc fdcb 	bl	8000118 <__udivsi3>
 8003582:	0003      	movs	r3, r0
 8003584:	001a      	movs	r2, r3
 8003586:	0013      	movs	r3, r2
 8003588:	015b      	lsls	r3, r3, #5
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	189b      	adds	r3, r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	3b01      	subs	r3, #1
 8003598:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10d      	bne.n	80035bc <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	22ff      	movs	r2, #255	; 0xff
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2221      	movs	r2, #33	; 0x21
 80035ac:	2103      	movs	r1, #3
 80035ae:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	2100      	movs	r1, #0
 80035b6:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e046      	b.n	800364a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	2204      	movs	r2, #4
 80035c4:	4013      	ands	r3, r2
 80035c6:	d0e5      	beq.n	8003594 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2107      	movs	r1, #7
 80035d4:	438a      	bics	r2, r1
 80035d6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6899      	ldr	r1, [r3, #8]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80035f0:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80035f6:	2180      	movs	r1, #128	; 0x80
 80035f8:	0349      	lsls	r1, r1, #13
 80035fa:	430a      	orrs	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80035fe:	4b18      	ldr	r3, [pc, #96]	; (8003660 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	4b17      	ldr	r3, [pc, #92]	; (8003660 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003604:	2180      	movs	r1, #128	; 0x80
 8003606:	0349      	lsls	r1, r1, #13
 8003608:	430a      	orrs	r2, r1
 800360a:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2180      	movs	r1, #128	; 0x80
 8003618:	01c9      	lsls	r1, r1, #7
 800361a:	430a      	orrs	r2, r1
 800361c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2180      	movs	r1, #128	; 0x80
 800362a:	00c9      	lsls	r1, r1, #3
 800362c:	430a      	orrs	r2, r1
 800362e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	22ff      	movs	r2, #255	; 0xff
 8003636:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2221      	movs	r2, #33	; 0x21
 800363c:	2101      	movs	r1, #1
 800363e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	2100      	movs	r1, #0
 8003646:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	0018      	movs	r0, r3
 800364c:	46bd      	mov	sp, r7
 800364e:	b006      	add	sp, #24
 8003650:	bd80      	pop	{r7, pc}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	20000000 	.word	0x20000000
 8003658:	fffffbff 	.word	0xfffffbff
 800365c:	fffffb7f 	.word	0xfffffb7f
 8003660:	40010400 	.word	0x40010400

08003664 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	5c9b      	ldrb	r3, [r3, r2]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 800367a:	2302      	movs	r3, #2
 800367c:	e04e      	b.n	800371c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	2101      	movs	r1, #1
 8003684:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2221      	movs	r2, #33	; 0x21
 800368a:	2102      	movs	r1, #2
 800368c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	22ca      	movs	r2, #202	; 0xca
 8003694:	625a      	str	r2, [r3, #36]	; 0x24
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2253      	movs	r2, #83	; 0x53
 800369c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	491e      	ldr	r1, [pc, #120]	; (8003724 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 80036aa:	400a      	ands	r2, r1
 80036ac:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	491b      	ldr	r1, [pc, #108]	; (8003728 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 80036ba:	400a      	ands	r2, r1
 80036bc:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036be:	f7fd fe9d 	bl	80013fc <HAL_GetTick>
 80036c2:	0003      	movs	r3, r0
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80036c6:	e016      	b.n	80036f6 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036c8:	f7fd fe98 	bl	80013fc <HAL_GetTick>
 80036cc:	0002      	movs	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad2      	subs	r2, r2, r3
 80036d2:	23fa      	movs	r3, #250	; 0xfa
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d90d      	bls.n	80036f6 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	22ff      	movs	r2, #255	; 0xff
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2221      	movs	r2, #33	; 0x21
 80036e6:	2103      	movs	r1, #3
 80036e8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2220      	movs	r2, #32
 80036ee:	2100      	movs	r1, #0
 80036f0:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e012      	b.n	800371c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	2204      	movs	r2, #4
 80036fe:	4013      	ands	r3, r2
 8003700:	d0e2      	beq.n	80036c8 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	22ff      	movs	r2, #255	; 0xff
 8003708:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2221      	movs	r2, #33	; 0x21
 800370e:	2101      	movs	r1, #1
 8003710:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	2100      	movs	r1, #0
 8003718:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	0018      	movs	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	b004      	add	sp, #16
 8003722:	bd80      	pop	{r7, pc}
 8003724:	fffffbff 	.word	0xfffffbff
 8003728:	ffffbfff 	.word	0xffffbfff

0800372c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003734:	4b13      	ldr	r3, [pc, #76]	; (8003784 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	0352      	lsls	r2, r2, #13
 800373a:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	01db      	lsls	r3, r3, #7
 8003746:	4013      	ands	r3, r2
 8003748:	d014      	beq.n	8003774 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4013      	ands	r3, r2
 8003756:	d00d      	beq.n	8003774 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	22ff      	movs	r2, #255	; 0xff
 8003760:	401a      	ands	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4908      	ldr	r1, [pc, #32]	; (8003788 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8003768:	430a      	orrs	r2, r1
 800376a:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	0018      	movs	r0, r3
 8003770:	f000 f80c 	bl	800378c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2221      	movs	r2, #33	; 0x21
 8003778:	2101      	movs	r1, #1
 800377a:	5499      	strb	r1, [r3, r2]
}
 800377c:	46c0      	nop			; (mov r8, r8)
 800377e:	46bd      	mov	sp, r7
 8003780:	b002      	add	sp, #8
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40010400 	.word	0x40010400
 8003788:	fffffb7f 	.word	0xfffffb7f

0800378c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003794:	46c0      	nop			; (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	b002      	add	sp, #8
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e083      	b.n	80038b6 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	2382      	movs	r3, #130	; 0x82
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	429a      	cmp	r2, r3
 80037c0:	d009      	beq.n	80037d6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	61da      	str	r2, [r3, #28]
 80037c8:	e005      	b.n	80037d6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2251      	movs	r2, #81	; 0x51
 80037e0:	5c9b      	ldrb	r3, [r3, r2]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d107      	bne.n	80037f8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2250      	movs	r2, #80	; 0x50
 80037ec:	2100      	movs	r1, #0
 80037ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	0018      	movs	r0, r3
 80037f4:	f7fd fcb4 	bl	8001160 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2251      	movs	r2, #81	; 0x51
 80037fc:	2102      	movs	r1, #2
 80037fe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2140      	movs	r1, #64	; 0x40
 800380c:	438a      	bics	r2, r1
 800380e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	2382      	movs	r3, #130	; 0x82
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	401a      	ands	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6899      	ldr	r1, [r3, #8]
 800381e:	2384      	movs	r3, #132	; 0x84
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	400b      	ands	r3, r1
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68d9      	ldr	r1, [r3, #12]
 800382a:	2380      	movs	r3, #128	; 0x80
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	400b      	ands	r3, r1
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2102      	movs	r1, #2
 8003838:	400b      	ands	r3, r1
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	2101      	movs	r1, #1
 8003842:	400b      	ands	r3, r1
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6999      	ldr	r1, [r3, #24]
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	400b      	ands	r3, r1
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	2138      	movs	r1, #56	; 0x38
 8003858:	400b      	ands	r3, r1
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	2180      	movs	r1, #128	; 0x80
 8003862:	400b      	ands	r3, r1
 8003864:	431a      	orrs	r2, r3
 8003866:	0011      	movs	r1, r2
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	019b      	lsls	r3, r3, #6
 8003870:	401a      	ands	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	0c1b      	lsrs	r3, r3, #16
 8003880:	2204      	movs	r2, #4
 8003882:	4013      	ands	r3, r2
 8003884:	0019      	movs	r1, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	2210      	movs	r2, #16
 800388c:	401a      	ands	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4907      	ldr	r1, [pc, #28]	; (80038c0 <HAL_SPI_Init+0x124>)
 80038a2:	400a      	ands	r2, r1
 80038a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2251      	movs	r2, #81	; 0x51
 80038b0:	2101      	movs	r1, #1
 80038b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	0018      	movs	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b002      	add	sp, #8
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	fffff7ff 	.word	0xfffff7ff

080038c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	1dbb      	adds	r3, r7, #6
 80038d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038d4:	231f      	movs	r3, #31
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2250      	movs	r2, #80	; 0x50
 80038e0:	5c9b      	ldrb	r3, [r3, r2]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_SPI_Transmit+0x26>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e145      	b.n	8003b76 <HAL_SPI_Transmit+0x2b2>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2250      	movs	r2, #80	; 0x50
 80038ee:	2101      	movs	r1, #1
 80038f0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038f2:	f7fd fd83 	bl	80013fc <HAL_GetTick>
 80038f6:	0003      	movs	r3, r0
 80038f8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80038fa:	2316      	movs	r3, #22
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	1dba      	adds	r2, r7, #6
 8003900:	8812      	ldrh	r2, [r2, #0]
 8003902:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2251      	movs	r2, #81	; 0x51
 8003908:	5c9b      	ldrb	r3, [r3, r2]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	d004      	beq.n	800391a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003910:	231f      	movs	r3, #31
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	2202      	movs	r2, #2
 8003916:	701a      	strb	r2, [r3, #0]
    goto error;
 8003918:	e126      	b.n	8003b68 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_SPI_Transmit+0x64>
 8003920:	1dbb      	adds	r3, r7, #6
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003928:	231f      	movs	r3, #31
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	2201      	movs	r2, #1
 800392e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003930:	e11a      	b.n	8003b68 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2251      	movs	r2, #81	; 0x51
 8003936:	2103      	movs	r1, #3
 8003938:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1dba      	adds	r2, r7, #6
 800394a:	8812      	ldrh	r2, [r2, #0]
 800394c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1dba      	adds	r2, r7, #6
 8003952:	8812      	ldrh	r2, [r2, #0]
 8003954:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	429a      	cmp	r2, r3
 800397e:	d110      	bne.n	80039a2 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2140      	movs	r1, #64	; 0x40
 800398c:	438a      	bics	r2, r1
 800398e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2180      	movs	r1, #128	; 0x80
 800399c:	01c9      	lsls	r1, r1, #7
 800399e:	430a      	orrs	r2, r1
 80039a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2240      	movs	r2, #64	; 0x40
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b40      	cmp	r3, #64	; 0x40
 80039ae:	d007      	beq.n	80039c0 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2140      	movs	r1, #64	; 0x40
 80039bc:	430a      	orrs	r2, r1
 80039be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d152      	bne.n	8003a72 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d004      	beq.n	80039de <HAL_SPI_Transmit+0x11a>
 80039d4:	2316      	movs	r3, #22
 80039d6:	18fb      	adds	r3, r7, r3
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d143      	bne.n	8003a66 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	881a      	ldrh	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	1c9a      	adds	r2, r3, #2
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a02:	e030      	b.n	8003a66 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d112      	bne.n	8003a38 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	881a      	ldrh	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	1c9a      	adds	r2, r3, #2
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a36:	e016      	b.n	8003a66 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a38:	f7fd fce0 	bl	80013fc <HAL_GetTick>
 8003a3c:	0002      	movs	r2, r0
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d802      	bhi.n	8003a4e <HAL_SPI_Transmit+0x18a>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	d102      	bne.n	8003a54 <HAL_SPI_Transmit+0x190>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d108      	bne.n	8003a66 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8003a54:	231f      	movs	r3, #31
 8003a56:	18fb      	adds	r3, r7, r3
 8003a58:	2203      	movs	r2, #3
 8003a5a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2251      	movs	r2, #81	; 0x51
 8003a60:	2101      	movs	r1, #1
 8003a62:	5499      	strb	r1, [r3, r2]
          goto error;
 8003a64:	e080      	b.n	8003b68 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1c9      	bne.n	8003a04 <HAL_SPI_Transmit+0x140>
 8003a70:	e053      	b.n	8003b1a <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d004      	beq.n	8003a84 <HAL_SPI_Transmit+0x1c0>
 8003a7a:	2316      	movs	r3, #22
 8003a7c:	18fb      	adds	r3, r7, r3
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d145      	bne.n	8003b10 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	330c      	adds	r3, #12
 8003a8e:	7812      	ldrb	r2, [r2, #0]
 8003a90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003aaa:	e031      	b.n	8003b10 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d113      	bne.n	8003ae2 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	330c      	adds	r3, #12
 8003ac4:	7812      	ldrb	r2, [r2, #0]
 8003ac6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ae0:	e016      	b.n	8003b10 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ae2:	f7fd fc8b 	bl	80013fc <HAL_GetTick>
 8003ae6:	0002      	movs	r2, r0
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d802      	bhi.n	8003af8 <HAL_SPI_Transmit+0x234>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	3301      	adds	r3, #1
 8003af6:	d102      	bne.n	8003afe <HAL_SPI_Transmit+0x23a>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d108      	bne.n	8003b10 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8003afe:	231f      	movs	r3, #31
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	2203      	movs	r2, #3
 8003b04:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2251      	movs	r2, #81	; 0x51
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	5499      	strb	r1, [r3, r2]
          goto error;
 8003b0e:	e02b      	b.n	8003b68 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1c8      	bne.n	8003aac <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	6839      	ldr	r1, [r7, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	0018      	movs	r0, r3
 8003b22:	f000 fc1f 	bl	8004364 <SPI_EndRxTxTransaction>
 8003b26:	1e03      	subs	r3, r0, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10a      	bne.n	8003b4e <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d004      	beq.n	8003b60 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8003b56:	231f      	movs	r3, #31
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	701a      	strb	r2, [r3, #0]
 8003b5e:	e003      	b.n	8003b68 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2251      	movs	r2, #81	; 0x51
 8003b64:	2101      	movs	r1, #1
 8003b66:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2250      	movs	r2, #80	; 0x50
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003b70:	231f      	movs	r3, #31
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	781b      	ldrb	r3, [r3, #0]
}
 8003b76:	0018      	movs	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b008      	add	sp, #32
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b089      	sub	sp, #36	; 0x24
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	1dbb      	adds	r3, r7, #6
 8003b8e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b90:	2117      	movs	r1, #23
 8003b92:	187b      	adds	r3, r7, r1
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2251      	movs	r2, #81	; 0x51
 8003b9c:	5c9b      	ldrb	r3, [r3, r2]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d003      	beq.n	8003bac <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8003ba4:	187b      	adds	r3, r7, r1
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	701a      	strb	r2, [r3, #0]
    goto error;
 8003baa:	e109      	b.n	8003dc0 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	2382      	movs	r3, #130	; 0x82
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d113      	bne.n	8003be0 <HAL_SPI_Receive+0x60>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10f      	bne.n	8003be0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2251      	movs	r2, #81	; 0x51
 8003bc4:	2104      	movs	r1, #4
 8003bc6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003bc8:	1dbb      	adds	r3, r7, #6
 8003bca:	881c      	ldrh	r4, [r3, #0]
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	68b9      	ldr	r1, [r7, #8]
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	0023      	movs	r3, r4
 8003bd8:	f000 f900 	bl	8003ddc <HAL_SPI_TransmitReceive>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	e0f6      	b.n	8003dce <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2250      	movs	r2, #80	; 0x50
 8003be4:	5c9b      	ldrb	r3, [r3, r2]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_SPI_Receive+0x6e>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e0ef      	b.n	8003dce <HAL_SPI_Receive+0x24e>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2250      	movs	r2, #80	; 0x50
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bf6:	f7fd fc01 	bl	80013fc <HAL_GetTick>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_SPI_Receive+0x8c>
 8003c04:	1dbb      	adds	r3, r7, #6
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d104      	bne.n	8003c16 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8003c0c:	2317      	movs	r3, #23
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	2201      	movs	r2, #1
 8003c12:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c14:	e0d4      	b.n	8003dc0 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2251      	movs	r2, #81	; 0x51
 8003c1a:	2104      	movs	r1, #4
 8003c1c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1dba      	adds	r2, r7, #6
 8003c2e:	8812      	ldrh	r2, [r2, #0]
 8003c30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1dba      	adds	r2, r7, #6
 8003c36:	8812      	ldrh	r2, [r2, #0]
 8003c38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	2380      	movs	r3, #128	; 0x80
 8003c5e:	021b      	lsls	r3, r3, #8
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d10f      	bne.n	8003c84 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2140      	movs	r1, #64	; 0x40
 8003c70:	438a      	bics	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4956      	ldr	r1, [pc, #344]	; (8003dd8 <HAL_SPI_Receive+0x258>)
 8003c80:	400a      	ands	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2240      	movs	r2, #64	; 0x40
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b40      	cmp	r3, #64	; 0x40
 8003c90:	d007      	beq.n	8003ca2 <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2140      	movs	r1, #64	; 0x40
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d000      	beq.n	8003cac <HAL_SPI_Receive+0x12c>
 8003caa:	e06c      	b.n	8003d86 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003cac:	e033      	b.n	8003d16 <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d115      	bne.n	8003ce8 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	330c      	adds	r3, #12
 8003cc2:	001a      	movs	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	7812      	ldrb	r2, [r2, #0]
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ce6:	e016      	b.n	8003d16 <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ce8:	f7fd fb88 	bl	80013fc <HAL_GetTick>
 8003cec:	0002      	movs	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d802      	bhi.n	8003cfe <HAL_SPI_Receive+0x17e>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	d102      	bne.n	8003d04 <HAL_SPI_Receive+0x184>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d108      	bne.n	8003d16 <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8003d04:	2317      	movs	r3, #23
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	2203      	movs	r2, #3
 8003d0a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2251      	movs	r2, #81	; 0x51
 8003d10:	2101      	movs	r1, #1
 8003d12:	5499      	strb	r1, [r3, r2]
          goto error;
 8003d14:	e054      	b.n	8003dc0 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1c6      	bne.n	8003cae <HAL_SPI_Receive+0x12e>
 8003d20:	e036      	b.n	8003d90 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d113      	bne.n	8003d58 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3a:	b292      	uxth	r2, r2
 8003d3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d42:	1c9a      	adds	r2, r3, #2
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d56:	e016      	b.n	8003d86 <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d58:	f7fd fb50 	bl	80013fc <HAL_GetTick>
 8003d5c:	0002      	movs	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d802      	bhi.n	8003d6e <HAL_SPI_Receive+0x1ee>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	d102      	bne.n	8003d74 <HAL_SPI_Receive+0x1f4>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d108      	bne.n	8003d86 <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8003d74:	2317      	movs	r3, #23
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	2203      	movs	r2, #3
 8003d7a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2251      	movs	r2, #81	; 0x51
 8003d80:	2101      	movs	r1, #1
 8003d82:	5499      	strb	r1, [r3, r2]
          goto error;
 8003d84:	e01c      	b.n	8003dc0 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1c8      	bne.n	8003d22 <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	6839      	ldr	r1, [r7, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	0018      	movs	r0, r3
 8003d98:	f000 fa7a 	bl	8004290 <SPI_EndRxTransaction>
 8003d9c:	1e03      	subs	r3, r0, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d004      	beq.n	8003db8 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 8003dae:	2317      	movs	r3, #23
 8003db0:	18fb      	adds	r3, r7, r3
 8003db2:	2201      	movs	r2, #1
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	e003      	b.n	8003dc0 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2251      	movs	r2, #81	; 0x51
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2250      	movs	r2, #80	; 0x50
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003dc8:	2317      	movs	r3, #23
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	781b      	ldrb	r3, [r3, #0]
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b007      	add	sp, #28
 8003dd4:	bd90      	pop	{r4, r7, pc}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	ffffbfff 	.word	0xffffbfff

08003ddc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08c      	sub	sp, #48	; 0x30
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	001a      	movs	r2, r3
 8003dea:	1cbb      	adds	r3, r7, #2
 8003dec:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003dee:	2301      	movs	r3, #1
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003df2:	232b      	movs	r3, #43	; 0x2b
 8003df4:	18fb      	adds	r3, r7, r3
 8003df6:	2200      	movs	r2, #0
 8003df8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2250      	movs	r2, #80	; 0x50
 8003dfe:	5c9b      	ldrb	r3, [r3, r2]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_SPI_TransmitReceive+0x2c>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e1b0      	b.n	800416a <HAL_SPI_TransmitReceive+0x38e>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2250      	movs	r2, #80	; 0x50
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e10:	f7fd faf4 	bl	80013fc <HAL_GetTick>
 8003e14:	0003      	movs	r3, r0
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e18:	2023      	movs	r0, #35	; 0x23
 8003e1a:	183b      	adds	r3, r7, r0
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	2151      	movs	r1, #81	; 0x51
 8003e20:	5c52      	ldrb	r2, [r2, r1]
 8003e22:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e2a:	231a      	movs	r3, #26
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	1cba      	adds	r2, r7, #2
 8003e30:	8812      	ldrh	r2, [r2, #0]
 8003e32:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e34:	183b      	adds	r3, r7, r0
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d011      	beq.n	8003e60 <HAL_SPI_TransmitReceive+0x84>
 8003e3c:	69fa      	ldr	r2, [r7, #28]
 8003e3e:	2382      	movs	r3, #130	; 0x82
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d107      	bne.n	8003e56 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d103      	bne.n	8003e56 <HAL_SPI_TransmitReceive+0x7a>
 8003e4e:	183b      	adds	r3, r7, r0
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d004      	beq.n	8003e60 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003e56:	232b      	movs	r3, #43	; 0x2b
 8003e58:	18fb      	adds	r3, r7, r3
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e5e:	e17d      	b.n	800415c <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d006      	beq.n	8003e74 <HAL_SPI_TransmitReceive+0x98>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_SPI_TransmitReceive+0x98>
 8003e6c:	1cbb      	adds	r3, r7, #2
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d104      	bne.n	8003e7e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003e74:	232b      	movs	r3, #43	; 0x2b
 8003e76:	18fb      	adds	r3, r7, r3
 8003e78:	2201      	movs	r2, #1
 8003e7a:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e7c:	e16e      	b.n	800415c <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2251      	movs	r2, #81	; 0x51
 8003e82:	5c9b      	ldrb	r3, [r3, r2]
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d003      	beq.n	8003e92 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2251      	movs	r2, #81	; 0x51
 8003e8e:	2105      	movs	r1, #5
 8003e90:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1cba      	adds	r2, r7, #2
 8003ea2:	8812      	ldrh	r2, [r2, #0]
 8003ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1cba      	adds	r2, r7, #2
 8003eaa:	8812      	ldrh	r2, [r2, #0]
 8003eac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	1cba      	adds	r2, r7, #2
 8003eb8:	8812      	ldrh	r2, [r2, #0]
 8003eba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1cba      	adds	r2, r7, #2
 8003ec0:	8812      	ldrh	r2, [r2, #0]
 8003ec2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2240      	movs	r2, #64	; 0x40
 8003ed8:	4013      	ands	r3, r2
 8003eda:	2b40      	cmp	r3, #64	; 0x40
 8003edc:	d007      	beq.n	8003eee <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2140      	movs	r1, #64	; 0x40
 8003eea:	430a      	orrs	r2, r1
 8003eec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	2380      	movs	r3, #128	; 0x80
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d000      	beq.n	8003efc <HAL_SPI_TransmitReceive+0x120>
 8003efa:	e07f      	b.n	8003ffc <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_SPI_TransmitReceive+0x134>
 8003f04:	231a      	movs	r3, #26
 8003f06:	18fb      	adds	r3, r7, r3
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d000      	beq.n	8003f10 <HAL_SPI_TransmitReceive+0x134>
 8003f0e:	e06a      	b.n	8003fe6 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	881a      	ldrh	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	1c9a      	adds	r2, r3, #2
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f34:	e057      	b.n	8003fe6 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d11b      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x1a0>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d016      	beq.n	8003f7c <HAL_SPI_TransmitReceive+0x1a0>
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d113      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	881a      	ldrh	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	1c9a      	adds	r2, r3, #2
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2201      	movs	r2, #1
 8003f84:	4013      	ands	r3, r2
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d119      	bne.n	8003fbe <HAL_SPI_TransmitReceive+0x1e2>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d014      	beq.n	8003fbe <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	b292      	uxth	r2, r2
 8003fa0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	1c9a      	adds	r2, r3, #2
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fbe:	f7fd fa1d 	bl	80013fc <HAL_GetTick>
 8003fc2:	0002      	movs	r2, r0
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d80b      	bhi.n	8003fe6 <HAL_SPI_TransmitReceive+0x20a>
 8003fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	d008      	beq.n	8003fe6 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8003fd4:	232b      	movs	r3, #43	; 0x2b
 8003fd6:	18fb      	adds	r3, r7, r3
 8003fd8:	2203      	movs	r2, #3
 8003fda:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2251      	movs	r2, #81	; 0x51
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	5499      	strb	r1, [r3, r2]
        goto error;
 8003fe4:	e0ba      	b.n	800415c <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1a2      	bne.n	8003f36 <HAL_SPI_TransmitReceive+0x15a>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d19d      	bne.n	8003f36 <HAL_SPI_TransmitReceive+0x15a>
 8003ffa:	e083      	b.n	8004104 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_SPI_TransmitReceive+0x234>
 8004004:	231a      	movs	r3, #26
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d000      	beq.n	8004010 <HAL_SPI_TransmitReceive+0x234>
 800400e:	e06f      	b.n	80040f0 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	330c      	adds	r3, #12
 800401a:	7812      	ldrb	r2, [r2, #0]
 800401c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004036:	e05b      	b.n	80040f0 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2202      	movs	r2, #2
 8004040:	4013      	ands	r3, r2
 8004042:	2b02      	cmp	r3, #2
 8004044:	d11c      	bne.n	8004080 <HAL_SPI_TransmitReceive+0x2a4>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d017      	beq.n	8004080 <HAL_SPI_TransmitReceive+0x2a4>
 8004050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004052:	2b01      	cmp	r3, #1
 8004054:	d114      	bne.n	8004080 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	330c      	adds	r3, #12
 8004060:	7812      	ldrb	r2, [r2, #0]
 8004062:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2201      	movs	r2, #1
 8004088:	4013      	ands	r3, r2
 800408a:	2b01      	cmp	r3, #1
 800408c:	d119      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x2e6>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d014      	beq.n	80040c2 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040be:	2301      	movs	r3, #1
 80040c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040c2:	f7fd f99b 	bl	80013fc <HAL_GetTick>
 80040c6:	0002      	movs	r2, r0
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d802      	bhi.n	80040d8 <HAL_SPI_TransmitReceive+0x2fc>
 80040d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d4:	3301      	adds	r3, #1
 80040d6:	d102      	bne.n	80040de <HAL_SPI_TransmitReceive+0x302>
 80040d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d108      	bne.n	80040f0 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 80040de:	232b      	movs	r3, #43	; 0x2b
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	2203      	movs	r2, #3
 80040e4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2251      	movs	r2, #81	; 0x51
 80040ea:	2101      	movs	r1, #1
 80040ec:	5499      	strb	r1, [r3, r2]
        goto error;
 80040ee:	e035      	b.n	800415c <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d19e      	bne.n	8004038 <HAL_SPI_TransmitReceive+0x25c>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d199      	bne.n	8004038 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004106:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	0018      	movs	r0, r3
 800410c:	f000 f92a 	bl	8004364 <SPI_EndRxTxTransaction>
 8004110:	1e03      	subs	r3, r0, #0
 8004112:	d007      	beq.n	8004124 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8004114:	232b      	movs	r3, #43	; 0x2b
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	2201      	movs	r2, #1
 800411a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004122:	e01b      	b.n	800415c <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	2b00      	cmp	r3, #0
 8004148:	d004      	beq.n	8004154 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 800414a:	232b      	movs	r3, #43	; 0x2b
 800414c:	18fb      	adds	r3, r7, r3
 800414e:	2201      	movs	r2, #1
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	e003      	b.n	800415c <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2251      	movs	r2, #81	; 0x51
 8004158:	2101      	movs	r1, #1
 800415a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2250      	movs	r2, #80	; 0x50
 8004160:	2100      	movs	r1, #0
 8004162:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004164:	232b      	movs	r3, #43	; 0x2b
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	781b      	ldrb	r3, [r3, #0]
}
 800416a:	0018      	movs	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	b00c      	add	sp, #48	; 0x30
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	1dfb      	adds	r3, r7, #7
 8004182:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004184:	f7fd f93a 	bl	80013fc <HAL_GetTick>
 8004188:	0002      	movs	r2, r0
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	18d3      	adds	r3, r2, r3
 8004192:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004194:	f7fd f932 	bl	80013fc <HAL_GetTick>
 8004198:	0003      	movs	r3, r0
 800419a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800419c:	4b3a      	ldr	r3, [pc, #232]	; (8004288 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	015b      	lsls	r3, r3, #5
 80041a2:	0d1b      	lsrs	r3, r3, #20
 80041a4:	69fa      	ldr	r2, [r7, #28]
 80041a6:	4353      	muls	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041aa:	e058      	b.n	800425e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	3301      	adds	r3, #1
 80041b0:	d055      	beq.n	800425e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041b2:	f7fd f923 	bl	80013fc <HAL_GetTick>
 80041b6:	0002      	movs	r2, r0
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d902      	bls.n	80041c8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d142      	bne.n	800424e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	21e0      	movs	r1, #224	; 0xe0
 80041d4:	438a      	bics	r2, r1
 80041d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	2382      	movs	r3, #130	; 0x82
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d113      	bne.n	800420c <SPI_WaitFlagStateUntilTimeout+0x98>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	021b      	lsls	r3, r3, #8
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d005      	beq.n	80041fc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	2380      	movs	r3, #128	; 0x80
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d107      	bne.n	800420c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2140      	movs	r1, #64	; 0x40
 8004208:	438a      	bics	r2, r1
 800420a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	019b      	lsls	r3, r3, #6
 8004214:	429a      	cmp	r2, r3
 8004216:	d110      	bne.n	800423a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	491a      	ldr	r1, [pc, #104]	; (800428c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004224:	400a      	ands	r2, r1
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2180      	movs	r1, #128	; 0x80
 8004234:	0189      	lsls	r1, r1, #6
 8004236:	430a      	orrs	r2, r1
 8004238:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2251      	movs	r2, #81	; 0x51
 800423e:	2101      	movs	r1, #1
 8004240:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2250      	movs	r2, #80	; 0x50
 8004246:	2100      	movs	r1, #0
 8004248:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e017      	b.n	800427e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	3b01      	subs	r3, #1
 800425c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	4013      	ands	r3, r2
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	425a      	negs	r2, r3
 800426e:	4153      	adcs	r3, r2
 8004270:	b2db      	uxtb	r3, r3
 8004272:	001a      	movs	r2, r3
 8004274:	1dfb      	adds	r3, r7, #7
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d197      	bne.n	80041ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	0018      	movs	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	b008      	add	sp, #32
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	20000000 	.word	0x20000000
 800428c:	ffffdfff 	.word	0xffffdfff

08004290 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af02      	add	r7, sp, #8
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	2382      	movs	r3, #130	; 0x82
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d113      	bne.n	80042d0 <SPI_EndRxTransaction+0x40>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	2380      	movs	r3, #128	; 0x80
 80042ae:	021b      	lsls	r3, r3, #8
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d005      	beq.n	80042c0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	429a      	cmp	r2, r3
 80042be:	d107      	bne.n	80042d0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2140      	movs	r1, #64	; 0x40
 80042cc:	438a      	bics	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	2382      	movs	r3, #130	; 0x82
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	429a      	cmp	r2, r3
 80042da:	d12b      	bne.n	8004334 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	2380      	movs	r3, #128	; 0x80
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d012      	beq.n	800430e <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	0013      	movs	r3, r2
 80042f2:	2200      	movs	r2, #0
 80042f4:	2180      	movs	r1, #128	; 0x80
 80042f6:	f7ff ff3d 	bl	8004174 <SPI_WaitFlagStateUntilTimeout>
 80042fa:	1e03      	subs	r3, r0, #0
 80042fc:	d02d      	beq.n	800435a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	2220      	movs	r2, #32
 8004304:	431a      	orrs	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e026      	b.n	800435c <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	0013      	movs	r3, r2
 8004318:	2200      	movs	r2, #0
 800431a:	2101      	movs	r1, #1
 800431c:	f7ff ff2a 	bl	8004174 <SPI_WaitFlagStateUntilTimeout>
 8004320:	1e03      	subs	r3, r0, #0
 8004322:	d01a      	beq.n	800435a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004328:	2220      	movs	r2, #32
 800432a:	431a      	orrs	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e013      	b.n	800435c <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	0013      	movs	r3, r2
 800433e:	2200      	movs	r2, #0
 8004340:	2101      	movs	r1, #1
 8004342:	f7ff ff17 	bl	8004174 <SPI_WaitFlagStateUntilTimeout>
 8004346:	1e03      	subs	r3, r0, #0
 8004348:	d007      	beq.n	800435a <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	2220      	movs	r2, #32
 8004350:	431a      	orrs	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e000      	b.n	800435c <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	0018      	movs	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	b004      	add	sp, #16
 8004362:	bd80      	pop	{r7, pc}

08004364 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af02      	add	r7, sp, #8
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004370:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <SPI_EndRxTxTransaction+0x84>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	491d      	ldr	r1, [pc, #116]	; (80043ec <SPI_EndRxTxTransaction+0x88>)
 8004376:	0018      	movs	r0, r3
 8004378:	f7fb fece 	bl	8000118 <__udivsi3>
 800437c:	0003      	movs	r3, r0
 800437e:	001a      	movs	r2, r3
 8004380:	0013      	movs	r3, r2
 8004382:	015b      	lsls	r3, r3, #5
 8004384:	1a9b      	subs	r3, r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	189b      	adds	r3, r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	2382      	movs	r3, #130	; 0x82
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	429a      	cmp	r2, r3
 8004398:	d112      	bne.n	80043c0 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	0013      	movs	r3, r2
 80043a4:	2200      	movs	r2, #0
 80043a6:	2180      	movs	r1, #128	; 0x80
 80043a8:	f7ff fee4 	bl	8004174 <SPI_WaitFlagStateUntilTimeout>
 80043ac:	1e03      	subs	r3, r0, #0
 80043ae:	d016      	beq.n	80043de <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b4:	2220      	movs	r2, #32
 80043b6:	431a      	orrs	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e00f      	b.n	80043e0 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	2280      	movs	r2, #128	; 0x80
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b80      	cmp	r3, #128	; 0x80
 80043d8:	d0f2      	beq.n	80043c0 <SPI_EndRxTxTransaction+0x5c>
 80043da:	e000      	b.n	80043de <SPI_EndRxTxTransaction+0x7a>
        break;
 80043dc:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	0018      	movs	r0, r3
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b006      	add	sp, #24
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000000 	.word	0x20000000
 80043ec:	016e3600 	.word	0x016e3600

080043f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e044      	b.n	800448c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d107      	bne.n	800441a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2278      	movs	r2, #120	; 0x78
 800440e:	2100      	movs	r1, #0
 8004410:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	0018      	movs	r0, r3
 8004416:	f7fc fee7 	bl	80011e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2224      	movs	r2, #36	; 0x24
 800441e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2101      	movs	r1, #1
 800442c:	438a      	bics	r2, r1
 800442e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	0018      	movs	r0, r3
 8004434:	f000 f8d0 	bl	80045d8 <UART_SetConfig>
 8004438:	0003      	movs	r3, r0
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e024      	b.n	800448c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	0018      	movs	r0, r3
 800444e:	f000 fb47 	bl	8004ae0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	490d      	ldr	r1, [pc, #52]	; (8004494 <HAL_UART_Init+0xa4>)
 800445e:	400a      	ands	r2, r1
 8004460:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	212a      	movs	r1, #42	; 0x2a
 800446e:	438a      	bics	r2, r1
 8004470:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2101      	movs	r1, #1
 800447e:	430a      	orrs	r2, r1
 8004480:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	0018      	movs	r0, r3
 8004486:	f000 fbdf 	bl	8004c48 <UART_CheckIdleState>
 800448a:	0003      	movs	r3, r0
}
 800448c:	0018      	movs	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	b002      	add	sp, #8
 8004492:	bd80      	pop	{r7, pc}
 8004494:	ffffb7ff 	.word	0xffffb7ff

08004498 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	; 0x28
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	1dbb      	adds	r3, r7, #6
 80044a6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d000      	beq.n	80044b2 <HAL_UART_Transmit+0x1a>
 80044b0:	e08c      	b.n	80045cc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_UART_Transmit+0x28>
 80044b8:	1dbb      	adds	r3, r7, #6
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e084      	b.n	80045ce <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	2380      	movs	r3, #128	; 0x80
 80044ca:	015b      	lsls	r3, r3, #5
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d109      	bne.n	80044e4 <HAL_UART_Transmit+0x4c>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d105      	bne.n	80044e4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2201      	movs	r2, #1
 80044dc:	4013      	ands	r3, r2
 80044de:	d001      	beq.n	80044e4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e074      	b.n	80045ce <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2284      	movs	r2, #132	; 0x84
 80044e8:	2100      	movs	r1, #0
 80044ea:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2221      	movs	r2, #33	; 0x21
 80044f0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044f2:	f7fc ff83 	bl	80013fc <HAL_GetTick>
 80044f6:	0003      	movs	r3, r0
 80044f8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	1dba      	adds	r2, r7, #6
 80044fe:	2150      	movs	r1, #80	; 0x50
 8004500:	8812      	ldrh	r2, [r2, #0]
 8004502:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	1dba      	adds	r2, r7, #6
 8004508:	2152      	movs	r1, #82	; 0x52
 800450a:	8812      	ldrh	r2, [r2, #0]
 800450c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	2380      	movs	r3, #128	; 0x80
 8004514:	015b      	lsls	r3, r3, #5
 8004516:	429a      	cmp	r2, r3
 8004518:	d108      	bne.n	800452c <HAL_UART_Transmit+0x94>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d104      	bne.n	800452c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004522:	2300      	movs	r3, #0
 8004524:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	61bb      	str	r3, [r7, #24]
 800452a:	e003      	b.n	8004534 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004530:	2300      	movs	r3, #0
 8004532:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004534:	e02f      	b.n	8004596 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	0013      	movs	r3, r2
 8004540:	2200      	movs	r2, #0
 8004542:	2180      	movs	r1, #128	; 0x80
 8004544:	f000 fc28 	bl	8004d98 <UART_WaitOnFlagUntilTimeout>
 8004548:	1e03      	subs	r3, r0, #0
 800454a:	d004      	beq.n	8004556 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e03b      	b.n	80045ce <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10b      	bne.n	8004574 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	001a      	movs	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	05d2      	lsls	r2, r2, #23
 8004568:	0dd2      	lsrs	r2, r2, #23
 800456a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	3302      	adds	r3, #2
 8004570:	61bb      	str	r3, [r7, #24]
 8004572:	e007      	b.n	8004584 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	781a      	ldrb	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	3301      	adds	r3, #1
 8004582:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2252      	movs	r2, #82	; 0x52
 8004588:	5a9b      	ldrh	r3, [r3, r2]
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b299      	uxth	r1, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2252      	movs	r2, #82	; 0x52
 8004594:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2252      	movs	r2, #82	; 0x52
 800459a:	5a9b      	ldrh	r3, [r3, r2]
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1c9      	bne.n	8004536 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	0013      	movs	r3, r2
 80045ac:	2200      	movs	r2, #0
 80045ae:	2140      	movs	r1, #64	; 0x40
 80045b0:	f000 fbf2 	bl	8004d98 <UART_WaitOnFlagUntilTimeout>
 80045b4:	1e03      	subs	r3, r0, #0
 80045b6:	d004      	beq.n	80045c2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e005      	b.n	80045ce <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	e000      	b.n	80045ce <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80045cc:	2302      	movs	r3, #2
  }
}
 80045ce:	0018      	movs	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b008      	add	sp, #32
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045d8:	b5b0      	push	{r4, r5, r7, lr}
 80045da:	b08e      	sub	sp, #56	; 0x38
 80045dc:	af00      	add	r7, sp, #0
 80045de:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045e0:	231a      	movs	r3, #26
 80045e2:	2218      	movs	r2, #24
 80045e4:	189b      	adds	r3, r3, r2
 80045e6:	19db      	adds	r3, r3, r7
 80045e8:	2200      	movs	r2, #0
 80045ea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	4313      	orrs	r3, r2
 8004602:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4ac6      	ldr	r2, [pc, #792]	; (8004924 <UART_SetConfig+0x34c>)
 800460c:	4013      	ands	r3, r2
 800460e:	0019      	movs	r1, r3
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004616:	430a      	orrs	r2, r1
 8004618:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4ac1      	ldr	r2, [pc, #772]	; (8004928 <UART_SetConfig+0x350>)
 8004622:	4013      	ands	r3, r2
 8004624:	0019      	movs	r1, r3
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4abb      	ldr	r2, [pc, #748]	; (800492c <UART_SetConfig+0x354>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d004      	beq.n	800464c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004648:	4313      	orrs	r3, r2
 800464a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	4ab7      	ldr	r2, [pc, #732]	; (8004930 <UART_SetConfig+0x358>)
 8004654:	4013      	ands	r3, r2
 8004656:	0019      	movs	r1, r3
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800465e:	430a      	orrs	r2, r1
 8004660:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4ab3      	ldr	r2, [pc, #716]	; (8004934 <UART_SetConfig+0x35c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d131      	bne.n	80046d0 <UART_SetConfig+0xf8>
 800466c:	4bb2      	ldr	r3, [pc, #712]	; (8004938 <UART_SetConfig+0x360>)
 800466e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004670:	2203      	movs	r2, #3
 8004672:	4013      	ands	r3, r2
 8004674:	2b03      	cmp	r3, #3
 8004676:	d01d      	beq.n	80046b4 <UART_SetConfig+0xdc>
 8004678:	d823      	bhi.n	80046c2 <UART_SetConfig+0xea>
 800467a:	2b02      	cmp	r3, #2
 800467c:	d00c      	beq.n	8004698 <UART_SetConfig+0xc0>
 800467e:	d820      	bhi.n	80046c2 <UART_SetConfig+0xea>
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <UART_SetConfig+0xb2>
 8004684:	2b01      	cmp	r3, #1
 8004686:	d00e      	beq.n	80046a6 <UART_SetConfig+0xce>
 8004688:	e01b      	b.n	80046c2 <UART_SetConfig+0xea>
 800468a:	231b      	movs	r3, #27
 800468c:	2218      	movs	r2, #24
 800468e:	189b      	adds	r3, r3, r2
 8004690:	19db      	adds	r3, r3, r7
 8004692:	2201      	movs	r2, #1
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	e09c      	b.n	80047d2 <UART_SetConfig+0x1fa>
 8004698:	231b      	movs	r3, #27
 800469a:	2218      	movs	r2, #24
 800469c:	189b      	adds	r3, r3, r2
 800469e:	19db      	adds	r3, r3, r7
 80046a0:	2202      	movs	r2, #2
 80046a2:	701a      	strb	r2, [r3, #0]
 80046a4:	e095      	b.n	80047d2 <UART_SetConfig+0x1fa>
 80046a6:	231b      	movs	r3, #27
 80046a8:	2218      	movs	r2, #24
 80046aa:	189b      	adds	r3, r3, r2
 80046ac:	19db      	adds	r3, r3, r7
 80046ae:	2204      	movs	r2, #4
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	e08e      	b.n	80047d2 <UART_SetConfig+0x1fa>
 80046b4:	231b      	movs	r3, #27
 80046b6:	2218      	movs	r2, #24
 80046b8:	189b      	adds	r3, r3, r2
 80046ba:	19db      	adds	r3, r3, r7
 80046bc:	2208      	movs	r2, #8
 80046be:	701a      	strb	r2, [r3, #0]
 80046c0:	e087      	b.n	80047d2 <UART_SetConfig+0x1fa>
 80046c2:	231b      	movs	r3, #27
 80046c4:	2218      	movs	r2, #24
 80046c6:	189b      	adds	r3, r3, r2
 80046c8:	19db      	adds	r3, r3, r7
 80046ca:	2210      	movs	r2, #16
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	e080      	b.n	80047d2 <UART_SetConfig+0x1fa>
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a99      	ldr	r2, [pc, #612]	; (800493c <UART_SetConfig+0x364>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d131      	bne.n	800473e <UART_SetConfig+0x166>
 80046da:	4b97      	ldr	r3, [pc, #604]	; (8004938 <UART_SetConfig+0x360>)
 80046dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046de:	220c      	movs	r2, #12
 80046e0:	4013      	ands	r3, r2
 80046e2:	2b0c      	cmp	r3, #12
 80046e4:	d01d      	beq.n	8004722 <UART_SetConfig+0x14a>
 80046e6:	d823      	bhi.n	8004730 <UART_SetConfig+0x158>
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d00c      	beq.n	8004706 <UART_SetConfig+0x12e>
 80046ec:	d820      	bhi.n	8004730 <UART_SetConfig+0x158>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <UART_SetConfig+0x120>
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d00e      	beq.n	8004714 <UART_SetConfig+0x13c>
 80046f6:	e01b      	b.n	8004730 <UART_SetConfig+0x158>
 80046f8:	231b      	movs	r3, #27
 80046fa:	2218      	movs	r2, #24
 80046fc:	189b      	adds	r3, r3, r2
 80046fe:	19db      	adds	r3, r3, r7
 8004700:	2200      	movs	r2, #0
 8004702:	701a      	strb	r2, [r3, #0]
 8004704:	e065      	b.n	80047d2 <UART_SetConfig+0x1fa>
 8004706:	231b      	movs	r3, #27
 8004708:	2218      	movs	r2, #24
 800470a:	189b      	adds	r3, r3, r2
 800470c:	19db      	adds	r3, r3, r7
 800470e:	2202      	movs	r2, #2
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	e05e      	b.n	80047d2 <UART_SetConfig+0x1fa>
 8004714:	231b      	movs	r3, #27
 8004716:	2218      	movs	r2, #24
 8004718:	189b      	adds	r3, r3, r2
 800471a:	19db      	adds	r3, r3, r7
 800471c:	2204      	movs	r2, #4
 800471e:	701a      	strb	r2, [r3, #0]
 8004720:	e057      	b.n	80047d2 <UART_SetConfig+0x1fa>
 8004722:	231b      	movs	r3, #27
 8004724:	2218      	movs	r2, #24
 8004726:	189b      	adds	r3, r3, r2
 8004728:	19db      	adds	r3, r3, r7
 800472a:	2208      	movs	r2, #8
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	e050      	b.n	80047d2 <UART_SetConfig+0x1fa>
 8004730:	231b      	movs	r3, #27
 8004732:	2218      	movs	r2, #24
 8004734:	189b      	adds	r3, r3, r2
 8004736:	19db      	adds	r3, r3, r7
 8004738:	2210      	movs	r2, #16
 800473a:	701a      	strb	r2, [r3, #0]
 800473c:	e049      	b.n	80047d2 <UART_SetConfig+0x1fa>
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a7a      	ldr	r2, [pc, #488]	; (800492c <UART_SetConfig+0x354>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d13e      	bne.n	80047c6 <UART_SetConfig+0x1ee>
 8004748:	4b7b      	ldr	r3, [pc, #492]	; (8004938 <UART_SetConfig+0x360>)
 800474a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800474c:	23c0      	movs	r3, #192	; 0xc0
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	4013      	ands	r3, r2
 8004752:	22c0      	movs	r2, #192	; 0xc0
 8004754:	0112      	lsls	r2, r2, #4
 8004756:	4293      	cmp	r3, r2
 8004758:	d027      	beq.n	80047aa <UART_SetConfig+0x1d2>
 800475a:	22c0      	movs	r2, #192	; 0xc0
 800475c:	0112      	lsls	r2, r2, #4
 800475e:	4293      	cmp	r3, r2
 8004760:	d82a      	bhi.n	80047b8 <UART_SetConfig+0x1e0>
 8004762:	2280      	movs	r2, #128	; 0x80
 8004764:	0112      	lsls	r2, r2, #4
 8004766:	4293      	cmp	r3, r2
 8004768:	d011      	beq.n	800478e <UART_SetConfig+0x1b6>
 800476a:	2280      	movs	r2, #128	; 0x80
 800476c:	0112      	lsls	r2, r2, #4
 800476e:	4293      	cmp	r3, r2
 8004770:	d822      	bhi.n	80047b8 <UART_SetConfig+0x1e0>
 8004772:	2b00      	cmp	r3, #0
 8004774:	d004      	beq.n	8004780 <UART_SetConfig+0x1a8>
 8004776:	2280      	movs	r2, #128	; 0x80
 8004778:	00d2      	lsls	r2, r2, #3
 800477a:	4293      	cmp	r3, r2
 800477c:	d00e      	beq.n	800479c <UART_SetConfig+0x1c4>
 800477e:	e01b      	b.n	80047b8 <UART_SetConfig+0x1e0>
 8004780:	231b      	movs	r3, #27
 8004782:	2218      	movs	r2, #24
 8004784:	189b      	adds	r3, r3, r2
 8004786:	19db      	adds	r3, r3, r7
 8004788:	2200      	movs	r2, #0
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	e021      	b.n	80047d2 <UART_SetConfig+0x1fa>
 800478e:	231b      	movs	r3, #27
 8004790:	2218      	movs	r2, #24
 8004792:	189b      	adds	r3, r3, r2
 8004794:	19db      	adds	r3, r3, r7
 8004796:	2202      	movs	r2, #2
 8004798:	701a      	strb	r2, [r3, #0]
 800479a:	e01a      	b.n	80047d2 <UART_SetConfig+0x1fa>
 800479c:	231b      	movs	r3, #27
 800479e:	2218      	movs	r2, #24
 80047a0:	189b      	adds	r3, r3, r2
 80047a2:	19db      	adds	r3, r3, r7
 80047a4:	2204      	movs	r2, #4
 80047a6:	701a      	strb	r2, [r3, #0]
 80047a8:	e013      	b.n	80047d2 <UART_SetConfig+0x1fa>
 80047aa:	231b      	movs	r3, #27
 80047ac:	2218      	movs	r2, #24
 80047ae:	189b      	adds	r3, r3, r2
 80047b0:	19db      	adds	r3, r3, r7
 80047b2:	2208      	movs	r2, #8
 80047b4:	701a      	strb	r2, [r3, #0]
 80047b6:	e00c      	b.n	80047d2 <UART_SetConfig+0x1fa>
 80047b8:	231b      	movs	r3, #27
 80047ba:	2218      	movs	r2, #24
 80047bc:	189b      	adds	r3, r3, r2
 80047be:	19db      	adds	r3, r3, r7
 80047c0:	2210      	movs	r2, #16
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	e005      	b.n	80047d2 <UART_SetConfig+0x1fa>
 80047c6:	231b      	movs	r3, #27
 80047c8:	2218      	movs	r2, #24
 80047ca:	189b      	adds	r3, r3, r2
 80047cc:	19db      	adds	r3, r3, r7
 80047ce:	2210      	movs	r2, #16
 80047d0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a55      	ldr	r2, [pc, #340]	; (800492c <UART_SetConfig+0x354>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d000      	beq.n	80047de <UART_SetConfig+0x206>
 80047dc:	e084      	b.n	80048e8 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047de:	231b      	movs	r3, #27
 80047e0:	2218      	movs	r2, #24
 80047e2:	189b      	adds	r3, r3, r2
 80047e4:	19db      	adds	r3, r3, r7
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d01d      	beq.n	8004828 <UART_SetConfig+0x250>
 80047ec:	dc20      	bgt.n	8004830 <UART_SetConfig+0x258>
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d015      	beq.n	800481e <UART_SetConfig+0x246>
 80047f2:	dc1d      	bgt.n	8004830 <UART_SetConfig+0x258>
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <UART_SetConfig+0x226>
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d005      	beq.n	8004808 <UART_SetConfig+0x230>
 80047fc:	e018      	b.n	8004830 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047fe:	f7fe fbc1 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 8004802:	0003      	movs	r3, r0
 8004804:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004806:	e01c      	b.n	8004842 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004808:	4b4b      	ldr	r3, [pc, #300]	; (8004938 <UART_SetConfig+0x360>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2210      	movs	r2, #16
 800480e:	4013      	ands	r3, r2
 8004810:	d002      	beq.n	8004818 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004812:	4b4b      	ldr	r3, [pc, #300]	; (8004940 <UART_SetConfig+0x368>)
 8004814:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004816:	e014      	b.n	8004842 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8004818:	4b4a      	ldr	r3, [pc, #296]	; (8004944 <UART_SetConfig+0x36c>)
 800481a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800481c:	e011      	b.n	8004842 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800481e:	f7fe fb01 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8004822:	0003      	movs	r3, r0
 8004824:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004826:	e00c      	b.n	8004842 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	021b      	lsls	r3, r3, #8
 800482c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800482e:	e008      	b.n	8004842 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004834:	231a      	movs	r3, #26
 8004836:	2218      	movs	r2, #24
 8004838:	189b      	adds	r3, r3, r2
 800483a:	19db      	adds	r3, r3, r7
 800483c:	2201      	movs	r2, #1
 800483e:	701a      	strb	r2, [r3, #0]
        break;
 8004840:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d100      	bne.n	800484a <UART_SetConfig+0x272>
 8004848:	e132      	b.n	8004ab0 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	0013      	movs	r3, r2
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	189b      	adds	r3, r3, r2
 8004854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004856:	429a      	cmp	r2, r3
 8004858:	d305      	bcc.n	8004866 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004862:	429a      	cmp	r2, r3
 8004864:	d906      	bls.n	8004874 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8004866:	231a      	movs	r3, #26
 8004868:	2218      	movs	r2, #24
 800486a:	189b      	adds	r3, r3, r2
 800486c:	19db      	adds	r3, r3, r7
 800486e:	2201      	movs	r2, #1
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	e11d      	b.n	8004ab0 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004876:	613b      	str	r3, [r7, #16]
 8004878:	2300      	movs	r3, #0
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	6939      	ldr	r1, [r7, #16]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	000b      	movs	r3, r1
 8004882:	0e1b      	lsrs	r3, r3, #24
 8004884:	0010      	movs	r0, r2
 8004886:	0205      	lsls	r5, r0, #8
 8004888:	431d      	orrs	r5, r3
 800488a:	000b      	movs	r3, r1
 800488c:	021c      	lsls	r4, r3, #8
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	085b      	lsrs	r3, r3, #1
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	68b8      	ldr	r0, [r7, #8]
 800489c:	68f9      	ldr	r1, [r7, #12]
 800489e:	1900      	adds	r0, r0, r4
 80048a0:	4169      	adcs	r1, r5
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	2300      	movs	r3, #0
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f7fb fcbe 	bl	8000230 <__aeabi_uldivmod>
 80048b4:	0002      	movs	r2, r0
 80048b6:	000b      	movs	r3, r1
 80048b8:	0013      	movs	r3, r2
 80048ba:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048be:	23c0      	movs	r3, #192	; 0xc0
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d309      	bcc.n	80048da <UART_SetConfig+0x302>
 80048c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048c8:	2380      	movs	r3, #128	; 0x80
 80048ca:	035b      	lsls	r3, r3, #13
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d204      	bcs.n	80048da <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048d6:	60da      	str	r2, [r3, #12]
 80048d8:	e0ea      	b.n	8004ab0 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80048da:	231a      	movs	r3, #26
 80048dc:	2218      	movs	r2, #24
 80048de:	189b      	adds	r3, r3, r2
 80048e0:	19db      	adds	r3, r3, r7
 80048e2:	2201      	movs	r2, #1
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	e0e3      	b.n	8004ab0 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	2380      	movs	r3, #128	; 0x80
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d000      	beq.n	80048f6 <UART_SetConfig+0x31e>
 80048f4:	e085      	b.n	8004a02 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80048f6:	231b      	movs	r3, #27
 80048f8:	2218      	movs	r2, #24
 80048fa:	189b      	adds	r3, r3, r2
 80048fc:	19db      	adds	r3, r3, r7
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b08      	cmp	r3, #8
 8004902:	d837      	bhi.n	8004974 <UART_SetConfig+0x39c>
 8004904:	009a      	lsls	r2, r3, #2
 8004906:	4b10      	ldr	r3, [pc, #64]	; (8004948 <UART_SetConfig+0x370>)
 8004908:	18d3      	adds	r3, r2, r3
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800490e:	f7fe fb39 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 8004912:	0003      	movs	r3, r0
 8004914:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004916:	e036      	b.n	8004986 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004918:	f7fe fb4a 	bl	8002fb0 <HAL_RCC_GetPCLK2Freq>
 800491c:	0003      	movs	r3, r0
 800491e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004920:	e031      	b.n	8004986 <UART_SetConfig+0x3ae>
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	efff69f3 	.word	0xefff69f3
 8004928:	ffffcfff 	.word	0xffffcfff
 800492c:	40004800 	.word	0x40004800
 8004930:	fffff4ff 	.word	0xfffff4ff
 8004934:	40013800 	.word	0x40013800
 8004938:	40021000 	.word	0x40021000
 800493c:	40004400 	.word	0x40004400
 8004940:	003d0900 	.word	0x003d0900
 8004944:	00f42400 	.word	0x00f42400
 8004948:	08005080 	.word	0x08005080
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800494c:	4b60      	ldr	r3, [pc, #384]	; (8004ad0 <UART_SetConfig+0x4f8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2210      	movs	r2, #16
 8004952:	4013      	ands	r3, r2
 8004954:	d002      	beq.n	800495c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004956:	4b5f      	ldr	r3, [pc, #380]	; (8004ad4 <UART_SetConfig+0x4fc>)
 8004958:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800495a:	e014      	b.n	8004986 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 800495c:	4b5e      	ldr	r3, [pc, #376]	; (8004ad8 <UART_SetConfig+0x500>)
 800495e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004960:	e011      	b.n	8004986 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004962:	f7fe fa5f 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8004966:	0003      	movs	r3, r0
 8004968:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800496a:	e00c      	b.n	8004986 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800496c:	2380      	movs	r3, #128	; 0x80
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004972:	e008      	b.n	8004986 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004978:	231a      	movs	r3, #26
 800497a:	2218      	movs	r2, #24
 800497c:	189b      	adds	r3, r3, r2
 800497e:	19db      	adds	r3, r3, r7
 8004980:	2201      	movs	r2, #1
 8004982:	701a      	strb	r2, [r3, #0]
        break;
 8004984:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d100      	bne.n	800498e <UART_SetConfig+0x3b6>
 800498c:	e090      	b.n	8004ab0 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	005a      	lsls	r2, r3, #1
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	18d2      	adds	r2, r2, r3
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	0019      	movs	r1, r3
 80049a0:	0010      	movs	r0, r2
 80049a2:	f7fb fbb9 	bl	8000118 <__udivsi3>
 80049a6:	0003      	movs	r3, r0
 80049a8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	2b0f      	cmp	r3, #15
 80049ae:	d921      	bls.n	80049f4 <UART_SetConfig+0x41c>
 80049b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049b2:	2380      	movs	r3, #128	; 0x80
 80049b4:	025b      	lsls	r3, r3, #9
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d21c      	bcs.n	80049f4 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	b29a      	uxth	r2, r3
 80049be:	200e      	movs	r0, #14
 80049c0:	2418      	movs	r4, #24
 80049c2:	1903      	adds	r3, r0, r4
 80049c4:	19db      	adds	r3, r3, r7
 80049c6:	210f      	movs	r1, #15
 80049c8:	438a      	bics	r2, r1
 80049ca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ce:	085b      	lsrs	r3, r3, #1
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2207      	movs	r2, #7
 80049d4:	4013      	ands	r3, r2
 80049d6:	b299      	uxth	r1, r3
 80049d8:	1903      	adds	r3, r0, r4
 80049da:	19db      	adds	r3, r3, r7
 80049dc:	1902      	adds	r2, r0, r4
 80049de:	19d2      	adds	r2, r2, r7
 80049e0:	8812      	ldrh	r2, [r2, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	1902      	adds	r2, r0, r4
 80049ec:	19d2      	adds	r2, r2, r7
 80049ee:	8812      	ldrh	r2, [r2, #0]
 80049f0:	60da      	str	r2, [r3, #12]
 80049f2:	e05d      	b.n	8004ab0 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80049f4:	231a      	movs	r3, #26
 80049f6:	2218      	movs	r2, #24
 80049f8:	189b      	adds	r3, r3, r2
 80049fa:	19db      	adds	r3, r3, r7
 80049fc:	2201      	movs	r2, #1
 80049fe:	701a      	strb	r2, [r3, #0]
 8004a00:	e056      	b.n	8004ab0 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a02:	231b      	movs	r3, #27
 8004a04:	2218      	movs	r2, #24
 8004a06:	189b      	adds	r3, r3, r2
 8004a08:	19db      	adds	r3, r3, r7
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d822      	bhi.n	8004a56 <UART_SetConfig+0x47e>
 8004a10:	009a      	lsls	r2, r3, #2
 8004a12:	4b32      	ldr	r3, [pc, #200]	; (8004adc <UART_SetConfig+0x504>)
 8004a14:	18d3      	adds	r3, r2, r3
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a1a:	f7fe fab3 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 8004a1e:	0003      	movs	r3, r0
 8004a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a22:	e021      	b.n	8004a68 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a24:	f7fe fac4 	bl	8002fb0 <HAL_RCC_GetPCLK2Freq>
 8004a28:	0003      	movs	r3, r0
 8004a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a2c:	e01c      	b.n	8004a68 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a2e:	4b28      	ldr	r3, [pc, #160]	; (8004ad0 <UART_SetConfig+0x4f8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2210      	movs	r2, #16
 8004a34:	4013      	ands	r3, r2
 8004a36:	d002      	beq.n	8004a3e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004a38:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <UART_SetConfig+0x4fc>)
 8004a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a3c:	e014      	b.n	8004a68 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8004a3e:	4b26      	ldr	r3, [pc, #152]	; (8004ad8 <UART_SetConfig+0x500>)
 8004a40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a42:	e011      	b.n	8004a68 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a44:	f7fe f9ee 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a4c:	e00c      	b.n	8004a68 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4e:	2380      	movs	r3, #128	; 0x80
 8004a50:	021b      	lsls	r3, r3, #8
 8004a52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a54:	e008      	b.n	8004a68 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004a5a:	231a      	movs	r3, #26
 8004a5c:	2218      	movs	r2, #24
 8004a5e:	189b      	adds	r3, r3, r2
 8004a60:	19db      	adds	r3, r3, r7
 8004a62:	2201      	movs	r2, #1
 8004a64:	701a      	strb	r2, [r3, #0]
        break;
 8004a66:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d020      	beq.n	8004ab0 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	085a      	lsrs	r2, r3, #1
 8004a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a76:	18d2      	adds	r2, r2, r3
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	0019      	movs	r1, r3
 8004a7e:	0010      	movs	r0, r2
 8004a80:	f7fb fb4a 	bl	8000118 <__udivsi3>
 8004a84:	0003      	movs	r3, r0
 8004a86:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	2b0f      	cmp	r3, #15
 8004a8c:	d90a      	bls.n	8004aa4 <UART_SetConfig+0x4cc>
 8004a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a90:	2380      	movs	r3, #128	; 0x80
 8004a92:	025b      	lsls	r3, r3, #9
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d205      	bcs.n	8004aa4 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60da      	str	r2, [r3, #12]
 8004aa2:	e005      	b.n	8004ab0 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004aa4:	231a      	movs	r3, #26
 8004aa6:	2218      	movs	r2, #24
 8004aa8:	189b      	adds	r3, r3, r2
 8004aaa:	19db      	adds	r3, r3, r7
 8004aac:	2201      	movs	r2, #1
 8004aae:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004abc:	231a      	movs	r3, #26
 8004abe:	2218      	movs	r2, #24
 8004ac0:	189b      	adds	r3, r3, r2
 8004ac2:	19db      	adds	r3, r3, r7
 8004ac4:	781b      	ldrb	r3, [r3, #0]
}
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b00e      	add	sp, #56	; 0x38
 8004acc:	bdb0      	pop	{r4, r5, r7, pc}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	003d0900 	.word	0x003d0900
 8004ad8:	00f42400 	.word	0x00f42400
 8004adc:	080050a4 	.word	0x080050a4

08004ae0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	2201      	movs	r2, #1
 8004aee:	4013      	ands	r3, r2
 8004af0:	d00b      	beq.n	8004b0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4a4a      	ldr	r2, [pc, #296]	; (8004c24 <UART_AdvFeatureConfig+0x144>)
 8004afa:	4013      	ands	r3, r2
 8004afc:	0019      	movs	r1, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	2202      	movs	r2, #2
 8004b10:	4013      	ands	r3, r2
 8004b12:	d00b      	beq.n	8004b2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4a43      	ldr	r2, [pc, #268]	; (8004c28 <UART_AdvFeatureConfig+0x148>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	0019      	movs	r1, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	2204      	movs	r2, #4
 8004b32:	4013      	ands	r3, r2
 8004b34:	d00b      	beq.n	8004b4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	4a3b      	ldr	r2, [pc, #236]	; (8004c2c <UART_AdvFeatureConfig+0x14c>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	0019      	movs	r1, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	2208      	movs	r2, #8
 8004b54:	4013      	ands	r3, r2
 8004b56:	d00b      	beq.n	8004b70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4a34      	ldr	r2, [pc, #208]	; (8004c30 <UART_AdvFeatureConfig+0x150>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	0019      	movs	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	2210      	movs	r2, #16
 8004b76:	4013      	ands	r3, r2
 8004b78:	d00b      	beq.n	8004b92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	4a2c      	ldr	r2, [pc, #176]	; (8004c34 <UART_AdvFeatureConfig+0x154>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	0019      	movs	r1, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	2220      	movs	r2, #32
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d00b      	beq.n	8004bb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	4a25      	ldr	r2, [pc, #148]	; (8004c38 <UART_AdvFeatureConfig+0x158>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	0019      	movs	r1, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	2240      	movs	r2, #64	; 0x40
 8004bba:	4013      	ands	r3, r2
 8004bbc:	d01d      	beq.n	8004bfa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	4a1d      	ldr	r2, [pc, #116]	; (8004c3c <UART_AdvFeatureConfig+0x15c>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	0019      	movs	r1, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bda:	2380      	movs	r3, #128	; 0x80
 8004bdc:	035b      	lsls	r3, r3, #13
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d10b      	bne.n	8004bfa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4a15      	ldr	r2, [pc, #84]	; (8004c40 <UART_AdvFeatureConfig+0x160>)
 8004bea:	4013      	ands	r3, r2
 8004bec:	0019      	movs	r1, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	2280      	movs	r2, #128	; 0x80
 8004c00:	4013      	ands	r3, r2
 8004c02:	d00b      	beq.n	8004c1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	4a0e      	ldr	r2, [pc, #56]	; (8004c44 <UART_AdvFeatureConfig+0x164>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	0019      	movs	r1, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	605a      	str	r2, [r3, #4]
  }
}
 8004c1c:	46c0      	nop			; (mov r8, r8)
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b002      	add	sp, #8
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	fffdffff 	.word	0xfffdffff
 8004c28:	fffeffff 	.word	0xfffeffff
 8004c2c:	fffbffff 	.word	0xfffbffff
 8004c30:	ffff7fff 	.word	0xffff7fff
 8004c34:	ffffefff 	.word	0xffffefff
 8004c38:	ffffdfff 	.word	0xffffdfff
 8004c3c:	ffefffff 	.word	0xffefffff
 8004c40:	ff9fffff 	.word	0xff9fffff
 8004c44:	fff7ffff 	.word	0xfff7ffff

08004c48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b092      	sub	sp, #72	; 0x48
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2284      	movs	r2, #132	; 0x84
 8004c54:	2100      	movs	r1, #0
 8004c56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c58:	f7fc fbd0 	bl	80013fc <HAL_GetTick>
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2208      	movs	r2, #8
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d12c      	bne.n	8004cc8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c70:	2280      	movs	r2, #128	; 0x80
 8004c72:	0391      	lsls	r1, r2, #14
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	4a46      	ldr	r2, [pc, #280]	; (8004d90 <UART_CheckIdleState+0x148>)
 8004c78:	9200      	str	r2, [sp, #0]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f000 f88c 	bl	8004d98 <UART_WaitOnFlagUntilTimeout>
 8004c80:	1e03      	subs	r3, r0, #0
 8004c82:	d021      	beq.n	8004cc8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c84:	f3ef 8310 	mrs	r3, PRIMASK
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c8e:	2301      	movs	r3, #1
 8004c90:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	f383 8810 	msr	PRIMASK, r3
}
 8004c98:	46c0      	nop			; (mov r8, r8)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2180      	movs	r1, #128	; 0x80
 8004ca6:	438a      	bics	r2, r1
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb0:	f383 8810 	msr	PRIMASK, r3
}
 8004cb4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2278      	movs	r2, #120	; 0x78
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e05f      	b.n	8004d88 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2204      	movs	r2, #4
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d146      	bne.n	8004d64 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd8:	2280      	movs	r2, #128	; 0x80
 8004cda:	03d1      	lsls	r1, r2, #15
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	4a2c      	ldr	r2, [pc, #176]	; (8004d90 <UART_CheckIdleState+0x148>)
 8004ce0:	9200      	str	r2, [sp, #0]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f000 f858 	bl	8004d98 <UART_WaitOnFlagUntilTimeout>
 8004ce8:	1e03      	subs	r3, r0, #0
 8004cea:	d03b      	beq.n	8004d64 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cec:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f383 8810 	msr	PRIMASK, r3
}
 8004d00:	46c0      	nop			; (mov r8, r8)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4921      	ldr	r1, [pc, #132]	; (8004d94 <UART_CheckIdleState+0x14c>)
 8004d0e:	400a      	ands	r2, r1
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f383 8810 	msr	PRIMASK, r3
}
 8004d1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d22:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d24:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d26:	633b      	str	r3, [r7, #48]	; 0x30
 8004d28:	2301      	movs	r3, #1
 8004d2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	f383 8810 	msr	PRIMASK, r3
}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2101      	movs	r1, #1
 8004d40:	438a      	bics	r2, r1
 8004d42:	609a      	str	r2, [r3, #8]
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	f383 8810 	msr	PRIMASK, r3
}
 8004d4e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2280      	movs	r2, #128	; 0x80
 8004d54:	2120      	movs	r1, #32
 8004d56:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2278      	movs	r2, #120	; 0x78
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e011      	b.n	8004d88 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2280      	movs	r2, #128	; 0x80
 8004d6e:	2120      	movs	r1, #32
 8004d70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2278      	movs	r2, #120	; 0x78
 8004d82:	2100      	movs	r1, #0
 8004d84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	0018      	movs	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b010      	add	sp, #64	; 0x40
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	01ffffff 	.word	0x01ffffff
 8004d94:	fffffedf 	.word	0xfffffedf

08004d98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	603b      	str	r3, [r7, #0]
 8004da4:	1dfb      	adds	r3, r7, #7
 8004da6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da8:	e04b      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	3301      	adds	r3, #1
 8004dae:	d048      	beq.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db0:	f7fc fb24 	bl	80013fc <HAL_GetTick>
 8004db4:	0002      	movs	r2, r0
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d302      	bcc.n	8004dc6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e04b      	b.n	8004e62 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2204      	movs	r2, #4
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d035      	beq.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	2208      	movs	r2, #8
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d111      	bne.n	8004e08 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2208      	movs	r2, #8
 8004dea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	0018      	movs	r0, r3
 8004df0:	f000 f83c 	bl	8004e6c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2284      	movs	r2, #132	; 0x84
 8004df8:	2108      	movs	r1, #8
 8004dfa:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2278      	movs	r2, #120	; 0x78
 8004e00:	2100      	movs	r1, #0
 8004e02:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e02c      	b.n	8004e62 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69da      	ldr	r2, [r3, #28]
 8004e0e:	2380      	movs	r3, #128	; 0x80
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	401a      	ands	r2, r3
 8004e14:	2380      	movs	r3, #128	; 0x80
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d112      	bne.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2280      	movs	r2, #128	; 0x80
 8004e22:	0112      	lsls	r2, r2, #4
 8004e24:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f000 f81f 	bl	8004e6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2284      	movs	r2, #132	; 0x84
 8004e32:	2120      	movs	r1, #32
 8004e34:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2278      	movs	r2, #120	; 0x78
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e00f      	b.n	8004e62 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	425a      	negs	r2, r3
 8004e52:	4153      	adcs	r3, r2
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	001a      	movs	r2, r3
 8004e58:	1dfb      	adds	r3, r7, #7
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d0a4      	beq.n	8004daa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	0018      	movs	r0, r3
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b004      	add	sp, #16
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08e      	sub	sp, #56	; 0x38
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e74:	f3ef 8310 	mrs	r3, PRIMASK
 8004e78:	617b      	str	r3, [r7, #20]
  return(result);
 8004e7a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e7e:	2301      	movs	r3, #1
 8004e80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	f383 8810 	msr	PRIMASK, r3
}
 8004e88:	46c0      	nop			; (mov r8, r8)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4926      	ldr	r1, [pc, #152]	; (8004f30 <UART_EndRxTransfer+0xc4>)
 8004e96:	400a      	ands	r2, r1
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	f383 8810 	msr	PRIMASK, r3
}
 8004ea4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eaa:	623b      	str	r3, [r7, #32]
  return(result);
 8004eac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eae:	633b      	str	r3, [r7, #48]	; 0x30
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	f383 8810 	msr	PRIMASK, r3
}
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	438a      	bics	r2, r1
 8004eca:	609a      	str	r2, [r3, #8]
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed2:	f383 8810 	msr	PRIMASK, r3
}
 8004ed6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d118      	bne.n	8004f12 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eea:	2301      	movs	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f383 8810 	msr	PRIMASK, r3
}
 8004ef4:	46c0      	nop			; (mov r8, r8)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2110      	movs	r1, #16
 8004f02:	438a      	bics	r2, r1
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f383 8810 	msr	PRIMASK, r3
}
 8004f10:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2280      	movs	r2, #128	; 0x80
 8004f16:	2120      	movs	r1, #32
 8004f18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b00e      	add	sp, #56	; 0x38
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	fffffedf 	.word	0xfffffedf

08004f34 <__libc_init_array>:
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	2600      	movs	r6, #0
 8004f38:	4d0c      	ldr	r5, [pc, #48]	; (8004f6c <__libc_init_array+0x38>)
 8004f3a:	4c0d      	ldr	r4, [pc, #52]	; (8004f70 <__libc_init_array+0x3c>)
 8004f3c:	1b64      	subs	r4, r4, r5
 8004f3e:	10a4      	asrs	r4, r4, #2
 8004f40:	42a6      	cmp	r6, r4
 8004f42:	d109      	bne.n	8004f58 <__libc_init_array+0x24>
 8004f44:	2600      	movs	r6, #0
 8004f46:	f000 f87d 	bl	8005044 <_init>
 8004f4a:	4d0a      	ldr	r5, [pc, #40]	; (8004f74 <__libc_init_array+0x40>)
 8004f4c:	4c0a      	ldr	r4, [pc, #40]	; (8004f78 <__libc_init_array+0x44>)
 8004f4e:	1b64      	subs	r4, r4, r5
 8004f50:	10a4      	asrs	r4, r4, #2
 8004f52:	42a6      	cmp	r6, r4
 8004f54:	d105      	bne.n	8004f62 <__libc_init_array+0x2e>
 8004f56:	bd70      	pop	{r4, r5, r6, pc}
 8004f58:	00b3      	lsls	r3, r6, #2
 8004f5a:	58eb      	ldr	r3, [r5, r3]
 8004f5c:	4798      	blx	r3
 8004f5e:	3601      	adds	r6, #1
 8004f60:	e7ee      	b.n	8004f40 <__libc_init_array+0xc>
 8004f62:	00b3      	lsls	r3, r6, #2
 8004f64:	58eb      	ldr	r3, [r5, r3]
 8004f66:	4798      	blx	r3
 8004f68:	3601      	adds	r6, #1
 8004f6a:	e7f2      	b.n	8004f52 <__libc_init_array+0x1e>
 8004f6c:	080050f8 	.word	0x080050f8
 8004f70:	080050f8 	.word	0x080050f8
 8004f74:	080050f8 	.word	0x080050f8
 8004f78:	080050fc 	.word	0x080050fc

08004f7c <__itoa>:
 8004f7c:	1e93      	subs	r3, r2, #2
 8004f7e:	b510      	push	{r4, lr}
 8004f80:	000c      	movs	r4, r1
 8004f82:	2b22      	cmp	r3, #34	; 0x22
 8004f84:	d904      	bls.n	8004f90 <__itoa+0x14>
 8004f86:	2300      	movs	r3, #0
 8004f88:	001c      	movs	r4, r3
 8004f8a:	700b      	strb	r3, [r1, #0]
 8004f8c:	0020      	movs	r0, r4
 8004f8e:	bd10      	pop	{r4, pc}
 8004f90:	2a0a      	cmp	r2, #10
 8004f92:	d109      	bne.n	8004fa8 <__itoa+0x2c>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	da07      	bge.n	8004fa8 <__itoa+0x2c>
 8004f98:	232d      	movs	r3, #45	; 0x2d
 8004f9a:	700b      	strb	r3, [r1, #0]
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	4240      	negs	r0, r0
 8004fa0:	1861      	adds	r1, r4, r1
 8004fa2:	f000 f80f 	bl	8004fc4 <__utoa>
 8004fa6:	e7f1      	b.n	8004f8c <__itoa+0x10>
 8004fa8:	2100      	movs	r1, #0
 8004faa:	e7f9      	b.n	8004fa0 <__itoa+0x24>

08004fac <itoa>:
 8004fac:	b510      	push	{r4, lr}
 8004fae:	f7ff ffe5 	bl	8004f7c <__itoa>
 8004fb2:	bd10      	pop	{r4, pc}

08004fb4 <memset>:
 8004fb4:	0003      	movs	r3, r0
 8004fb6:	1882      	adds	r2, r0, r2
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d100      	bne.n	8004fbe <memset+0xa>
 8004fbc:	4770      	bx	lr
 8004fbe:	7019      	strb	r1, [r3, #0]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	e7f9      	b.n	8004fb8 <memset+0x4>

08004fc4 <__utoa>:
 8004fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc6:	000c      	movs	r4, r1
 8004fc8:	0016      	movs	r6, r2
 8004fca:	b08d      	sub	sp, #52	; 0x34
 8004fcc:	2225      	movs	r2, #37	; 0x25
 8004fce:	0007      	movs	r7, r0
 8004fd0:	4916      	ldr	r1, [pc, #88]	; (800502c <__utoa+0x68>)
 8004fd2:	a802      	add	r0, sp, #8
 8004fd4:	f000 f82c 	bl	8005030 <memcpy>
 8004fd8:	1e62      	subs	r2, r4, #1
 8004fda:	9200      	str	r2, [sp, #0]
 8004fdc:	1eb3      	subs	r3, r6, #2
 8004fde:	aa02      	add	r2, sp, #8
 8004fe0:	2500      	movs	r5, #0
 8004fe2:	9201      	str	r2, [sp, #4]
 8004fe4:	2b22      	cmp	r3, #34	; 0x22
 8004fe6:	d904      	bls.n	8004ff2 <__utoa+0x2e>
 8004fe8:	7025      	strb	r5, [r4, #0]
 8004fea:	002c      	movs	r4, r5
 8004fec:	0020      	movs	r0, r4
 8004fee:	b00d      	add	sp, #52	; 0x34
 8004ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ff2:	0038      	movs	r0, r7
 8004ff4:	0031      	movs	r1, r6
 8004ff6:	f7fb f915 	bl	8000224 <__aeabi_uidivmod>
 8004ffa:	000b      	movs	r3, r1
 8004ffc:	9a01      	ldr	r2, [sp, #4]
 8004ffe:	0029      	movs	r1, r5
 8005000:	5cd3      	ldrb	r3, [r2, r3]
 8005002:	9a00      	ldr	r2, [sp, #0]
 8005004:	3501      	adds	r5, #1
 8005006:	5553      	strb	r3, [r2, r5]
 8005008:	003b      	movs	r3, r7
 800500a:	0007      	movs	r7, r0
 800500c:	429e      	cmp	r6, r3
 800500e:	d9f0      	bls.n	8004ff2 <__utoa+0x2e>
 8005010:	2300      	movs	r3, #0
 8005012:	0022      	movs	r2, r4
 8005014:	5563      	strb	r3, [r4, r5]
 8005016:	000b      	movs	r3, r1
 8005018:	1ac8      	subs	r0, r1, r3
 800501a:	4283      	cmp	r3, r0
 800501c:	dde6      	ble.n	8004fec <__utoa+0x28>
 800501e:	7810      	ldrb	r0, [r2, #0]
 8005020:	5ce5      	ldrb	r5, [r4, r3]
 8005022:	7015      	strb	r5, [r2, #0]
 8005024:	54e0      	strb	r0, [r4, r3]
 8005026:	3201      	adds	r2, #1
 8005028:	3b01      	subs	r3, #1
 800502a:	e7f5      	b.n	8005018 <__utoa+0x54>
 800502c:	080050c8 	.word	0x080050c8

08005030 <memcpy>:
 8005030:	2300      	movs	r3, #0
 8005032:	b510      	push	{r4, lr}
 8005034:	429a      	cmp	r2, r3
 8005036:	d100      	bne.n	800503a <memcpy+0xa>
 8005038:	bd10      	pop	{r4, pc}
 800503a:	5ccc      	ldrb	r4, [r1, r3]
 800503c:	54c4      	strb	r4, [r0, r3]
 800503e:	3301      	adds	r3, #1
 8005040:	e7f8      	b.n	8005034 <memcpy+0x4>
	...

08005044 <_init>:
 8005044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504a:	bc08      	pop	{r3}
 800504c:	469e      	mov	lr, r3
 800504e:	4770      	bx	lr

08005050 <_fini>:
 8005050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005056:	bc08      	pop	{r3}
 8005058:	469e      	mov	lr, r3
 800505a:	4770      	bx	lr
