
SweetDreams.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0800b7a0  0800b7a0  0001b7a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd5c  0800bd5c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd5c  0800bd5c  0001bd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd64  0800bd64  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd64  0800bd64  0001bd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd68  0800bd68  0001bd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bd6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  200001e0  0800bf4c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  0800bf4c  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010624  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b3  00000000  00000000  0003082c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00032ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  00033db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014741  00000000  00000000  00034ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011661  00000000  00000000  000492e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a725  00000000  00000000  0005a942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5067  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047fc  00000000  00000000  000d50b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b784 	.word	0x0800b784

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800b784 	.word	0x0800b784

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fc15 	bl	8001c6c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fb65 	bl	8001b1c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fc07 	bl	8001c6c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fbfd 	bl	8001c6c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fb8d 	bl	8001ba0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fb83 	bl	8001ba0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fc6f 	bl	8000d94 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fbfb 	bl	8000cbc <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc61 	bl	8000d94 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc57 	bl	8000d94 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc07 	bl	8000d08 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fbfd 	bl	8000d08 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f834 	bl	80005b8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4647      	mov	r7, r8
 8000562:	b580      	push	{r7, lr}
 8000564:	0007      	movs	r7, r0
 8000566:	4699      	mov	r9, r3
 8000568:	0c3b      	lsrs	r3, r7, #16
 800056a:	469c      	mov	ip, r3
 800056c:	0413      	lsls	r3, r2, #16
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	001d      	movs	r5, r3
 8000572:	000e      	movs	r6, r1
 8000574:	4661      	mov	r1, ip
 8000576:	0400      	lsls	r0, r0, #16
 8000578:	0c14      	lsrs	r4, r2, #16
 800057a:	0c00      	lsrs	r0, r0, #16
 800057c:	4345      	muls	r5, r0
 800057e:	434b      	muls	r3, r1
 8000580:	4360      	muls	r0, r4
 8000582:	4361      	muls	r1, r4
 8000584:	18c0      	adds	r0, r0, r3
 8000586:	0c2c      	lsrs	r4, r5, #16
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4372      	muls	r2, r6
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	4463      	add	r3, ip
 80005a2:	042d      	lsls	r5, r5, #16
 80005a4:	0c2d      	lsrs	r5, r5, #16
 80005a6:	18c9      	adds	r1, r1, r3
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	1889      	adds	r1, r1, r2
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__udivmoddi4>:
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	4657      	mov	r7, sl
 80005bc:	464e      	mov	r6, r9
 80005be:	4645      	mov	r5, r8
 80005c0:	46de      	mov	lr, fp
 80005c2:	b5e0      	push	{r5, r6, r7, lr}
 80005c4:	0004      	movs	r4, r0
 80005c6:	000d      	movs	r5, r1
 80005c8:	4692      	mov	sl, r2
 80005ca:	4699      	mov	r9, r3
 80005cc:	b083      	sub	sp, #12
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d830      	bhi.n	8000634 <__udivmoddi4+0x7c>
 80005d2:	d02d      	beq.n	8000630 <__udivmoddi4+0x78>
 80005d4:	4649      	mov	r1, r9
 80005d6:	4650      	mov	r0, sl
 80005d8:	f002 fa72 	bl	8002ac0 <__clzdi2>
 80005dc:	0029      	movs	r1, r5
 80005de:	0006      	movs	r6, r0
 80005e0:	0020      	movs	r0, r4
 80005e2:	f002 fa6d 	bl	8002ac0 <__clzdi2>
 80005e6:	1a33      	subs	r3, r6, r0
 80005e8:	4698      	mov	r8, r3
 80005ea:	3b20      	subs	r3, #32
 80005ec:	469b      	mov	fp, r3
 80005ee:	d433      	bmi.n	8000658 <__udivmoddi4+0xa0>
 80005f0:	465a      	mov	r2, fp
 80005f2:	4653      	mov	r3, sl
 80005f4:	4093      	lsls	r3, r2
 80005f6:	4642      	mov	r2, r8
 80005f8:	001f      	movs	r7, r3
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	001e      	movs	r6, r3
 8000600:	42af      	cmp	r7, r5
 8000602:	d83a      	bhi.n	800067a <__udivmoddi4+0xc2>
 8000604:	42af      	cmp	r7, r5
 8000606:	d100      	bne.n	800060a <__udivmoddi4+0x52>
 8000608:	e078      	b.n	80006fc <__udivmoddi4+0x144>
 800060a:	465b      	mov	r3, fp
 800060c:	1ba4      	subs	r4, r4, r6
 800060e:	41bd      	sbcs	r5, r7
 8000610:	2b00      	cmp	r3, #0
 8000612:	da00      	bge.n	8000616 <__udivmoddi4+0x5e>
 8000614:	e075      	b.n	8000702 <__udivmoddi4+0x14a>
 8000616:	2200      	movs	r2, #0
 8000618:	2300      	movs	r3, #0
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	465a      	mov	r2, fp
 8000622:	4093      	lsls	r3, r2
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2301      	movs	r3, #1
 8000628:	4642      	mov	r2, r8
 800062a:	4093      	lsls	r3, r2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	e028      	b.n	8000682 <__udivmoddi4+0xca>
 8000630:	4282      	cmp	r2, r0
 8000632:	d9cf      	bls.n	80005d4 <__udivmoddi4+0x1c>
 8000634:	2200      	movs	r2, #0
 8000636:	2300      	movs	r3, #0
 8000638:	9200      	str	r2, [sp, #0]
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <__udivmoddi4+0x8e>
 8000642:	601c      	str	r4, [r3, #0]
 8000644:	605d      	str	r5, [r3, #4]
 8000646:	9800      	ldr	r0, [sp, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	b003      	add	sp, #12
 800064c:	bcf0      	pop	{r4, r5, r6, r7}
 800064e:	46bb      	mov	fp, r7
 8000650:	46b2      	mov	sl, r6
 8000652:	46a9      	mov	r9, r5
 8000654:	46a0      	mov	r8, r4
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	4642      	mov	r2, r8
 800065a:	2320      	movs	r3, #32
 800065c:	1a9b      	subs	r3, r3, r2
 800065e:	4652      	mov	r2, sl
 8000660:	40da      	lsrs	r2, r3
 8000662:	4641      	mov	r1, r8
 8000664:	0013      	movs	r3, r2
 8000666:	464a      	mov	r2, r9
 8000668:	408a      	lsls	r2, r1
 800066a:	0017      	movs	r7, r2
 800066c:	4642      	mov	r2, r8
 800066e:	431f      	orrs	r7, r3
 8000670:	4653      	mov	r3, sl
 8000672:	4093      	lsls	r3, r2
 8000674:	001e      	movs	r6, r3
 8000676:	42af      	cmp	r7, r5
 8000678:	d9c4      	bls.n	8000604 <__udivmoddi4+0x4c>
 800067a:	2200      	movs	r2, #0
 800067c:	2300      	movs	r3, #0
 800067e:	9200      	str	r2, [sp, #0]
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	4643      	mov	r3, r8
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0d9      	beq.n	800063c <__udivmoddi4+0x84>
 8000688:	07fb      	lsls	r3, r7, #31
 800068a:	0872      	lsrs	r2, r6, #1
 800068c:	431a      	orrs	r2, r3
 800068e:	4646      	mov	r6, r8
 8000690:	087b      	lsrs	r3, r7, #1
 8000692:	e00e      	b.n	80006b2 <__udivmoddi4+0xfa>
 8000694:	42ab      	cmp	r3, r5
 8000696:	d101      	bne.n	800069c <__udivmoddi4+0xe4>
 8000698:	42a2      	cmp	r2, r4
 800069a:	d80c      	bhi.n	80006b6 <__udivmoddi4+0xfe>
 800069c:	1aa4      	subs	r4, r4, r2
 800069e:	419d      	sbcs	r5, r3
 80006a0:	2001      	movs	r0, #1
 80006a2:	1924      	adds	r4, r4, r4
 80006a4:	416d      	adcs	r5, r5
 80006a6:	2100      	movs	r1, #0
 80006a8:	3e01      	subs	r6, #1
 80006aa:	1824      	adds	r4, r4, r0
 80006ac:	414d      	adcs	r5, r1
 80006ae:	2e00      	cmp	r6, #0
 80006b0:	d006      	beq.n	80006c0 <__udivmoddi4+0x108>
 80006b2:	42ab      	cmp	r3, r5
 80006b4:	d9ee      	bls.n	8000694 <__udivmoddi4+0xdc>
 80006b6:	3e01      	subs	r6, #1
 80006b8:	1924      	adds	r4, r4, r4
 80006ba:	416d      	adcs	r5, r5
 80006bc:	2e00      	cmp	r6, #0
 80006be:	d1f8      	bne.n	80006b2 <__udivmoddi4+0xfa>
 80006c0:	9800      	ldr	r0, [sp, #0]
 80006c2:	9901      	ldr	r1, [sp, #4]
 80006c4:	465b      	mov	r3, fp
 80006c6:	1900      	adds	r0, r0, r4
 80006c8:	4169      	adcs	r1, r5
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db24      	blt.n	8000718 <__udivmoddi4+0x160>
 80006ce:	002b      	movs	r3, r5
 80006d0:	465a      	mov	r2, fp
 80006d2:	4644      	mov	r4, r8
 80006d4:	40d3      	lsrs	r3, r2
 80006d6:	002a      	movs	r2, r5
 80006d8:	40e2      	lsrs	r2, r4
 80006da:	001c      	movs	r4, r3
 80006dc:	465b      	mov	r3, fp
 80006de:	0015      	movs	r5, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	db2a      	blt.n	800073a <__udivmoddi4+0x182>
 80006e4:	0026      	movs	r6, r4
 80006e6:	409e      	lsls	r6, r3
 80006e8:	0033      	movs	r3, r6
 80006ea:	0026      	movs	r6, r4
 80006ec:	4647      	mov	r7, r8
 80006ee:	40be      	lsls	r6, r7
 80006f0:	0032      	movs	r2, r6
 80006f2:	1a80      	subs	r0, r0, r2
 80006f4:	4199      	sbcs	r1, r3
 80006f6:	9000      	str	r0, [sp, #0]
 80006f8:	9101      	str	r1, [sp, #4]
 80006fa:	e79f      	b.n	800063c <__udivmoddi4+0x84>
 80006fc:	42a3      	cmp	r3, r4
 80006fe:	d8bc      	bhi.n	800067a <__udivmoddi4+0xc2>
 8000700:	e783      	b.n	800060a <__udivmoddi4+0x52>
 8000702:	4642      	mov	r2, r8
 8000704:	2320      	movs	r3, #32
 8000706:	2100      	movs	r1, #0
 8000708:	1a9b      	subs	r3, r3, r2
 800070a:	2200      	movs	r2, #0
 800070c:	9100      	str	r1, [sp, #0]
 800070e:	9201      	str	r2, [sp, #4]
 8000710:	2201      	movs	r2, #1
 8000712:	40da      	lsrs	r2, r3
 8000714:	9201      	str	r2, [sp, #4]
 8000716:	e786      	b.n	8000626 <__udivmoddi4+0x6e>
 8000718:	4642      	mov	r2, r8
 800071a:	2320      	movs	r3, #32
 800071c:	1a9b      	subs	r3, r3, r2
 800071e:	002a      	movs	r2, r5
 8000720:	4646      	mov	r6, r8
 8000722:	409a      	lsls	r2, r3
 8000724:	0023      	movs	r3, r4
 8000726:	40f3      	lsrs	r3, r6
 8000728:	4644      	mov	r4, r8
 800072a:	4313      	orrs	r3, r2
 800072c:	002a      	movs	r2, r5
 800072e:	40e2      	lsrs	r2, r4
 8000730:	001c      	movs	r4, r3
 8000732:	465b      	mov	r3, fp
 8000734:	0015      	movs	r5, r2
 8000736:	2b00      	cmp	r3, #0
 8000738:	dad4      	bge.n	80006e4 <__udivmoddi4+0x12c>
 800073a:	4642      	mov	r2, r8
 800073c:	002f      	movs	r7, r5
 800073e:	2320      	movs	r3, #32
 8000740:	0026      	movs	r6, r4
 8000742:	4097      	lsls	r7, r2
 8000744:	1a9b      	subs	r3, r3, r2
 8000746:	40de      	lsrs	r6, r3
 8000748:	003b      	movs	r3, r7
 800074a:	4333      	orrs	r3, r6
 800074c:	e7cd      	b.n	80006ea <__udivmoddi4+0x132>
 800074e:	46c0      	nop			; (mov r8, r8)

08000750 <__aeabi_fadd>:
 8000750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000752:	46c6      	mov	lr, r8
 8000754:	0243      	lsls	r3, r0, #9
 8000756:	0a5b      	lsrs	r3, r3, #9
 8000758:	024e      	lsls	r6, r1, #9
 800075a:	0045      	lsls	r5, r0, #1
 800075c:	004f      	lsls	r7, r1, #1
 800075e:	00da      	lsls	r2, r3, #3
 8000760:	0fc4      	lsrs	r4, r0, #31
 8000762:	469c      	mov	ip, r3
 8000764:	0a70      	lsrs	r0, r6, #9
 8000766:	4690      	mov	r8, r2
 8000768:	b500      	push	{lr}
 800076a:	0e2d      	lsrs	r5, r5, #24
 800076c:	0e3f      	lsrs	r7, r7, #24
 800076e:	0fc9      	lsrs	r1, r1, #31
 8000770:	09b6      	lsrs	r6, r6, #6
 8000772:	428c      	cmp	r4, r1
 8000774:	d04b      	beq.n	800080e <__aeabi_fadd+0xbe>
 8000776:	1bea      	subs	r2, r5, r7
 8000778:	2a00      	cmp	r2, #0
 800077a:	dd36      	ble.n	80007ea <__aeabi_fadd+0x9a>
 800077c:	2f00      	cmp	r7, #0
 800077e:	d061      	beq.n	8000844 <__aeabi_fadd+0xf4>
 8000780:	2dff      	cmp	r5, #255	; 0xff
 8000782:	d100      	bne.n	8000786 <__aeabi_fadd+0x36>
 8000784:	e0ad      	b.n	80008e2 <__aeabi_fadd+0x192>
 8000786:	2380      	movs	r3, #128	; 0x80
 8000788:	04db      	lsls	r3, r3, #19
 800078a:	431e      	orrs	r6, r3
 800078c:	2a1b      	cmp	r2, #27
 800078e:	dc00      	bgt.n	8000792 <__aeabi_fadd+0x42>
 8000790:	e0d3      	b.n	800093a <__aeabi_fadd+0x1ea>
 8000792:	2001      	movs	r0, #1
 8000794:	4643      	mov	r3, r8
 8000796:	1a18      	subs	r0, r3, r0
 8000798:	0143      	lsls	r3, r0, #5
 800079a:	d400      	bmi.n	800079e <__aeabi_fadd+0x4e>
 800079c:	e08c      	b.n	80008b8 <__aeabi_fadd+0x168>
 800079e:	0180      	lsls	r0, r0, #6
 80007a0:	0987      	lsrs	r7, r0, #6
 80007a2:	0038      	movs	r0, r7
 80007a4:	f002 f96e 	bl	8002a84 <__clzsi2>
 80007a8:	3805      	subs	r0, #5
 80007aa:	4087      	lsls	r7, r0
 80007ac:	4285      	cmp	r5, r0
 80007ae:	dc00      	bgt.n	80007b2 <__aeabi_fadd+0x62>
 80007b0:	e0b6      	b.n	8000920 <__aeabi_fadd+0x1d0>
 80007b2:	1a2d      	subs	r5, r5, r0
 80007b4:	48b3      	ldr	r0, [pc, #716]	; (8000a84 <__aeabi_fadd+0x334>)
 80007b6:	4038      	ands	r0, r7
 80007b8:	0743      	lsls	r3, r0, #29
 80007ba:	d004      	beq.n	80007c6 <__aeabi_fadd+0x76>
 80007bc:	230f      	movs	r3, #15
 80007be:	4003      	ands	r3, r0
 80007c0:	2b04      	cmp	r3, #4
 80007c2:	d000      	beq.n	80007c6 <__aeabi_fadd+0x76>
 80007c4:	3004      	adds	r0, #4
 80007c6:	0143      	lsls	r3, r0, #5
 80007c8:	d400      	bmi.n	80007cc <__aeabi_fadd+0x7c>
 80007ca:	e078      	b.n	80008be <__aeabi_fadd+0x16e>
 80007cc:	1c6a      	adds	r2, r5, #1
 80007ce:	2dfe      	cmp	r5, #254	; 0xfe
 80007d0:	d065      	beq.n	800089e <__aeabi_fadd+0x14e>
 80007d2:	0180      	lsls	r0, r0, #6
 80007d4:	0a43      	lsrs	r3, r0, #9
 80007d6:	469c      	mov	ip, r3
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	4663      	mov	r3, ip
 80007dc:	05d0      	lsls	r0, r2, #23
 80007de:	4318      	orrs	r0, r3
 80007e0:	07e4      	lsls	r4, r4, #31
 80007e2:	4320      	orrs	r0, r4
 80007e4:	bc80      	pop	{r7}
 80007e6:	46b8      	mov	r8, r7
 80007e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ea:	2a00      	cmp	r2, #0
 80007ec:	d035      	beq.n	800085a <__aeabi_fadd+0x10a>
 80007ee:	1b7a      	subs	r2, r7, r5
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d000      	beq.n	80007f6 <__aeabi_fadd+0xa6>
 80007f4:	e0af      	b.n	8000956 <__aeabi_fadd+0x206>
 80007f6:	4643      	mov	r3, r8
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0xae>
 80007fc:	e0a7      	b.n	800094e <__aeabi_fadd+0x1fe>
 80007fe:	1e53      	subs	r3, r2, #1
 8000800:	2a01      	cmp	r2, #1
 8000802:	d100      	bne.n	8000806 <__aeabi_fadd+0xb6>
 8000804:	e12f      	b.n	8000a66 <__aeabi_fadd+0x316>
 8000806:	2aff      	cmp	r2, #255	; 0xff
 8000808:	d069      	beq.n	80008de <__aeabi_fadd+0x18e>
 800080a:	001a      	movs	r2, r3
 800080c:	e0aa      	b.n	8000964 <__aeabi_fadd+0x214>
 800080e:	1be9      	subs	r1, r5, r7
 8000810:	2900      	cmp	r1, #0
 8000812:	dd70      	ble.n	80008f6 <__aeabi_fadd+0x1a6>
 8000814:	2f00      	cmp	r7, #0
 8000816:	d037      	beq.n	8000888 <__aeabi_fadd+0x138>
 8000818:	2dff      	cmp	r5, #255	; 0xff
 800081a:	d062      	beq.n	80008e2 <__aeabi_fadd+0x192>
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	04db      	lsls	r3, r3, #19
 8000820:	431e      	orrs	r6, r3
 8000822:	291b      	cmp	r1, #27
 8000824:	dc00      	bgt.n	8000828 <__aeabi_fadd+0xd8>
 8000826:	e0b0      	b.n	800098a <__aeabi_fadd+0x23a>
 8000828:	2001      	movs	r0, #1
 800082a:	4440      	add	r0, r8
 800082c:	0143      	lsls	r3, r0, #5
 800082e:	d543      	bpl.n	80008b8 <__aeabi_fadd+0x168>
 8000830:	3501      	adds	r5, #1
 8000832:	2dff      	cmp	r5, #255	; 0xff
 8000834:	d033      	beq.n	800089e <__aeabi_fadd+0x14e>
 8000836:	2301      	movs	r3, #1
 8000838:	4a93      	ldr	r2, [pc, #588]	; (8000a88 <__aeabi_fadd+0x338>)
 800083a:	4003      	ands	r3, r0
 800083c:	0840      	lsrs	r0, r0, #1
 800083e:	4010      	ands	r0, r2
 8000840:	4318      	orrs	r0, r3
 8000842:	e7b9      	b.n	80007b8 <__aeabi_fadd+0x68>
 8000844:	2e00      	cmp	r6, #0
 8000846:	d100      	bne.n	800084a <__aeabi_fadd+0xfa>
 8000848:	e083      	b.n	8000952 <__aeabi_fadd+0x202>
 800084a:	1e51      	subs	r1, r2, #1
 800084c:	2a01      	cmp	r2, #1
 800084e:	d100      	bne.n	8000852 <__aeabi_fadd+0x102>
 8000850:	e0d8      	b.n	8000a04 <__aeabi_fadd+0x2b4>
 8000852:	2aff      	cmp	r2, #255	; 0xff
 8000854:	d045      	beq.n	80008e2 <__aeabi_fadd+0x192>
 8000856:	000a      	movs	r2, r1
 8000858:	e798      	b.n	800078c <__aeabi_fadd+0x3c>
 800085a:	27fe      	movs	r7, #254	; 0xfe
 800085c:	1c6a      	adds	r2, r5, #1
 800085e:	4217      	tst	r7, r2
 8000860:	d000      	beq.n	8000864 <__aeabi_fadd+0x114>
 8000862:	e086      	b.n	8000972 <__aeabi_fadd+0x222>
 8000864:	2d00      	cmp	r5, #0
 8000866:	d000      	beq.n	800086a <__aeabi_fadd+0x11a>
 8000868:	e0b7      	b.n	80009da <__aeabi_fadd+0x28a>
 800086a:	4643      	mov	r3, r8
 800086c:	2b00      	cmp	r3, #0
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0x122>
 8000870:	e0f3      	b.n	8000a5a <__aeabi_fadd+0x30a>
 8000872:	2200      	movs	r2, #0
 8000874:	2e00      	cmp	r6, #0
 8000876:	d0b0      	beq.n	80007da <__aeabi_fadd+0x8a>
 8000878:	1b98      	subs	r0, r3, r6
 800087a:	0143      	lsls	r3, r0, #5
 800087c:	d400      	bmi.n	8000880 <__aeabi_fadd+0x130>
 800087e:	e0fa      	b.n	8000a76 <__aeabi_fadd+0x326>
 8000880:	4643      	mov	r3, r8
 8000882:	000c      	movs	r4, r1
 8000884:	1af0      	subs	r0, r6, r3
 8000886:	e797      	b.n	80007b8 <__aeabi_fadd+0x68>
 8000888:	2e00      	cmp	r6, #0
 800088a:	d100      	bne.n	800088e <__aeabi_fadd+0x13e>
 800088c:	e0c8      	b.n	8000a20 <__aeabi_fadd+0x2d0>
 800088e:	1e4a      	subs	r2, r1, #1
 8000890:	2901      	cmp	r1, #1
 8000892:	d100      	bne.n	8000896 <__aeabi_fadd+0x146>
 8000894:	e0ae      	b.n	80009f4 <__aeabi_fadd+0x2a4>
 8000896:	29ff      	cmp	r1, #255	; 0xff
 8000898:	d023      	beq.n	80008e2 <__aeabi_fadd+0x192>
 800089a:	0011      	movs	r1, r2
 800089c:	e7c1      	b.n	8000822 <__aeabi_fadd+0xd2>
 800089e:	2300      	movs	r3, #0
 80008a0:	22ff      	movs	r2, #255	; 0xff
 80008a2:	469c      	mov	ip, r3
 80008a4:	e799      	b.n	80007da <__aeabi_fadd+0x8a>
 80008a6:	21fe      	movs	r1, #254	; 0xfe
 80008a8:	1c6a      	adds	r2, r5, #1
 80008aa:	4211      	tst	r1, r2
 80008ac:	d077      	beq.n	800099e <__aeabi_fadd+0x24e>
 80008ae:	2aff      	cmp	r2, #255	; 0xff
 80008b0:	d0f5      	beq.n	800089e <__aeabi_fadd+0x14e>
 80008b2:	0015      	movs	r5, r2
 80008b4:	4446      	add	r6, r8
 80008b6:	0870      	lsrs	r0, r6, #1
 80008b8:	0743      	lsls	r3, r0, #29
 80008ba:	d000      	beq.n	80008be <__aeabi_fadd+0x16e>
 80008bc:	e77e      	b.n	80007bc <__aeabi_fadd+0x6c>
 80008be:	08c3      	lsrs	r3, r0, #3
 80008c0:	2dff      	cmp	r5, #255	; 0xff
 80008c2:	d00e      	beq.n	80008e2 <__aeabi_fadd+0x192>
 80008c4:	025b      	lsls	r3, r3, #9
 80008c6:	0a5b      	lsrs	r3, r3, #9
 80008c8:	469c      	mov	ip, r3
 80008ca:	b2ea      	uxtb	r2, r5
 80008cc:	e785      	b.n	80007da <__aeabi_fadd+0x8a>
 80008ce:	2e00      	cmp	r6, #0
 80008d0:	d007      	beq.n	80008e2 <__aeabi_fadd+0x192>
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	03d2      	lsls	r2, r2, #15
 80008d6:	4213      	tst	r3, r2
 80008d8:	d003      	beq.n	80008e2 <__aeabi_fadd+0x192>
 80008da:	4210      	tst	r0, r2
 80008dc:	d101      	bne.n	80008e2 <__aeabi_fadd+0x192>
 80008de:	000c      	movs	r4, r1
 80008e0:	0003      	movs	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0db      	beq.n	800089e <__aeabi_fadd+0x14e>
 80008e6:	2080      	movs	r0, #128	; 0x80
 80008e8:	03c0      	lsls	r0, r0, #15
 80008ea:	4318      	orrs	r0, r3
 80008ec:	0240      	lsls	r0, r0, #9
 80008ee:	0a43      	lsrs	r3, r0, #9
 80008f0:	469c      	mov	ip, r3
 80008f2:	22ff      	movs	r2, #255	; 0xff
 80008f4:	e771      	b.n	80007da <__aeabi_fadd+0x8a>
 80008f6:	2900      	cmp	r1, #0
 80008f8:	d0d5      	beq.n	80008a6 <__aeabi_fadd+0x156>
 80008fa:	1b7a      	subs	r2, r7, r5
 80008fc:	2d00      	cmp	r5, #0
 80008fe:	d160      	bne.n	80009c2 <__aeabi_fadd+0x272>
 8000900:	4643      	mov	r3, r8
 8000902:	2b00      	cmp	r3, #0
 8000904:	d024      	beq.n	8000950 <__aeabi_fadd+0x200>
 8000906:	1e53      	subs	r3, r2, #1
 8000908:	2a01      	cmp	r2, #1
 800090a:	d073      	beq.n	80009f4 <__aeabi_fadd+0x2a4>
 800090c:	2aff      	cmp	r2, #255	; 0xff
 800090e:	d0e7      	beq.n	80008e0 <__aeabi_fadd+0x190>
 8000910:	001a      	movs	r2, r3
 8000912:	2a1b      	cmp	r2, #27
 8000914:	dc00      	bgt.n	8000918 <__aeabi_fadd+0x1c8>
 8000916:	e085      	b.n	8000a24 <__aeabi_fadd+0x2d4>
 8000918:	2001      	movs	r0, #1
 800091a:	003d      	movs	r5, r7
 800091c:	1980      	adds	r0, r0, r6
 800091e:	e785      	b.n	800082c <__aeabi_fadd+0xdc>
 8000920:	2320      	movs	r3, #32
 8000922:	003a      	movs	r2, r7
 8000924:	1b45      	subs	r5, r0, r5
 8000926:	0038      	movs	r0, r7
 8000928:	3501      	adds	r5, #1
 800092a:	40ea      	lsrs	r2, r5
 800092c:	1b5d      	subs	r5, r3, r5
 800092e:	40a8      	lsls	r0, r5
 8000930:	1e43      	subs	r3, r0, #1
 8000932:	4198      	sbcs	r0, r3
 8000934:	2500      	movs	r5, #0
 8000936:	4310      	orrs	r0, r2
 8000938:	e73e      	b.n	80007b8 <__aeabi_fadd+0x68>
 800093a:	2320      	movs	r3, #32
 800093c:	0030      	movs	r0, r6
 800093e:	1a9b      	subs	r3, r3, r2
 8000940:	0031      	movs	r1, r6
 8000942:	4098      	lsls	r0, r3
 8000944:	40d1      	lsrs	r1, r2
 8000946:	1e43      	subs	r3, r0, #1
 8000948:	4198      	sbcs	r0, r3
 800094a:	4308      	orrs	r0, r1
 800094c:	e722      	b.n	8000794 <__aeabi_fadd+0x44>
 800094e:	000c      	movs	r4, r1
 8000950:	0003      	movs	r3, r0
 8000952:	0015      	movs	r5, r2
 8000954:	e7b4      	b.n	80008c0 <__aeabi_fadd+0x170>
 8000956:	2fff      	cmp	r7, #255	; 0xff
 8000958:	d0c1      	beq.n	80008de <__aeabi_fadd+0x18e>
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	4640      	mov	r0, r8
 800095e:	04db      	lsls	r3, r3, #19
 8000960:	4318      	orrs	r0, r3
 8000962:	4680      	mov	r8, r0
 8000964:	2a1b      	cmp	r2, #27
 8000966:	dd51      	ble.n	8000a0c <__aeabi_fadd+0x2bc>
 8000968:	2001      	movs	r0, #1
 800096a:	000c      	movs	r4, r1
 800096c:	003d      	movs	r5, r7
 800096e:	1a30      	subs	r0, r6, r0
 8000970:	e712      	b.n	8000798 <__aeabi_fadd+0x48>
 8000972:	4643      	mov	r3, r8
 8000974:	1b9f      	subs	r7, r3, r6
 8000976:	017b      	lsls	r3, r7, #5
 8000978:	d42b      	bmi.n	80009d2 <__aeabi_fadd+0x282>
 800097a:	2f00      	cmp	r7, #0
 800097c:	d000      	beq.n	8000980 <__aeabi_fadd+0x230>
 800097e:	e710      	b.n	80007a2 <__aeabi_fadd+0x52>
 8000980:	2300      	movs	r3, #0
 8000982:	2400      	movs	r4, #0
 8000984:	2200      	movs	r2, #0
 8000986:	469c      	mov	ip, r3
 8000988:	e727      	b.n	80007da <__aeabi_fadd+0x8a>
 800098a:	2320      	movs	r3, #32
 800098c:	0032      	movs	r2, r6
 800098e:	0030      	movs	r0, r6
 8000990:	40ca      	lsrs	r2, r1
 8000992:	1a59      	subs	r1, r3, r1
 8000994:	4088      	lsls	r0, r1
 8000996:	1e43      	subs	r3, r0, #1
 8000998:	4198      	sbcs	r0, r3
 800099a:	4310      	orrs	r0, r2
 800099c:	e745      	b.n	800082a <__aeabi_fadd+0xda>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d14a      	bne.n	8000a38 <__aeabi_fadd+0x2e8>
 80009a2:	4643      	mov	r3, r8
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d063      	beq.n	8000a70 <__aeabi_fadd+0x320>
 80009a8:	2200      	movs	r2, #0
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d100      	bne.n	80009b0 <__aeabi_fadd+0x260>
 80009ae:	e714      	b.n	80007da <__aeabi_fadd+0x8a>
 80009b0:	0030      	movs	r0, r6
 80009b2:	4440      	add	r0, r8
 80009b4:	0143      	lsls	r3, r0, #5
 80009b6:	d400      	bmi.n	80009ba <__aeabi_fadd+0x26a>
 80009b8:	e77e      	b.n	80008b8 <__aeabi_fadd+0x168>
 80009ba:	4b32      	ldr	r3, [pc, #200]	; (8000a84 <__aeabi_fadd+0x334>)
 80009bc:	3501      	adds	r5, #1
 80009be:	4018      	ands	r0, r3
 80009c0:	e77a      	b.n	80008b8 <__aeabi_fadd+0x168>
 80009c2:	2fff      	cmp	r7, #255	; 0xff
 80009c4:	d08c      	beq.n	80008e0 <__aeabi_fadd+0x190>
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	4641      	mov	r1, r8
 80009ca:	04db      	lsls	r3, r3, #19
 80009cc:	4319      	orrs	r1, r3
 80009ce:	4688      	mov	r8, r1
 80009d0:	e79f      	b.n	8000912 <__aeabi_fadd+0x1c2>
 80009d2:	4643      	mov	r3, r8
 80009d4:	000c      	movs	r4, r1
 80009d6:	1af7      	subs	r7, r6, r3
 80009d8:	e6e3      	b.n	80007a2 <__aeabi_fadd+0x52>
 80009da:	4642      	mov	r2, r8
 80009dc:	2a00      	cmp	r2, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x292>
 80009e0:	e775      	b.n	80008ce <__aeabi_fadd+0x17e>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d000      	beq.n	80009e8 <__aeabi_fadd+0x298>
 80009e6:	e77a      	b.n	80008de <__aeabi_fadd+0x18e>
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	03db      	lsls	r3, r3, #15
 80009ec:	2400      	movs	r4, #0
 80009ee:	469c      	mov	ip, r3
 80009f0:	22ff      	movs	r2, #255	; 0xff
 80009f2:	e6f2      	b.n	80007da <__aeabi_fadd+0x8a>
 80009f4:	0030      	movs	r0, r6
 80009f6:	4440      	add	r0, r8
 80009f8:	2501      	movs	r5, #1
 80009fa:	0143      	lsls	r3, r0, #5
 80009fc:	d400      	bmi.n	8000a00 <__aeabi_fadd+0x2b0>
 80009fe:	e75b      	b.n	80008b8 <__aeabi_fadd+0x168>
 8000a00:	2502      	movs	r5, #2
 8000a02:	e718      	b.n	8000836 <__aeabi_fadd+0xe6>
 8000a04:	4643      	mov	r3, r8
 8000a06:	2501      	movs	r5, #1
 8000a08:	1b98      	subs	r0, r3, r6
 8000a0a:	e6c5      	b.n	8000798 <__aeabi_fadd+0x48>
 8000a0c:	2320      	movs	r3, #32
 8000a0e:	4644      	mov	r4, r8
 8000a10:	4640      	mov	r0, r8
 8000a12:	40d4      	lsrs	r4, r2
 8000a14:	1a9a      	subs	r2, r3, r2
 8000a16:	4090      	lsls	r0, r2
 8000a18:	1e43      	subs	r3, r0, #1
 8000a1a:	4198      	sbcs	r0, r3
 8000a1c:	4320      	orrs	r0, r4
 8000a1e:	e7a4      	b.n	800096a <__aeabi_fadd+0x21a>
 8000a20:	000d      	movs	r5, r1
 8000a22:	e74d      	b.n	80008c0 <__aeabi_fadd+0x170>
 8000a24:	2320      	movs	r3, #32
 8000a26:	4641      	mov	r1, r8
 8000a28:	4640      	mov	r0, r8
 8000a2a:	40d1      	lsrs	r1, r2
 8000a2c:	1a9a      	subs	r2, r3, r2
 8000a2e:	4090      	lsls	r0, r2
 8000a30:	1e43      	subs	r3, r0, #1
 8000a32:	4198      	sbcs	r0, r3
 8000a34:	4308      	orrs	r0, r1
 8000a36:	e770      	b.n	800091a <__aeabi_fadd+0x1ca>
 8000a38:	4642      	mov	r2, r8
 8000a3a:	2a00      	cmp	r2, #0
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_fadd+0x2f0>
 8000a3e:	e74f      	b.n	80008e0 <__aeabi_fadd+0x190>
 8000a40:	2e00      	cmp	r6, #0
 8000a42:	d100      	bne.n	8000a46 <__aeabi_fadd+0x2f6>
 8000a44:	e74d      	b.n	80008e2 <__aeabi_fadd+0x192>
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	03d2      	lsls	r2, r2, #15
 8000a4a:	4213      	tst	r3, r2
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_fadd+0x300>
 8000a4e:	e748      	b.n	80008e2 <__aeabi_fadd+0x192>
 8000a50:	4210      	tst	r0, r2
 8000a52:	d000      	beq.n	8000a56 <__aeabi_fadd+0x306>
 8000a54:	e745      	b.n	80008e2 <__aeabi_fadd+0x192>
 8000a56:	0003      	movs	r3, r0
 8000a58:	e743      	b.n	80008e2 <__aeabi_fadd+0x192>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d090      	beq.n	8000980 <__aeabi_fadd+0x230>
 8000a5e:	000c      	movs	r4, r1
 8000a60:	4684      	mov	ip, r0
 8000a62:	2200      	movs	r2, #0
 8000a64:	e6b9      	b.n	80007da <__aeabi_fadd+0x8a>
 8000a66:	4643      	mov	r3, r8
 8000a68:	000c      	movs	r4, r1
 8000a6a:	1af0      	subs	r0, r6, r3
 8000a6c:	3501      	adds	r5, #1
 8000a6e:	e693      	b.n	8000798 <__aeabi_fadd+0x48>
 8000a70:	4684      	mov	ip, r0
 8000a72:	2200      	movs	r2, #0
 8000a74:	e6b1      	b.n	80007da <__aeabi_fadd+0x8a>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	d000      	beq.n	8000a7c <__aeabi_fadd+0x32c>
 8000a7a:	e71d      	b.n	80008b8 <__aeabi_fadd+0x168>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	2400      	movs	r4, #0
 8000a80:	469c      	mov	ip, r3
 8000a82:	e6aa      	b.n	80007da <__aeabi_fadd+0x8a>
 8000a84:	fbffffff 	.word	0xfbffffff
 8000a88:	7dffffff 	.word	0x7dffffff

08000a8c <__aeabi_fdiv>:
 8000a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8e:	464f      	mov	r7, r9
 8000a90:	4646      	mov	r6, r8
 8000a92:	46d6      	mov	lr, sl
 8000a94:	0245      	lsls	r5, r0, #9
 8000a96:	b5c0      	push	{r6, r7, lr}
 8000a98:	0047      	lsls	r7, r0, #1
 8000a9a:	1c0c      	adds	r4, r1, #0
 8000a9c:	0a6d      	lsrs	r5, r5, #9
 8000a9e:	0e3f      	lsrs	r7, r7, #24
 8000aa0:	0fc6      	lsrs	r6, r0, #31
 8000aa2:	2f00      	cmp	r7, #0
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_fdiv+0x1c>
 8000aa6:	e070      	b.n	8000b8a <__aeabi_fdiv+0xfe>
 8000aa8:	2fff      	cmp	r7, #255	; 0xff
 8000aaa:	d100      	bne.n	8000aae <__aeabi_fdiv+0x22>
 8000aac:	e075      	b.n	8000b9a <__aeabi_fdiv+0x10e>
 8000aae:	00eb      	lsls	r3, r5, #3
 8000ab0:	2580      	movs	r5, #128	; 0x80
 8000ab2:	04ed      	lsls	r5, r5, #19
 8000ab4:	431d      	orrs	r5, r3
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	4699      	mov	r9, r3
 8000aba:	469a      	mov	sl, r3
 8000abc:	3f7f      	subs	r7, #127	; 0x7f
 8000abe:	0260      	lsls	r0, r4, #9
 8000ac0:	0a43      	lsrs	r3, r0, #9
 8000ac2:	4698      	mov	r8, r3
 8000ac4:	0063      	lsls	r3, r4, #1
 8000ac6:	0e1b      	lsrs	r3, r3, #24
 8000ac8:	0fe4      	lsrs	r4, r4, #31
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d04e      	beq.n	8000b6c <__aeabi_fdiv+0xe0>
 8000ace:	2bff      	cmp	r3, #255	; 0xff
 8000ad0:	d046      	beq.n	8000b60 <__aeabi_fdiv+0xd4>
 8000ad2:	4642      	mov	r2, r8
 8000ad4:	00d0      	lsls	r0, r2, #3
 8000ad6:	2280      	movs	r2, #128	; 0x80
 8000ad8:	04d2      	lsls	r2, r2, #19
 8000ada:	4302      	orrs	r2, r0
 8000adc:	4690      	mov	r8, r2
 8000ade:	2200      	movs	r2, #0
 8000ae0:	3b7f      	subs	r3, #127	; 0x7f
 8000ae2:	0031      	movs	r1, r6
 8000ae4:	1aff      	subs	r7, r7, r3
 8000ae6:	464b      	mov	r3, r9
 8000ae8:	4061      	eors	r1, r4
 8000aea:	b2c9      	uxtb	r1, r1
 8000aec:	4313      	orrs	r3, r2
 8000aee:	2b0f      	cmp	r3, #15
 8000af0:	d900      	bls.n	8000af4 <__aeabi_fdiv+0x68>
 8000af2:	e0b5      	b.n	8000c60 <__aeabi_fdiv+0x1d4>
 8000af4:	486e      	ldr	r0, [pc, #440]	; (8000cb0 <__aeabi_fdiv+0x224>)
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	58c3      	ldr	r3, [r0, r3]
 8000afa:	469f      	mov	pc, r3
 8000afc:	2300      	movs	r3, #0
 8000afe:	4698      	mov	r8, r3
 8000b00:	0026      	movs	r6, r4
 8000b02:	4645      	mov	r5, r8
 8000b04:	4692      	mov	sl, r2
 8000b06:	4653      	mov	r3, sl
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_fdiv+0x82>
 8000b0c:	e089      	b.n	8000c22 <__aeabi_fdiv+0x196>
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fdiv+0x88>
 8000b12:	e09e      	b.n	8000c52 <__aeabi_fdiv+0x1c6>
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d018      	beq.n	8000b4a <__aeabi_fdiv+0xbe>
 8000b18:	003b      	movs	r3, r7
 8000b1a:	337f      	adds	r3, #127	; 0x7f
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	dd69      	ble.n	8000bf4 <__aeabi_fdiv+0x168>
 8000b20:	076a      	lsls	r2, r5, #29
 8000b22:	d004      	beq.n	8000b2e <__aeabi_fdiv+0xa2>
 8000b24:	220f      	movs	r2, #15
 8000b26:	402a      	ands	r2, r5
 8000b28:	2a04      	cmp	r2, #4
 8000b2a:	d000      	beq.n	8000b2e <__aeabi_fdiv+0xa2>
 8000b2c:	3504      	adds	r5, #4
 8000b2e:	012a      	lsls	r2, r5, #4
 8000b30:	d503      	bpl.n	8000b3a <__aeabi_fdiv+0xae>
 8000b32:	4b60      	ldr	r3, [pc, #384]	; (8000cb4 <__aeabi_fdiv+0x228>)
 8000b34:	401d      	ands	r5, r3
 8000b36:	003b      	movs	r3, r7
 8000b38:	3380      	adds	r3, #128	; 0x80
 8000b3a:	2bfe      	cmp	r3, #254	; 0xfe
 8000b3c:	dd00      	ble.n	8000b40 <__aeabi_fdiv+0xb4>
 8000b3e:	e070      	b.n	8000c22 <__aeabi_fdiv+0x196>
 8000b40:	01ad      	lsls	r5, r5, #6
 8000b42:	0a6d      	lsrs	r5, r5, #9
 8000b44:	b2d8      	uxtb	r0, r3
 8000b46:	e002      	b.n	8000b4e <__aeabi_fdiv+0xc2>
 8000b48:	000e      	movs	r6, r1
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	2500      	movs	r5, #0
 8000b4e:	05c0      	lsls	r0, r0, #23
 8000b50:	4328      	orrs	r0, r5
 8000b52:	07f6      	lsls	r6, r6, #31
 8000b54:	4330      	orrs	r0, r6
 8000b56:	bce0      	pop	{r5, r6, r7}
 8000b58:	46ba      	mov	sl, r7
 8000b5a:	46b1      	mov	r9, r6
 8000b5c:	46a8      	mov	r8, r5
 8000b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b60:	4643      	mov	r3, r8
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d13f      	bne.n	8000be6 <__aeabi_fdiv+0x15a>
 8000b66:	2202      	movs	r2, #2
 8000b68:	3fff      	subs	r7, #255	; 0xff
 8000b6a:	e003      	b.n	8000b74 <__aeabi_fdiv+0xe8>
 8000b6c:	4643      	mov	r3, r8
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d12d      	bne.n	8000bce <__aeabi_fdiv+0x142>
 8000b72:	2201      	movs	r2, #1
 8000b74:	0031      	movs	r1, r6
 8000b76:	464b      	mov	r3, r9
 8000b78:	4061      	eors	r1, r4
 8000b7a:	b2c9      	uxtb	r1, r1
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	2b0f      	cmp	r3, #15
 8000b80:	d834      	bhi.n	8000bec <__aeabi_fdiv+0x160>
 8000b82:	484d      	ldr	r0, [pc, #308]	; (8000cb8 <__aeabi_fdiv+0x22c>)
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	58c3      	ldr	r3, [r0, r3]
 8000b88:	469f      	mov	pc, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d113      	bne.n	8000bb6 <__aeabi_fdiv+0x12a>
 8000b8e:	2304      	movs	r3, #4
 8000b90:	4699      	mov	r9, r3
 8000b92:	3b03      	subs	r3, #3
 8000b94:	2700      	movs	r7, #0
 8000b96:	469a      	mov	sl, r3
 8000b98:	e791      	b.n	8000abe <__aeabi_fdiv+0x32>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d105      	bne.n	8000baa <__aeabi_fdiv+0x11e>
 8000b9e:	2308      	movs	r3, #8
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	3b06      	subs	r3, #6
 8000ba4:	27ff      	movs	r7, #255	; 0xff
 8000ba6:	469a      	mov	sl, r3
 8000ba8:	e789      	b.n	8000abe <__aeabi_fdiv+0x32>
 8000baa:	230c      	movs	r3, #12
 8000bac:	4699      	mov	r9, r3
 8000bae:	3b09      	subs	r3, #9
 8000bb0:	27ff      	movs	r7, #255	; 0xff
 8000bb2:	469a      	mov	sl, r3
 8000bb4:	e783      	b.n	8000abe <__aeabi_fdiv+0x32>
 8000bb6:	0028      	movs	r0, r5
 8000bb8:	f001 ff64 	bl	8002a84 <__clzsi2>
 8000bbc:	2776      	movs	r7, #118	; 0x76
 8000bbe:	1f43      	subs	r3, r0, #5
 8000bc0:	409d      	lsls	r5, r3
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	427f      	negs	r7, r7
 8000bc6:	4699      	mov	r9, r3
 8000bc8:	469a      	mov	sl, r3
 8000bca:	1a3f      	subs	r7, r7, r0
 8000bcc:	e777      	b.n	8000abe <__aeabi_fdiv+0x32>
 8000bce:	4640      	mov	r0, r8
 8000bd0:	f001 ff58 	bl	8002a84 <__clzsi2>
 8000bd4:	4642      	mov	r2, r8
 8000bd6:	1f43      	subs	r3, r0, #5
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	2376      	movs	r3, #118	; 0x76
 8000bdc:	425b      	negs	r3, r3
 8000bde:	4690      	mov	r8, r2
 8000be0:	1a1b      	subs	r3, r3, r0
 8000be2:	2200      	movs	r2, #0
 8000be4:	e77d      	b.n	8000ae2 <__aeabi_fdiv+0x56>
 8000be6:	23ff      	movs	r3, #255	; 0xff
 8000be8:	2203      	movs	r2, #3
 8000bea:	e77a      	b.n	8000ae2 <__aeabi_fdiv+0x56>
 8000bec:	000e      	movs	r6, r1
 8000bee:	20ff      	movs	r0, #255	; 0xff
 8000bf0:	2500      	movs	r5, #0
 8000bf2:	e7ac      	b.n	8000b4e <__aeabi_fdiv+0xc2>
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	1ac0      	subs	r0, r0, r3
 8000bf8:	281b      	cmp	r0, #27
 8000bfa:	dca6      	bgt.n	8000b4a <__aeabi_fdiv+0xbe>
 8000bfc:	379e      	adds	r7, #158	; 0x9e
 8000bfe:	002a      	movs	r2, r5
 8000c00:	40bd      	lsls	r5, r7
 8000c02:	40c2      	lsrs	r2, r0
 8000c04:	1e6b      	subs	r3, r5, #1
 8000c06:	419d      	sbcs	r5, r3
 8000c08:	4315      	orrs	r5, r2
 8000c0a:	076b      	lsls	r3, r5, #29
 8000c0c:	d004      	beq.n	8000c18 <__aeabi_fdiv+0x18c>
 8000c0e:	230f      	movs	r3, #15
 8000c10:	402b      	ands	r3, r5
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	d000      	beq.n	8000c18 <__aeabi_fdiv+0x18c>
 8000c16:	3504      	adds	r5, #4
 8000c18:	016b      	lsls	r3, r5, #5
 8000c1a:	d544      	bpl.n	8000ca6 <__aeabi_fdiv+0x21a>
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	2500      	movs	r5, #0
 8000c20:	e795      	b.n	8000b4e <__aeabi_fdiv+0xc2>
 8000c22:	20ff      	movs	r0, #255	; 0xff
 8000c24:	2500      	movs	r5, #0
 8000c26:	e792      	b.n	8000b4e <__aeabi_fdiv+0xc2>
 8000c28:	2580      	movs	r5, #128	; 0x80
 8000c2a:	2600      	movs	r6, #0
 8000c2c:	20ff      	movs	r0, #255	; 0xff
 8000c2e:	03ed      	lsls	r5, r5, #15
 8000c30:	e78d      	b.n	8000b4e <__aeabi_fdiv+0xc2>
 8000c32:	2300      	movs	r3, #0
 8000c34:	4698      	mov	r8, r3
 8000c36:	2080      	movs	r0, #128	; 0x80
 8000c38:	03c0      	lsls	r0, r0, #15
 8000c3a:	4205      	tst	r5, r0
 8000c3c:	d009      	beq.n	8000c52 <__aeabi_fdiv+0x1c6>
 8000c3e:	4643      	mov	r3, r8
 8000c40:	4203      	tst	r3, r0
 8000c42:	d106      	bne.n	8000c52 <__aeabi_fdiv+0x1c6>
 8000c44:	4645      	mov	r5, r8
 8000c46:	4305      	orrs	r5, r0
 8000c48:	026d      	lsls	r5, r5, #9
 8000c4a:	0026      	movs	r6, r4
 8000c4c:	20ff      	movs	r0, #255	; 0xff
 8000c4e:	0a6d      	lsrs	r5, r5, #9
 8000c50:	e77d      	b.n	8000b4e <__aeabi_fdiv+0xc2>
 8000c52:	2080      	movs	r0, #128	; 0x80
 8000c54:	03c0      	lsls	r0, r0, #15
 8000c56:	4305      	orrs	r5, r0
 8000c58:	026d      	lsls	r5, r5, #9
 8000c5a:	20ff      	movs	r0, #255	; 0xff
 8000c5c:	0a6d      	lsrs	r5, r5, #9
 8000c5e:	e776      	b.n	8000b4e <__aeabi_fdiv+0xc2>
 8000c60:	4642      	mov	r2, r8
 8000c62:	016b      	lsls	r3, r5, #5
 8000c64:	0150      	lsls	r0, r2, #5
 8000c66:	4283      	cmp	r3, r0
 8000c68:	d219      	bcs.n	8000c9e <__aeabi_fdiv+0x212>
 8000c6a:	221b      	movs	r2, #27
 8000c6c:	2500      	movs	r5, #0
 8000c6e:	3f01      	subs	r7, #1
 8000c70:	2601      	movs	r6, #1
 8000c72:	001c      	movs	r4, r3
 8000c74:	006d      	lsls	r5, r5, #1
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	db01      	blt.n	8000c80 <__aeabi_fdiv+0x1f4>
 8000c7c:	4298      	cmp	r0, r3
 8000c7e:	d801      	bhi.n	8000c84 <__aeabi_fdiv+0x1f8>
 8000c80:	1a1b      	subs	r3, r3, r0
 8000c82:	4335      	orrs	r5, r6
 8000c84:	3a01      	subs	r2, #1
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d1f3      	bne.n	8000c72 <__aeabi_fdiv+0x1e6>
 8000c8a:	1e5a      	subs	r2, r3, #1
 8000c8c:	4193      	sbcs	r3, r2
 8000c8e:	431d      	orrs	r5, r3
 8000c90:	003b      	movs	r3, r7
 8000c92:	337f      	adds	r3, #127	; 0x7f
 8000c94:	000e      	movs	r6, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	dd00      	ble.n	8000c9c <__aeabi_fdiv+0x210>
 8000c9a:	e741      	b.n	8000b20 <__aeabi_fdiv+0x94>
 8000c9c:	e7aa      	b.n	8000bf4 <__aeabi_fdiv+0x168>
 8000c9e:	221a      	movs	r2, #26
 8000ca0:	2501      	movs	r5, #1
 8000ca2:	1a1b      	subs	r3, r3, r0
 8000ca4:	e7e4      	b.n	8000c70 <__aeabi_fdiv+0x1e4>
 8000ca6:	01ad      	lsls	r5, r5, #6
 8000ca8:	2000      	movs	r0, #0
 8000caa:	0a6d      	lsrs	r5, r5, #9
 8000cac:	e74f      	b.n	8000b4e <__aeabi_fdiv+0xc2>
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	0800b814 	.word	0x0800b814
 8000cb4:	f7ffffff 	.word	0xf7ffffff
 8000cb8:	0800b854 	.word	0x0800b854

08000cbc <__eqsf2>:
 8000cbc:	b570      	push	{r4, r5, r6, lr}
 8000cbe:	0042      	lsls	r2, r0, #1
 8000cc0:	0245      	lsls	r5, r0, #9
 8000cc2:	024e      	lsls	r6, r1, #9
 8000cc4:	004c      	lsls	r4, r1, #1
 8000cc6:	0fc3      	lsrs	r3, r0, #31
 8000cc8:	0a6d      	lsrs	r5, r5, #9
 8000cca:	2001      	movs	r0, #1
 8000ccc:	0e12      	lsrs	r2, r2, #24
 8000cce:	0a76      	lsrs	r6, r6, #9
 8000cd0:	0e24      	lsrs	r4, r4, #24
 8000cd2:	0fc9      	lsrs	r1, r1, #31
 8000cd4:	2aff      	cmp	r2, #255	; 0xff
 8000cd6:	d006      	beq.n	8000ce6 <__eqsf2+0x2a>
 8000cd8:	2cff      	cmp	r4, #255	; 0xff
 8000cda:	d003      	beq.n	8000ce4 <__eqsf2+0x28>
 8000cdc:	42a2      	cmp	r2, r4
 8000cde:	d101      	bne.n	8000ce4 <__eqsf2+0x28>
 8000ce0:	42b5      	cmp	r5, r6
 8000ce2:	d006      	beq.n	8000cf2 <__eqsf2+0x36>
 8000ce4:	bd70      	pop	{r4, r5, r6, pc}
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d1fc      	bne.n	8000ce4 <__eqsf2+0x28>
 8000cea:	2cff      	cmp	r4, #255	; 0xff
 8000cec:	d1fa      	bne.n	8000ce4 <__eqsf2+0x28>
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d1f8      	bne.n	8000ce4 <__eqsf2+0x28>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d006      	beq.n	8000d04 <__eqsf2+0x48>
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	d1f3      	bne.n	8000ce4 <__eqsf2+0x28>
 8000cfc:	0028      	movs	r0, r5
 8000cfe:	1e43      	subs	r3, r0, #1
 8000d00:	4198      	sbcs	r0, r3
 8000d02:	e7ef      	b.n	8000ce4 <__eqsf2+0x28>
 8000d04:	2000      	movs	r0, #0
 8000d06:	e7ed      	b.n	8000ce4 <__eqsf2+0x28>

08000d08 <__gesf2>:
 8000d08:	b570      	push	{r4, r5, r6, lr}
 8000d0a:	0042      	lsls	r2, r0, #1
 8000d0c:	0245      	lsls	r5, r0, #9
 8000d0e:	024e      	lsls	r6, r1, #9
 8000d10:	004c      	lsls	r4, r1, #1
 8000d12:	0fc3      	lsrs	r3, r0, #31
 8000d14:	0a6d      	lsrs	r5, r5, #9
 8000d16:	0e12      	lsrs	r2, r2, #24
 8000d18:	0a76      	lsrs	r6, r6, #9
 8000d1a:	0e24      	lsrs	r4, r4, #24
 8000d1c:	0fc8      	lsrs	r0, r1, #31
 8000d1e:	2aff      	cmp	r2, #255	; 0xff
 8000d20:	d01b      	beq.n	8000d5a <__gesf2+0x52>
 8000d22:	2cff      	cmp	r4, #255	; 0xff
 8000d24:	d00e      	beq.n	8000d44 <__gesf2+0x3c>
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d11b      	bne.n	8000d62 <__gesf2+0x5a>
 8000d2a:	2c00      	cmp	r4, #0
 8000d2c:	d101      	bne.n	8000d32 <__gesf2+0x2a>
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d01c      	beq.n	8000d6c <__gesf2+0x64>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d00c      	beq.n	8000d50 <__gesf2+0x48>
 8000d36:	4283      	cmp	r3, r0
 8000d38:	d01c      	beq.n	8000d74 <__gesf2+0x6c>
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	1e58      	subs	r0, r3, #1
 8000d3e:	4008      	ands	r0, r1
 8000d40:	3801      	subs	r0, #1
 8000d42:	bd70      	pop	{r4, r5, r6, pc}
 8000d44:	2e00      	cmp	r6, #0
 8000d46:	d122      	bne.n	8000d8e <__gesf2+0x86>
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	d1f4      	bne.n	8000d36 <__gesf2+0x2e>
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d1f2      	bne.n	8000d36 <__gesf2+0x2e>
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d1f6      	bne.n	8000d42 <__gesf2+0x3a>
 8000d54:	2001      	movs	r0, #1
 8000d56:	4240      	negs	r0, r0
 8000d58:	e7f3      	b.n	8000d42 <__gesf2+0x3a>
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d117      	bne.n	8000d8e <__gesf2+0x86>
 8000d5e:	2cff      	cmp	r4, #255	; 0xff
 8000d60:	d0f0      	beq.n	8000d44 <__gesf2+0x3c>
 8000d62:	2c00      	cmp	r4, #0
 8000d64:	d1e7      	bne.n	8000d36 <__gesf2+0x2e>
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d1e5      	bne.n	8000d36 <__gesf2+0x2e>
 8000d6a:	e7e6      	b.n	8000d3a <__gesf2+0x32>
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	2d00      	cmp	r5, #0
 8000d70:	d0e7      	beq.n	8000d42 <__gesf2+0x3a>
 8000d72:	e7e2      	b.n	8000d3a <__gesf2+0x32>
 8000d74:	42a2      	cmp	r2, r4
 8000d76:	dc05      	bgt.n	8000d84 <__gesf2+0x7c>
 8000d78:	dbea      	blt.n	8000d50 <__gesf2+0x48>
 8000d7a:	42b5      	cmp	r5, r6
 8000d7c:	d802      	bhi.n	8000d84 <__gesf2+0x7c>
 8000d7e:	d3e7      	bcc.n	8000d50 <__gesf2+0x48>
 8000d80:	2000      	movs	r0, #0
 8000d82:	e7de      	b.n	8000d42 <__gesf2+0x3a>
 8000d84:	4243      	negs	r3, r0
 8000d86:	4158      	adcs	r0, r3
 8000d88:	0040      	lsls	r0, r0, #1
 8000d8a:	3801      	subs	r0, #1
 8000d8c:	e7d9      	b.n	8000d42 <__gesf2+0x3a>
 8000d8e:	2002      	movs	r0, #2
 8000d90:	4240      	negs	r0, r0
 8000d92:	e7d6      	b.n	8000d42 <__gesf2+0x3a>

08000d94 <__lesf2>:
 8000d94:	b570      	push	{r4, r5, r6, lr}
 8000d96:	0042      	lsls	r2, r0, #1
 8000d98:	0245      	lsls	r5, r0, #9
 8000d9a:	024e      	lsls	r6, r1, #9
 8000d9c:	004c      	lsls	r4, r1, #1
 8000d9e:	0fc3      	lsrs	r3, r0, #31
 8000da0:	0a6d      	lsrs	r5, r5, #9
 8000da2:	0e12      	lsrs	r2, r2, #24
 8000da4:	0a76      	lsrs	r6, r6, #9
 8000da6:	0e24      	lsrs	r4, r4, #24
 8000da8:	0fc8      	lsrs	r0, r1, #31
 8000daa:	2aff      	cmp	r2, #255	; 0xff
 8000dac:	d00b      	beq.n	8000dc6 <__lesf2+0x32>
 8000dae:	2cff      	cmp	r4, #255	; 0xff
 8000db0:	d00d      	beq.n	8000dce <__lesf2+0x3a>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	d11f      	bne.n	8000df6 <__lesf2+0x62>
 8000db6:	2c00      	cmp	r4, #0
 8000db8:	d116      	bne.n	8000de8 <__lesf2+0x54>
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d114      	bne.n	8000de8 <__lesf2+0x54>
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d010      	beq.n	8000de6 <__lesf2+0x52>
 8000dc4:	e009      	b.n	8000dda <__lesf2+0x46>
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d10c      	bne.n	8000de4 <__lesf2+0x50>
 8000dca:	2cff      	cmp	r4, #255	; 0xff
 8000dcc:	d113      	bne.n	8000df6 <__lesf2+0x62>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d108      	bne.n	8000de4 <__lesf2+0x50>
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d008      	beq.n	8000de8 <__lesf2+0x54>
 8000dd6:	4283      	cmp	r3, r0
 8000dd8:	d012      	beq.n	8000e00 <__lesf2+0x6c>
 8000dda:	2102      	movs	r1, #2
 8000ddc:	1e58      	subs	r0, r3, #1
 8000dde:	4008      	ands	r0, r1
 8000de0:	3801      	subs	r0, #1
 8000de2:	e000      	b.n	8000de6 <__lesf2+0x52>
 8000de4:	2002      	movs	r0, #2
 8000de6:	bd70      	pop	{r4, r5, r6, pc}
 8000de8:	2d00      	cmp	r5, #0
 8000dea:	d1f4      	bne.n	8000dd6 <__lesf2+0x42>
 8000dec:	2800      	cmp	r0, #0
 8000dee:	d1fa      	bne.n	8000de6 <__lesf2+0x52>
 8000df0:	2001      	movs	r0, #1
 8000df2:	4240      	negs	r0, r0
 8000df4:	e7f7      	b.n	8000de6 <__lesf2+0x52>
 8000df6:	2c00      	cmp	r4, #0
 8000df8:	d1ed      	bne.n	8000dd6 <__lesf2+0x42>
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d1eb      	bne.n	8000dd6 <__lesf2+0x42>
 8000dfe:	e7ec      	b.n	8000dda <__lesf2+0x46>
 8000e00:	42a2      	cmp	r2, r4
 8000e02:	dc05      	bgt.n	8000e10 <__lesf2+0x7c>
 8000e04:	dbf2      	blt.n	8000dec <__lesf2+0x58>
 8000e06:	42b5      	cmp	r5, r6
 8000e08:	d802      	bhi.n	8000e10 <__lesf2+0x7c>
 8000e0a:	d3ef      	bcc.n	8000dec <__lesf2+0x58>
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	e7ea      	b.n	8000de6 <__lesf2+0x52>
 8000e10:	4243      	negs	r3, r0
 8000e12:	4158      	adcs	r0, r3
 8000e14:	0040      	lsls	r0, r0, #1
 8000e16:	3801      	subs	r0, #1
 8000e18:	e7e5      	b.n	8000de6 <__lesf2+0x52>
 8000e1a:	46c0      	nop			; (mov r8, r8)

08000e1c <__aeabi_i2f>:
 8000e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	d013      	beq.n	8000e4a <__aeabi_i2f+0x2e>
 8000e22:	17c3      	asrs	r3, r0, #31
 8000e24:	18c6      	adds	r6, r0, r3
 8000e26:	405e      	eors	r6, r3
 8000e28:	0fc4      	lsrs	r4, r0, #31
 8000e2a:	0030      	movs	r0, r6
 8000e2c:	f001 fe2a 	bl	8002a84 <__clzsi2>
 8000e30:	239e      	movs	r3, #158	; 0x9e
 8000e32:	0005      	movs	r5, r0
 8000e34:	1a1b      	subs	r3, r3, r0
 8000e36:	2b96      	cmp	r3, #150	; 0x96
 8000e38:	dc0f      	bgt.n	8000e5a <__aeabi_i2f+0x3e>
 8000e3a:	2808      	cmp	r0, #8
 8000e3c:	dd01      	ble.n	8000e42 <__aeabi_i2f+0x26>
 8000e3e:	3d08      	subs	r5, #8
 8000e40:	40ae      	lsls	r6, r5
 8000e42:	0276      	lsls	r6, r6, #9
 8000e44:	0a76      	lsrs	r6, r6, #9
 8000e46:	b2d8      	uxtb	r0, r3
 8000e48:	e002      	b.n	8000e50 <__aeabi_i2f+0x34>
 8000e4a:	2400      	movs	r4, #0
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	2600      	movs	r6, #0
 8000e50:	05c0      	lsls	r0, r0, #23
 8000e52:	4330      	orrs	r0, r6
 8000e54:	07e4      	lsls	r4, r4, #31
 8000e56:	4320      	orrs	r0, r4
 8000e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e5a:	2b99      	cmp	r3, #153	; 0x99
 8000e5c:	dd0c      	ble.n	8000e78 <__aeabi_i2f+0x5c>
 8000e5e:	2205      	movs	r2, #5
 8000e60:	0031      	movs	r1, r6
 8000e62:	1a12      	subs	r2, r2, r0
 8000e64:	40d1      	lsrs	r1, r2
 8000e66:	000a      	movs	r2, r1
 8000e68:	0001      	movs	r1, r0
 8000e6a:	0030      	movs	r0, r6
 8000e6c:	311b      	adds	r1, #27
 8000e6e:	4088      	lsls	r0, r1
 8000e70:	1e41      	subs	r1, r0, #1
 8000e72:	4188      	sbcs	r0, r1
 8000e74:	4302      	orrs	r2, r0
 8000e76:	0016      	movs	r6, r2
 8000e78:	2d05      	cmp	r5, #5
 8000e7a:	dc12      	bgt.n	8000ea2 <__aeabi_i2f+0x86>
 8000e7c:	0031      	movs	r1, r6
 8000e7e:	4f0d      	ldr	r7, [pc, #52]	; (8000eb4 <__aeabi_i2f+0x98>)
 8000e80:	4039      	ands	r1, r7
 8000e82:	0772      	lsls	r2, r6, #29
 8000e84:	d009      	beq.n	8000e9a <__aeabi_i2f+0x7e>
 8000e86:	200f      	movs	r0, #15
 8000e88:	4030      	ands	r0, r6
 8000e8a:	2804      	cmp	r0, #4
 8000e8c:	d005      	beq.n	8000e9a <__aeabi_i2f+0x7e>
 8000e8e:	3104      	adds	r1, #4
 8000e90:	014a      	lsls	r2, r1, #5
 8000e92:	d502      	bpl.n	8000e9a <__aeabi_i2f+0x7e>
 8000e94:	239f      	movs	r3, #159	; 0x9f
 8000e96:	4039      	ands	r1, r7
 8000e98:	1b5b      	subs	r3, r3, r5
 8000e9a:	0189      	lsls	r1, r1, #6
 8000e9c:	0a4e      	lsrs	r6, r1, #9
 8000e9e:	b2d8      	uxtb	r0, r3
 8000ea0:	e7d6      	b.n	8000e50 <__aeabi_i2f+0x34>
 8000ea2:	1f6a      	subs	r2, r5, #5
 8000ea4:	4096      	lsls	r6, r2
 8000ea6:	0031      	movs	r1, r6
 8000ea8:	4f02      	ldr	r7, [pc, #8]	; (8000eb4 <__aeabi_i2f+0x98>)
 8000eaa:	4039      	ands	r1, r7
 8000eac:	0772      	lsls	r2, r6, #29
 8000eae:	d0f4      	beq.n	8000e9a <__aeabi_i2f+0x7e>
 8000eb0:	e7e9      	b.n	8000e86 <__aeabi_i2f+0x6a>
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	fbffffff 	.word	0xfbffffff

08000eb8 <__aeabi_dadd>:
 8000eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eba:	464f      	mov	r7, r9
 8000ebc:	4646      	mov	r6, r8
 8000ebe:	46d6      	mov	lr, sl
 8000ec0:	000d      	movs	r5, r1
 8000ec2:	0004      	movs	r4, r0
 8000ec4:	b5c0      	push	{r6, r7, lr}
 8000ec6:	001f      	movs	r7, r3
 8000ec8:	0011      	movs	r1, r2
 8000eca:	0328      	lsls	r0, r5, #12
 8000ecc:	0f62      	lsrs	r2, r4, #29
 8000ece:	0a40      	lsrs	r0, r0, #9
 8000ed0:	4310      	orrs	r0, r2
 8000ed2:	007a      	lsls	r2, r7, #1
 8000ed4:	0d52      	lsrs	r2, r2, #21
 8000ed6:	00e3      	lsls	r3, r4, #3
 8000ed8:	033c      	lsls	r4, r7, #12
 8000eda:	4691      	mov	r9, r2
 8000edc:	0a64      	lsrs	r4, r4, #9
 8000ede:	0ffa      	lsrs	r2, r7, #31
 8000ee0:	0f4f      	lsrs	r7, r1, #29
 8000ee2:	006e      	lsls	r6, r5, #1
 8000ee4:	4327      	orrs	r7, r4
 8000ee6:	4692      	mov	sl, r2
 8000ee8:	46b8      	mov	r8, r7
 8000eea:	0d76      	lsrs	r6, r6, #21
 8000eec:	0fed      	lsrs	r5, r5, #31
 8000eee:	00c9      	lsls	r1, r1, #3
 8000ef0:	4295      	cmp	r5, r2
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_dadd+0x3e>
 8000ef4:	e099      	b.n	800102a <__aeabi_dadd+0x172>
 8000ef6:	464c      	mov	r4, r9
 8000ef8:	1b34      	subs	r4, r6, r4
 8000efa:	46a4      	mov	ip, r4
 8000efc:	2c00      	cmp	r4, #0
 8000efe:	dc00      	bgt.n	8000f02 <__aeabi_dadd+0x4a>
 8000f00:	e07c      	b.n	8000ffc <__aeabi_dadd+0x144>
 8000f02:	464a      	mov	r2, r9
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	d100      	bne.n	8000f0a <__aeabi_dadd+0x52>
 8000f08:	e0b8      	b.n	800107c <__aeabi_dadd+0x1c4>
 8000f0a:	4ac5      	ldr	r2, [pc, #788]	; (8001220 <__aeabi_dadd+0x368>)
 8000f0c:	4296      	cmp	r6, r2
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_dadd+0x5a>
 8000f10:	e11c      	b.n	800114c <__aeabi_dadd+0x294>
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	003c      	movs	r4, r7
 8000f16:	0412      	lsls	r2, r2, #16
 8000f18:	4314      	orrs	r4, r2
 8000f1a:	46a0      	mov	r8, r4
 8000f1c:	4662      	mov	r2, ip
 8000f1e:	2a38      	cmp	r2, #56	; 0x38
 8000f20:	dd00      	ble.n	8000f24 <__aeabi_dadd+0x6c>
 8000f22:	e161      	b.n	80011e8 <__aeabi_dadd+0x330>
 8000f24:	2a1f      	cmp	r2, #31
 8000f26:	dd00      	ble.n	8000f2a <__aeabi_dadd+0x72>
 8000f28:	e1cc      	b.n	80012c4 <__aeabi_dadd+0x40c>
 8000f2a:	4664      	mov	r4, ip
 8000f2c:	2220      	movs	r2, #32
 8000f2e:	1b12      	subs	r2, r2, r4
 8000f30:	4644      	mov	r4, r8
 8000f32:	4094      	lsls	r4, r2
 8000f34:	000f      	movs	r7, r1
 8000f36:	46a1      	mov	r9, r4
 8000f38:	4664      	mov	r4, ip
 8000f3a:	4091      	lsls	r1, r2
 8000f3c:	40e7      	lsrs	r7, r4
 8000f3e:	464c      	mov	r4, r9
 8000f40:	1e4a      	subs	r2, r1, #1
 8000f42:	4191      	sbcs	r1, r2
 8000f44:	433c      	orrs	r4, r7
 8000f46:	4642      	mov	r2, r8
 8000f48:	4321      	orrs	r1, r4
 8000f4a:	4664      	mov	r4, ip
 8000f4c:	40e2      	lsrs	r2, r4
 8000f4e:	1a80      	subs	r0, r0, r2
 8000f50:	1a5c      	subs	r4, r3, r1
 8000f52:	42a3      	cmp	r3, r4
 8000f54:	419b      	sbcs	r3, r3
 8000f56:	425f      	negs	r7, r3
 8000f58:	1bc7      	subs	r7, r0, r7
 8000f5a:	023b      	lsls	r3, r7, #8
 8000f5c:	d400      	bmi.n	8000f60 <__aeabi_dadd+0xa8>
 8000f5e:	e0d0      	b.n	8001102 <__aeabi_dadd+0x24a>
 8000f60:	027f      	lsls	r7, r7, #9
 8000f62:	0a7f      	lsrs	r7, r7, #9
 8000f64:	2f00      	cmp	r7, #0
 8000f66:	d100      	bne.n	8000f6a <__aeabi_dadd+0xb2>
 8000f68:	e0ff      	b.n	800116a <__aeabi_dadd+0x2b2>
 8000f6a:	0038      	movs	r0, r7
 8000f6c:	f001 fd8a 	bl	8002a84 <__clzsi2>
 8000f70:	0001      	movs	r1, r0
 8000f72:	3908      	subs	r1, #8
 8000f74:	2320      	movs	r3, #32
 8000f76:	0022      	movs	r2, r4
 8000f78:	1a5b      	subs	r3, r3, r1
 8000f7a:	408f      	lsls	r7, r1
 8000f7c:	40da      	lsrs	r2, r3
 8000f7e:	408c      	lsls	r4, r1
 8000f80:	4317      	orrs	r7, r2
 8000f82:	42b1      	cmp	r1, r6
 8000f84:	da00      	bge.n	8000f88 <__aeabi_dadd+0xd0>
 8000f86:	e0ff      	b.n	8001188 <__aeabi_dadd+0x2d0>
 8000f88:	1b89      	subs	r1, r1, r6
 8000f8a:	1c4b      	adds	r3, r1, #1
 8000f8c:	2b1f      	cmp	r3, #31
 8000f8e:	dd00      	ble.n	8000f92 <__aeabi_dadd+0xda>
 8000f90:	e0a8      	b.n	80010e4 <__aeabi_dadd+0x22c>
 8000f92:	2220      	movs	r2, #32
 8000f94:	0039      	movs	r1, r7
 8000f96:	1ad2      	subs	r2, r2, r3
 8000f98:	0020      	movs	r0, r4
 8000f9a:	4094      	lsls	r4, r2
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	40d8      	lsrs	r0, r3
 8000fa0:	1e62      	subs	r2, r4, #1
 8000fa2:	4194      	sbcs	r4, r2
 8000fa4:	40df      	lsrs	r7, r3
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	4301      	orrs	r1, r0
 8000faa:	430c      	orrs	r4, r1
 8000fac:	0763      	lsls	r3, r4, #29
 8000fae:	d009      	beq.n	8000fc4 <__aeabi_dadd+0x10c>
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	4023      	ands	r3, r4
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d005      	beq.n	8000fc4 <__aeabi_dadd+0x10c>
 8000fb8:	1d23      	adds	r3, r4, #4
 8000fba:	42a3      	cmp	r3, r4
 8000fbc:	41a4      	sbcs	r4, r4
 8000fbe:	4264      	negs	r4, r4
 8000fc0:	193f      	adds	r7, r7, r4
 8000fc2:	001c      	movs	r4, r3
 8000fc4:	023b      	lsls	r3, r7, #8
 8000fc6:	d400      	bmi.n	8000fca <__aeabi_dadd+0x112>
 8000fc8:	e09e      	b.n	8001108 <__aeabi_dadd+0x250>
 8000fca:	4b95      	ldr	r3, [pc, #596]	; (8001220 <__aeabi_dadd+0x368>)
 8000fcc:	3601      	adds	r6, #1
 8000fce:	429e      	cmp	r6, r3
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_dadd+0x11c>
 8000fd2:	e0b7      	b.n	8001144 <__aeabi_dadd+0x28c>
 8000fd4:	4a93      	ldr	r2, [pc, #588]	; (8001224 <__aeabi_dadd+0x36c>)
 8000fd6:	08e4      	lsrs	r4, r4, #3
 8000fd8:	4017      	ands	r7, r2
 8000fda:	077b      	lsls	r3, r7, #29
 8000fdc:	0571      	lsls	r1, r6, #21
 8000fde:	027f      	lsls	r7, r7, #9
 8000fe0:	4323      	orrs	r3, r4
 8000fe2:	0b3f      	lsrs	r7, r7, #12
 8000fe4:	0d4a      	lsrs	r2, r1, #21
 8000fe6:	0512      	lsls	r2, r2, #20
 8000fe8:	433a      	orrs	r2, r7
 8000fea:	07ed      	lsls	r5, r5, #31
 8000fec:	432a      	orrs	r2, r5
 8000fee:	0018      	movs	r0, r3
 8000ff0:	0011      	movs	r1, r2
 8000ff2:	bce0      	pop	{r5, r6, r7}
 8000ff4:	46ba      	mov	sl, r7
 8000ff6:	46b1      	mov	r9, r6
 8000ff8:	46a8      	mov	r8, r5
 8000ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ffc:	2c00      	cmp	r4, #0
 8000ffe:	d04b      	beq.n	8001098 <__aeabi_dadd+0x1e0>
 8001000:	464c      	mov	r4, r9
 8001002:	1ba4      	subs	r4, r4, r6
 8001004:	46a4      	mov	ip, r4
 8001006:	2e00      	cmp	r6, #0
 8001008:	d000      	beq.n	800100c <__aeabi_dadd+0x154>
 800100a:	e123      	b.n	8001254 <__aeabi_dadd+0x39c>
 800100c:	0004      	movs	r4, r0
 800100e:	431c      	orrs	r4, r3
 8001010:	d100      	bne.n	8001014 <__aeabi_dadd+0x15c>
 8001012:	e1af      	b.n	8001374 <__aeabi_dadd+0x4bc>
 8001014:	4662      	mov	r2, ip
 8001016:	1e54      	subs	r4, r2, #1
 8001018:	2a01      	cmp	r2, #1
 800101a:	d100      	bne.n	800101e <__aeabi_dadd+0x166>
 800101c:	e215      	b.n	800144a <__aeabi_dadd+0x592>
 800101e:	4d80      	ldr	r5, [pc, #512]	; (8001220 <__aeabi_dadd+0x368>)
 8001020:	45ac      	cmp	ip, r5
 8001022:	d100      	bne.n	8001026 <__aeabi_dadd+0x16e>
 8001024:	e1c8      	b.n	80013b8 <__aeabi_dadd+0x500>
 8001026:	46a4      	mov	ip, r4
 8001028:	e11b      	b.n	8001262 <__aeabi_dadd+0x3aa>
 800102a:	464a      	mov	r2, r9
 800102c:	1ab2      	subs	r2, r6, r2
 800102e:	4694      	mov	ip, r2
 8001030:	2a00      	cmp	r2, #0
 8001032:	dc00      	bgt.n	8001036 <__aeabi_dadd+0x17e>
 8001034:	e0ac      	b.n	8001190 <__aeabi_dadd+0x2d8>
 8001036:	464a      	mov	r2, r9
 8001038:	2a00      	cmp	r2, #0
 800103a:	d043      	beq.n	80010c4 <__aeabi_dadd+0x20c>
 800103c:	4a78      	ldr	r2, [pc, #480]	; (8001220 <__aeabi_dadd+0x368>)
 800103e:	4296      	cmp	r6, r2
 8001040:	d100      	bne.n	8001044 <__aeabi_dadd+0x18c>
 8001042:	e1af      	b.n	80013a4 <__aeabi_dadd+0x4ec>
 8001044:	2280      	movs	r2, #128	; 0x80
 8001046:	003c      	movs	r4, r7
 8001048:	0412      	lsls	r2, r2, #16
 800104a:	4314      	orrs	r4, r2
 800104c:	46a0      	mov	r8, r4
 800104e:	4662      	mov	r2, ip
 8001050:	2a38      	cmp	r2, #56	; 0x38
 8001052:	dc67      	bgt.n	8001124 <__aeabi_dadd+0x26c>
 8001054:	2a1f      	cmp	r2, #31
 8001056:	dc00      	bgt.n	800105a <__aeabi_dadd+0x1a2>
 8001058:	e15f      	b.n	800131a <__aeabi_dadd+0x462>
 800105a:	4647      	mov	r7, r8
 800105c:	3a20      	subs	r2, #32
 800105e:	40d7      	lsrs	r7, r2
 8001060:	4662      	mov	r2, ip
 8001062:	2a20      	cmp	r2, #32
 8001064:	d005      	beq.n	8001072 <__aeabi_dadd+0x1ba>
 8001066:	4664      	mov	r4, ip
 8001068:	2240      	movs	r2, #64	; 0x40
 800106a:	1b12      	subs	r2, r2, r4
 800106c:	4644      	mov	r4, r8
 800106e:	4094      	lsls	r4, r2
 8001070:	4321      	orrs	r1, r4
 8001072:	1e4a      	subs	r2, r1, #1
 8001074:	4191      	sbcs	r1, r2
 8001076:	000c      	movs	r4, r1
 8001078:	433c      	orrs	r4, r7
 800107a:	e057      	b.n	800112c <__aeabi_dadd+0x274>
 800107c:	003a      	movs	r2, r7
 800107e:	430a      	orrs	r2, r1
 8001080:	d100      	bne.n	8001084 <__aeabi_dadd+0x1cc>
 8001082:	e105      	b.n	8001290 <__aeabi_dadd+0x3d8>
 8001084:	0022      	movs	r2, r4
 8001086:	3a01      	subs	r2, #1
 8001088:	2c01      	cmp	r4, #1
 800108a:	d100      	bne.n	800108e <__aeabi_dadd+0x1d6>
 800108c:	e182      	b.n	8001394 <__aeabi_dadd+0x4dc>
 800108e:	4c64      	ldr	r4, [pc, #400]	; (8001220 <__aeabi_dadd+0x368>)
 8001090:	45a4      	cmp	ip, r4
 8001092:	d05b      	beq.n	800114c <__aeabi_dadd+0x294>
 8001094:	4694      	mov	ip, r2
 8001096:	e741      	b.n	8000f1c <__aeabi_dadd+0x64>
 8001098:	4c63      	ldr	r4, [pc, #396]	; (8001228 <__aeabi_dadd+0x370>)
 800109a:	1c77      	adds	r7, r6, #1
 800109c:	4227      	tst	r7, r4
 800109e:	d000      	beq.n	80010a2 <__aeabi_dadd+0x1ea>
 80010a0:	e0c4      	b.n	800122c <__aeabi_dadd+0x374>
 80010a2:	0004      	movs	r4, r0
 80010a4:	431c      	orrs	r4, r3
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d000      	beq.n	80010ac <__aeabi_dadd+0x1f4>
 80010aa:	e169      	b.n	8001380 <__aeabi_dadd+0x4c8>
 80010ac:	2c00      	cmp	r4, #0
 80010ae:	d100      	bne.n	80010b2 <__aeabi_dadd+0x1fa>
 80010b0:	e1bf      	b.n	8001432 <__aeabi_dadd+0x57a>
 80010b2:	4644      	mov	r4, r8
 80010b4:	430c      	orrs	r4, r1
 80010b6:	d000      	beq.n	80010ba <__aeabi_dadd+0x202>
 80010b8:	e1d0      	b.n	800145c <__aeabi_dadd+0x5a4>
 80010ba:	0742      	lsls	r2, r0, #29
 80010bc:	08db      	lsrs	r3, r3, #3
 80010be:	4313      	orrs	r3, r2
 80010c0:	08c0      	lsrs	r0, r0, #3
 80010c2:	e029      	b.n	8001118 <__aeabi_dadd+0x260>
 80010c4:	003a      	movs	r2, r7
 80010c6:	430a      	orrs	r2, r1
 80010c8:	d100      	bne.n	80010cc <__aeabi_dadd+0x214>
 80010ca:	e170      	b.n	80013ae <__aeabi_dadd+0x4f6>
 80010cc:	4662      	mov	r2, ip
 80010ce:	4664      	mov	r4, ip
 80010d0:	3a01      	subs	r2, #1
 80010d2:	2c01      	cmp	r4, #1
 80010d4:	d100      	bne.n	80010d8 <__aeabi_dadd+0x220>
 80010d6:	e0e0      	b.n	800129a <__aeabi_dadd+0x3e2>
 80010d8:	4c51      	ldr	r4, [pc, #324]	; (8001220 <__aeabi_dadd+0x368>)
 80010da:	45a4      	cmp	ip, r4
 80010dc:	d100      	bne.n	80010e0 <__aeabi_dadd+0x228>
 80010de:	e161      	b.n	80013a4 <__aeabi_dadd+0x4ec>
 80010e0:	4694      	mov	ip, r2
 80010e2:	e7b4      	b.n	800104e <__aeabi_dadd+0x196>
 80010e4:	003a      	movs	r2, r7
 80010e6:	391f      	subs	r1, #31
 80010e8:	40ca      	lsrs	r2, r1
 80010ea:	0011      	movs	r1, r2
 80010ec:	2b20      	cmp	r3, #32
 80010ee:	d003      	beq.n	80010f8 <__aeabi_dadd+0x240>
 80010f0:	2240      	movs	r2, #64	; 0x40
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	409f      	lsls	r7, r3
 80010f6:	433c      	orrs	r4, r7
 80010f8:	1e63      	subs	r3, r4, #1
 80010fa:	419c      	sbcs	r4, r3
 80010fc:	2700      	movs	r7, #0
 80010fe:	2600      	movs	r6, #0
 8001100:	430c      	orrs	r4, r1
 8001102:	0763      	lsls	r3, r4, #29
 8001104:	d000      	beq.n	8001108 <__aeabi_dadd+0x250>
 8001106:	e753      	b.n	8000fb0 <__aeabi_dadd+0xf8>
 8001108:	46b4      	mov	ip, r6
 800110a:	08e4      	lsrs	r4, r4, #3
 800110c:	077b      	lsls	r3, r7, #29
 800110e:	4323      	orrs	r3, r4
 8001110:	08f8      	lsrs	r0, r7, #3
 8001112:	4a43      	ldr	r2, [pc, #268]	; (8001220 <__aeabi_dadd+0x368>)
 8001114:	4594      	cmp	ip, r2
 8001116:	d01d      	beq.n	8001154 <__aeabi_dadd+0x29c>
 8001118:	4662      	mov	r2, ip
 800111a:	0307      	lsls	r7, r0, #12
 800111c:	0552      	lsls	r2, r2, #21
 800111e:	0b3f      	lsrs	r7, r7, #12
 8001120:	0d52      	lsrs	r2, r2, #21
 8001122:	e760      	b.n	8000fe6 <__aeabi_dadd+0x12e>
 8001124:	4644      	mov	r4, r8
 8001126:	430c      	orrs	r4, r1
 8001128:	1e62      	subs	r2, r4, #1
 800112a:	4194      	sbcs	r4, r2
 800112c:	18e4      	adds	r4, r4, r3
 800112e:	429c      	cmp	r4, r3
 8001130:	419b      	sbcs	r3, r3
 8001132:	425f      	negs	r7, r3
 8001134:	183f      	adds	r7, r7, r0
 8001136:	023b      	lsls	r3, r7, #8
 8001138:	d5e3      	bpl.n	8001102 <__aeabi_dadd+0x24a>
 800113a:	4b39      	ldr	r3, [pc, #228]	; (8001220 <__aeabi_dadd+0x368>)
 800113c:	3601      	adds	r6, #1
 800113e:	429e      	cmp	r6, r3
 8001140:	d000      	beq.n	8001144 <__aeabi_dadd+0x28c>
 8001142:	e0b5      	b.n	80012b0 <__aeabi_dadd+0x3f8>
 8001144:	0032      	movs	r2, r6
 8001146:	2700      	movs	r7, #0
 8001148:	2300      	movs	r3, #0
 800114a:	e74c      	b.n	8000fe6 <__aeabi_dadd+0x12e>
 800114c:	0742      	lsls	r2, r0, #29
 800114e:	08db      	lsrs	r3, r3, #3
 8001150:	4313      	orrs	r3, r2
 8001152:	08c0      	lsrs	r0, r0, #3
 8001154:	001a      	movs	r2, r3
 8001156:	4302      	orrs	r2, r0
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x2a4>
 800115a:	e1e1      	b.n	8001520 <__aeabi_dadd+0x668>
 800115c:	2780      	movs	r7, #128	; 0x80
 800115e:	033f      	lsls	r7, r7, #12
 8001160:	4307      	orrs	r7, r0
 8001162:	033f      	lsls	r7, r7, #12
 8001164:	4a2e      	ldr	r2, [pc, #184]	; (8001220 <__aeabi_dadd+0x368>)
 8001166:	0b3f      	lsrs	r7, r7, #12
 8001168:	e73d      	b.n	8000fe6 <__aeabi_dadd+0x12e>
 800116a:	0020      	movs	r0, r4
 800116c:	f001 fc8a 	bl	8002a84 <__clzsi2>
 8001170:	0001      	movs	r1, r0
 8001172:	3118      	adds	r1, #24
 8001174:	291f      	cmp	r1, #31
 8001176:	dc00      	bgt.n	800117a <__aeabi_dadd+0x2c2>
 8001178:	e6fc      	b.n	8000f74 <__aeabi_dadd+0xbc>
 800117a:	3808      	subs	r0, #8
 800117c:	4084      	lsls	r4, r0
 800117e:	0027      	movs	r7, r4
 8001180:	2400      	movs	r4, #0
 8001182:	42b1      	cmp	r1, r6
 8001184:	db00      	blt.n	8001188 <__aeabi_dadd+0x2d0>
 8001186:	e6ff      	b.n	8000f88 <__aeabi_dadd+0xd0>
 8001188:	4a26      	ldr	r2, [pc, #152]	; (8001224 <__aeabi_dadd+0x36c>)
 800118a:	1a76      	subs	r6, r6, r1
 800118c:	4017      	ands	r7, r2
 800118e:	e70d      	b.n	8000fac <__aeabi_dadd+0xf4>
 8001190:	2a00      	cmp	r2, #0
 8001192:	d02f      	beq.n	80011f4 <__aeabi_dadd+0x33c>
 8001194:	464a      	mov	r2, r9
 8001196:	1b92      	subs	r2, r2, r6
 8001198:	4694      	mov	ip, r2
 800119a:	2e00      	cmp	r6, #0
 800119c:	d100      	bne.n	80011a0 <__aeabi_dadd+0x2e8>
 800119e:	e0ad      	b.n	80012fc <__aeabi_dadd+0x444>
 80011a0:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <__aeabi_dadd+0x368>)
 80011a2:	4591      	cmp	r9, r2
 80011a4:	d100      	bne.n	80011a8 <__aeabi_dadd+0x2f0>
 80011a6:	e10f      	b.n	80013c8 <__aeabi_dadd+0x510>
 80011a8:	2280      	movs	r2, #128	; 0x80
 80011aa:	0412      	lsls	r2, r2, #16
 80011ac:	4310      	orrs	r0, r2
 80011ae:	4662      	mov	r2, ip
 80011b0:	2a38      	cmp	r2, #56	; 0x38
 80011b2:	dd00      	ble.n	80011b6 <__aeabi_dadd+0x2fe>
 80011b4:	e10f      	b.n	80013d6 <__aeabi_dadd+0x51e>
 80011b6:	2a1f      	cmp	r2, #31
 80011b8:	dd00      	ble.n	80011bc <__aeabi_dadd+0x304>
 80011ba:	e180      	b.n	80014be <__aeabi_dadd+0x606>
 80011bc:	4664      	mov	r4, ip
 80011be:	2220      	movs	r2, #32
 80011c0:	001e      	movs	r6, r3
 80011c2:	1b12      	subs	r2, r2, r4
 80011c4:	4667      	mov	r7, ip
 80011c6:	0004      	movs	r4, r0
 80011c8:	4093      	lsls	r3, r2
 80011ca:	4094      	lsls	r4, r2
 80011cc:	40fe      	lsrs	r6, r7
 80011ce:	1e5a      	subs	r2, r3, #1
 80011d0:	4193      	sbcs	r3, r2
 80011d2:	40f8      	lsrs	r0, r7
 80011d4:	4334      	orrs	r4, r6
 80011d6:	431c      	orrs	r4, r3
 80011d8:	4480      	add	r8, r0
 80011da:	1864      	adds	r4, r4, r1
 80011dc:	428c      	cmp	r4, r1
 80011de:	41bf      	sbcs	r7, r7
 80011e0:	427f      	negs	r7, r7
 80011e2:	464e      	mov	r6, r9
 80011e4:	4447      	add	r7, r8
 80011e6:	e7a6      	b.n	8001136 <__aeabi_dadd+0x27e>
 80011e8:	4642      	mov	r2, r8
 80011ea:	430a      	orrs	r2, r1
 80011ec:	0011      	movs	r1, r2
 80011ee:	1e4a      	subs	r2, r1, #1
 80011f0:	4191      	sbcs	r1, r2
 80011f2:	e6ad      	b.n	8000f50 <__aeabi_dadd+0x98>
 80011f4:	4c0c      	ldr	r4, [pc, #48]	; (8001228 <__aeabi_dadd+0x370>)
 80011f6:	1c72      	adds	r2, r6, #1
 80011f8:	4222      	tst	r2, r4
 80011fa:	d000      	beq.n	80011fe <__aeabi_dadd+0x346>
 80011fc:	e0a1      	b.n	8001342 <__aeabi_dadd+0x48a>
 80011fe:	0002      	movs	r2, r0
 8001200:	431a      	orrs	r2, r3
 8001202:	2e00      	cmp	r6, #0
 8001204:	d000      	beq.n	8001208 <__aeabi_dadd+0x350>
 8001206:	e0fa      	b.n	80013fe <__aeabi_dadd+0x546>
 8001208:	2a00      	cmp	r2, #0
 800120a:	d100      	bne.n	800120e <__aeabi_dadd+0x356>
 800120c:	e145      	b.n	800149a <__aeabi_dadd+0x5e2>
 800120e:	003a      	movs	r2, r7
 8001210:	430a      	orrs	r2, r1
 8001212:	d000      	beq.n	8001216 <__aeabi_dadd+0x35e>
 8001214:	e146      	b.n	80014a4 <__aeabi_dadd+0x5ec>
 8001216:	0742      	lsls	r2, r0, #29
 8001218:	08db      	lsrs	r3, r3, #3
 800121a:	4313      	orrs	r3, r2
 800121c:	08c0      	lsrs	r0, r0, #3
 800121e:	e77b      	b.n	8001118 <__aeabi_dadd+0x260>
 8001220:	000007ff 	.word	0x000007ff
 8001224:	ff7fffff 	.word	0xff7fffff
 8001228:	000007fe 	.word	0x000007fe
 800122c:	4647      	mov	r7, r8
 800122e:	1a5c      	subs	r4, r3, r1
 8001230:	1bc2      	subs	r2, r0, r7
 8001232:	42a3      	cmp	r3, r4
 8001234:	41bf      	sbcs	r7, r7
 8001236:	427f      	negs	r7, r7
 8001238:	46b9      	mov	r9, r7
 800123a:	0017      	movs	r7, r2
 800123c:	464a      	mov	r2, r9
 800123e:	1abf      	subs	r7, r7, r2
 8001240:	023a      	lsls	r2, r7, #8
 8001242:	d500      	bpl.n	8001246 <__aeabi_dadd+0x38e>
 8001244:	e08d      	b.n	8001362 <__aeabi_dadd+0x4aa>
 8001246:	0023      	movs	r3, r4
 8001248:	433b      	orrs	r3, r7
 800124a:	d000      	beq.n	800124e <__aeabi_dadd+0x396>
 800124c:	e68a      	b.n	8000f64 <__aeabi_dadd+0xac>
 800124e:	2000      	movs	r0, #0
 8001250:	2500      	movs	r5, #0
 8001252:	e761      	b.n	8001118 <__aeabi_dadd+0x260>
 8001254:	4cb4      	ldr	r4, [pc, #720]	; (8001528 <__aeabi_dadd+0x670>)
 8001256:	45a1      	cmp	r9, r4
 8001258:	d100      	bne.n	800125c <__aeabi_dadd+0x3a4>
 800125a:	e0ad      	b.n	80013b8 <__aeabi_dadd+0x500>
 800125c:	2480      	movs	r4, #128	; 0x80
 800125e:	0424      	lsls	r4, r4, #16
 8001260:	4320      	orrs	r0, r4
 8001262:	4664      	mov	r4, ip
 8001264:	2c38      	cmp	r4, #56	; 0x38
 8001266:	dc3d      	bgt.n	80012e4 <__aeabi_dadd+0x42c>
 8001268:	4662      	mov	r2, ip
 800126a:	2c1f      	cmp	r4, #31
 800126c:	dd00      	ble.n	8001270 <__aeabi_dadd+0x3b8>
 800126e:	e0b7      	b.n	80013e0 <__aeabi_dadd+0x528>
 8001270:	2520      	movs	r5, #32
 8001272:	001e      	movs	r6, r3
 8001274:	1b2d      	subs	r5, r5, r4
 8001276:	0004      	movs	r4, r0
 8001278:	40ab      	lsls	r3, r5
 800127a:	40ac      	lsls	r4, r5
 800127c:	40d6      	lsrs	r6, r2
 800127e:	40d0      	lsrs	r0, r2
 8001280:	4642      	mov	r2, r8
 8001282:	1e5d      	subs	r5, r3, #1
 8001284:	41ab      	sbcs	r3, r5
 8001286:	4334      	orrs	r4, r6
 8001288:	1a12      	subs	r2, r2, r0
 800128a:	4690      	mov	r8, r2
 800128c:	4323      	orrs	r3, r4
 800128e:	e02c      	b.n	80012ea <__aeabi_dadd+0x432>
 8001290:	0742      	lsls	r2, r0, #29
 8001292:	08db      	lsrs	r3, r3, #3
 8001294:	4313      	orrs	r3, r2
 8001296:	08c0      	lsrs	r0, r0, #3
 8001298:	e73b      	b.n	8001112 <__aeabi_dadd+0x25a>
 800129a:	185c      	adds	r4, r3, r1
 800129c:	429c      	cmp	r4, r3
 800129e:	419b      	sbcs	r3, r3
 80012a0:	4440      	add	r0, r8
 80012a2:	425b      	negs	r3, r3
 80012a4:	18c7      	adds	r7, r0, r3
 80012a6:	2601      	movs	r6, #1
 80012a8:	023b      	lsls	r3, r7, #8
 80012aa:	d400      	bmi.n	80012ae <__aeabi_dadd+0x3f6>
 80012ac:	e729      	b.n	8001102 <__aeabi_dadd+0x24a>
 80012ae:	2602      	movs	r6, #2
 80012b0:	4a9e      	ldr	r2, [pc, #632]	; (800152c <__aeabi_dadd+0x674>)
 80012b2:	0863      	lsrs	r3, r4, #1
 80012b4:	4017      	ands	r7, r2
 80012b6:	2201      	movs	r2, #1
 80012b8:	4014      	ands	r4, r2
 80012ba:	431c      	orrs	r4, r3
 80012bc:	07fb      	lsls	r3, r7, #31
 80012be:	431c      	orrs	r4, r3
 80012c0:	087f      	lsrs	r7, r7, #1
 80012c2:	e673      	b.n	8000fac <__aeabi_dadd+0xf4>
 80012c4:	4644      	mov	r4, r8
 80012c6:	3a20      	subs	r2, #32
 80012c8:	40d4      	lsrs	r4, r2
 80012ca:	4662      	mov	r2, ip
 80012cc:	2a20      	cmp	r2, #32
 80012ce:	d005      	beq.n	80012dc <__aeabi_dadd+0x424>
 80012d0:	4667      	mov	r7, ip
 80012d2:	2240      	movs	r2, #64	; 0x40
 80012d4:	1bd2      	subs	r2, r2, r7
 80012d6:	4647      	mov	r7, r8
 80012d8:	4097      	lsls	r7, r2
 80012da:	4339      	orrs	r1, r7
 80012dc:	1e4a      	subs	r2, r1, #1
 80012de:	4191      	sbcs	r1, r2
 80012e0:	4321      	orrs	r1, r4
 80012e2:	e635      	b.n	8000f50 <__aeabi_dadd+0x98>
 80012e4:	4303      	orrs	r3, r0
 80012e6:	1e58      	subs	r0, r3, #1
 80012e8:	4183      	sbcs	r3, r0
 80012ea:	1acc      	subs	r4, r1, r3
 80012ec:	42a1      	cmp	r1, r4
 80012ee:	41bf      	sbcs	r7, r7
 80012f0:	4643      	mov	r3, r8
 80012f2:	427f      	negs	r7, r7
 80012f4:	4655      	mov	r5, sl
 80012f6:	464e      	mov	r6, r9
 80012f8:	1bdf      	subs	r7, r3, r7
 80012fa:	e62e      	b.n	8000f5a <__aeabi_dadd+0xa2>
 80012fc:	0002      	movs	r2, r0
 80012fe:	431a      	orrs	r2, r3
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x44c>
 8001302:	e0bd      	b.n	8001480 <__aeabi_dadd+0x5c8>
 8001304:	4662      	mov	r2, ip
 8001306:	4664      	mov	r4, ip
 8001308:	3a01      	subs	r2, #1
 800130a:	2c01      	cmp	r4, #1
 800130c:	d100      	bne.n	8001310 <__aeabi_dadd+0x458>
 800130e:	e0e5      	b.n	80014dc <__aeabi_dadd+0x624>
 8001310:	4c85      	ldr	r4, [pc, #532]	; (8001528 <__aeabi_dadd+0x670>)
 8001312:	45a4      	cmp	ip, r4
 8001314:	d058      	beq.n	80013c8 <__aeabi_dadd+0x510>
 8001316:	4694      	mov	ip, r2
 8001318:	e749      	b.n	80011ae <__aeabi_dadd+0x2f6>
 800131a:	4664      	mov	r4, ip
 800131c:	2220      	movs	r2, #32
 800131e:	1b12      	subs	r2, r2, r4
 8001320:	4644      	mov	r4, r8
 8001322:	4094      	lsls	r4, r2
 8001324:	000f      	movs	r7, r1
 8001326:	46a1      	mov	r9, r4
 8001328:	4664      	mov	r4, ip
 800132a:	4091      	lsls	r1, r2
 800132c:	40e7      	lsrs	r7, r4
 800132e:	464c      	mov	r4, r9
 8001330:	1e4a      	subs	r2, r1, #1
 8001332:	4191      	sbcs	r1, r2
 8001334:	433c      	orrs	r4, r7
 8001336:	4642      	mov	r2, r8
 8001338:	430c      	orrs	r4, r1
 800133a:	4661      	mov	r1, ip
 800133c:	40ca      	lsrs	r2, r1
 800133e:	1880      	adds	r0, r0, r2
 8001340:	e6f4      	b.n	800112c <__aeabi_dadd+0x274>
 8001342:	4c79      	ldr	r4, [pc, #484]	; (8001528 <__aeabi_dadd+0x670>)
 8001344:	42a2      	cmp	r2, r4
 8001346:	d100      	bne.n	800134a <__aeabi_dadd+0x492>
 8001348:	e6fd      	b.n	8001146 <__aeabi_dadd+0x28e>
 800134a:	1859      	adds	r1, r3, r1
 800134c:	4299      	cmp	r1, r3
 800134e:	419b      	sbcs	r3, r3
 8001350:	4440      	add	r0, r8
 8001352:	425f      	negs	r7, r3
 8001354:	19c7      	adds	r7, r0, r7
 8001356:	07fc      	lsls	r4, r7, #31
 8001358:	0849      	lsrs	r1, r1, #1
 800135a:	0016      	movs	r6, r2
 800135c:	430c      	orrs	r4, r1
 800135e:	087f      	lsrs	r7, r7, #1
 8001360:	e6cf      	b.n	8001102 <__aeabi_dadd+0x24a>
 8001362:	1acc      	subs	r4, r1, r3
 8001364:	42a1      	cmp	r1, r4
 8001366:	41bf      	sbcs	r7, r7
 8001368:	4643      	mov	r3, r8
 800136a:	427f      	negs	r7, r7
 800136c:	1a18      	subs	r0, r3, r0
 800136e:	4655      	mov	r5, sl
 8001370:	1bc7      	subs	r7, r0, r7
 8001372:	e5f7      	b.n	8000f64 <__aeabi_dadd+0xac>
 8001374:	08c9      	lsrs	r1, r1, #3
 8001376:	077b      	lsls	r3, r7, #29
 8001378:	4655      	mov	r5, sl
 800137a:	430b      	orrs	r3, r1
 800137c:	08f8      	lsrs	r0, r7, #3
 800137e:	e6c8      	b.n	8001112 <__aeabi_dadd+0x25a>
 8001380:	2c00      	cmp	r4, #0
 8001382:	d000      	beq.n	8001386 <__aeabi_dadd+0x4ce>
 8001384:	e081      	b.n	800148a <__aeabi_dadd+0x5d2>
 8001386:	4643      	mov	r3, r8
 8001388:	430b      	orrs	r3, r1
 800138a:	d115      	bne.n	80013b8 <__aeabi_dadd+0x500>
 800138c:	2080      	movs	r0, #128	; 0x80
 800138e:	2500      	movs	r5, #0
 8001390:	0300      	lsls	r0, r0, #12
 8001392:	e6e3      	b.n	800115c <__aeabi_dadd+0x2a4>
 8001394:	1a5c      	subs	r4, r3, r1
 8001396:	42a3      	cmp	r3, r4
 8001398:	419b      	sbcs	r3, r3
 800139a:	1bc7      	subs	r7, r0, r7
 800139c:	425b      	negs	r3, r3
 800139e:	2601      	movs	r6, #1
 80013a0:	1aff      	subs	r7, r7, r3
 80013a2:	e5da      	b.n	8000f5a <__aeabi_dadd+0xa2>
 80013a4:	0742      	lsls	r2, r0, #29
 80013a6:	08db      	lsrs	r3, r3, #3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	08c0      	lsrs	r0, r0, #3
 80013ac:	e6d2      	b.n	8001154 <__aeabi_dadd+0x29c>
 80013ae:	0742      	lsls	r2, r0, #29
 80013b0:	08db      	lsrs	r3, r3, #3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	08c0      	lsrs	r0, r0, #3
 80013b6:	e6ac      	b.n	8001112 <__aeabi_dadd+0x25a>
 80013b8:	4643      	mov	r3, r8
 80013ba:	4642      	mov	r2, r8
 80013bc:	08c9      	lsrs	r1, r1, #3
 80013be:	075b      	lsls	r3, r3, #29
 80013c0:	4655      	mov	r5, sl
 80013c2:	430b      	orrs	r3, r1
 80013c4:	08d0      	lsrs	r0, r2, #3
 80013c6:	e6c5      	b.n	8001154 <__aeabi_dadd+0x29c>
 80013c8:	4643      	mov	r3, r8
 80013ca:	4642      	mov	r2, r8
 80013cc:	075b      	lsls	r3, r3, #29
 80013ce:	08c9      	lsrs	r1, r1, #3
 80013d0:	430b      	orrs	r3, r1
 80013d2:	08d0      	lsrs	r0, r2, #3
 80013d4:	e6be      	b.n	8001154 <__aeabi_dadd+0x29c>
 80013d6:	4303      	orrs	r3, r0
 80013d8:	001c      	movs	r4, r3
 80013da:	1e63      	subs	r3, r4, #1
 80013dc:	419c      	sbcs	r4, r3
 80013de:	e6fc      	b.n	80011da <__aeabi_dadd+0x322>
 80013e0:	0002      	movs	r2, r0
 80013e2:	3c20      	subs	r4, #32
 80013e4:	40e2      	lsrs	r2, r4
 80013e6:	0014      	movs	r4, r2
 80013e8:	4662      	mov	r2, ip
 80013ea:	2a20      	cmp	r2, #32
 80013ec:	d003      	beq.n	80013f6 <__aeabi_dadd+0x53e>
 80013ee:	2540      	movs	r5, #64	; 0x40
 80013f0:	1aad      	subs	r5, r5, r2
 80013f2:	40a8      	lsls	r0, r5
 80013f4:	4303      	orrs	r3, r0
 80013f6:	1e58      	subs	r0, r3, #1
 80013f8:	4183      	sbcs	r3, r0
 80013fa:	4323      	orrs	r3, r4
 80013fc:	e775      	b.n	80012ea <__aeabi_dadd+0x432>
 80013fe:	2a00      	cmp	r2, #0
 8001400:	d0e2      	beq.n	80013c8 <__aeabi_dadd+0x510>
 8001402:	003a      	movs	r2, r7
 8001404:	430a      	orrs	r2, r1
 8001406:	d0cd      	beq.n	80013a4 <__aeabi_dadd+0x4ec>
 8001408:	0742      	lsls	r2, r0, #29
 800140a:	08db      	lsrs	r3, r3, #3
 800140c:	4313      	orrs	r3, r2
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	08c0      	lsrs	r0, r0, #3
 8001412:	0312      	lsls	r2, r2, #12
 8001414:	4210      	tst	r0, r2
 8001416:	d006      	beq.n	8001426 <__aeabi_dadd+0x56e>
 8001418:	08fc      	lsrs	r4, r7, #3
 800141a:	4214      	tst	r4, r2
 800141c:	d103      	bne.n	8001426 <__aeabi_dadd+0x56e>
 800141e:	0020      	movs	r0, r4
 8001420:	08cb      	lsrs	r3, r1, #3
 8001422:	077a      	lsls	r2, r7, #29
 8001424:	4313      	orrs	r3, r2
 8001426:	0f5a      	lsrs	r2, r3, #29
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	0752      	lsls	r2, r2, #29
 800142c:	08db      	lsrs	r3, r3, #3
 800142e:	4313      	orrs	r3, r2
 8001430:	e690      	b.n	8001154 <__aeabi_dadd+0x29c>
 8001432:	4643      	mov	r3, r8
 8001434:	430b      	orrs	r3, r1
 8001436:	d100      	bne.n	800143a <__aeabi_dadd+0x582>
 8001438:	e709      	b.n	800124e <__aeabi_dadd+0x396>
 800143a:	4643      	mov	r3, r8
 800143c:	4642      	mov	r2, r8
 800143e:	08c9      	lsrs	r1, r1, #3
 8001440:	075b      	lsls	r3, r3, #29
 8001442:	4655      	mov	r5, sl
 8001444:	430b      	orrs	r3, r1
 8001446:	08d0      	lsrs	r0, r2, #3
 8001448:	e666      	b.n	8001118 <__aeabi_dadd+0x260>
 800144a:	1acc      	subs	r4, r1, r3
 800144c:	42a1      	cmp	r1, r4
 800144e:	4189      	sbcs	r1, r1
 8001450:	1a3f      	subs	r7, r7, r0
 8001452:	4249      	negs	r1, r1
 8001454:	4655      	mov	r5, sl
 8001456:	2601      	movs	r6, #1
 8001458:	1a7f      	subs	r7, r7, r1
 800145a:	e57e      	b.n	8000f5a <__aeabi_dadd+0xa2>
 800145c:	4642      	mov	r2, r8
 800145e:	1a5c      	subs	r4, r3, r1
 8001460:	1a87      	subs	r7, r0, r2
 8001462:	42a3      	cmp	r3, r4
 8001464:	4192      	sbcs	r2, r2
 8001466:	4252      	negs	r2, r2
 8001468:	1abf      	subs	r7, r7, r2
 800146a:	023a      	lsls	r2, r7, #8
 800146c:	d53d      	bpl.n	80014ea <__aeabi_dadd+0x632>
 800146e:	1acc      	subs	r4, r1, r3
 8001470:	42a1      	cmp	r1, r4
 8001472:	4189      	sbcs	r1, r1
 8001474:	4643      	mov	r3, r8
 8001476:	4249      	negs	r1, r1
 8001478:	1a1f      	subs	r7, r3, r0
 800147a:	4655      	mov	r5, sl
 800147c:	1a7f      	subs	r7, r7, r1
 800147e:	e595      	b.n	8000fac <__aeabi_dadd+0xf4>
 8001480:	077b      	lsls	r3, r7, #29
 8001482:	08c9      	lsrs	r1, r1, #3
 8001484:	430b      	orrs	r3, r1
 8001486:	08f8      	lsrs	r0, r7, #3
 8001488:	e643      	b.n	8001112 <__aeabi_dadd+0x25a>
 800148a:	4644      	mov	r4, r8
 800148c:	08db      	lsrs	r3, r3, #3
 800148e:	430c      	orrs	r4, r1
 8001490:	d130      	bne.n	80014f4 <__aeabi_dadd+0x63c>
 8001492:	0742      	lsls	r2, r0, #29
 8001494:	4313      	orrs	r3, r2
 8001496:	08c0      	lsrs	r0, r0, #3
 8001498:	e65c      	b.n	8001154 <__aeabi_dadd+0x29c>
 800149a:	077b      	lsls	r3, r7, #29
 800149c:	08c9      	lsrs	r1, r1, #3
 800149e:	430b      	orrs	r3, r1
 80014a0:	08f8      	lsrs	r0, r7, #3
 80014a2:	e639      	b.n	8001118 <__aeabi_dadd+0x260>
 80014a4:	185c      	adds	r4, r3, r1
 80014a6:	429c      	cmp	r4, r3
 80014a8:	419b      	sbcs	r3, r3
 80014aa:	4440      	add	r0, r8
 80014ac:	425b      	negs	r3, r3
 80014ae:	18c7      	adds	r7, r0, r3
 80014b0:	023b      	lsls	r3, r7, #8
 80014b2:	d400      	bmi.n	80014b6 <__aeabi_dadd+0x5fe>
 80014b4:	e625      	b.n	8001102 <__aeabi_dadd+0x24a>
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <__aeabi_dadd+0x674>)
 80014b8:	2601      	movs	r6, #1
 80014ba:	401f      	ands	r7, r3
 80014bc:	e621      	b.n	8001102 <__aeabi_dadd+0x24a>
 80014be:	0004      	movs	r4, r0
 80014c0:	3a20      	subs	r2, #32
 80014c2:	40d4      	lsrs	r4, r2
 80014c4:	4662      	mov	r2, ip
 80014c6:	2a20      	cmp	r2, #32
 80014c8:	d004      	beq.n	80014d4 <__aeabi_dadd+0x61c>
 80014ca:	2240      	movs	r2, #64	; 0x40
 80014cc:	4666      	mov	r6, ip
 80014ce:	1b92      	subs	r2, r2, r6
 80014d0:	4090      	lsls	r0, r2
 80014d2:	4303      	orrs	r3, r0
 80014d4:	1e5a      	subs	r2, r3, #1
 80014d6:	4193      	sbcs	r3, r2
 80014d8:	431c      	orrs	r4, r3
 80014da:	e67e      	b.n	80011da <__aeabi_dadd+0x322>
 80014dc:	185c      	adds	r4, r3, r1
 80014de:	428c      	cmp	r4, r1
 80014e0:	4189      	sbcs	r1, r1
 80014e2:	4440      	add	r0, r8
 80014e4:	4249      	negs	r1, r1
 80014e6:	1847      	adds	r7, r0, r1
 80014e8:	e6dd      	b.n	80012a6 <__aeabi_dadd+0x3ee>
 80014ea:	0023      	movs	r3, r4
 80014ec:	433b      	orrs	r3, r7
 80014ee:	d100      	bne.n	80014f2 <__aeabi_dadd+0x63a>
 80014f0:	e6ad      	b.n	800124e <__aeabi_dadd+0x396>
 80014f2:	e606      	b.n	8001102 <__aeabi_dadd+0x24a>
 80014f4:	0744      	lsls	r4, r0, #29
 80014f6:	4323      	orrs	r3, r4
 80014f8:	2480      	movs	r4, #128	; 0x80
 80014fa:	08c0      	lsrs	r0, r0, #3
 80014fc:	0324      	lsls	r4, r4, #12
 80014fe:	4220      	tst	r0, r4
 8001500:	d008      	beq.n	8001514 <__aeabi_dadd+0x65c>
 8001502:	4642      	mov	r2, r8
 8001504:	08d6      	lsrs	r6, r2, #3
 8001506:	4226      	tst	r6, r4
 8001508:	d104      	bne.n	8001514 <__aeabi_dadd+0x65c>
 800150a:	4655      	mov	r5, sl
 800150c:	0030      	movs	r0, r6
 800150e:	08cb      	lsrs	r3, r1, #3
 8001510:	0751      	lsls	r1, r2, #29
 8001512:	430b      	orrs	r3, r1
 8001514:	0f5a      	lsrs	r2, r3, #29
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	08db      	lsrs	r3, r3, #3
 800151a:	0752      	lsls	r2, r2, #29
 800151c:	4313      	orrs	r3, r2
 800151e:	e619      	b.n	8001154 <__aeabi_dadd+0x29c>
 8001520:	2300      	movs	r3, #0
 8001522:	4a01      	ldr	r2, [pc, #4]	; (8001528 <__aeabi_dadd+0x670>)
 8001524:	001f      	movs	r7, r3
 8001526:	e55e      	b.n	8000fe6 <__aeabi_dadd+0x12e>
 8001528:	000007ff 	.word	0x000007ff
 800152c:	ff7fffff 	.word	0xff7fffff

08001530 <__aeabi_ddiv>:
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	4657      	mov	r7, sl
 8001534:	464e      	mov	r6, r9
 8001536:	4645      	mov	r5, r8
 8001538:	46de      	mov	lr, fp
 800153a:	b5e0      	push	{r5, r6, r7, lr}
 800153c:	4681      	mov	r9, r0
 800153e:	0005      	movs	r5, r0
 8001540:	030c      	lsls	r4, r1, #12
 8001542:	0048      	lsls	r0, r1, #1
 8001544:	4692      	mov	sl, r2
 8001546:	001f      	movs	r7, r3
 8001548:	b085      	sub	sp, #20
 800154a:	0b24      	lsrs	r4, r4, #12
 800154c:	0d40      	lsrs	r0, r0, #21
 800154e:	0fce      	lsrs	r6, r1, #31
 8001550:	2800      	cmp	r0, #0
 8001552:	d100      	bne.n	8001556 <__aeabi_ddiv+0x26>
 8001554:	e156      	b.n	8001804 <__aeabi_ddiv+0x2d4>
 8001556:	4bd4      	ldr	r3, [pc, #848]	; (80018a8 <__aeabi_ddiv+0x378>)
 8001558:	4298      	cmp	r0, r3
 800155a:	d100      	bne.n	800155e <__aeabi_ddiv+0x2e>
 800155c:	e172      	b.n	8001844 <__aeabi_ddiv+0x314>
 800155e:	0f6b      	lsrs	r3, r5, #29
 8001560:	00e4      	lsls	r4, r4, #3
 8001562:	431c      	orrs	r4, r3
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	041b      	lsls	r3, r3, #16
 8001568:	4323      	orrs	r3, r4
 800156a:	4698      	mov	r8, r3
 800156c:	4bcf      	ldr	r3, [pc, #828]	; (80018ac <__aeabi_ddiv+0x37c>)
 800156e:	00ed      	lsls	r5, r5, #3
 8001570:	469b      	mov	fp, r3
 8001572:	2300      	movs	r3, #0
 8001574:	4699      	mov	r9, r3
 8001576:	4483      	add	fp, r0
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	033c      	lsls	r4, r7, #12
 800157c:	007b      	lsls	r3, r7, #1
 800157e:	4650      	mov	r0, sl
 8001580:	0b24      	lsrs	r4, r4, #12
 8001582:	0d5b      	lsrs	r3, r3, #21
 8001584:	0fff      	lsrs	r7, r7, #31
 8001586:	2b00      	cmp	r3, #0
 8001588:	d100      	bne.n	800158c <__aeabi_ddiv+0x5c>
 800158a:	e11f      	b.n	80017cc <__aeabi_ddiv+0x29c>
 800158c:	4ac6      	ldr	r2, [pc, #792]	; (80018a8 <__aeabi_ddiv+0x378>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d100      	bne.n	8001594 <__aeabi_ddiv+0x64>
 8001592:	e162      	b.n	800185a <__aeabi_ddiv+0x32a>
 8001594:	49c5      	ldr	r1, [pc, #788]	; (80018ac <__aeabi_ddiv+0x37c>)
 8001596:	0f42      	lsrs	r2, r0, #29
 8001598:	468c      	mov	ip, r1
 800159a:	00e4      	lsls	r4, r4, #3
 800159c:	4659      	mov	r1, fp
 800159e:	4314      	orrs	r4, r2
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	4463      	add	r3, ip
 80015a4:	0412      	lsls	r2, r2, #16
 80015a6:	1acb      	subs	r3, r1, r3
 80015a8:	4314      	orrs	r4, r2
 80015aa:	469b      	mov	fp, r3
 80015ac:	00c2      	lsls	r2, r0, #3
 80015ae:	2000      	movs	r0, #0
 80015b0:	0033      	movs	r3, r6
 80015b2:	407b      	eors	r3, r7
 80015b4:	469a      	mov	sl, r3
 80015b6:	464b      	mov	r3, r9
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d827      	bhi.n	800160c <__aeabi_ddiv+0xdc>
 80015bc:	49bc      	ldr	r1, [pc, #752]	; (80018b0 <__aeabi_ddiv+0x380>)
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	58cb      	ldr	r3, [r1, r3]
 80015c2:	469f      	mov	pc, r3
 80015c4:	46b2      	mov	sl, r6
 80015c6:	9b00      	ldr	r3, [sp, #0]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d016      	beq.n	80015fa <__aeabi_ddiv+0xca>
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d100      	bne.n	80015d2 <__aeabi_ddiv+0xa2>
 80015d0:	e28e      	b.n	8001af0 <__aeabi_ddiv+0x5c0>
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d000      	beq.n	80015d8 <__aeabi_ddiv+0xa8>
 80015d6:	e0d9      	b.n	800178c <__aeabi_ddiv+0x25c>
 80015d8:	2300      	movs	r3, #0
 80015da:	2400      	movs	r4, #0
 80015dc:	2500      	movs	r5, #0
 80015de:	4652      	mov	r2, sl
 80015e0:	051b      	lsls	r3, r3, #20
 80015e2:	4323      	orrs	r3, r4
 80015e4:	07d2      	lsls	r2, r2, #31
 80015e6:	4313      	orrs	r3, r2
 80015e8:	0028      	movs	r0, r5
 80015ea:	0019      	movs	r1, r3
 80015ec:	b005      	add	sp, #20
 80015ee:	bcf0      	pop	{r4, r5, r6, r7}
 80015f0:	46bb      	mov	fp, r7
 80015f2:	46b2      	mov	sl, r6
 80015f4:	46a9      	mov	r9, r5
 80015f6:	46a0      	mov	r8, r4
 80015f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015fa:	2400      	movs	r4, #0
 80015fc:	2500      	movs	r5, #0
 80015fe:	4baa      	ldr	r3, [pc, #680]	; (80018a8 <__aeabi_ddiv+0x378>)
 8001600:	e7ed      	b.n	80015de <__aeabi_ddiv+0xae>
 8001602:	46ba      	mov	sl, r7
 8001604:	46a0      	mov	r8, r4
 8001606:	0015      	movs	r5, r2
 8001608:	9000      	str	r0, [sp, #0]
 800160a:	e7dc      	b.n	80015c6 <__aeabi_ddiv+0x96>
 800160c:	4544      	cmp	r4, r8
 800160e:	d200      	bcs.n	8001612 <__aeabi_ddiv+0xe2>
 8001610:	e1c7      	b.n	80019a2 <__aeabi_ddiv+0x472>
 8001612:	d100      	bne.n	8001616 <__aeabi_ddiv+0xe6>
 8001614:	e1c2      	b.n	800199c <__aeabi_ddiv+0x46c>
 8001616:	2301      	movs	r3, #1
 8001618:	425b      	negs	r3, r3
 800161a:	469c      	mov	ip, r3
 800161c:	002e      	movs	r6, r5
 800161e:	4640      	mov	r0, r8
 8001620:	2500      	movs	r5, #0
 8001622:	44e3      	add	fp, ip
 8001624:	0223      	lsls	r3, r4, #8
 8001626:	0e14      	lsrs	r4, r2, #24
 8001628:	431c      	orrs	r4, r3
 800162a:	0c1b      	lsrs	r3, r3, #16
 800162c:	4699      	mov	r9, r3
 800162e:	0423      	lsls	r3, r4, #16
 8001630:	0c1f      	lsrs	r7, r3, #16
 8001632:	0212      	lsls	r2, r2, #8
 8001634:	4649      	mov	r1, r9
 8001636:	9200      	str	r2, [sp, #0]
 8001638:	9701      	str	r7, [sp, #4]
 800163a:	f7fe fe07 	bl	800024c <__aeabi_uidivmod>
 800163e:	0002      	movs	r2, r0
 8001640:	437a      	muls	r2, r7
 8001642:	040b      	lsls	r3, r1, #16
 8001644:	0c31      	lsrs	r1, r6, #16
 8001646:	4680      	mov	r8, r0
 8001648:	4319      	orrs	r1, r3
 800164a:	428a      	cmp	r2, r1
 800164c:	d907      	bls.n	800165e <__aeabi_ddiv+0x12e>
 800164e:	2301      	movs	r3, #1
 8001650:	425b      	negs	r3, r3
 8001652:	469c      	mov	ip, r3
 8001654:	1909      	adds	r1, r1, r4
 8001656:	44e0      	add	r8, ip
 8001658:	428c      	cmp	r4, r1
 800165a:	d800      	bhi.n	800165e <__aeabi_ddiv+0x12e>
 800165c:	e207      	b.n	8001a6e <__aeabi_ddiv+0x53e>
 800165e:	1a88      	subs	r0, r1, r2
 8001660:	4649      	mov	r1, r9
 8001662:	f7fe fdf3 	bl	800024c <__aeabi_uidivmod>
 8001666:	0409      	lsls	r1, r1, #16
 8001668:	468c      	mov	ip, r1
 800166a:	0431      	lsls	r1, r6, #16
 800166c:	4666      	mov	r6, ip
 800166e:	9a01      	ldr	r2, [sp, #4]
 8001670:	0c09      	lsrs	r1, r1, #16
 8001672:	4342      	muls	r2, r0
 8001674:	0003      	movs	r3, r0
 8001676:	4331      	orrs	r1, r6
 8001678:	428a      	cmp	r2, r1
 800167a:	d904      	bls.n	8001686 <__aeabi_ddiv+0x156>
 800167c:	1909      	adds	r1, r1, r4
 800167e:	3b01      	subs	r3, #1
 8001680:	428c      	cmp	r4, r1
 8001682:	d800      	bhi.n	8001686 <__aeabi_ddiv+0x156>
 8001684:	e1ed      	b.n	8001a62 <__aeabi_ddiv+0x532>
 8001686:	1a88      	subs	r0, r1, r2
 8001688:	4642      	mov	r2, r8
 800168a:	0412      	lsls	r2, r2, #16
 800168c:	431a      	orrs	r2, r3
 800168e:	4690      	mov	r8, r2
 8001690:	4641      	mov	r1, r8
 8001692:	9b00      	ldr	r3, [sp, #0]
 8001694:	040e      	lsls	r6, r1, #16
 8001696:	0c1b      	lsrs	r3, r3, #16
 8001698:	001f      	movs	r7, r3
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	9b00      	ldr	r3, [sp, #0]
 800169e:	0c36      	lsrs	r6, r6, #16
 80016a0:	041b      	lsls	r3, r3, #16
 80016a2:	0c19      	lsrs	r1, r3, #16
 80016a4:	000b      	movs	r3, r1
 80016a6:	4373      	muls	r3, r6
 80016a8:	0c12      	lsrs	r2, r2, #16
 80016aa:	437e      	muls	r6, r7
 80016ac:	9103      	str	r1, [sp, #12]
 80016ae:	4351      	muls	r1, r2
 80016b0:	437a      	muls	r2, r7
 80016b2:	0c1f      	lsrs	r7, r3, #16
 80016b4:	46bc      	mov	ip, r7
 80016b6:	1876      	adds	r6, r6, r1
 80016b8:	4466      	add	r6, ip
 80016ba:	42b1      	cmp	r1, r6
 80016bc:	d903      	bls.n	80016c6 <__aeabi_ddiv+0x196>
 80016be:	2180      	movs	r1, #128	; 0x80
 80016c0:	0249      	lsls	r1, r1, #9
 80016c2:	468c      	mov	ip, r1
 80016c4:	4462      	add	r2, ip
 80016c6:	0c31      	lsrs	r1, r6, #16
 80016c8:	188a      	adds	r2, r1, r2
 80016ca:	0431      	lsls	r1, r6, #16
 80016cc:	041e      	lsls	r6, r3, #16
 80016ce:	0c36      	lsrs	r6, r6, #16
 80016d0:	198e      	adds	r6, r1, r6
 80016d2:	4290      	cmp	r0, r2
 80016d4:	d302      	bcc.n	80016dc <__aeabi_ddiv+0x1ac>
 80016d6:	d112      	bne.n	80016fe <__aeabi_ddiv+0x1ce>
 80016d8:	42b5      	cmp	r5, r6
 80016da:	d210      	bcs.n	80016fe <__aeabi_ddiv+0x1ce>
 80016dc:	4643      	mov	r3, r8
 80016de:	1e59      	subs	r1, r3, #1
 80016e0:	9b00      	ldr	r3, [sp, #0]
 80016e2:	469c      	mov	ip, r3
 80016e4:	4465      	add	r5, ip
 80016e6:	001f      	movs	r7, r3
 80016e8:	429d      	cmp	r5, r3
 80016ea:	419b      	sbcs	r3, r3
 80016ec:	425b      	negs	r3, r3
 80016ee:	191b      	adds	r3, r3, r4
 80016f0:	18c0      	adds	r0, r0, r3
 80016f2:	4284      	cmp	r4, r0
 80016f4:	d200      	bcs.n	80016f8 <__aeabi_ddiv+0x1c8>
 80016f6:	e1a0      	b.n	8001a3a <__aeabi_ddiv+0x50a>
 80016f8:	d100      	bne.n	80016fc <__aeabi_ddiv+0x1cc>
 80016fa:	e19b      	b.n	8001a34 <__aeabi_ddiv+0x504>
 80016fc:	4688      	mov	r8, r1
 80016fe:	1bae      	subs	r6, r5, r6
 8001700:	42b5      	cmp	r5, r6
 8001702:	41ad      	sbcs	r5, r5
 8001704:	1a80      	subs	r0, r0, r2
 8001706:	426d      	negs	r5, r5
 8001708:	1b40      	subs	r0, r0, r5
 800170a:	4284      	cmp	r4, r0
 800170c:	d100      	bne.n	8001710 <__aeabi_ddiv+0x1e0>
 800170e:	e1d5      	b.n	8001abc <__aeabi_ddiv+0x58c>
 8001710:	4649      	mov	r1, r9
 8001712:	f7fe fd9b 	bl	800024c <__aeabi_uidivmod>
 8001716:	9a01      	ldr	r2, [sp, #4]
 8001718:	040b      	lsls	r3, r1, #16
 800171a:	4342      	muls	r2, r0
 800171c:	0c31      	lsrs	r1, r6, #16
 800171e:	0005      	movs	r5, r0
 8001720:	4319      	orrs	r1, r3
 8001722:	428a      	cmp	r2, r1
 8001724:	d900      	bls.n	8001728 <__aeabi_ddiv+0x1f8>
 8001726:	e16c      	b.n	8001a02 <__aeabi_ddiv+0x4d2>
 8001728:	1a88      	subs	r0, r1, r2
 800172a:	4649      	mov	r1, r9
 800172c:	f7fe fd8e 	bl	800024c <__aeabi_uidivmod>
 8001730:	9a01      	ldr	r2, [sp, #4]
 8001732:	0436      	lsls	r6, r6, #16
 8001734:	4342      	muls	r2, r0
 8001736:	0409      	lsls	r1, r1, #16
 8001738:	0c36      	lsrs	r6, r6, #16
 800173a:	0003      	movs	r3, r0
 800173c:	430e      	orrs	r6, r1
 800173e:	42b2      	cmp	r2, r6
 8001740:	d900      	bls.n	8001744 <__aeabi_ddiv+0x214>
 8001742:	e153      	b.n	80019ec <__aeabi_ddiv+0x4bc>
 8001744:	9803      	ldr	r0, [sp, #12]
 8001746:	1ab6      	subs	r6, r6, r2
 8001748:	0002      	movs	r2, r0
 800174a:	042d      	lsls	r5, r5, #16
 800174c:	431d      	orrs	r5, r3
 800174e:	9f02      	ldr	r7, [sp, #8]
 8001750:	042b      	lsls	r3, r5, #16
 8001752:	0c1b      	lsrs	r3, r3, #16
 8001754:	435a      	muls	r2, r3
 8001756:	437b      	muls	r3, r7
 8001758:	469c      	mov	ip, r3
 800175a:	0c29      	lsrs	r1, r5, #16
 800175c:	4348      	muls	r0, r1
 800175e:	0c13      	lsrs	r3, r2, #16
 8001760:	4484      	add	ip, r0
 8001762:	4463      	add	r3, ip
 8001764:	4379      	muls	r1, r7
 8001766:	4298      	cmp	r0, r3
 8001768:	d903      	bls.n	8001772 <__aeabi_ddiv+0x242>
 800176a:	2080      	movs	r0, #128	; 0x80
 800176c:	0240      	lsls	r0, r0, #9
 800176e:	4684      	mov	ip, r0
 8001770:	4461      	add	r1, ip
 8001772:	0c18      	lsrs	r0, r3, #16
 8001774:	0412      	lsls	r2, r2, #16
 8001776:	041b      	lsls	r3, r3, #16
 8001778:	0c12      	lsrs	r2, r2, #16
 800177a:	1841      	adds	r1, r0, r1
 800177c:	189b      	adds	r3, r3, r2
 800177e:	428e      	cmp	r6, r1
 8001780:	d200      	bcs.n	8001784 <__aeabi_ddiv+0x254>
 8001782:	e0ff      	b.n	8001984 <__aeabi_ddiv+0x454>
 8001784:	d100      	bne.n	8001788 <__aeabi_ddiv+0x258>
 8001786:	e0fa      	b.n	800197e <__aeabi_ddiv+0x44e>
 8001788:	2301      	movs	r3, #1
 800178a:	431d      	orrs	r5, r3
 800178c:	4a49      	ldr	r2, [pc, #292]	; (80018b4 <__aeabi_ddiv+0x384>)
 800178e:	445a      	add	r2, fp
 8001790:	2a00      	cmp	r2, #0
 8001792:	dc00      	bgt.n	8001796 <__aeabi_ddiv+0x266>
 8001794:	e0aa      	b.n	80018ec <__aeabi_ddiv+0x3bc>
 8001796:	076b      	lsls	r3, r5, #29
 8001798:	d000      	beq.n	800179c <__aeabi_ddiv+0x26c>
 800179a:	e13d      	b.n	8001a18 <__aeabi_ddiv+0x4e8>
 800179c:	08ed      	lsrs	r5, r5, #3
 800179e:	4643      	mov	r3, r8
 80017a0:	01db      	lsls	r3, r3, #7
 80017a2:	d506      	bpl.n	80017b2 <__aeabi_ddiv+0x282>
 80017a4:	4642      	mov	r2, r8
 80017a6:	4b44      	ldr	r3, [pc, #272]	; (80018b8 <__aeabi_ddiv+0x388>)
 80017a8:	401a      	ands	r2, r3
 80017aa:	4690      	mov	r8, r2
 80017ac:	2280      	movs	r2, #128	; 0x80
 80017ae:	00d2      	lsls	r2, r2, #3
 80017b0:	445a      	add	r2, fp
 80017b2:	4b42      	ldr	r3, [pc, #264]	; (80018bc <__aeabi_ddiv+0x38c>)
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dd00      	ble.n	80017ba <__aeabi_ddiv+0x28a>
 80017b8:	e71f      	b.n	80015fa <__aeabi_ddiv+0xca>
 80017ba:	4643      	mov	r3, r8
 80017bc:	075b      	lsls	r3, r3, #29
 80017be:	431d      	orrs	r5, r3
 80017c0:	4643      	mov	r3, r8
 80017c2:	0552      	lsls	r2, r2, #21
 80017c4:	025c      	lsls	r4, r3, #9
 80017c6:	0b24      	lsrs	r4, r4, #12
 80017c8:	0d53      	lsrs	r3, r2, #21
 80017ca:	e708      	b.n	80015de <__aeabi_ddiv+0xae>
 80017cc:	4652      	mov	r2, sl
 80017ce:	4322      	orrs	r2, r4
 80017d0:	d100      	bne.n	80017d4 <__aeabi_ddiv+0x2a4>
 80017d2:	e07b      	b.n	80018cc <__aeabi_ddiv+0x39c>
 80017d4:	2c00      	cmp	r4, #0
 80017d6:	d100      	bne.n	80017da <__aeabi_ddiv+0x2aa>
 80017d8:	e0fa      	b.n	80019d0 <__aeabi_ddiv+0x4a0>
 80017da:	0020      	movs	r0, r4
 80017dc:	f001 f952 	bl	8002a84 <__clzsi2>
 80017e0:	0002      	movs	r2, r0
 80017e2:	3a0b      	subs	r2, #11
 80017e4:	231d      	movs	r3, #29
 80017e6:	0001      	movs	r1, r0
 80017e8:	1a9b      	subs	r3, r3, r2
 80017ea:	4652      	mov	r2, sl
 80017ec:	3908      	subs	r1, #8
 80017ee:	40da      	lsrs	r2, r3
 80017f0:	408c      	lsls	r4, r1
 80017f2:	4314      	orrs	r4, r2
 80017f4:	4652      	mov	r2, sl
 80017f6:	408a      	lsls	r2, r1
 80017f8:	4b31      	ldr	r3, [pc, #196]	; (80018c0 <__aeabi_ddiv+0x390>)
 80017fa:	4458      	add	r0, fp
 80017fc:	469b      	mov	fp, r3
 80017fe:	4483      	add	fp, r0
 8001800:	2000      	movs	r0, #0
 8001802:	e6d5      	b.n	80015b0 <__aeabi_ddiv+0x80>
 8001804:	464b      	mov	r3, r9
 8001806:	4323      	orrs	r3, r4
 8001808:	4698      	mov	r8, r3
 800180a:	d044      	beq.n	8001896 <__aeabi_ddiv+0x366>
 800180c:	2c00      	cmp	r4, #0
 800180e:	d100      	bne.n	8001812 <__aeabi_ddiv+0x2e2>
 8001810:	e0ce      	b.n	80019b0 <__aeabi_ddiv+0x480>
 8001812:	0020      	movs	r0, r4
 8001814:	f001 f936 	bl	8002a84 <__clzsi2>
 8001818:	0001      	movs	r1, r0
 800181a:	0002      	movs	r2, r0
 800181c:	390b      	subs	r1, #11
 800181e:	231d      	movs	r3, #29
 8001820:	1a5b      	subs	r3, r3, r1
 8001822:	4649      	mov	r1, r9
 8001824:	0010      	movs	r0, r2
 8001826:	40d9      	lsrs	r1, r3
 8001828:	3808      	subs	r0, #8
 800182a:	4084      	lsls	r4, r0
 800182c:	000b      	movs	r3, r1
 800182e:	464d      	mov	r5, r9
 8001830:	4323      	orrs	r3, r4
 8001832:	4698      	mov	r8, r3
 8001834:	4085      	lsls	r5, r0
 8001836:	4823      	ldr	r0, [pc, #140]	; (80018c4 <__aeabi_ddiv+0x394>)
 8001838:	1a83      	subs	r3, r0, r2
 800183a:	469b      	mov	fp, r3
 800183c:	2300      	movs	r3, #0
 800183e:	4699      	mov	r9, r3
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	e69a      	b.n	800157a <__aeabi_ddiv+0x4a>
 8001844:	464b      	mov	r3, r9
 8001846:	4323      	orrs	r3, r4
 8001848:	4698      	mov	r8, r3
 800184a:	d11d      	bne.n	8001888 <__aeabi_ddiv+0x358>
 800184c:	2308      	movs	r3, #8
 800184e:	4699      	mov	r9, r3
 8001850:	3b06      	subs	r3, #6
 8001852:	2500      	movs	r5, #0
 8001854:	4683      	mov	fp, r0
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	e68f      	b.n	800157a <__aeabi_ddiv+0x4a>
 800185a:	4652      	mov	r2, sl
 800185c:	4322      	orrs	r2, r4
 800185e:	d109      	bne.n	8001874 <__aeabi_ddiv+0x344>
 8001860:	2302      	movs	r3, #2
 8001862:	4649      	mov	r1, r9
 8001864:	4319      	orrs	r1, r3
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <__aeabi_ddiv+0x398>)
 8001868:	4689      	mov	r9, r1
 800186a:	469c      	mov	ip, r3
 800186c:	2400      	movs	r4, #0
 800186e:	2002      	movs	r0, #2
 8001870:	44e3      	add	fp, ip
 8001872:	e69d      	b.n	80015b0 <__aeabi_ddiv+0x80>
 8001874:	2303      	movs	r3, #3
 8001876:	464a      	mov	r2, r9
 8001878:	431a      	orrs	r2, r3
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <__aeabi_ddiv+0x398>)
 800187c:	4691      	mov	r9, r2
 800187e:	469c      	mov	ip, r3
 8001880:	4652      	mov	r2, sl
 8001882:	2003      	movs	r0, #3
 8001884:	44e3      	add	fp, ip
 8001886:	e693      	b.n	80015b0 <__aeabi_ddiv+0x80>
 8001888:	230c      	movs	r3, #12
 800188a:	4699      	mov	r9, r3
 800188c:	3b09      	subs	r3, #9
 800188e:	46a0      	mov	r8, r4
 8001890:	4683      	mov	fp, r0
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	e671      	b.n	800157a <__aeabi_ddiv+0x4a>
 8001896:	2304      	movs	r3, #4
 8001898:	4699      	mov	r9, r3
 800189a:	2300      	movs	r3, #0
 800189c:	469b      	mov	fp, r3
 800189e:	3301      	adds	r3, #1
 80018a0:	2500      	movs	r5, #0
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	e669      	b.n	800157a <__aeabi_ddiv+0x4a>
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	000007ff 	.word	0x000007ff
 80018ac:	fffffc01 	.word	0xfffffc01
 80018b0:	0800b894 	.word	0x0800b894
 80018b4:	000003ff 	.word	0x000003ff
 80018b8:	feffffff 	.word	0xfeffffff
 80018bc:	000007fe 	.word	0x000007fe
 80018c0:	000003f3 	.word	0x000003f3
 80018c4:	fffffc0d 	.word	0xfffffc0d
 80018c8:	fffff801 	.word	0xfffff801
 80018cc:	4649      	mov	r1, r9
 80018ce:	2301      	movs	r3, #1
 80018d0:	4319      	orrs	r1, r3
 80018d2:	4689      	mov	r9, r1
 80018d4:	2400      	movs	r4, #0
 80018d6:	2001      	movs	r0, #1
 80018d8:	e66a      	b.n	80015b0 <__aeabi_ddiv+0x80>
 80018da:	2300      	movs	r3, #0
 80018dc:	2480      	movs	r4, #128	; 0x80
 80018de:	469a      	mov	sl, r3
 80018e0:	2500      	movs	r5, #0
 80018e2:	4b8a      	ldr	r3, [pc, #552]	; (8001b0c <__aeabi_ddiv+0x5dc>)
 80018e4:	0324      	lsls	r4, r4, #12
 80018e6:	e67a      	b.n	80015de <__aeabi_ddiv+0xae>
 80018e8:	2501      	movs	r5, #1
 80018ea:	426d      	negs	r5, r5
 80018ec:	2301      	movs	r3, #1
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	2b38      	cmp	r3, #56	; 0x38
 80018f2:	dd00      	ble.n	80018f6 <__aeabi_ddiv+0x3c6>
 80018f4:	e670      	b.n	80015d8 <__aeabi_ddiv+0xa8>
 80018f6:	2b1f      	cmp	r3, #31
 80018f8:	dc00      	bgt.n	80018fc <__aeabi_ddiv+0x3cc>
 80018fa:	e0bf      	b.n	8001a7c <__aeabi_ddiv+0x54c>
 80018fc:	211f      	movs	r1, #31
 80018fe:	4249      	negs	r1, r1
 8001900:	1a8a      	subs	r2, r1, r2
 8001902:	4641      	mov	r1, r8
 8001904:	40d1      	lsrs	r1, r2
 8001906:	000a      	movs	r2, r1
 8001908:	2b20      	cmp	r3, #32
 800190a:	d004      	beq.n	8001916 <__aeabi_ddiv+0x3e6>
 800190c:	4641      	mov	r1, r8
 800190e:	4b80      	ldr	r3, [pc, #512]	; (8001b10 <__aeabi_ddiv+0x5e0>)
 8001910:	445b      	add	r3, fp
 8001912:	4099      	lsls	r1, r3
 8001914:	430d      	orrs	r5, r1
 8001916:	1e6b      	subs	r3, r5, #1
 8001918:	419d      	sbcs	r5, r3
 800191a:	2307      	movs	r3, #7
 800191c:	432a      	orrs	r2, r5
 800191e:	001d      	movs	r5, r3
 8001920:	2400      	movs	r4, #0
 8001922:	4015      	ands	r5, r2
 8001924:	4213      	tst	r3, r2
 8001926:	d100      	bne.n	800192a <__aeabi_ddiv+0x3fa>
 8001928:	e0d4      	b.n	8001ad4 <__aeabi_ddiv+0x5a4>
 800192a:	210f      	movs	r1, #15
 800192c:	2300      	movs	r3, #0
 800192e:	4011      	ands	r1, r2
 8001930:	2904      	cmp	r1, #4
 8001932:	d100      	bne.n	8001936 <__aeabi_ddiv+0x406>
 8001934:	e0cb      	b.n	8001ace <__aeabi_ddiv+0x59e>
 8001936:	1d11      	adds	r1, r2, #4
 8001938:	4291      	cmp	r1, r2
 800193a:	4192      	sbcs	r2, r2
 800193c:	4252      	negs	r2, r2
 800193e:	189b      	adds	r3, r3, r2
 8001940:	000a      	movs	r2, r1
 8001942:	0219      	lsls	r1, r3, #8
 8001944:	d400      	bmi.n	8001948 <__aeabi_ddiv+0x418>
 8001946:	e0c2      	b.n	8001ace <__aeabi_ddiv+0x59e>
 8001948:	2301      	movs	r3, #1
 800194a:	2400      	movs	r4, #0
 800194c:	2500      	movs	r5, #0
 800194e:	e646      	b.n	80015de <__aeabi_ddiv+0xae>
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	4641      	mov	r1, r8
 8001954:	031b      	lsls	r3, r3, #12
 8001956:	4219      	tst	r1, r3
 8001958:	d008      	beq.n	800196c <__aeabi_ddiv+0x43c>
 800195a:	421c      	tst	r4, r3
 800195c:	d106      	bne.n	800196c <__aeabi_ddiv+0x43c>
 800195e:	431c      	orrs	r4, r3
 8001960:	0324      	lsls	r4, r4, #12
 8001962:	46ba      	mov	sl, r7
 8001964:	0015      	movs	r5, r2
 8001966:	4b69      	ldr	r3, [pc, #420]	; (8001b0c <__aeabi_ddiv+0x5dc>)
 8001968:	0b24      	lsrs	r4, r4, #12
 800196a:	e638      	b.n	80015de <__aeabi_ddiv+0xae>
 800196c:	2480      	movs	r4, #128	; 0x80
 800196e:	4643      	mov	r3, r8
 8001970:	0324      	lsls	r4, r4, #12
 8001972:	431c      	orrs	r4, r3
 8001974:	0324      	lsls	r4, r4, #12
 8001976:	46b2      	mov	sl, r6
 8001978:	4b64      	ldr	r3, [pc, #400]	; (8001b0c <__aeabi_ddiv+0x5dc>)
 800197a:	0b24      	lsrs	r4, r4, #12
 800197c:	e62f      	b.n	80015de <__aeabi_ddiv+0xae>
 800197e:	2b00      	cmp	r3, #0
 8001980:	d100      	bne.n	8001984 <__aeabi_ddiv+0x454>
 8001982:	e703      	b.n	800178c <__aeabi_ddiv+0x25c>
 8001984:	19a6      	adds	r6, r4, r6
 8001986:	1e68      	subs	r0, r5, #1
 8001988:	42a6      	cmp	r6, r4
 800198a:	d200      	bcs.n	800198e <__aeabi_ddiv+0x45e>
 800198c:	e08d      	b.n	8001aaa <__aeabi_ddiv+0x57a>
 800198e:	428e      	cmp	r6, r1
 8001990:	d200      	bcs.n	8001994 <__aeabi_ddiv+0x464>
 8001992:	e0a3      	b.n	8001adc <__aeabi_ddiv+0x5ac>
 8001994:	d100      	bne.n	8001998 <__aeabi_ddiv+0x468>
 8001996:	e0b3      	b.n	8001b00 <__aeabi_ddiv+0x5d0>
 8001998:	0005      	movs	r5, r0
 800199a:	e6f5      	b.n	8001788 <__aeabi_ddiv+0x258>
 800199c:	42aa      	cmp	r2, r5
 800199e:	d900      	bls.n	80019a2 <__aeabi_ddiv+0x472>
 80019a0:	e639      	b.n	8001616 <__aeabi_ddiv+0xe6>
 80019a2:	4643      	mov	r3, r8
 80019a4:	07de      	lsls	r6, r3, #31
 80019a6:	0858      	lsrs	r0, r3, #1
 80019a8:	086b      	lsrs	r3, r5, #1
 80019aa:	431e      	orrs	r6, r3
 80019ac:	07ed      	lsls	r5, r5, #31
 80019ae:	e639      	b.n	8001624 <__aeabi_ddiv+0xf4>
 80019b0:	4648      	mov	r0, r9
 80019b2:	f001 f867 	bl	8002a84 <__clzsi2>
 80019b6:	0001      	movs	r1, r0
 80019b8:	0002      	movs	r2, r0
 80019ba:	3115      	adds	r1, #21
 80019bc:	3220      	adds	r2, #32
 80019be:	291c      	cmp	r1, #28
 80019c0:	dc00      	bgt.n	80019c4 <__aeabi_ddiv+0x494>
 80019c2:	e72c      	b.n	800181e <__aeabi_ddiv+0x2ee>
 80019c4:	464b      	mov	r3, r9
 80019c6:	3808      	subs	r0, #8
 80019c8:	4083      	lsls	r3, r0
 80019ca:	2500      	movs	r5, #0
 80019cc:	4698      	mov	r8, r3
 80019ce:	e732      	b.n	8001836 <__aeabi_ddiv+0x306>
 80019d0:	f001 f858 	bl	8002a84 <__clzsi2>
 80019d4:	0003      	movs	r3, r0
 80019d6:	001a      	movs	r2, r3
 80019d8:	3215      	adds	r2, #21
 80019da:	3020      	adds	r0, #32
 80019dc:	2a1c      	cmp	r2, #28
 80019de:	dc00      	bgt.n	80019e2 <__aeabi_ddiv+0x4b2>
 80019e0:	e700      	b.n	80017e4 <__aeabi_ddiv+0x2b4>
 80019e2:	4654      	mov	r4, sl
 80019e4:	3b08      	subs	r3, #8
 80019e6:	2200      	movs	r2, #0
 80019e8:	409c      	lsls	r4, r3
 80019ea:	e705      	b.n	80017f8 <__aeabi_ddiv+0x2c8>
 80019ec:	1936      	adds	r6, r6, r4
 80019ee:	3b01      	subs	r3, #1
 80019f0:	42b4      	cmp	r4, r6
 80019f2:	d900      	bls.n	80019f6 <__aeabi_ddiv+0x4c6>
 80019f4:	e6a6      	b.n	8001744 <__aeabi_ddiv+0x214>
 80019f6:	42b2      	cmp	r2, r6
 80019f8:	d800      	bhi.n	80019fc <__aeabi_ddiv+0x4cc>
 80019fa:	e6a3      	b.n	8001744 <__aeabi_ddiv+0x214>
 80019fc:	1e83      	subs	r3, r0, #2
 80019fe:	1936      	adds	r6, r6, r4
 8001a00:	e6a0      	b.n	8001744 <__aeabi_ddiv+0x214>
 8001a02:	1909      	adds	r1, r1, r4
 8001a04:	3d01      	subs	r5, #1
 8001a06:	428c      	cmp	r4, r1
 8001a08:	d900      	bls.n	8001a0c <__aeabi_ddiv+0x4dc>
 8001a0a:	e68d      	b.n	8001728 <__aeabi_ddiv+0x1f8>
 8001a0c:	428a      	cmp	r2, r1
 8001a0e:	d800      	bhi.n	8001a12 <__aeabi_ddiv+0x4e2>
 8001a10:	e68a      	b.n	8001728 <__aeabi_ddiv+0x1f8>
 8001a12:	1e85      	subs	r5, r0, #2
 8001a14:	1909      	adds	r1, r1, r4
 8001a16:	e687      	b.n	8001728 <__aeabi_ddiv+0x1f8>
 8001a18:	230f      	movs	r3, #15
 8001a1a:	402b      	ands	r3, r5
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_ddiv+0x4f2>
 8001a20:	e6bc      	b.n	800179c <__aeabi_ddiv+0x26c>
 8001a22:	2305      	movs	r3, #5
 8001a24:	425b      	negs	r3, r3
 8001a26:	42ab      	cmp	r3, r5
 8001a28:	419b      	sbcs	r3, r3
 8001a2a:	3504      	adds	r5, #4
 8001a2c:	425b      	negs	r3, r3
 8001a2e:	08ed      	lsrs	r5, r5, #3
 8001a30:	4498      	add	r8, r3
 8001a32:	e6b4      	b.n	800179e <__aeabi_ddiv+0x26e>
 8001a34:	42af      	cmp	r7, r5
 8001a36:	d900      	bls.n	8001a3a <__aeabi_ddiv+0x50a>
 8001a38:	e660      	b.n	80016fc <__aeabi_ddiv+0x1cc>
 8001a3a:	4282      	cmp	r2, r0
 8001a3c:	d804      	bhi.n	8001a48 <__aeabi_ddiv+0x518>
 8001a3e:	d000      	beq.n	8001a42 <__aeabi_ddiv+0x512>
 8001a40:	e65c      	b.n	80016fc <__aeabi_ddiv+0x1cc>
 8001a42:	42ae      	cmp	r6, r5
 8001a44:	d800      	bhi.n	8001a48 <__aeabi_ddiv+0x518>
 8001a46:	e659      	b.n	80016fc <__aeabi_ddiv+0x1cc>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	425b      	negs	r3, r3
 8001a4c:	469c      	mov	ip, r3
 8001a4e:	9b00      	ldr	r3, [sp, #0]
 8001a50:	44e0      	add	r8, ip
 8001a52:	469c      	mov	ip, r3
 8001a54:	4465      	add	r5, ip
 8001a56:	429d      	cmp	r5, r3
 8001a58:	419b      	sbcs	r3, r3
 8001a5a:	425b      	negs	r3, r3
 8001a5c:	191b      	adds	r3, r3, r4
 8001a5e:	18c0      	adds	r0, r0, r3
 8001a60:	e64d      	b.n	80016fe <__aeabi_ddiv+0x1ce>
 8001a62:	428a      	cmp	r2, r1
 8001a64:	d800      	bhi.n	8001a68 <__aeabi_ddiv+0x538>
 8001a66:	e60e      	b.n	8001686 <__aeabi_ddiv+0x156>
 8001a68:	1e83      	subs	r3, r0, #2
 8001a6a:	1909      	adds	r1, r1, r4
 8001a6c:	e60b      	b.n	8001686 <__aeabi_ddiv+0x156>
 8001a6e:	428a      	cmp	r2, r1
 8001a70:	d800      	bhi.n	8001a74 <__aeabi_ddiv+0x544>
 8001a72:	e5f4      	b.n	800165e <__aeabi_ddiv+0x12e>
 8001a74:	1e83      	subs	r3, r0, #2
 8001a76:	4698      	mov	r8, r3
 8001a78:	1909      	adds	r1, r1, r4
 8001a7a:	e5f0      	b.n	800165e <__aeabi_ddiv+0x12e>
 8001a7c:	4925      	ldr	r1, [pc, #148]	; (8001b14 <__aeabi_ddiv+0x5e4>)
 8001a7e:	0028      	movs	r0, r5
 8001a80:	4459      	add	r1, fp
 8001a82:	408d      	lsls	r5, r1
 8001a84:	4642      	mov	r2, r8
 8001a86:	408a      	lsls	r2, r1
 8001a88:	1e69      	subs	r1, r5, #1
 8001a8a:	418d      	sbcs	r5, r1
 8001a8c:	4641      	mov	r1, r8
 8001a8e:	40d8      	lsrs	r0, r3
 8001a90:	40d9      	lsrs	r1, r3
 8001a92:	4302      	orrs	r2, r0
 8001a94:	432a      	orrs	r2, r5
 8001a96:	000b      	movs	r3, r1
 8001a98:	0751      	lsls	r1, r2, #29
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_ddiv+0x56e>
 8001a9c:	e751      	b.n	8001942 <__aeabi_ddiv+0x412>
 8001a9e:	210f      	movs	r1, #15
 8001aa0:	4011      	ands	r1, r2
 8001aa2:	2904      	cmp	r1, #4
 8001aa4:	d000      	beq.n	8001aa8 <__aeabi_ddiv+0x578>
 8001aa6:	e746      	b.n	8001936 <__aeabi_ddiv+0x406>
 8001aa8:	e74b      	b.n	8001942 <__aeabi_ddiv+0x412>
 8001aaa:	0005      	movs	r5, r0
 8001aac:	428e      	cmp	r6, r1
 8001aae:	d000      	beq.n	8001ab2 <__aeabi_ddiv+0x582>
 8001ab0:	e66a      	b.n	8001788 <__aeabi_ddiv+0x258>
 8001ab2:	9a00      	ldr	r2, [sp, #0]
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d000      	beq.n	8001aba <__aeabi_ddiv+0x58a>
 8001ab8:	e666      	b.n	8001788 <__aeabi_ddiv+0x258>
 8001aba:	e667      	b.n	800178c <__aeabi_ddiv+0x25c>
 8001abc:	4a16      	ldr	r2, [pc, #88]	; (8001b18 <__aeabi_ddiv+0x5e8>)
 8001abe:	445a      	add	r2, fp
 8001ac0:	2a00      	cmp	r2, #0
 8001ac2:	dc00      	bgt.n	8001ac6 <__aeabi_ddiv+0x596>
 8001ac4:	e710      	b.n	80018e8 <__aeabi_ddiv+0x3b8>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	2500      	movs	r5, #0
 8001aca:	4498      	add	r8, r3
 8001acc:	e667      	b.n	800179e <__aeabi_ddiv+0x26e>
 8001ace:	075d      	lsls	r5, r3, #29
 8001ad0:	025b      	lsls	r3, r3, #9
 8001ad2:	0b1c      	lsrs	r4, r3, #12
 8001ad4:	08d2      	lsrs	r2, r2, #3
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	4315      	orrs	r5, r2
 8001ada:	e580      	b.n	80015de <__aeabi_ddiv+0xae>
 8001adc:	9800      	ldr	r0, [sp, #0]
 8001ade:	3d02      	subs	r5, #2
 8001ae0:	0042      	lsls	r2, r0, #1
 8001ae2:	4282      	cmp	r2, r0
 8001ae4:	41bf      	sbcs	r7, r7
 8001ae6:	427f      	negs	r7, r7
 8001ae8:	193c      	adds	r4, r7, r4
 8001aea:	1936      	adds	r6, r6, r4
 8001aec:	9200      	str	r2, [sp, #0]
 8001aee:	e7dd      	b.n	8001aac <__aeabi_ddiv+0x57c>
 8001af0:	2480      	movs	r4, #128	; 0x80
 8001af2:	4643      	mov	r3, r8
 8001af4:	0324      	lsls	r4, r4, #12
 8001af6:	431c      	orrs	r4, r3
 8001af8:	0324      	lsls	r4, r4, #12
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <__aeabi_ddiv+0x5dc>)
 8001afc:	0b24      	lsrs	r4, r4, #12
 8001afe:	e56e      	b.n	80015de <__aeabi_ddiv+0xae>
 8001b00:	9a00      	ldr	r2, [sp, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d3ea      	bcc.n	8001adc <__aeabi_ddiv+0x5ac>
 8001b06:	0005      	movs	r5, r0
 8001b08:	e7d3      	b.n	8001ab2 <__aeabi_ddiv+0x582>
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	000007ff 	.word	0x000007ff
 8001b10:	0000043e 	.word	0x0000043e
 8001b14:	0000041e 	.word	0x0000041e
 8001b18:	000003ff 	.word	0x000003ff

08001b1c <__eqdf2>:
 8001b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1e:	464e      	mov	r6, r9
 8001b20:	4645      	mov	r5, r8
 8001b22:	46de      	mov	lr, fp
 8001b24:	4657      	mov	r7, sl
 8001b26:	4690      	mov	r8, r2
 8001b28:	b5e0      	push	{r5, r6, r7, lr}
 8001b2a:	0017      	movs	r7, r2
 8001b2c:	031a      	lsls	r2, r3, #12
 8001b2e:	0b12      	lsrs	r2, r2, #12
 8001b30:	0005      	movs	r5, r0
 8001b32:	4684      	mov	ip, r0
 8001b34:	4819      	ldr	r0, [pc, #100]	; (8001b9c <__eqdf2+0x80>)
 8001b36:	030e      	lsls	r6, r1, #12
 8001b38:	004c      	lsls	r4, r1, #1
 8001b3a:	4691      	mov	r9, r2
 8001b3c:	005a      	lsls	r2, r3, #1
 8001b3e:	0fdb      	lsrs	r3, r3, #31
 8001b40:	469b      	mov	fp, r3
 8001b42:	0b36      	lsrs	r6, r6, #12
 8001b44:	0d64      	lsrs	r4, r4, #21
 8001b46:	0fc9      	lsrs	r1, r1, #31
 8001b48:	0d52      	lsrs	r2, r2, #21
 8001b4a:	4284      	cmp	r4, r0
 8001b4c:	d019      	beq.n	8001b82 <__eqdf2+0x66>
 8001b4e:	4282      	cmp	r2, r0
 8001b50:	d010      	beq.n	8001b74 <__eqdf2+0x58>
 8001b52:	2001      	movs	r0, #1
 8001b54:	4294      	cmp	r4, r2
 8001b56:	d10e      	bne.n	8001b76 <__eqdf2+0x5a>
 8001b58:	454e      	cmp	r6, r9
 8001b5a:	d10c      	bne.n	8001b76 <__eqdf2+0x5a>
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	45c4      	cmp	ip, r8
 8001b60:	d109      	bne.n	8001b76 <__eqdf2+0x5a>
 8001b62:	4559      	cmp	r1, fp
 8001b64:	d017      	beq.n	8001b96 <__eqdf2+0x7a>
 8001b66:	2c00      	cmp	r4, #0
 8001b68:	d105      	bne.n	8001b76 <__eqdf2+0x5a>
 8001b6a:	0030      	movs	r0, r6
 8001b6c:	4328      	orrs	r0, r5
 8001b6e:	1e43      	subs	r3, r0, #1
 8001b70:	4198      	sbcs	r0, r3
 8001b72:	e000      	b.n	8001b76 <__eqdf2+0x5a>
 8001b74:	2001      	movs	r0, #1
 8001b76:	bcf0      	pop	{r4, r5, r6, r7}
 8001b78:	46bb      	mov	fp, r7
 8001b7a:	46b2      	mov	sl, r6
 8001b7c:	46a9      	mov	r9, r5
 8001b7e:	46a0      	mov	r8, r4
 8001b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b82:	0033      	movs	r3, r6
 8001b84:	2001      	movs	r0, #1
 8001b86:	432b      	orrs	r3, r5
 8001b88:	d1f5      	bne.n	8001b76 <__eqdf2+0x5a>
 8001b8a:	42a2      	cmp	r2, r4
 8001b8c:	d1f3      	bne.n	8001b76 <__eqdf2+0x5a>
 8001b8e:	464b      	mov	r3, r9
 8001b90:	433b      	orrs	r3, r7
 8001b92:	d1f0      	bne.n	8001b76 <__eqdf2+0x5a>
 8001b94:	e7e2      	b.n	8001b5c <__eqdf2+0x40>
 8001b96:	2000      	movs	r0, #0
 8001b98:	e7ed      	b.n	8001b76 <__eqdf2+0x5a>
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	000007ff 	.word	0x000007ff

08001ba0 <__gedf2>:
 8001ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba2:	4647      	mov	r7, r8
 8001ba4:	46ce      	mov	lr, r9
 8001ba6:	0004      	movs	r4, r0
 8001ba8:	0018      	movs	r0, r3
 8001baa:	0016      	movs	r6, r2
 8001bac:	031b      	lsls	r3, r3, #12
 8001bae:	0b1b      	lsrs	r3, r3, #12
 8001bb0:	4d2d      	ldr	r5, [pc, #180]	; (8001c68 <__gedf2+0xc8>)
 8001bb2:	004a      	lsls	r2, r1, #1
 8001bb4:	4699      	mov	r9, r3
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	0043      	lsls	r3, r0, #1
 8001bba:	030f      	lsls	r7, r1, #12
 8001bbc:	46a4      	mov	ip, r4
 8001bbe:	46b0      	mov	r8, r6
 8001bc0:	0b3f      	lsrs	r7, r7, #12
 8001bc2:	0d52      	lsrs	r2, r2, #21
 8001bc4:	0fc9      	lsrs	r1, r1, #31
 8001bc6:	0d5b      	lsrs	r3, r3, #21
 8001bc8:	0fc0      	lsrs	r0, r0, #31
 8001bca:	42aa      	cmp	r2, r5
 8001bcc:	d021      	beq.n	8001c12 <__gedf2+0x72>
 8001bce:	42ab      	cmp	r3, r5
 8001bd0:	d013      	beq.n	8001bfa <__gedf2+0x5a>
 8001bd2:	2a00      	cmp	r2, #0
 8001bd4:	d122      	bne.n	8001c1c <__gedf2+0x7c>
 8001bd6:	433c      	orrs	r4, r7
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <__gedf2+0x42>
 8001bdc:	464d      	mov	r5, r9
 8001bde:	432e      	orrs	r6, r5
 8001be0:	d022      	beq.n	8001c28 <__gedf2+0x88>
 8001be2:	2c00      	cmp	r4, #0
 8001be4:	d010      	beq.n	8001c08 <__gedf2+0x68>
 8001be6:	4281      	cmp	r1, r0
 8001be8:	d022      	beq.n	8001c30 <__gedf2+0x90>
 8001bea:	2002      	movs	r0, #2
 8001bec:	3901      	subs	r1, #1
 8001bee:	4008      	ands	r0, r1
 8001bf0:	3801      	subs	r0, #1
 8001bf2:	bcc0      	pop	{r6, r7}
 8001bf4:	46b9      	mov	r9, r7
 8001bf6:	46b0      	mov	r8, r6
 8001bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfa:	464d      	mov	r5, r9
 8001bfc:	432e      	orrs	r6, r5
 8001bfe:	d129      	bne.n	8001c54 <__gedf2+0xb4>
 8001c00:	2a00      	cmp	r2, #0
 8001c02:	d1f0      	bne.n	8001be6 <__gedf2+0x46>
 8001c04:	433c      	orrs	r4, r7
 8001c06:	d1ee      	bne.n	8001be6 <__gedf2+0x46>
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	d1f2      	bne.n	8001bf2 <__gedf2+0x52>
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	4240      	negs	r0, r0
 8001c10:	e7ef      	b.n	8001bf2 <__gedf2+0x52>
 8001c12:	003d      	movs	r5, r7
 8001c14:	4325      	orrs	r5, r4
 8001c16:	d11d      	bne.n	8001c54 <__gedf2+0xb4>
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d0ee      	beq.n	8001bfa <__gedf2+0x5a>
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1e2      	bne.n	8001be6 <__gedf2+0x46>
 8001c20:	464c      	mov	r4, r9
 8001c22:	4326      	orrs	r6, r4
 8001c24:	d1df      	bne.n	8001be6 <__gedf2+0x46>
 8001c26:	e7e0      	b.n	8001bea <__gedf2+0x4a>
 8001c28:	2000      	movs	r0, #0
 8001c2a:	2c00      	cmp	r4, #0
 8001c2c:	d0e1      	beq.n	8001bf2 <__gedf2+0x52>
 8001c2e:	e7dc      	b.n	8001bea <__gedf2+0x4a>
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dc0a      	bgt.n	8001c4a <__gedf2+0xaa>
 8001c34:	dbe8      	blt.n	8001c08 <__gedf2+0x68>
 8001c36:	454f      	cmp	r7, r9
 8001c38:	d8d7      	bhi.n	8001bea <__gedf2+0x4a>
 8001c3a:	d00e      	beq.n	8001c5a <__gedf2+0xba>
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	454f      	cmp	r7, r9
 8001c40:	d2d7      	bcs.n	8001bf2 <__gedf2+0x52>
 8001c42:	2900      	cmp	r1, #0
 8001c44:	d0e2      	beq.n	8001c0c <__gedf2+0x6c>
 8001c46:	0008      	movs	r0, r1
 8001c48:	e7d3      	b.n	8001bf2 <__gedf2+0x52>
 8001c4a:	4243      	negs	r3, r0
 8001c4c:	4158      	adcs	r0, r3
 8001c4e:	0040      	lsls	r0, r0, #1
 8001c50:	3801      	subs	r0, #1
 8001c52:	e7ce      	b.n	8001bf2 <__gedf2+0x52>
 8001c54:	2002      	movs	r0, #2
 8001c56:	4240      	negs	r0, r0
 8001c58:	e7cb      	b.n	8001bf2 <__gedf2+0x52>
 8001c5a:	45c4      	cmp	ip, r8
 8001c5c:	d8c5      	bhi.n	8001bea <__gedf2+0x4a>
 8001c5e:	2000      	movs	r0, #0
 8001c60:	45c4      	cmp	ip, r8
 8001c62:	d2c6      	bcs.n	8001bf2 <__gedf2+0x52>
 8001c64:	e7ed      	b.n	8001c42 <__gedf2+0xa2>
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	000007ff 	.word	0x000007ff

08001c6c <__ledf2>:
 8001c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c6e:	4647      	mov	r7, r8
 8001c70:	46ce      	mov	lr, r9
 8001c72:	0004      	movs	r4, r0
 8001c74:	0018      	movs	r0, r3
 8001c76:	0016      	movs	r6, r2
 8001c78:	031b      	lsls	r3, r3, #12
 8001c7a:	0b1b      	lsrs	r3, r3, #12
 8001c7c:	4d2c      	ldr	r5, [pc, #176]	; (8001d30 <__ledf2+0xc4>)
 8001c7e:	004a      	lsls	r2, r1, #1
 8001c80:	4699      	mov	r9, r3
 8001c82:	b580      	push	{r7, lr}
 8001c84:	0043      	lsls	r3, r0, #1
 8001c86:	030f      	lsls	r7, r1, #12
 8001c88:	46a4      	mov	ip, r4
 8001c8a:	46b0      	mov	r8, r6
 8001c8c:	0b3f      	lsrs	r7, r7, #12
 8001c8e:	0d52      	lsrs	r2, r2, #21
 8001c90:	0fc9      	lsrs	r1, r1, #31
 8001c92:	0d5b      	lsrs	r3, r3, #21
 8001c94:	0fc0      	lsrs	r0, r0, #31
 8001c96:	42aa      	cmp	r2, r5
 8001c98:	d00d      	beq.n	8001cb6 <__ledf2+0x4a>
 8001c9a:	42ab      	cmp	r3, r5
 8001c9c:	d010      	beq.n	8001cc0 <__ledf2+0x54>
 8001c9e:	2a00      	cmp	r2, #0
 8001ca0:	d127      	bne.n	8001cf2 <__ledf2+0x86>
 8001ca2:	433c      	orrs	r4, r7
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d111      	bne.n	8001ccc <__ledf2+0x60>
 8001ca8:	464d      	mov	r5, r9
 8001caa:	432e      	orrs	r6, r5
 8001cac:	d10e      	bne.n	8001ccc <__ledf2+0x60>
 8001cae:	2000      	movs	r0, #0
 8001cb0:	2c00      	cmp	r4, #0
 8001cb2:	d015      	beq.n	8001ce0 <__ledf2+0x74>
 8001cb4:	e00e      	b.n	8001cd4 <__ledf2+0x68>
 8001cb6:	003d      	movs	r5, r7
 8001cb8:	4325      	orrs	r5, r4
 8001cba:	d110      	bne.n	8001cde <__ledf2+0x72>
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d118      	bne.n	8001cf2 <__ledf2+0x86>
 8001cc0:	464d      	mov	r5, r9
 8001cc2:	432e      	orrs	r6, r5
 8001cc4:	d10b      	bne.n	8001cde <__ledf2+0x72>
 8001cc6:	2a00      	cmp	r2, #0
 8001cc8:	d102      	bne.n	8001cd0 <__ledf2+0x64>
 8001cca:	433c      	orrs	r4, r7
 8001ccc:	2c00      	cmp	r4, #0
 8001cce:	d00b      	beq.n	8001ce8 <__ledf2+0x7c>
 8001cd0:	4281      	cmp	r1, r0
 8001cd2:	d014      	beq.n	8001cfe <__ledf2+0x92>
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	3901      	subs	r1, #1
 8001cd8:	4008      	ands	r0, r1
 8001cda:	3801      	subs	r0, #1
 8001cdc:	e000      	b.n	8001ce0 <__ledf2+0x74>
 8001cde:	2002      	movs	r0, #2
 8001ce0:	bcc0      	pop	{r6, r7}
 8001ce2:	46b9      	mov	r9, r7
 8001ce4:	46b0      	mov	r8, r6
 8001ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce8:	2800      	cmp	r0, #0
 8001cea:	d1f9      	bne.n	8001ce0 <__ledf2+0x74>
 8001cec:	2001      	movs	r0, #1
 8001cee:	4240      	negs	r0, r0
 8001cf0:	e7f6      	b.n	8001ce0 <__ledf2+0x74>
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1ec      	bne.n	8001cd0 <__ledf2+0x64>
 8001cf6:	464c      	mov	r4, r9
 8001cf8:	4326      	orrs	r6, r4
 8001cfa:	d1e9      	bne.n	8001cd0 <__ledf2+0x64>
 8001cfc:	e7ea      	b.n	8001cd4 <__ledf2+0x68>
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	dd04      	ble.n	8001d0c <__ledf2+0xa0>
 8001d02:	4243      	negs	r3, r0
 8001d04:	4158      	adcs	r0, r3
 8001d06:	0040      	lsls	r0, r0, #1
 8001d08:	3801      	subs	r0, #1
 8001d0a:	e7e9      	b.n	8001ce0 <__ledf2+0x74>
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dbeb      	blt.n	8001ce8 <__ledf2+0x7c>
 8001d10:	454f      	cmp	r7, r9
 8001d12:	d8df      	bhi.n	8001cd4 <__ledf2+0x68>
 8001d14:	d006      	beq.n	8001d24 <__ledf2+0xb8>
 8001d16:	2000      	movs	r0, #0
 8001d18:	454f      	cmp	r7, r9
 8001d1a:	d2e1      	bcs.n	8001ce0 <__ledf2+0x74>
 8001d1c:	2900      	cmp	r1, #0
 8001d1e:	d0e5      	beq.n	8001cec <__ledf2+0x80>
 8001d20:	0008      	movs	r0, r1
 8001d22:	e7dd      	b.n	8001ce0 <__ledf2+0x74>
 8001d24:	45c4      	cmp	ip, r8
 8001d26:	d8d5      	bhi.n	8001cd4 <__ledf2+0x68>
 8001d28:	2000      	movs	r0, #0
 8001d2a:	45c4      	cmp	ip, r8
 8001d2c:	d2d8      	bcs.n	8001ce0 <__ledf2+0x74>
 8001d2e:	e7f5      	b.n	8001d1c <__ledf2+0xb0>
 8001d30:	000007ff 	.word	0x000007ff

08001d34 <__aeabi_dmul>:
 8001d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d36:	4657      	mov	r7, sl
 8001d38:	464e      	mov	r6, r9
 8001d3a:	4645      	mov	r5, r8
 8001d3c:	46de      	mov	lr, fp
 8001d3e:	b5e0      	push	{r5, r6, r7, lr}
 8001d40:	4698      	mov	r8, r3
 8001d42:	030c      	lsls	r4, r1, #12
 8001d44:	004b      	lsls	r3, r1, #1
 8001d46:	0006      	movs	r6, r0
 8001d48:	4692      	mov	sl, r2
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	0b24      	lsrs	r4, r4, #12
 8001d4e:	0d5b      	lsrs	r3, r3, #21
 8001d50:	0fcf      	lsrs	r7, r1, #31
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dmul+0x24>
 8001d56:	e15c      	b.n	8002012 <__aeabi_dmul+0x2de>
 8001d58:	4ad9      	ldr	r2, [pc, #868]	; (80020c0 <__aeabi_dmul+0x38c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dmul+0x2c>
 8001d5e:	e175      	b.n	800204c <__aeabi_dmul+0x318>
 8001d60:	0f42      	lsrs	r2, r0, #29
 8001d62:	00e4      	lsls	r4, r4, #3
 8001d64:	4314      	orrs	r4, r2
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	0412      	lsls	r2, r2, #16
 8001d6a:	4314      	orrs	r4, r2
 8001d6c:	4ad5      	ldr	r2, [pc, #852]	; (80020c4 <__aeabi_dmul+0x390>)
 8001d6e:	00c5      	lsls	r5, r0, #3
 8001d70:	4694      	mov	ip, r2
 8001d72:	4463      	add	r3, ip
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	2300      	movs	r3, #0
 8001d78:	4699      	mov	r9, r3
 8001d7a:	469b      	mov	fp, r3
 8001d7c:	4643      	mov	r3, r8
 8001d7e:	4642      	mov	r2, r8
 8001d80:	031e      	lsls	r6, r3, #12
 8001d82:	0fd2      	lsrs	r2, r2, #31
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4650      	mov	r0, sl
 8001d88:	4690      	mov	r8, r2
 8001d8a:	0b36      	lsrs	r6, r6, #12
 8001d8c:	0d5b      	lsrs	r3, r3, #21
 8001d8e:	d100      	bne.n	8001d92 <__aeabi_dmul+0x5e>
 8001d90:	e120      	b.n	8001fd4 <__aeabi_dmul+0x2a0>
 8001d92:	4acb      	ldr	r2, [pc, #812]	; (80020c0 <__aeabi_dmul+0x38c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d100      	bne.n	8001d9a <__aeabi_dmul+0x66>
 8001d98:	e162      	b.n	8002060 <__aeabi_dmul+0x32c>
 8001d9a:	49ca      	ldr	r1, [pc, #808]	; (80020c4 <__aeabi_dmul+0x390>)
 8001d9c:	0f42      	lsrs	r2, r0, #29
 8001d9e:	468c      	mov	ip, r1
 8001da0:	9900      	ldr	r1, [sp, #0]
 8001da2:	4463      	add	r3, ip
 8001da4:	00f6      	lsls	r6, r6, #3
 8001da6:	468c      	mov	ip, r1
 8001da8:	4316      	orrs	r6, r2
 8001daa:	2280      	movs	r2, #128	; 0x80
 8001dac:	449c      	add	ip, r3
 8001dae:	0412      	lsls	r2, r2, #16
 8001db0:	4663      	mov	r3, ip
 8001db2:	4316      	orrs	r6, r2
 8001db4:	00c2      	lsls	r2, r0, #3
 8001db6:	2000      	movs	r0, #0
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	9900      	ldr	r1, [sp, #0]
 8001dbc:	4643      	mov	r3, r8
 8001dbe:	3101      	adds	r1, #1
 8001dc0:	468c      	mov	ip, r1
 8001dc2:	4649      	mov	r1, r9
 8001dc4:	407b      	eors	r3, r7
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	290f      	cmp	r1, #15
 8001dca:	d826      	bhi.n	8001e1a <__aeabi_dmul+0xe6>
 8001dcc:	4bbe      	ldr	r3, [pc, #760]	; (80020c8 <__aeabi_dmul+0x394>)
 8001dce:	0089      	lsls	r1, r1, #2
 8001dd0:	5859      	ldr	r1, [r3, r1]
 8001dd2:	468f      	mov	pc, r1
 8001dd4:	4643      	mov	r3, r8
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	0034      	movs	r4, r6
 8001dda:	0015      	movs	r5, r2
 8001ddc:	4683      	mov	fp, r0
 8001dde:	465b      	mov	r3, fp
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d016      	beq.n	8001e12 <__aeabi_dmul+0xde>
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d100      	bne.n	8001dea <__aeabi_dmul+0xb6>
 8001de8:	e203      	b.n	80021f2 <__aeabi_dmul+0x4be>
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d000      	beq.n	8001df0 <__aeabi_dmul+0xbc>
 8001dee:	e0cd      	b.n	8001f8c <__aeabi_dmul+0x258>
 8001df0:	2200      	movs	r2, #0
 8001df2:	2400      	movs	r4, #0
 8001df4:	2500      	movs	r5, #0
 8001df6:	9b01      	ldr	r3, [sp, #4]
 8001df8:	0512      	lsls	r2, r2, #20
 8001dfa:	4322      	orrs	r2, r4
 8001dfc:	07db      	lsls	r3, r3, #31
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	0028      	movs	r0, r5
 8001e02:	0011      	movs	r1, r2
 8001e04:	b007      	add	sp, #28
 8001e06:	bcf0      	pop	{r4, r5, r6, r7}
 8001e08:	46bb      	mov	fp, r7
 8001e0a:	46b2      	mov	sl, r6
 8001e0c:	46a9      	mov	r9, r5
 8001e0e:	46a0      	mov	r8, r4
 8001e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e12:	2400      	movs	r4, #0
 8001e14:	2500      	movs	r5, #0
 8001e16:	4aaa      	ldr	r2, [pc, #680]	; (80020c0 <__aeabi_dmul+0x38c>)
 8001e18:	e7ed      	b.n	8001df6 <__aeabi_dmul+0xc2>
 8001e1a:	0c28      	lsrs	r0, r5, #16
 8001e1c:	042d      	lsls	r5, r5, #16
 8001e1e:	0c2d      	lsrs	r5, r5, #16
 8001e20:	002b      	movs	r3, r5
 8001e22:	0c11      	lsrs	r1, r2, #16
 8001e24:	0412      	lsls	r2, r2, #16
 8001e26:	0c12      	lsrs	r2, r2, #16
 8001e28:	4353      	muls	r3, r2
 8001e2a:	4698      	mov	r8, r3
 8001e2c:	0013      	movs	r3, r2
 8001e2e:	002f      	movs	r7, r5
 8001e30:	4343      	muls	r3, r0
 8001e32:	4699      	mov	r9, r3
 8001e34:	434f      	muls	r7, r1
 8001e36:	444f      	add	r7, r9
 8001e38:	46bb      	mov	fp, r7
 8001e3a:	4647      	mov	r7, r8
 8001e3c:	000b      	movs	r3, r1
 8001e3e:	0c3f      	lsrs	r7, r7, #16
 8001e40:	46ba      	mov	sl, r7
 8001e42:	4343      	muls	r3, r0
 8001e44:	44da      	add	sl, fp
 8001e46:	9302      	str	r3, [sp, #8]
 8001e48:	45d1      	cmp	r9, sl
 8001e4a:	d904      	bls.n	8001e56 <__aeabi_dmul+0x122>
 8001e4c:	2780      	movs	r7, #128	; 0x80
 8001e4e:	027f      	lsls	r7, r7, #9
 8001e50:	46b9      	mov	r9, r7
 8001e52:	444b      	add	r3, r9
 8001e54:	9302      	str	r3, [sp, #8]
 8001e56:	4653      	mov	r3, sl
 8001e58:	0c1b      	lsrs	r3, r3, #16
 8001e5a:	469b      	mov	fp, r3
 8001e5c:	4653      	mov	r3, sl
 8001e5e:	041f      	lsls	r7, r3, #16
 8001e60:	4643      	mov	r3, r8
 8001e62:	041b      	lsls	r3, r3, #16
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	4698      	mov	r8, r3
 8001e68:	003b      	movs	r3, r7
 8001e6a:	4443      	add	r3, r8
 8001e6c:	9304      	str	r3, [sp, #16]
 8001e6e:	0c33      	lsrs	r3, r6, #16
 8001e70:	0436      	lsls	r6, r6, #16
 8001e72:	0c36      	lsrs	r6, r6, #16
 8001e74:	4698      	mov	r8, r3
 8001e76:	0033      	movs	r3, r6
 8001e78:	4343      	muls	r3, r0
 8001e7a:	4699      	mov	r9, r3
 8001e7c:	4643      	mov	r3, r8
 8001e7e:	4343      	muls	r3, r0
 8001e80:	002f      	movs	r7, r5
 8001e82:	469a      	mov	sl, r3
 8001e84:	4643      	mov	r3, r8
 8001e86:	4377      	muls	r7, r6
 8001e88:	435d      	muls	r5, r3
 8001e8a:	0c38      	lsrs	r0, r7, #16
 8001e8c:	444d      	add	r5, r9
 8001e8e:	1945      	adds	r5, r0, r5
 8001e90:	45a9      	cmp	r9, r5
 8001e92:	d903      	bls.n	8001e9c <__aeabi_dmul+0x168>
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	025b      	lsls	r3, r3, #9
 8001e98:	4699      	mov	r9, r3
 8001e9a:	44ca      	add	sl, r9
 8001e9c:	043f      	lsls	r7, r7, #16
 8001e9e:	0c28      	lsrs	r0, r5, #16
 8001ea0:	0c3f      	lsrs	r7, r7, #16
 8001ea2:	042d      	lsls	r5, r5, #16
 8001ea4:	19ed      	adds	r5, r5, r7
 8001ea6:	0c27      	lsrs	r7, r4, #16
 8001ea8:	0424      	lsls	r4, r4, #16
 8001eaa:	0c24      	lsrs	r4, r4, #16
 8001eac:	0003      	movs	r3, r0
 8001eae:	0020      	movs	r0, r4
 8001eb0:	4350      	muls	r0, r2
 8001eb2:	437a      	muls	r2, r7
 8001eb4:	4691      	mov	r9, r2
 8001eb6:	003a      	movs	r2, r7
 8001eb8:	4453      	add	r3, sl
 8001eba:	9305      	str	r3, [sp, #20]
 8001ebc:	0c03      	lsrs	r3, r0, #16
 8001ebe:	469a      	mov	sl, r3
 8001ec0:	434a      	muls	r2, r1
 8001ec2:	4361      	muls	r1, r4
 8001ec4:	4449      	add	r1, r9
 8001ec6:	4451      	add	r1, sl
 8001ec8:	44ab      	add	fp, r5
 8001eca:	4589      	cmp	r9, r1
 8001ecc:	d903      	bls.n	8001ed6 <__aeabi_dmul+0x1a2>
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	025b      	lsls	r3, r3, #9
 8001ed2:	4699      	mov	r9, r3
 8001ed4:	444a      	add	r2, r9
 8001ed6:	0400      	lsls	r0, r0, #16
 8001ed8:	0c0b      	lsrs	r3, r1, #16
 8001eda:	0c00      	lsrs	r0, r0, #16
 8001edc:	0409      	lsls	r1, r1, #16
 8001ede:	1809      	adds	r1, r1, r0
 8001ee0:	0020      	movs	r0, r4
 8001ee2:	4699      	mov	r9, r3
 8001ee4:	4643      	mov	r3, r8
 8001ee6:	4370      	muls	r0, r6
 8001ee8:	435c      	muls	r4, r3
 8001eea:	437e      	muls	r6, r7
 8001eec:	435f      	muls	r7, r3
 8001eee:	0c03      	lsrs	r3, r0, #16
 8001ef0:	4698      	mov	r8, r3
 8001ef2:	19a4      	adds	r4, r4, r6
 8001ef4:	4444      	add	r4, r8
 8001ef6:	444a      	add	r2, r9
 8001ef8:	9703      	str	r7, [sp, #12]
 8001efa:	42a6      	cmp	r6, r4
 8001efc:	d904      	bls.n	8001f08 <__aeabi_dmul+0x1d4>
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	025b      	lsls	r3, r3, #9
 8001f02:	4698      	mov	r8, r3
 8001f04:	4447      	add	r7, r8
 8001f06:	9703      	str	r7, [sp, #12]
 8001f08:	0423      	lsls	r3, r4, #16
 8001f0a:	9e02      	ldr	r6, [sp, #8]
 8001f0c:	469a      	mov	sl, r3
 8001f0e:	9b05      	ldr	r3, [sp, #20]
 8001f10:	445e      	add	r6, fp
 8001f12:	4698      	mov	r8, r3
 8001f14:	42ae      	cmp	r6, r5
 8001f16:	41ad      	sbcs	r5, r5
 8001f18:	1876      	adds	r6, r6, r1
 8001f1a:	428e      	cmp	r6, r1
 8001f1c:	4189      	sbcs	r1, r1
 8001f1e:	0400      	lsls	r0, r0, #16
 8001f20:	0c00      	lsrs	r0, r0, #16
 8001f22:	4450      	add	r0, sl
 8001f24:	4440      	add	r0, r8
 8001f26:	426d      	negs	r5, r5
 8001f28:	1947      	adds	r7, r0, r5
 8001f2a:	46b8      	mov	r8, r7
 8001f2c:	4693      	mov	fp, r2
 8001f2e:	4249      	negs	r1, r1
 8001f30:	4689      	mov	r9, r1
 8001f32:	44c3      	add	fp, r8
 8001f34:	44d9      	add	r9, fp
 8001f36:	4298      	cmp	r0, r3
 8001f38:	4180      	sbcs	r0, r0
 8001f3a:	45a8      	cmp	r8, r5
 8001f3c:	41ad      	sbcs	r5, r5
 8001f3e:	4593      	cmp	fp, r2
 8001f40:	4192      	sbcs	r2, r2
 8001f42:	4589      	cmp	r9, r1
 8001f44:	4189      	sbcs	r1, r1
 8001f46:	426d      	negs	r5, r5
 8001f48:	4240      	negs	r0, r0
 8001f4a:	4328      	orrs	r0, r5
 8001f4c:	0c24      	lsrs	r4, r4, #16
 8001f4e:	4252      	negs	r2, r2
 8001f50:	4249      	negs	r1, r1
 8001f52:	430a      	orrs	r2, r1
 8001f54:	9b03      	ldr	r3, [sp, #12]
 8001f56:	1900      	adds	r0, r0, r4
 8001f58:	1880      	adds	r0, r0, r2
 8001f5a:	18c7      	adds	r7, r0, r3
 8001f5c:	464b      	mov	r3, r9
 8001f5e:	0ddc      	lsrs	r4, r3, #23
 8001f60:	9b04      	ldr	r3, [sp, #16]
 8001f62:	0275      	lsls	r5, r6, #9
 8001f64:	431d      	orrs	r5, r3
 8001f66:	1e6a      	subs	r2, r5, #1
 8001f68:	4195      	sbcs	r5, r2
 8001f6a:	464b      	mov	r3, r9
 8001f6c:	0df6      	lsrs	r6, r6, #23
 8001f6e:	027f      	lsls	r7, r7, #9
 8001f70:	4335      	orrs	r5, r6
 8001f72:	025a      	lsls	r2, r3, #9
 8001f74:	433c      	orrs	r4, r7
 8001f76:	4315      	orrs	r5, r2
 8001f78:	01fb      	lsls	r3, r7, #7
 8001f7a:	d400      	bmi.n	8001f7e <__aeabi_dmul+0x24a>
 8001f7c:	e11c      	b.n	80021b8 <__aeabi_dmul+0x484>
 8001f7e:	2101      	movs	r1, #1
 8001f80:	086a      	lsrs	r2, r5, #1
 8001f82:	400d      	ands	r5, r1
 8001f84:	4315      	orrs	r5, r2
 8001f86:	07e2      	lsls	r2, r4, #31
 8001f88:	4315      	orrs	r5, r2
 8001f8a:	0864      	lsrs	r4, r4, #1
 8001f8c:	494f      	ldr	r1, [pc, #316]	; (80020cc <__aeabi_dmul+0x398>)
 8001f8e:	4461      	add	r1, ip
 8001f90:	2900      	cmp	r1, #0
 8001f92:	dc00      	bgt.n	8001f96 <__aeabi_dmul+0x262>
 8001f94:	e0b0      	b.n	80020f8 <__aeabi_dmul+0x3c4>
 8001f96:	076b      	lsls	r3, r5, #29
 8001f98:	d009      	beq.n	8001fae <__aeabi_dmul+0x27a>
 8001f9a:	220f      	movs	r2, #15
 8001f9c:	402a      	ands	r2, r5
 8001f9e:	2a04      	cmp	r2, #4
 8001fa0:	d005      	beq.n	8001fae <__aeabi_dmul+0x27a>
 8001fa2:	1d2a      	adds	r2, r5, #4
 8001fa4:	42aa      	cmp	r2, r5
 8001fa6:	41ad      	sbcs	r5, r5
 8001fa8:	426d      	negs	r5, r5
 8001faa:	1964      	adds	r4, r4, r5
 8001fac:	0015      	movs	r5, r2
 8001fae:	01e3      	lsls	r3, r4, #7
 8001fb0:	d504      	bpl.n	8001fbc <__aeabi_dmul+0x288>
 8001fb2:	2180      	movs	r1, #128	; 0x80
 8001fb4:	4a46      	ldr	r2, [pc, #280]	; (80020d0 <__aeabi_dmul+0x39c>)
 8001fb6:	00c9      	lsls	r1, r1, #3
 8001fb8:	4014      	ands	r4, r2
 8001fba:	4461      	add	r1, ip
 8001fbc:	4a45      	ldr	r2, [pc, #276]	; (80020d4 <__aeabi_dmul+0x3a0>)
 8001fbe:	4291      	cmp	r1, r2
 8001fc0:	dd00      	ble.n	8001fc4 <__aeabi_dmul+0x290>
 8001fc2:	e726      	b.n	8001e12 <__aeabi_dmul+0xde>
 8001fc4:	0762      	lsls	r2, r4, #29
 8001fc6:	08ed      	lsrs	r5, r5, #3
 8001fc8:	0264      	lsls	r4, r4, #9
 8001fca:	0549      	lsls	r1, r1, #21
 8001fcc:	4315      	orrs	r5, r2
 8001fce:	0b24      	lsrs	r4, r4, #12
 8001fd0:	0d4a      	lsrs	r2, r1, #21
 8001fd2:	e710      	b.n	8001df6 <__aeabi_dmul+0xc2>
 8001fd4:	4652      	mov	r2, sl
 8001fd6:	4332      	orrs	r2, r6
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_dmul+0x2a8>
 8001fda:	e07f      	b.n	80020dc <__aeabi_dmul+0x3a8>
 8001fdc:	2e00      	cmp	r6, #0
 8001fde:	d100      	bne.n	8001fe2 <__aeabi_dmul+0x2ae>
 8001fe0:	e0dc      	b.n	800219c <__aeabi_dmul+0x468>
 8001fe2:	0030      	movs	r0, r6
 8001fe4:	f000 fd4e 	bl	8002a84 <__clzsi2>
 8001fe8:	0002      	movs	r2, r0
 8001fea:	3a0b      	subs	r2, #11
 8001fec:	231d      	movs	r3, #29
 8001fee:	0001      	movs	r1, r0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	4652      	mov	r2, sl
 8001ff4:	3908      	subs	r1, #8
 8001ff6:	40da      	lsrs	r2, r3
 8001ff8:	408e      	lsls	r6, r1
 8001ffa:	4316      	orrs	r6, r2
 8001ffc:	4652      	mov	r2, sl
 8001ffe:	408a      	lsls	r2, r1
 8002000:	9b00      	ldr	r3, [sp, #0]
 8002002:	4935      	ldr	r1, [pc, #212]	; (80020d8 <__aeabi_dmul+0x3a4>)
 8002004:	1a18      	subs	r0, r3, r0
 8002006:	0003      	movs	r3, r0
 8002008:	468c      	mov	ip, r1
 800200a:	4463      	add	r3, ip
 800200c:	2000      	movs	r0, #0
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	e6d3      	b.n	8001dba <__aeabi_dmul+0x86>
 8002012:	0025      	movs	r5, r4
 8002014:	4305      	orrs	r5, r0
 8002016:	d04a      	beq.n	80020ae <__aeabi_dmul+0x37a>
 8002018:	2c00      	cmp	r4, #0
 800201a:	d100      	bne.n	800201e <__aeabi_dmul+0x2ea>
 800201c:	e0b0      	b.n	8002180 <__aeabi_dmul+0x44c>
 800201e:	0020      	movs	r0, r4
 8002020:	f000 fd30 	bl	8002a84 <__clzsi2>
 8002024:	0001      	movs	r1, r0
 8002026:	0002      	movs	r2, r0
 8002028:	390b      	subs	r1, #11
 800202a:	231d      	movs	r3, #29
 800202c:	0010      	movs	r0, r2
 800202e:	1a5b      	subs	r3, r3, r1
 8002030:	0031      	movs	r1, r6
 8002032:	0035      	movs	r5, r6
 8002034:	3808      	subs	r0, #8
 8002036:	4084      	lsls	r4, r0
 8002038:	40d9      	lsrs	r1, r3
 800203a:	4085      	lsls	r5, r0
 800203c:	430c      	orrs	r4, r1
 800203e:	4826      	ldr	r0, [pc, #152]	; (80020d8 <__aeabi_dmul+0x3a4>)
 8002040:	1a83      	subs	r3, r0, r2
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2300      	movs	r3, #0
 8002046:	4699      	mov	r9, r3
 8002048:	469b      	mov	fp, r3
 800204a:	e697      	b.n	8001d7c <__aeabi_dmul+0x48>
 800204c:	0005      	movs	r5, r0
 800204e:	4325      	orrs	r5, r4
 8002050:	d126      	bne.n	80020a0 <__aeabi_dmul+0x36c>
 8002052:	2208      	movs	r2, #8
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	2302      	movs	r3, #2
 8002058:	2400      	movs	r4, #0
 800205a:	4691      	mov	r9, r2
 800205c:	469b      	mov	fp, r3
 800205e:	e68d      	b.n	8001d7c <__aeabi_dmul+0x48>
 8002060:	4652      	mov	r2, sl
 8002062:	9b00      	ldr	r3, [sp, #0]
 8002064:	4332      	orrs	r2, r6
 8002066:	d110      	bne.n	800208a <__aeabi_dmul+0x356>
 8002068:	4915      	ldr	r1, [pc, #84]	; (80020c0 <__aeabi_dmul+0x38c>)
 800206a:	2600      	movs	r6, #0
 800206c:	468c      	mov	ip, r1
 800206e:	4463      	add	r3, ip
 8002070:	4649      	mov	r1, r9
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	2302      	movs	r3, #2
 8002076:	4319      	orrs	r1, r3
 8002078:	4689      	mov	r9, r1
 800207a:	2002      	movs	r0, #2
 800207c:	e69d      	b.n	8001dba <__aeabi_dmul+0x86>
 800207e:	465b      	mov	r3, fp
 8002080:	9701      	str	r7, [sp, #4]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d000      	beq.n	8002088 <__aeabi_dmul+0x354>
 8002086:	e6ad      	b.n	8001de4 <__aeabi_dmul+0xb0>
 8002088:	e6c3      	b.n	8001e12 <__aeabi_dmul+0xde>
 800208a:	4a0d      	ldr	r2, [pc, #52]	; (80020c0 <__aeabi_dmul+0x38c>)
 800208c:	2003      	movs	r0, #3
 800208e:	4694      	mov	ip, r2
 8002090:	4463      	add	r3, ip
 8002092:	464a      	mov	r2, r9
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	2303      	movs	r3, #3
 8002098:	431a      	orrs	r2, r3
 800209a:	4691      	mov	r9, r2
 800209c:	4652      	mov	r2, sl
 800209e:	e68c      	b.n	8001dba <__aeabi_dmul+0x86>
 80020a0:	220c      	movs	r2, #12
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	2303      	movs	r3, #3
 80020a6:	0005      	movs	r5, r0
 80020a8:	4691      	mov	r9, r2
 80020aa:	469b      	mov	fp, r3
 80020ac:	e666      	b.n	8001d7c <__aeabi_dmul+0x48>
 80020ae:	2304      	movs	r3, #4
 80020b0:	4699      	mov	r9, r3
 80020b2:	2300      	movs	r3, #0
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	2400      	movs	r4, #0
 80020ba:	469b      	mov	fp, r3
 80020bc:	e65e      	b.n	8001d7c <__aeabi_dmul+0x48>
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	000007ff 	.word	0x000007ff
 80020c4:	fffffc01 	.word	0xfffffc01
 80020c8:	0800b8d4 	.word	0x0800b8d4
 80020cc:	000003ff 	.word	0x000003ff
 80020d0:	feffffff 	.word	0xfeffffff
 80020d4:	000007fe 	.word	0x000007fe
 80020d8:	fffffc0d 	.word	0xfffffc0d
 80020dc:	4649      	mov	r1, r9
 80020de:	2301      	movs	r3, #1
 80020e0:	4319      	orrs	r1, r3
 80020e2:	4689      	mov	r9, r1
 80020e4:	2600      	movs	r6, #0
 80020e6:	2001      	movs	r0, #1
 80020e8:	e667      	b.n	8001dba <__aeabi_dmul+0x86>
 80020ea:	2300      	movs	r3, #0
 80020ec:	2480      	movs	r4, #128	; 0x80
 80020ee:	2500      	movs	r5, #0
 80020f0:	4a43      	ldr	r2, [pc, #268]	; (8002200 <__aeabi_dmul+0x4cc>)
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	e67e      	b.n	8001df6 <__aeabi_dmul+0xc2>
 80020f8:	2001      	movs	r0, #1
 80020fa:	1a40      	subs	r0, r0, r1
 80020fc:	2838      	cmp	r0, #56	; 0x38
 80020fe:	dd00      	ble.n	8002102 <__aeabi_dmul+0x3ce>
 8002100:	e676      	b.n	8001df0 <__aeabi_dmul+0xbc>
 8002102:	281f      	cmp	r0, #31
 8002104:	dd5b      	ble.n	80021be <__aeabi_dmul+0x48a>
 8002106:	221f      	movs	r2, #31
 8002108:	0023      	movs	r3, r4
 800210a:	4252      	negs	r2, r2
 800210c:	1a51      	subs	r1, r2, r1
 800210e:	40cb      	lsrs	r3, r1
 8002110:	0019      	movs	r1, r3
 8002112:	2820      	cmp	r0, #32
 8002114:	d003      	beq.n	800211e <__aeabi_dmul+0x3ea>
 8002116:	4a3b      	ldr	r2, [pc, #236]	; (8002204 <__aeabi_dmul+0x4d0>)
 8002118:	4462      	add	r2, ip
 800211a:	4094      	lsls	r4, r2
 800211c:	4325      	orrs	r5, r4
 800211e:	1e6a      	subs	r2, r5, #1
 8002120:	4195      	sbcs	r5, r2
 8002122:	002a      	movs	r2, r5
 8002124:	430a      	orrs	r2, r1
 8002126:	2107      	movs	r1, #7
 8002128:	000d      	movs	r5, r1
 800212a:	2400      	movs	r4, #0
 800212c:	4015      	ands	r5, r2
 800212e:	4211      	tst	r1, r2
 8002130:	d05b      	beq.n	80021ea <__aeabi_dmul+0x4b6>
 8002132:	210f      	movs	r1, #15
 8002134:	2400      	movs	r4, #0
 8002136:	4011      	ands	r1, r2
 8002138:	2904      	cmp	r1, #4
 800213a:	d053      	beq.n	80021e4 <__aeabi_dmul+0x4b0>
 800213c:	1d11      	adds	r1, r2, #4
 800213e:	4291      	cmp	r1, r2
 8002140:	4192      	sbcs	r2, r2
 8002142:	4252      	negs	r2, r2
 8002144:	18a4      	adds	r4, r4, r2
 8002146:	000a      	movs	r2, r1
 8002148:	0223      	lsls	r3, r4, #8
 800214a:	d54b      	bpl.n	80021e4 <__aeabi_dmul+0x4b0>
 800214c:	2201      	movs	r2, #1
 800214e:	2400      	movs	r4, #0
 8002150:	2500      	movs	r5, #0
 8002152:	e650      	b.n	8001df6 <__aeabi_dmul+0xc2>
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	031b      	lsls	r3, r3, #12
 8002158:	421c      	tst	r4, r3
 800215a:	d009      	beq.n	8002170 <__aeabi_dmul+0x43c>
 800215c:	421e      	tst	r6, r3
 800215e:	d107      	bne.n	8002170 <__aeabi_dmul+0x43c>
 8002160:	4333      	orrs	r3, r6
 8002162:	031c      	lsls	r4, r3, #12
 8002164:	4643      	mov	r3, r8
 8002166:	0015      	movs	r5, r2
 8002168:	0b24      	lsrs	r4, r4, #12
 800216a:	4a25      	ldr	r2, [pc, #148]	; (8002200 <__aeabi_dmul+0x4cc>)
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	e642      	b.n	8001df6 <__aeabi_dmul+0xc2>
 8002170:	2280      	movs	r2, #128	; 0x80
 8002172:	0312      	lsls	r2, r2, #12
 8002174:	4314      	orrs	r4, r2
 8002176:	0324      	lsls	r4, r4, #12
 8002178:	4a21      	ldr	r2, [pc, #132]	; (8002200 <__aeabi_dmul+0x4cc>)
 800217a:	0b24      	lsrs	r4, r4, #12
 800217c:	9701      	str	r7, [sp, #4]
 800217e:	e63a      	b.n	8001df6 <__aeabi_dmul+0xc2>
 8002180:	f000 fc80 	bl	8002a84 <__clzsi2>
 8002184:	0001      	movs	r1, r0
 8002186:	0002      	movs	r2, r0
 8002188:	3115      	adds	r1, #21
 800218a:	3220      	adds	r2, #32
 800218c:	291c      	cmp	r1, #28
 800218e:	dc00      	bgt.n	8002192 <__aeabi_dmul+0x45e>
 8002190:	e74b      	b.n	800202a <__aeabi_dmul+0x2f6>
 8002192:	0034      	movs	r4, r6
 8002194:	3808      	subs	r0, #8
 8002196:	2500      	movs	r5, #0
 8002198:	4084      	lsls	r4, r0
 800219a:	e750      	b.n	800203e <__aeabi_dmul+0x30a>
 800219c:	f000 fc72 	bl	8002a84 <__clzsi2>
 80021a0:	0003      	movs	r3, r0
 80021a2:	001a      	movs	r2, r3
 80021a4:	3215      	adds	r2, #21
 80021a6:	3020      	adds	r0, #32
 80021a8:	2a1c      	cmp	r2, #28
 80021aa:	dc00      	bgt.n	80021ae <__aeabi_dmul+0x47a>
 80021ac:	e71e      	b.n	8001fec <__aeabi_dmul+0x2b8>
 80021ae:	4656      	mov	r6, sl
 80021b0:	3b08      	subs	r3, #8
 80021b2:	2200      	movs	r2, #0
 80021b4:	409e      	lsls	r6, r3
 80021b6:	e723      	b.n	8002000 <__aeabi_dmul+0x2cc>
 80021b8:	9b00      	ldr	r3, [sp, #0]
 80021ba:	469c      	mov	ip, r3
 80021bc:	e6e6      	b.n	8001f8c <__aeabi_dmul+0x258>
 80021be:	4912      	ldr	r1, [pc, #72]	; (8002208 <__aeabi_dmul+0x4d4>)
 80021c0:	0022      	movs	r2, r4
 80021c2:	4461      	add	r1, ip
 80021c4:	002e      	movs	r6, r5
 80021c6:	408d      	lsls	r5, r1
 80021c8:	408a      	lsls	r2, r1
 80021ca:	40c6      	lsrs	r6, r0
 80021cc:	1e69      	subs	r1, r5, #1
 80021ce:	418d      	sbcs	r5, r1
 80021d0:	4332      	orrs	r2, r6
 80021d2:	432a      	orrs	r2, r5
 80021d4:	40c4      	lsrs	r4, r0
 80021d6:	0753      	lsls	r3, r2, #29
 80021d8:	d0b6      	beq.n	8002148 <__aeabi_dmul+0x414>
 80021da:	210f      	movs	r1, #15
 80021dc:	4011      	ands	r1, r2
 80021de:	2904      	cmp	r1, #4
 80021e0:	d1ac      	bne.n	800213c <__aeabi_dmul+0x408>
 80021e2:	e7b1      	b.n	8002148 <__aeabi_dmul+0x414>
 80021e4:	0765      	lsls	r5, r4, #29
 80021e6:	0264      	lsls	r4, r4, #9
 80021e8:	0b24      	lsrs	r4, r4, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	4315      	orrs	r5, r2
 80021ee:	2200      	movs	r2, #0
 80021f0:	e601      	b.n	8001df6 <__aeabi_dmul+0xc2>
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	0312      	lsls	r2, r2, #12
 80021f6:	4314      	orrs	r4, r2
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4a01      	ldr	r2, [pc, #4]	; (8002200 <__aeabi_dmul+0x4cc>)
 80021fc:	0b24      	lsrs	r4, r4, #12
 80021fe:	e5fa      	b.n	8001df6 <__aeabi_dmul+0xc2>
 8002200:	000007ff 	.word	0x000007ff
 8002204:	0000043e 	.word	0x0000043e
 8002208:	0000041e 	.word	0x0000041e

0800220c <__aeabi_dsub>:
 800220c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800220e:	4657      	mov	r7, sl
 8002210:	464e      	mov	r6, r9
 8002212:	4645      	mov	r5, r8
 8002214:	46de      	mov	lr, fp
 8002216:	b5e0      	push	{r5, r6, r7, lr}
 8002218:	001e      	movs	r6, r3
 800221a:	0017      	movs	r7, r2
 800221c:	004a      	lsls	r2, r1, #1
 800221e:	030b      	lsls	r3, r1, #12
 8002220:	0d52      	lsrs	r2, r2, #21
 8002222:	0a5b      	lsrs	r3, r3, #9
 8002224:	4690      	mov	r8, r2
 8002226:	0f42      	lsrs	r2, r0, #29
 8002228:	431a      	orrs	r2, r3
 800222a:	0fcd      	lsrs	r5, r1, #31
 800222c:	4ccd      	ldr	r4, [pc, #820]	; (8002564 <__aeabi_dsub+0x358>)
 800222e:	0331      	lsls	r1, r6, #12
 8002230:	00c3      	lsls	r3, r0, #3
 8002232:	4694      	mov	ip, r2
 8002234:	0070      	lsls	r0, r6, #1
 8002236:	0f7a      	lsrs	r2, r7, #29
 8002238:	0a49      	lsrs	r1, r1, #9
 800223a:	00ff      	lsls	r7, r7, #3
 800223c:	469a      	mov	sl, r3
 800223e:	46b9      	mov	r9, r7
 8002240:	0d40      	lsrs	r0, r0, #21
 8002242:	0ff6      	lsrs	r6, r6, #31
 8002244:	4311      	orrs	r1, r2
 8002246:	42a0      	cmp	r0, r4
 8002248:	d100      	bne.n	800224c <__aeabi_dsub+0x40>
 800224a:	e0b1      	b.n	80023b0 <__aeabi_dsub+0x1a4>
 800224c:	2201      	movs	r2, #1
 800224e:	4056      	eors	r6, r2
 8002250:	46b3      	mov	fp, r6
 8002252:	42b5      	cmp	r5, r6
 8002254:	d100      	bne.n	8002258 <__aeabi_dsub+0x4c>
 8002256:	e088      	b.n	800236a <__aeabi_dsub+0x15e>
 8002258:	4642      	mov	r2, r8
 800225a:	1a12      	subs	r2, r2, r0
 800225c:	2a00      	cmp	r2, #0
 800225e:	dc00      	bgt.n	8002262 <__aeabi_dsub+0x56>
 8002260:	e0ae      	b.n	80023c0 <__aeabi_dsub+0x1b4>
 8002262:	2800      	cmp	r0, #0
 8002264:	d100      	bne.n	8002268 <__aeabi_dsub+0x5c>
 8002266:	e0c1      	b.n	80023ec <__aeabi_dsub+0x1e0>
 8002268:	48be      	ldr	r0, [pc, #760]	; (8002564 <__aeabi_dsub+0x358>)
 800226a:	4580      	cmp	r8, r0
 800226c:	d100      	bne.n	8002270 <__aeabi_dsub+0x64>
 800226e:	e151      	b.n	8002514 <__aeabi_dsub+0x308>
 8002270:	2080      	movs	r0, #128	; 0x80
 8002272:	0400      	lsls	r0, r0, #16
 8002274:	4301      	orrs	r1, r0
 8002276:	2a38      	cmp	r2, #56	; 0x38
 8002278:	dd00      	ble.n	800227c <__aeabi_dsub+0x70>
 800227a:	e17b      	b.n	8002574 <__aeabi_dsub+0x368>
 800227c:	2a1f      	cmp	r2, #31
 800227e:	dd00      	ble.n	8002282 <__aeabi_dsub+0x76>
 8002280:	e1ee      	b.n	8002660 <__aeabi_dsub+0x454>
 8002282:	2020      	movs	r0, #32
 8002284:	003e      	movs	r6, r7
 8002286:	1a80      	subs	r0, r0, r2
 8002288:	000c      	movs	r4, r1
 800228a:	40d6      	lsrs	r6, r2
 800228c:	40d1      	lsrs	r1, r2
 800228e:	4087      	lsls	r7, r0
 8002290:	4662      	mov	r2, ip
 8002292:	4084      	lsls	r4, r0
 8002294:	1a52      	subs	r2, r2, r1
 8002296:	1e78      	subs	r0, r7, #1
 8002298:	4187      	sbcs	r7, r0
 800229a:	4694      	mov	ip, r2
 800229c:	4334      	orrs	r4, r6
 800229e:	4327      	orrs	r7, r4
 80022a0:	1bdc      	subs	r4, r3, r7
 80022a2:	42a3      	cmp	r3, r4
 80022a4:	419b      	sbcs	r3, r3
 80022a6:	4662      	mov	r2, ip
 80022a8:	425b      	negs	r3, r3
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	4699      	mov	r9, r3
 80022ae:	464b      	mov	r3, r9
 80022b0:	021b      	lsls	r3, r3, #8
 80022b2:	d400      	bmi.n	80022b6 <__aeabi_dsub+0xaa>
 80022b4:	e118      	b.n	80024e8 <__aeabi_dsub+0x2dc>
 80022b6:	464b      	mov	r3, r9
 80022b8:	0258      	lsls	r0, r3, #9
 80022ba:	0a43      	lsrs	r3, r0, #9
 80022bc:	4699      	mov	r9, r3
 80022be:	464b      	mov	r3, r9
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d100      	bne.n	80022c6 <__aeabi_dsub+0xba>
 80022c4:	e137      	b.n	8002536 <__aeabi_dsub+0x32a>
 80022c6:	4648      	mov	r0, r9
 80022c8:	f000 fbdc 	bl	8002a84 <__clzsi2>
 80022cc:	0001      	movs	r1, r0
 80022ce:	3908      	subs	r1, #8
 80022d0:	2320      	movs	r3, #32
 80022d2:	0022      	movs	r2, r4
 80022d4:	4648      	mov	r0, r9
 80022d6:	1a5b      	subs	r3, r3, r1
 80022d8:	40da      	lsrs	r2, r3
 80022da:	4088      	lsls	r0, r1
 80022dc:	408c      	lsls	r4, r1
 80022de:	4643      	mov	r3, r8
 80022e0:	4310      	orrs	r0, r2
 80022e2:	4588      	cmp	r8, r1
 80022e4:	dd00      	ble.n	80022e8 <__aeabi_dsub+0xdc>
 80022e6:	e136      	b.n	8002556 <__aeabi_dsub+0x34a>
 80022e8:	1ac9      	subs	r1, r1, r3
 80022ea:	1c4b      	adds	r3, r1, #1
 80022ec:	2b1f      	cmp	r3, #31
 80022ee:	dd00      	ble.n	80022f2 <__aeabi_dsub+0xe6>
 80022f0:	e0ea      	b.n	80024c8 <__aeabi_dsub+0x2bc>
 80022f2:	2220      	movs	r2, #32
 80022f4:	0026      	movs	r6, r4
 80022f6:	1ad2      	subs	r2, r2, r3
 80022f8:	0001      	movs	r1, r0
 80022fa:	4094      	lsls	r4, r2
 80022fc:	40de      	lsrs	r6, r3
 80022fe:	40d8      	lsrs	r0, r3
 8002300:	2300      	movs	r3, #0
 8002302:	4091      	lsls	r1, r2
 8002304:	1e62      	subs	r2, r4, #1
 8002306:	4194      	sbcs	r4, r2
 8002308:	4681      	mov	r9, r0
 800230a:	4698      	mov	r8, r3
 800230c:	4331      	orrs	r1, r6
 800230e:	430c      	orrs	r4, r1
 8002310:	0763      	lsls	r3, r4, #29
 8002312:	d009      	beq.n	8002328 <__aeabi_dsub+0x11c>
 8002314:	230f      	movs	r3, #15
 8002316:	4023      	ands	r3, r4
 8002318:	2b04      	cmp	r3, #4
 800231a:	d005      	beq.n	8002328 <__aeabi_dsub+0x11c>
 800231c:	1d23      	adds	r3, r4, #4
 800231e:	42a3      	cmp	r3, r4
 8002320:	41a4      	sbcs	r4, r4
 8002322:	4264      	negs	r4, r4
 8002324:	44a1      	add	r9, r4
 8002326:	001c      	movs	r4, r3
 8002328:	464b      	mov	r3, r9
 800232a:	021b      	lsls	r3, r3, #8
 800232c:	d400      	bmi.n	8002330 <__aeabi_dsub+0x124>
 800232e:	e0de      	b.n	80024ee <__aeabi_dsub+0x2e2>
 8002330:	4641      	mov	r1, r8
 8002332:	4b8c      	ldr	r3, [pc, #560]	; (8002564 <__aeabi_dsub+0x358>)
 8002334:	3101      	adds	r1, #1
 8002336:	4299      	cmp	r1, r3
 8002338:	d100      	bne.n	800233c <__aeabi_dsub+0x130>
 800233a:	e0e7      	b.n	800250c <__aeabi_dsub+0x300>
 800233c:	464b      	mov	r3, r9
 800233e:	488a      	ldr	r0, [pc, #552]	; (8002568 <__aeabi_dsub+0x35c>)
 8002340:	08e4      	lsrs	r4, r4, #3
 8002342:	4003      	ands	r3, r0
 8002344:	0018      	movs	r0, r3
 8002346:	0549      	lsls	r1, r1, #21
 8002348:	075b      	lsls	r3, r3, #29
 800234a:	0240      	lsls	r0, r0, #9
 800234c:	4323      	orrs	r3, r4
 800234e:	0d4a      	lsrs	r2, r1, #21
 8002350:	0b04      	lsrs	r4, r0, #12
 8002352:	0512      	lsls	r2, r2, #20
 8002354:	07ed      	lsls	r5, r5, #31
 8002356:	4322      	orrs	r2, r4
 8002358:	432a      	orrs	r2, r5
 800235a:	0018      	movs	r0, r3
 800235c:	0011      	movs	r1, r2
 800235e:	bcf0      	pop	{r4, r5, r6, r7}
 8002360:	46bb      	mov	fp, r7
 8002362:	46b2      	mov	sl, r6
 8002364:	46a9      	mov	r9, r5
 8002366:	46a0      	mov	r8, r4
 8002368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800236a:	4642      	mov	r2, r8
 800236c:	1a12      	subs	r2, r2, r0
 800236e:	2a00      	cmp	r2, #0
 8002370:	dd52      	ble.n	8002418 <__aeabi_dsub+0x20c>
 8002372:	2800      	cmp	r0, #0
 8002374:	d100      	bne.n	8002378 <__aeabi_dsub+0x16c>
 8002376:	e09c      	b.n	80024b2 <__aeabi_dsub+0x2a6>
 8002378:	45a0      	cmp	r8, r4
 800237a:	d100      	bne.n	800237e <__aeabi_dsub+0x172>
 800237c:	e0ca      	b.n	8002514 <__aeabi_dsub+0x308>
 800237e:	2080      	movs	r0, #128	; 0x80
 8002380:	0400      	lsls	r0, r0, #16
 8002382:	4301      	orrs	r1, r0
 8002384:	2a38      	cmp	r2, #56	; 0x38
 8002386:	dd00      	ble.n	800238a <__aeabi_dsub+0x17e>
 8002388:	e149      	b.n	800261e <__aeabi_dsub+0x412>
 800238a:	2a1f      	cmp	r2, #31
 800238c:	dc00      	bgt.n	8002390 <__aeabi_dsub+0x184>
 800238e:	e197      	b.n	80026c0 <__aeabi_dsub+0x4b4>
 8002390:	0010      	movs	r0, r2
 8002392:	000e      	movs	r6, r1
 8002394:	3820      	subs	r0, #32
 8002396:	40c6      	lsrs	r6, r0
 8002398:	2a20      	cmp	r2, #32
 800239a:	d004      	beq.n	80023a6 <__aeabi_dsub+0x19a>
 800239c:	2040      	movs	r0, #64	; 0x40
 800239e:	1a82      	subs	r2, r0, r2
 80023a0:	4091      	lsls	r1, r2
 80023a2:	430f      	orrs	r7, r1
 80023a4:	46b9      	mov	r9, r7
 80023a6:	464c      	mov	r4, r9
 80023a8:	1e62      	subs	r2, r4, #1
 80023aa:	4194      	sbcs	r4, r2
 80023ac:	4334      	orrs	r4, r6
 80023ae:	e13a      	b.n	8002626 <__aeabi_dsub+0x41a>
 80023b0:	000a      	movs	r2, r1
 80023b2:	433a      	orrs	r2, r7
 80023b4:	d028      	beq.n	8002408 <__aeabi_dsub+0x1fc>
 80023b6:	46b3      	mov	fp, r6
 80023b8:	42b5      	cmp	r5, r6
 80023ba:	d02b      	beq.n	8002414 <__aeabi_dsub+0x208>
 80023bc:	4a6b      	ldr	r2, [pc, #428]	; (800256c <__aeabi_dsub+0x360>)
 80023be:	4442      	add	r2, r8
 80023c0:	2a00      	cmp	r2, #0
 80023c2:	d05d      	beq.n	8002480 <__aeabi_dsub+0x274>
 80023c4:	4642      	mov	r2, r8
 80023c6:	4644      	mov	r4, r8
 80023c8:	1a82      	subs	r2, r0, r2
 80023ca:	2c00      	cmp	r4, #0
 80023cc:	d000      	beq.n	80023d0 <__aeabi_dsub+0x1c4>
 80023ce:	e0f5      	b.n	80025bc <__aeabi_dsub+0x3b0>
 80023d0:	4665      	mov	r5, ip
 80023d2:	431d      	orrs	r5, r3
 80023d4:	d100      	bne.n	80023d8 <__aeabi_dsub+0x1cc>
 80023d6:	e19c      	b.n	8002712 <__aeabi_dsub+0x506>
 80023d8:	1e55      	subs	r5, r2, #1
 80023da:	2a01      	cmp	r2, #1
 80023dc:	d100      	bne.n	80023e0 <__aeabi_dsub+0x1d4>
 80023de:	e1fb      	b.n	80027d8 <__aeabi_dsub+0x5cc>
 80023e0:	4c60      	ldr	r4, [pc, #384]	; (8002564 <__aeabi_dsub+0x358>)
 80023e2:	42a2      	cmp	r2, r4
 80023e4:	d100      	bne.n	80023e8 <__aeabi_dsub+0x1dc>
 80023e6:	e1bd      	b.n	8002764 <__aeabi_dsub+0x558>
 80023e8:	002a      	movs	r2, r5
 80023ea:	e0f0      	b.n	80025ce <__aeabi_dsub+0x3c2>
 80023ec:	0008      	movs	r0, r1
 80023ee:	4338      	orrs	r0, r7
 80023f0:	d100      	bne.n	80023f4 <__aeabi_dsub+0x1e8>
 80023f2:	e0c3      	b.n	800257c <__aeabi_dsub+0x370>
 80023f4:	1e50      	subs	r0, r2, #1
 80023f6:	2a01      	cmp	r2, #1
 80023f8:	d100      	bne.n	80023fc <__aeabi_dsub+0x1f0>
 80023fa:	e1a8      	b.n	800274e <__aeabi_dsub+0x542>
 80023fc:	4c59      	ldr	r4, [pc, #356]	; (8002564 <__aeabi_dsub+0x358>)
 80023fe:	42a2      	cmp	r2, r4
 8002400:	d100      	bne.n	8002404 <__aeabi_dsub+0x1f8>
 8002402:	e087      	b.n	8002514 <__aeabi_dsub+0x308>
 8002404:	0002      	movs	r2, r0
 8002406:	e736      	b.n	8002276 <__aeabi_dsub+0x6a>
 8002408:	2201      	movs	r2, #1
 800240a:	4056      	eors	r6, r2
 800240c:	46b3      	mov	fp, r6
 800240e:	42b5      	cmp	r5, r6
 8002410:	d000      	beq.n	8002414 <__aeabi_dsub+0x208>
 8002412:	e721      	b.n	8002258 <__aeabi_dsub+0x4c>
 8002414:	4a55      	ldr	r2, [pc, #340]	; (800256c <__aeabi_dsub+0x360>)
 8002416:	4442      	add	r2, r8
 8002418:	2a00      	cmp	r2, #0
 800241a:	d100      	bne.n	800241e <__aeabi_dsub+0x212>
 800241c:	e0b5      	b.n	800258a <__aeabi_dsub+0x37e>
 800241e:	4642      	mov	r2, r8
 8002420:	4644      	mov	r4, r8
 8002422:	1a82      	subs	r2, r0, r2
 8002424:	2c00      	cmp	r4, #0
 8002426:	d100      	bne.n	800242a <__aeabi_dsub+0x21e>
 8002428:	e138      	b.n	800269c <__aeabi_dsub+0x490>
 800242a:	4e4e      	ldr	r6, [pc, #312]	; (8002564 <__aeabi_dsub+0x358>)
 800242c:	42b0      	cmp	r0, r6
 800242e:	d100      	bne.n	8002432 <__aeabi_dsub+0x226>
 8002430:	e1de      	b.n	80027f0 <__aeabi_dsub+0x5e4>
 8002432:	2680      	movs	r6, #128	; 0x80
 8002434:	4664      	mov	r4, ip
 8002436:	0436      	lsls	r6, r6, #16
 8002438:	4334      	orrs	r4, r6
 800243a:	46a4      	mov	ip, r4
 800243c:	2a38      	cmp	r2, #56	; 0x38
 800243e:	dd00      	ble.n	8002442 <__aeabi_dsub+0x236>
 8002440:	e196      	b.n	8002770 <__aeabi_dsub+0x564>
 8002442:	2a1f      	cmp	r2, #31
 8002444:	dd00      	ble.n	8002448 <__aeabi_dsub+0x23c>
 8002446:	e224      	b.n	8002892 <__aeabi_dsub+0x686>
 8002448:	2620      	movs	r6, #32
 800244a:	1ab4      	subs	r4, r6, r2
 800244c:	46a2      	mov	sl, r4
 800244e:	4664      	mov	r4, ip
 8002450:	4656      	mov	r6, sl
 8002452:	40b4      	lsls	r4, r6
 8002454:	46a1      	mov	r9, r4
 8002456:	001c      	movs	r4, r3
 8002458:	464e      	mov	r6, r9
 800245a:	40d4      	lsrs	r4, r2
 800245c:	4326      	orrs	r6, r4
 800245e:	0034      	movs	r4, r6
 8002460:	4656      	mov	r6, sl
 8002462:	40b3      	lsls	r3, r6
 8002464:	1e5e      	subs	r6, r3, #1
 8002466:	41b3      	sbcs	r3, r6
 8002468:	431c      	orrs	r4, r3
 800246a:	4663      	mov	r3, ip
 800246c:	40d3      	lsrs	r3, r2
 800246e:	18c9      	adds	r1, r1, r3
 8002470:	19e4      	adds	r4, r4, r7
 8002472:	42bc      	cmp	r4, r7
 8002474:	41bf      	sbcs	r7, r7
 8002476:	427f      	negs	r7, r7
 8002478:	46b9      	mov	r9, r7
 800247a:	4680      	mov	r8, r0
 800247c:	4489      	add	r9, r1
 800247e:	e0d8      	b.n	8002632 <__aeabi_dsub+0x426>
 8002480:	4640      	mov	r0, r8
 8002482:	4c3b      	ldr	r4, [pc, #236]	; (8002570 <__aeabi_dsub+0x364>)
 8002484:	3001      	adds	r0, #1
 8002486:	4220      	tst	r0, r4
 8002488:	d000      	beq.n	800248c <__aeabi_dsub+0x280>
 800248a:	e0b4      	b.n	80025f6 <__aeabi_dsub+0x3ea>
 800248c:	4640      	mov	r0, r8
 800248e:	2800      	cmp	r0, #0
 8002490:	d000      	beq.n	8002494 <__aeabi_dsub+0x288>
 8002492:	e144      	b.n	800271e <__aeabi_dsub+0x512>
 8002494:	4660      	mov	r0, ip
 8002496:	4318      	orrs	r0, r3
 8002498:	d100      	bne.n	800249c <__aeabi_dsub+0x290>
 800249a:	e190      	b.n	80027be <__aeabi_dsub+0x5b2>
 800249c:	0008      	movs	r0, r1
 800249e:	4338      	orrs	r0, r7
 80024a0:	d000      	beq.n	80024a4 <__aeabi_dsub+0x298>
 80024a2:	e1aa      	b.n	80027fa <__aeabi_dsub+0x5ee>
 80024a4:	4661      	mov	r1, ip
 80024a6:	08db      	lsrs	r3, r3, #3
 80024a8:	0749      	lsls	r1, r1, #29
 80024aa:	430b      	orrs	r3, r1
 80024ac:	4661      	mov	r1, ip
 80024ae:	08cc      	lsrs	r4, r1, #3
 80024b0:	e027      	b.n	8002502 <__aeabi_dsub+0x2f6>
 80024b2:	0008      	movs	r0, r1
 80024b4:	4338      	orrs	r0, r7
 80024b6:	d061      	beq.n	800257c <__aeabi_dsub+0x370>
 80024b8:	1e50      	subs	r0, r2, #1
 80024ba:	2a01      	cmp	r2, #1
 80024bc:	d100      	bne.n	80024c0 <__aeabi_dsub+0x2b4>
 80024be:	e139      	b.n	8002734 <__aeabi_dsub+0x528>
 80024c0:	42a2      	cmp	r2, r4
 80024c2:	d027      	beq.n	8002514 <__aeabi_dsub+0x308>
 80024c4:	0002      	movs	r2, r0
 80024c6:	e75d      	b.n	8002384 <__aeabi_dsub+0x178>
 80024c8:	0002      	movs	r2, r0
 80024ca:	391f      	subs	r1, #31
 80024cc:	40ca      	lsrs	r2, r1
 80024ce:	0011      	movs	r1, r2
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d003      	beq.n	80024dc <__aeabi_dsub+0x2d0>
 80024d4:	2240      	movs	r2, #64	; 0x40
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	4098      	lsls	r0, r3
 80024da:	4304      	orrs	r4, r0
 80024dc:	1e63      	subs	r3, r4, #1
 80024de:	419c      	sbcs	r4, r3
 80024e0:	2300      	movs	r3, #0
 80024e2:	4699      	mov	r9, r3
 80024e4:	4698      	mov	r8, r3
 80024e6:	430c      	orrs	r4, r1
 80024e8:	0763      	lsls	r3, r4, #29
 80024ea:	d000      	beq.n	80024ee <__aeabi_dsub+0x2e2>
 80024ec:	e712      	b.n	8002314 <__aeabi_dsub+0x108>
 80024ee:	464b      	mov	r3, r9
 80024f0:	464a      	mov	r2, r9
 80024f2:	08e4      	lsrs	r4, r4, #3
 80024f4:	075b      	lsls	r3, r3, #29
 80024f6:	4323      	orrs	r3, r4
 80024f8:	08d4      	lsrs	r4, r2, #3
 80024fa:	4642      	mov	r2, r8
 80024fc:	4919      	ldr	r1, [pc, #100]	; (8002564 <__aeabi_dsub+0x358>)
 80024fe:	428a      	cmp	r2, r1
 8002500:	d00e      	beq.n	8002520 <__aeabi_dsub+0x314>
 8002502:	0324      	lsls	r4, r4, #12
 8002504:	0552      	lsls	r2, r2, #21
 8002506:	0b24      	lsrs	r4, r4, #12
 8002508:	0d52      	lsrs	r2, r2, #21
 800250a:	e722      	b.n	8002352 <__aeabi_dsub+0x146>
 800250c:	000a      	movs	r2, r1
 800250e:	2400      	movs	r4, #0
 8002510:	2300      	movs	r3, #0
 8002512:	e71e      	b.n	8002352 <__aeabi_dsub+0x146>
 8002514:	08db      	lsrs	r3, r3, #3
 8002516:	4662      	mov	r2, ip
 8002518:	0752      	lsls	r2, r2, #29
 800251a:	4313      	orrs	r3, r2
 800251c:	4662      	mov	r2, ip
 800251e:	08d4      	lsrs	r4, r2, #3
 8002520:	001a      	movs	r2, r3
 8002522:	4322      	orrs	r2, r4
 8002524:	d100      	bne.n	8002528 <__aeabi_dsub+0x31c>
 8002526:	e1fc      	b.n	8002922 <__aeabi_dsub+0x716>
 8002528:	2280      	movs	r2, #128	; 0x80
 800252a:	0312      	lsls	r2, r2, #12
 800252c:	4314      	orrs	r4, r2
 800252e:	0324      	lsls	r4, r4, #12
 8002530:	4a0c      	ldr	r2, [pc, #48]	; (8002564 <__aeabi_dsub+0x358>)
 8002532:	0b24      	lsrs	r4, r4, #12
 8002534:	e70d      	b.n	8002352 <__aeabi_dsub+0x146>
 8002536:	0020      	movs	r0, r4
 8002538:	f000 faa4 	bl	8002a84 <__clzsi2>
 800253c:	0001      	movs	r1, r0
 800253e:	3118      	adds	r1, #24
 8002540:	291f      	cmp	r1, #31
 8002542:	dc00      	bgt.n	8002546 <__aeabi_dsub+0x33a>
 8002544:	e6c4      	b.n	80022d0 <__aeabi_dsub+0xc4>
 8002546:	3808      	subs	r0, #8
 8002548:	4084      	lsls	r4, r0
 800254a:	4643      	mov	r3, r8
 800254c:	0020      	movs	r0, r4
 800254e:	2400      	movs	r4, #0
 8002550:	4588      	cmp	r8, r1
 8002552:	dc00      	bgt.n	8002556 <__aeabi_dsub+0x34a>
 8002554:	e6c8      	b.n	80022e8 <__aeabi_dsub+0xdc>
 8002556:	4a04      	ldr	r2, [pc, #16]	; (8002568 <__aeabi_dsub+0x35c>)
 8002558:	1a5b      	subs	r3, r3, r1
 800255a:	4010      	ands	r0, r2
 800255c:	4698      	mov	r8, r3
 800255e:	4681      	mov	r9, r0
 8002560:	e6d6      	b.n	8002310 <__aeabi_dsub+0x104>
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	000007ff 	.word	0x000007ff
 8002568:	ff7fffff 	.word	0xff7fffff
 800256c:	fffff801 	.word	0xfffff801
 8002570:	000007fe 	.word	0x000007fe
 8002574:	430f      	orrs	r7, r1
 8002576:	1e7a      	subs	r2, r7, #1
 8002578:	4197      	sbcs	r7, r2
 800257a:	e691      	b.n	80022a0 <__aeabi_dsub+0x94>
 800257c:	4661      	mov	r1, ip
 800257e:	08db      	lsrs	r3, r3, #3
 8002580:	0749      	lsls	r1, r1, #29
 8002582:	430b      	orrs	r3, r1
 8002584:	4661      	mov	r1, ip
 8002586:	08cc      	lsrs	r4, r1, #3
 8002588:	e7b8      	b.n	80024fc <__aeabi_dsub+0x2f0>
 800258a:	4640      	mov	r0, r8
 800258c:	4cd3      	ldr	r4, [pc, #844]	; (80028dc <__aeabi_dsub+0x6d0>)
 800258e:	3001      	adds	r0, #1
 8002590:	4220      	tst	r0, r4
 8002592:	d000      	beq.n	8002596 <__aeabi_dsub+0x38a>
 8002594:	e0a2      	b.n	80026dc <__aeabi_dsub+0x4d0>
 8002596:	4640      	mov	r0, r8
 8002598:	2800      	cmp	r0, #0
 800259a:	d000      	beq.n	800259e <__aeabi_dsub+0x392>
 800259c:	e101      	b.n	80027a2 <__aeabi_dsub+0x596>
 800259e:	4660      	mov	r0, ip
 80025a0:	4318      	orrs	r0, r3
 80025a2:	d100      	bne.n	80025a6 <__aeabi_dsub+0x39a>
 80025a4:	e15e      	b.n	8002864 <__aeabi_dsub+0x658>
 80025a6:	0008      	movs	r0, r1
 80025a8:	4338      	orrs	r0, r7
 80025aa:	d000      	beq.n	80025ae <__aeabi_dsub+0x3a2>
 80025ac:	e15f      	b.n	800286e <__aeabi_dsub+0x662>
 80025ae:	4661      	mov	r1, ip
 80025b0:	08db      	lsrs	r3, r3, #3
 80025b2:	0749      	lsls	r1, r1, #29
 80025b4:	430b      	orrs	r3, r1
 80025b6:	4661      	mov	r1, ip
 80025b8:	08cc      	lsrs	r4, r1, #3
 80025ba:	e7a2      	b.n	8002502 <__aeabi_dsub+0x2f6>
 80025bc:	4dc8      	ldr	r5, [pc, #800]	; (80028e0 <__aeabi_dsub+0x6d4>)
 80025be:	42a8      	cmp	r0, r5
 80025c0:	d100      	bne.n	80025c4 <__aeabi_dsub+0x3b8>
 80025c2:	e0cf      	b.n	8002764 <__aeabi_dsub+0x558>
 80025c4:	2580      	movs	r5, #128	; 0x80
 80025c6:	4664      	mov	r4, ip
 80025c8:	042d      	lsls	r5, r5, #16
 80025ca:	432c      	orrs	r4, r5
 80025cc:	46a4      	mov	ip, r4
 80025ce:	2a38      	cmp	r2, #56	; 0x38
 80025d0:	dc56      	bgt.n	8002680 <__aeabi_dsub+0x474>
 80025d2:	2a1f      	cmp	r2, #31
 80025d4:	dd00      	ble.n	80025d8 <__aeabi_dsub+0x3cc>
 80025d6:	e0d1      	b.n	800277c <__aeabi_dsub+0x570>
 80025d8:	2520      	movs	r5, #32
 80025da:	001e      	movs	r6, r3
 80025dc:	1aad      	subs	r5, r5, r2
 80025de:	4664      	mov	r4, ip
 80025e0:	40ab      	lsls	r3, r5
 80025e2:	40ac      	lsls	r4, r5
 80025e4:	40d6      	lsrs	r6, r2
 80025e6:	1e5d      	subs	r5, r3, #1
 80025e8:	41ab      	sbcs	r3, r5
 80025ea:	4334      	orrs	r4, r6
 80025ec:	4323      	orrs	r3, r4
 80025ee:	4664      	mov	r4, ip
 80025f0:	40d4      	lsrs	r4, r2
 80025f2:	1b09      	subs	r1, r1, r4
 80025f4:	e049      	b.n	800268a <__aeabi_dsub+0x47e>
 80025f6:	4660      	mov	r0, ip
 80025f8:	1bdc      	subs	r4, r3, r7
 80025fa:	1a46      	subs	r6, r0, r1
 80025fc:	42a3      	cmp	r3, r4
 80025fe:	4180      	sbcs	r0, r0
 8002600:	4240      	negs	r0, r0
 8002602:	4681      	mov	r9, r0
 8002604:	0030      	movs	r0, r6
 8002606:	464e      	mov	r6, r9
 8002608:	1b80      	subs	r0, r0, r6
 800260a:	4681      	mov	r9, r0
 800260c:	0200      	lsls	r0, r0, #8
 800260e:	d476      	bmi.n	80026fe <__aeabi_dsub+0x4f2>
 8002610:	464b      	mov	r3, r9
 8002612:	4323      	orrs	r3, r4
 8002614:	d000      	beq.n	8002618 <__aeabi_dsub+0x40c>
 8002616:	e652      	b.n	80022be <__aeabi_dsub+0xb2>
 8002618:	2400      	movs	r4, #0
 800261a:	2500      	movs	r5, #0
 800261c:	e771      	b.n	8002502 <__aeabi_dsub+0x2f6>
 800261e:	4339      	orrs	r1, r7
 8002620:	000c      	movs	r4, r1
 8002622:	1e62      	subs	r2, r4, #1
 8002624:	4194      	sbcs	r4, r2
 8002626:	18e4      	adds	r4, r4, r3
 8002628:	429c      	cmp	r4, r3
 800262a:	419b      	sbcs	r3, r3
 800262c:	425b      	negs	r3, r3
 800262e:	4463      	add	r3, ip
 8002630:	4699      	mov	r9, r3
 8002632:	464b      	mov	r3, r9
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	d400      	bmi.n	800263a <__aeabi_dsub+0x42e>
 8002638:	e756      	b.n	80024e8 <__aeabi_dsub+0x2dc>
 800263a:	2301      	movs	r3, #1
 800263c:	469c      	mov	ip, r3
 800263e:	4ba8      	ldr	r3, [pc, #672]	; (80028e0 <__aeabi_dsub+0x6d4>)
 8002640:	44e0      	add	r8, ip
 8002642:	4598      	cmp	r8, r3
 8002644:	d038      	beq.n	80026b8 <__aeabi_dsub+0x4ac>
 8002646:	464b      	mov	r3, r9
 8002648:	48a6      	ldr	r0, [pc, #664]	; (80028e4 <__aeabi_dsub+0x6d8>)
 800264a:	2201      	movs	r2, #1
 800264c:	4003      	ands	r3, r0
 800264e:	0018      	movs	r0, r3
 8002650:	0863      	lsrs	r3, r4, #1
 8002652:	4014      	ands	r4, r2
 8002654:	431c      	orrs	r4, r3
 8002656:	07c3      	lsls	r3, r0, #31
 8002658:	431c      	orrs	r4, r3
 800265a:	0843      	lsrs	r3, r0, #1
 800265c:	4699      	mov	r9, r3
 800265e:	e657      	b.n	8002310 <__aeabi_dsub+0x104>
 8002660:	0010      	movs	r0, r2
 8002662:	000e      	movs	r6, r1
 8002664:	3820      	subs	r0, #32
 8002666:	40c6      	lsrs	r6, r0
 8002668:	2a20      	cmp	r2, #32
 800266a:	d004      	beq.n	8002676 <__aeabi_dsub+0x46a>
 800266c:	2040      	movs	r0, #64	; 0x40
 800266e:	1a82      	subs	r2, r0, r2
 8002670:	4091      	lsls	r1, r2
 8002672:	430f      	orrs	r7, r1
 8002674:	46b9      	mov	r9, r7
 8002676:	464f      	mov	r7, r9
 8002678:	1e7a      	subs	r2, r7, #1
 800267a:	4197      	sbcs	r7, r2
 800267c:	4337      	orrs	r7, r6
 800267e:	e60f      	b.n	80022a0 <__aeabi_dsub+0x94>
 8002680:	4662      	mov	r2, ip
 8002682:	431a      	orrs	r2, r3
 8002684:	0013      	movs	r3, r2
 8002686:	1e5a      	subs	r2, r3, #1
 8002688:	4193      	sbcs	r3, r2
 800268a:	1afc      	subs	r4, r7, r3
 800268c:	42a7      	cmp	r7, r4
 800268e:	41bf      	sbcs	r7, r7
 8002690:	427f      	negs	r7, r7
 8002692:	1bcb      	subs	r3, r1, r7
 8002694:	4699      	mov	r9, r3
 8002696:	465d      	mov	r5, fp
 8002698:	4680      	mov	r8, r0
 800269a:	e608      	b.n	80022ae <__aeabi_dsub+0xa2>
 800269c:	4666      	mov	r6, ip
 800269e:	431e      	orrs	r6, r3
 80026a0:	d100      	bne.n	80026a4 <__aeabi_dsub+0x498>
 80026a2:	e0be      	b.n	8002822 <__aeabi_dsub+0x616>
 80026a4:	1e56      	subs	r6, r2, #1
 80026a6:	2a01      	cmp	r2, #1
 80026a8:	d100      	bne.n	80026ac <__aeabi_dsub+0x4a0>
 80026aa:	e109      	b.n	80028c0 <__aeabi_dsub+0x6b4>
 80026ac:	4c8c      	ldr	r4, [pc, #560]	; (80028e0 <__aeabi_dsub+0x6d4>)
 80026ae:	42a2      	cmp	r2, r4
 80026b0:	d100      	bne.n	80026b4 <__aeabi_dsub+0x4a8>
 80026b2:	e119      	b.n	80028e8 <__aeabi_dsub+0x6dc>
 80026b4:	0032      	movs	r2, r6
 80026b6:	e6c1      	b.n	800243c <__aeabi_dsub+0x230>
 80026b8:	4642      	mov	r2, r8
 80026ba:	2400      	movs	r4, #0
 80026bc:	2300      	movs	r3, #0
 80026be:	e648      	b.n	8002352 <__aeabi_dsub+0x146>
 80026c0:	2020      	movs	r0, #32
 80026c2:	000c      	movs	r4, r1
 80026c4:	1a80      	subs	r0, r0, r2
 80026c6:	003e      	movs	r6, r7
 80026c8:	4087      	lsls	r7, r0
 80026ca:	4084      	lsls	r4, r0
 80026cc:	40d6      	lsrs	r6, r2
 80026ce:	1e78      	subs	r0, r7, #1
 80026d0:	4187      	sbcs	r7, r0
 80026d2:	40d1      	lsrs	r1, r2
 80026d4:	4334      	orrs	r4, r6
 80026d6:	433c      	orrs	r4, r7
 80026d8:	448c      	add	ip, r1
 80026da:	e7a4      	b.n	8002626 <__aeabi_dsub+0x41a>
 80026dc:	4a80      	ldr	r2, [pc, #512]	; (80028e0 <__aeabi_dsub+0x6d4>)
 80026de:	4290      	cmp	r0, r2
 80026e0:	d100      	bne.n	80026e4 <__aeabi_dsub+0x4d8>
 80026e2:	e0e9      	b.n	80028b8 <__aeabi_dsub+0x6ac>
 80026e4:	19df      	adds	r7, r3, r7
 80026e6:	429f      	cmp	r7, r3
 80026e8:	419b      	sbcs	r3, r3
 80026ea:	4461      	add	r1, ip
 80026ec:	425b      	negs	r3, r3
 80026ee:	18c9      	adds	r1, r1, r3
 80026f0:	07cc      	lsls	r4, r1, #31
 80026f2:	087f      	lsrs	r7, r7, #1
 80026f4:	084b      	lsrs	r3, r1, #1
 80026f6:	4699      	mov	r9, r3
 80026f8:	4680      	mov	r8, r0
 80026fa:	433c      	orrs	r4, r7
 80026fc:	e6f4      	b.n	80024e8 <__aeabi_dsub+0x2dc>
 80026fe:	1afc      	subs	r4, r7, r3
 8002700:	42a7      	cmp	r7, r4
 8002702:	41bf      	sbcs	r7, r7
 8002704:	4663      	mov	r3, ip
 8002706:	427f      	negs	r7, r7
 8002708:	1ac9      	subs	r1, r1, r3
 800270a:	1bcb      	subs	r3, r1, r7
 800270c:	4699      	mov	r9, r3
 800270e:	465d      	mov	r5, fp
 8002710:	e5d5      	b.n	80022be <__aeabi_dsub+0xb2>
 8002712:	08ff      	lsrs	r7, r7, #3
 8002714:	074b      	lsls	r3, r1, #29
 8002716:	465d      	mov	r5, fp
 8002718:	433b      	orrs	r3, r7
 800271a:	08cc      	lsrs	r4, r1, #3
 800271c:	e6ee      	b.n	80024fc <__aeabi_dsub+0x2f0>
 800271e:	4662      	mov	r2, ip
 8002720:	431a      	orrs	r2, r3
 8002722:	d000      	beq.n	8002726 <__aeabi_dsub+0x51a>
 8002724:	e082      	b.n	800282c <__aeabi_dsub+0x620>
 8002726:	000b      	movs	r3, r1
 8002728:	433b      	orrs	r3, r7
 800272a:	d11b      	bne.n	8002764 <__aeabi_dsub+0x558>
 800272c:	2480      	movs	r4, #128	; 0x80
 800272e:	2500      	movs	r5, #0
 8002730:	0324      	lsls	r4, r4, #12
 8002732:	e6f9      	b.n	8002528 <__aeabi_dsub+0x31c>
 8002734:	19dc      	adds	r4, r3, r7
 8002736:	429c      	cmp	r4, r3
 8002738:	419b      	sbcs	r3, r3
 800273a:	4461      	add	r1, ip
 800273c:	4689      	mov	r9, r1
 800273e:	425b      	negs	r3, r3
 8002740:	4499      	add	r9, r3
 8002742:	464b      	mov	r3, r9
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	d444      	bmi.n	80027d2 <__aeabi_dsub+0x5c6>
 8002748:	2301      	movs	r3, #1
 800274a:	4698      	mov	r8, r3
 800274c:	e6cc      	b.n	80024e8 <__aeabi_dsub+0x2dc>
 800274e:	1bdc      	subs	r4, r3, r7
 8002750:	4662      	mov	r2, ip
 8002752:	42a3      	cmp	r3, r4
 8002754:	419b      	sbcs	r3, r3
 8002756:	1a51      	subs	r1, r2, r1
 8002758:	425b      	negs	r3, r3
 800275a:	1acb      	subs	r3, r1, r3
 800275c:	4699      	mov	r9, r3
 800275e:	2301      	movs	r3, #1
 8002760:	4698      	mov	r8, r3
 8002762:	e5a4      	b.n	80022ae <__aeabi_dsub+0xa2>
 8002764:	08ff      	lsrs	r7, r7, #3
 8002766:	074b      	lsls	r3, r1, #29
 8002768:	465d      	mov	r5, fp
 800276a:	433b      	orrs	r3, r7
 800276c:	08cc      	lsrs	r4, r1, #3
 800276e:	e6d7      	b.n	8002520 <__aeabi_dsub+0x314>
 8002770:	4662      	mov	r2, ip
 8002772:	431a      	orrs	r2, r3
 8002774:	0014      	movs	r4, r2
 8002776:	1e63      	subs	r3, r4, #1
 8002778:	419c      	sbcs	r4, r3
 800277a:	e679      	b.n	8002470 <__aeabi_dsub+0x264>
 800277c:	0015      	movs	r5, r2
 800277e:	4664      	mov	r4, ip
 8002780:	3d20      	subs	r5, #32
 8002782:	40ec      	lsrs	r4, r5
 8002784:	46a0      	mov	r8, r4
 8002786:	2a20      	cmp	r2, #32
 8002788:	d005      	beq.n	8002796 <__aeabi_dsub+0x58a>
 800278a:	2540      	movs	r5, #64	; 0x40
 800278c:	4664      	mov	r4, ip
 800278e:	1aaa      	subs	r2, r5, r2
 8002790:	4094      	lsls	r4, r2
 8002792:	4323      	orrs	r3, r4
 8002794:	469a      	mov	sl, r3
 8002796:	4654      	mov	r4, sl
 8002798:	1e63      	subs	r3, r4, #1
 800279a:	419c      	sbcs	r4, r3
 800279c:	4643      	mov	r3, r8
 800279e:	4323      	orrs	r3, r4
 80027a0:	e773      	b.n	800268a <__aeabi_dsub+0x47e>
 80027a2:	4662      	mov	r2, ip
 80027a4:	431a      	orrs	r2, r3
 80027a6:	d023      	beq.n	80027f0 <__aeabi_dsub+0x5e4>
 80027a8:	000a      	movs	r2, r1
 80027aa:	433a      	orrs	r2, r7
 80027ac:	d000      	beq.n	80027b0 <__aeabi_dsub+0x5a4>
 80027ae:	e0a0      	b.n	80028f2 <__aeabi_dsub+0x6e6>
 80027b0:	4662      	mov	r2, ip
 80027b2:	08db      	lsrs	r3, r3, #3
 80027b4:	0752      	lsls	r2, r2, #29
 80027b6:	4313      	orrs	r3, r2
 80027b8:	4662      	mov	r2, ip
 80027ba:	08d4      	lsrs	r4, r2, #3
 80027bc:	e6b0      	b.n	8002520 <__aeabi_dsub+0x314>
 80027be:	000b      	movs	r3, r1
 80027c0:	433b      	orrs	r3, r7
 80027c2:	d100      	bne.n	80027c6 <__aeabi_dsub+0x5ba>
 80027c4:	e728      	b.n	8002618 <__aeabi_dsub+0x40c>
 80027c6:	08ff      	lsrs	r7, r7, #3
 80027c8:	074b      	lsls	r3, r1, #29
 80027ca:	465d      	mov	r5, fp
 80027cc:	433b      	orrs	r3, r7
 80027ce:	08cc      	lsrs	r4, r1, #3
 80027d0:	e697      	b.n	8002502 <__aeabi_dsub+0x2f6>
 80027d2:	2302      	movs	r3, #2
 80027d4:	4698      	mov	r8, r3
 80027d6:	e736      	b.n	8002646 <__aeabi_dsub+0x43a>
 80027d8:	1afc      	subs	r4, r7, r3
 80027da:	42a7      	cmp	r7, r4
 80027dc:	41bf      	sbcs	r7, r7
 80027de:	4663      	mov	r3, ip
 80027e0:	427f      	negs	r7, r7
 80027e2:	1ac9      	subs	r1, r1, r3
 80027e4:	1bcb      	subs	r3, r1, r7
 80027e6:	4699      	mov	r9, r3
 80027e8:	2301      	movs	r3, #1
 80027ea:	465d      	mov	r5, fp
 80027ec:	4698      	mov	r8, r3
 80027ee:	e55e      	b.n	80022ae <__aeabi_dsub+0xa2>
 80027f0:	074b      	lsls	r3, r1, #29
 80027f2:	08ff      	lsrs	r7, r7, #3
 80027f4:	433b      	orrs	r3, r7
 80027f6:	08cc      	lsrs	r4, r1, #3
 80027f8:	e692      	b.n	8002520 <__aeabi_dsub+0x314>
 80027fa:	1bdc      	subs	r4, r3, r7
 80027fc:	4660      	mov	r0, ip
 80027fe:	42a3      	cmp	r3, r4
 8002800:	41b6      	sbcs	r6, r6
 8002802:	1a40      	subs	r0, r0, r1
 8002804:	4276      	negs	r6, r6
 8002806:	1b80      	subs	r0, r0, r6
 8002808:	4681      	mov	r9, r0
 800280a:	0200      	lsls	r0, r0, #8
 800280c:	d560      	bpl.n	80028d0 <__aeabi_dsub+0x6c4>
 800280e:	1afc      	subs	r4, r7, r3
 8002810:	42a7      	cmp	r7, r4
 8002812:	41bf      	sbcs	r7, r7
 8002814:	4663      	mov	r3, ip
 8002816:	427f      	negs	r7, r7
 8002818:	1ac9      	subs	r1, r1, r3
 800281a:	1bcb      	subs	r3, r1, r7
 800281c:	4699      	mov	r9, r3
 800281e:	465d      	mov	r5, fp
 8002820:	e576      	b.n	8002310 <__aeabi_dsub+0x104>
 8002822:	08ff      	lsrs	r7, r7, #3
 8002824:	074b      	lsls	r3, r1, #29
 8002826:	433b      	orrs	r3, r7
 8002828:	08cc      	lsrs	r4, r1, #3
 800282a:	e667      	b.n	80024fc <__aeabi_dsub+0x2f0>
 800282c:	000a      	movs	r2, r1
 800282e:	08db      	lsrs	r3, r3, #3
 8002830:	433a      	orrs	r2, r7
 8002832:	d100      	bne.n	8002836 <__aeabi_dsub+0x62a>
 8002834:	e66f      	b.n	8002516 <__aeabi_dsub+0x30a>
 8002836:	4662      	mov	r2, ip
 8002838:	0752      	lsls	r2, r2, #29
 800283a:	4313      	orrs	r3, r2
 800283c:	4662      	mov	r2, ip
 800283e:	08d4      	lsrs	r4, r2, #3
 8002840:	2280      	movs	r2, #128	; 0x80
 8002842:	0312      	lsls	r2, r2, #12
 8002844:	4214      	tst	r4, r2
 8002846:	d007      	beq.n	8002858 <__aeabi_dsub+0x64c>
 8002848:	08c8      	lsrs	r0, r1, #3
 800284a:	4210      	tst	r0, r2
 800284c:	d104      	bne.n	8002858 <__aeabi_dsub+0x64c>
 800284e:	465d      	mov	r5, fp
 8002850:	0004      	movs	r4, r0
 8002852:	08fb      	lsrs	r3, r7, #3
 8002854:	0749      	lsls	r1, r1, #29
 8002856:	430b      	orrs	r3, r1
 8002858:	0f5a      	lsrs	r2, r3, #29
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	08db      	lsrs	r3, r3, #3
 800285e:	0752      	lsls	r2, r2, #29
 8002860:	4313      	orrs	r3, r2
 8002862:	e65d      	b.n	8002520 <__aeabi_dsub+0x314>
 8002864:	074b      	lsls	r3, r1, #29
 8002866:	08ff      	lsrs	r7, r7, #3
 8002868:	433b      	orrs	r3, r7
 800286a:	08cc      	lsrs	r4, r1, #3
 800286c:	e649      	b.n	8002502 <__aeabi_dsub+0x2f6>
 800286e:	19dc      	adds	r4, r3, r7
 8002870:	429c      	cmp	r4, r3
 8002872:	419b      	sbcs	r3, r3
 8002874:	4461      	add	r1, ip
 8002876:	4689      	mov	r9, r1
 8002878:	425b      	negs	r3, r3
 800287a:	4499      	add	r9, r3
 800287c:	464b      	mov	r3, r9
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	d400      	bmi.n	8002884 <__aeabi_dsub+0x678>
 8002882:	e631      	b.n	80024e8 <__aeabi_dsub+0x2dc>
 8002884:	464a      	mov	r2, r9
 8002886:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <__aeabi_dsub+0x6d8>)
 8002888:	401a      	ands	r2, r3
 800288a:	2301      	movs	r3, #1
 800288c:	4691      	mov	r9, r2
 800288e:	4698      	mov	r8, r3
 8002890:	e62a      	b.n	80024e8 <__aeabi_dsub+0x2dc>
 8002892:	0016      	movs	r6, r2
 8002894:	4664      	mov	r4, ip
 8002896:	3e20      	subs	r6, #32
 8002898:	40f4      	lsrs	r4, r6
 800289a:	46a0      	mov	r8, r4
 800289c:	2a20      	cmp	r2, #32
 800289e:	d005      	beq.n	80028ac <__aeabi_dsub+0x6a0>
 80028a0:	2640      	movs	r6, #64	; 0x40
 80028a2:	4664      	mov	r4, ip
 80028a4:	1ab2      	subs	r2, r6, r2
 80028a6:	4094      	lsls	r4, r2
 80028a8:	4323      	orrs	r3, r4
 80028aa:	469a      	mov	sl, r3
 80028ac:	4654      	mov	r4, sl
 80028ae:	1e63      	subs	r3, r4, #1
 80028b0:	419c      	sbcs	r4, r3
 80028b2:	4643      	mov	r3, r8
 80028b4:	431c      	orrs	r4, r3
 80028b6:	e5db      	b.n	8002470 <__aeabi_dsub+0x264>
 80028b8:	0002      	movs	r2, r0
 80028ba:	2400      	movs	r4, #0
 80028bc:	2300      	movs	r3, #0
 80028be:	e548      	b.n	8002352 <__aeabi_dsub+0x146>
 80028c0:	19dc      	adds	r4, r3, r7
 80028c2:	42bc      	cmp	r4, r7
 80028c4:	41bf      	sbcs	r7, r7
 80028c6:	4461      	add	r1, ip
 80028c8:	4689      	mov	r9, r1
 80028ca:	427f      	negs	r7, r7
 80028cc:	44b9      	add	r9, r7
 80028ce:	e738      	b.n	8002742 <__aeabi_dsub+0x536>
 80028d0:	464b      	mov	r3, r9
 80028d2:	4323      	orrs	r3, r4
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x6cc>
 80028d6:	e69f      	b.n	8002618 <__aeabi_dsub+0x40c>
 80028d8:	e606      	b.n	80024e8 <__aeabi_dsub+0x2dc>
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	000007fe 	.word	0x000007fe
 80028e0:	000007ff 	.word	0x000007ff
 80028e4:	ff7fffff 	.word	0xff7fffff
 80028e8:	08ff      	lsrs	r7, r7, #3
 80028ea:	074b      	lsls	r3, r1, #29
 80028ec:	433b      	orrs	r3, r7
 80028ee:	08cc      	lsrs	r4, r1, #3
 80028f0:	e616      	b.n	8002520 <__aeabi_dsub+0x314>
 80028f2:	4662      	mov	r2, ip
 80028f4:	08db      	lsrs	r3, r3, #3
 80028f6:	0752      	lsls	r2, r2, #29
 80028f8:	4313      	orrs	r3, r2
 80028fa:	4662      	mov	r2, ip
 80028fc:	08d4      	lsrs	r4, r2, #3
 80028fe:	2280      	movs	r2, #128	; 0x80
 8002900:	0312      	lsls	r2, r2, #12
 8002902:	4214      	tst	r4, r2
 8002904:	d007      	beq.n	8002916 <__aeabi_dsub+0x70a>
 8002906:	08c8      	lsrs	r0, r1, #3
 8002908:	4210      	tst	r0, r2
 800290a:	d104      	bne.n	8002916 <__aeabi_dsub+0x70a>
 800290c:	465d      	mov	r5, fp
 800290e:	0004      	movs	r4, r0
 8002910:	08fb      	lsrs	r3, r7, #3
 8002912:	0749      	lsls	r1, r1, #29
 8002914:	430b      	orrs	r3, r1
 8002916:	0f5a      	lsrs	r2, r3, #29
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	0752      	lsls	r2, r2, #29
 800291c:	08db      	lsrs	r3, r3, #3
 800291e:	4313      	orrs	r3, r2
 8002920:	e5fe      	b.n	8002520 <__aeabi_dsub+0x314>
 8002922:	2300      	movs	r3, #0
 8002924:	4a01      	ldr	r2, [pc, #4]	; (800292c <__aeabi_dsub+0x720>)
 8002926:	001c      	movs	r4, r3
 8002928:	e513      	b.n	8002352 <__aeabi_dsub+0x146>
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	000007ff 	.word	0x000007ff

08002930 <__aeabi_dcmpun>:
 8002930:	b570      	push	{r4, r5, r6, lr}
 8002932:	0005      	movs	r5, r0
 8002934:	480c      	ldr	r0, [pc, #48]	; (8002968 <__aeabi_dcmpun+0x38>)
 8002936:	031c      	lsls	r4, r3, #12
 8002938:	0016      	movs	r6, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	030a      	lsls	r2, r1, #12
 800293e:	0049      	lsls	r1, r1, #1
 8002940:	0b12      	lsrs	r2, r2, #12
 8002942:	0d49      	lsrs	r1, r1, #21
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	0d5b      	lsrs	r3, r3, #21
 8002948:	4281      	cmp	r1, r0
 800294a:	d008      	beq.n	800295e <__aeabi_dcmpun+0x2e>
 800294c:	4a06      	ldr	r2, [pc, #24]	; (8002968 <__aeabi_dcmpun+0x38>)
 800294e:	2000      	movs	r0, #0
 8002950:	4293      	cmp	r3, r2
 8002952:	d103      	bne.n	800295c <__aeabi_dcmpun+0x2c>
 8002954:	0020      	movs	r0, r4
 8002956:	4330      	orrs	r0, r6
 8002958:	1e43      	subs	r3, r0, #1
 800295a:	4198      	sbcs	r0, r3
 800295c:	bd70      	pop	{r4, r5, r6, pc}
 800295e:	2001      	movs	r0, #1
 8002960:	432a      	orrs	r2, r5
 8002962:	d1fb      	bne.n	800295c <__aeabi_dcmpun+0x2c>
 8002964:	e7f2      	b.n	800294c <__aeabi_dcmpun+0x1c>
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	000007ff 	.word	0x000007ff

0800296c <__aeabi_d2iz>:
 800296c:	000a      	movs	r2, r1
 800296e:	b530      	push	{r4, r5, lr}
 8002970:	4c13      	ldr	r4, [pc, #76]	; (80029c0 <__aeabi_d2iz+0x54>)
 8002972:	0053      	lsls	r3, r2, #1
 8002974:	0309      	lsls	r1, r1, #12
 8002976:	0005      	movs	r5, r0
 8002978:	0b09      	lsrs	r1, r1, #12
 800297a:	2000      	movs	r0, #0
 800297c:	0d5b      	lsrs	r3, r3, #21
 800297e:	0fd2      	lsrs	r2, r2, #31
 8002980:	42a3      	cmp	r3, r4
 8002982:	dd04      	ble.n	800298e <__aeabi_d2iz+0x22>
 8002984:	480f      	ldr	r0, [pc, #60]	; (80029c4 <__aeabi_d2iz+0x58>)
 8002986:	4283      	cmp	r3, r0
 8002988:	dd02      	ble.n	8002990 <__aeabi_d2iz+0x24>
 800298a:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <__aeabi_d2iz+0x5c>)
 800298c:	18d0      	adds	r0, r2, r3
 800298e:	bd30      	pop	{r4, r5, pc}
 8002990:	2080      	movs	r0, #128	; 0x80
 8002992:	0340      	lsls	r0, r0, #13
 8002994:	4301      	orrs	r1, r0
 8002996:	480d      	ldr	r0, [pc, #52]	; (80029cc <__aeabi_d2iz+0x60>)
 8002998:	1ac0      	subs	r0, r0, r3
 800299a:	281f      	cmp	r0, #31
 800299c:	dd08      	ble.n	80029b0 <__aeabi_d2iz+0x44>
 800299e:	480c      	ldr	r0, [pc, #48]	; (80029d0 <__aeabi_d2iz+0x64>)
 80029a0:	1ac3      	subs	r3, r0, r3
 80029a2:	40d9      	lsrs	r1, r3
 80029a4:	000b      	movs	r3, r1
 80029a6:	4258      	negs	r0, r3
 80029a8:	2a00      	cmp	r2, #0
 80029aa:	d1f0      	bne.n	800298e <__aeabi_d2iz+0x22>
 80029ac:	0018      	movs	r0, r3
 80029ae:	e7ee      	b.n	800298e <__aeabi_d2iz+0x22>
 80029b0:	4c08      	ldr	r4, [pc, #32]	; (80029d4 <__aeabi_d2iz+0x68>)
 80029b2:	40c5      	lsrs	r5, r0
 80029b4:	46a4      	mov	ip, r4
 80029b6:	4463      	add	r3, ip
 80029b8:	4099      	lsls	r1, r3
 80029ba:	000b      	movs	r3, r1
 80029bc:	432b      	orrs	r3, r5
 80029be:	e7f2      	b.n	80029a6 <__aeabi_d2iz+0x3a>
 80029c0:	000003fe 	.word	0x000003fe
 80029c4:	0000041d 	.word	0x0000041d
 80029c8:	7fffffff 	.word	0x7fffffff
 80029cc:	00000433 	.word	0x00000433
 80029d0:	00000413 	.word	0x00000413
 80029d4:	fffffbed 	.word	0xfffffbed

080029d8 <__aeabi_i2d>:
 80029d8:	b570      	push	{r4, r5, r6, lr}
 80029da:	2800      	cmp	r0, #0
 80029dc:	d016      	beq.n	8002a0c <__aeabi_i2d+0x34>
 80029de:	17c3      	asrs	r3, r0, #31
 80029e0:	18c5      	adds	r5, r0, r3
 80029e2:	405d      	eors	r5, r3
 80029e4:	0fc4      	lsrs	r4, r0, #31
 80029e6:	0028      	movs	r0, r5
 80029e8:	f000 f84c 	bl	8002a84 <__clzsi2>
 80029ec:	4a11      	ldr	r2, [pc, #68]	; (8002a34 <__aeabi_i2d+0x5c>)
 80029ee:	1a12      	subs	r2, r2, r0
 80029f0:	280a      	cmp	r0, #10
 80029f2:	dc16      	bgt.n	8002a22 <__aeabi_i2d+0x4a>
 80029f4:	0003      	movs	r3, r0
 80029f6:	002e      	movs	r6, r5
 80029f8:	3315      	adds	r3, #21
 80029fa:	409e      	lsls	r6, r3
 80029fc:	230b      	movs	r3, #11
 80029fe:	1a18      	subs	r0, r3, r0
 8002a00:	40c5      	lsrs	r5, r0
 8002a02:	0552      	lsls	r2, r2, #21
 8002a04:	032d      	lsls	r5, r5, #12
 8002a06:	0b2d      	lsrs	r5, r5, #12
 8002a08:	0d53      	lsrs	r3, r2, #21
 8002a0a:	e003      	b.n	8002a14 <__aeabi_i2d+0x3c>
 8002a0c:	2400      	movs	r4, #0
 8002a0e:	2300      	movs	r3, #0
 8002a10:	2500      	movs	r5, #0
 8002a12:	2600      	movs	r6, #0
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	432b      	orrs	r3, r5
 8002a18:	07e4      	lsls	r4, r4, #31
 8002a1a:	4323      	orrs	r3, r4
 8002a1c:	0030      	movs	r0, r6
 8002a1e:	0019      	movs	r1, r3
 8002a20:	bd70      	pop	{r4, r5, r6, pc}
 8002a22:	380b      	subs	r0, #11
 8002a24:	4085      	lsls	r5, r0
 8002a26:	0552      	lsls	r2, r2, #21
 8002a28:	032d      	lsls	r5, r5, #12
 8002a2a:	2600      	movs	r6, #0
 8002a2c:	0b2d      	lsrs	r5, r5, #12
 8002a2e:	0d53      	lsrs	r3, r2, #21
 8002a30:	e7f0      	b.n	8002a14 <__aeabi_i2d+0x3c>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	0000041e 	.word	0x0000041e

08002a38 <__aeabi_ui2d>:
 8002a38:	b510      	push	{r4, lr}
 8002a3a:	1e04      	subs	r4, r0, #0
 8002a3c:	d010      	beq.n	8002a60 <__aeabi_ui2d+0x28>
 8002a3e:	f000 f821 	bl	8002a84 <__clzsi2>
 8002a42:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <__aeabi_ui2d+0x48>)
 8002a44:	1a1b      	subs	r3, r3, r0
 8002a46:	280a      	cmp	r0, #10
 8002a48:	dc11      	bgt.n	8002a6e <__aeabi_ui2d+0x36>
 8002a4a:	220b      	movs	r2, #11
 8002a4c:	0021      	movs	r1, r4
 8002a4e:	1a12      	subs	r2, r2, r0
 8002a50:	40d1      	lsrs	r1, r2
 8002a52:	3015      	adds	r0, #21
 8002a54:	030a      	lsls	r2, r1, #12
 8002a56:	055b      	lsls	r3, r3, #21
 8002a58:	4084      	lsls	r4, r0
 8002a5a:	0b12      	lsrs	r2, r2, #12
 8002a5c:	0d5b      	lsrs	r3, r3, #21
 8002a5e:	e001      	b.n	8002a64 <__aeabi_ui2d+0x2c>
 8002a60:	2300      	movs	r3, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	051b      	lsls	r3, r3, #20
 8002a66:	4313      	orrs	r3, r2
 8002a68:	0020      	movs	r0, r4
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	bd10      	pop	{r4, pc}
 8002a6e:	0022      	movs	r2, r4
 8002a70:	380b      	subs	r0, #11
 8002a72:	4082      	lsls	r2, r0
 8002a74:	055b      	lsls	r3, r3, #21
 8002a76:	0312      	lsls	r2, r2, #12
 8002a78:	2400      	movs	r4, #0
 8002a7a:	0b12      	lsrs	r2, r2, #12
 8002a7c:	0d5b      	lsrs	r3, r3, #21
 8002a7e:	e7f1      	b.n	8002a64 <__aeabi_ui2d+0x2c>
 8002a80:	0000041e 	.word	0x0000041e

08002a84 <__clzsi2>:
 8002a84:	211c      	movs	r1, #28
 8002a86:	2301      	movs	r3, #1
 8002a88:	041b      	lsls	r3, r3, #16
 8002a8a:	4298      	cmp	r0, r3
 8002a8c:	d301      	bcc.n	8002a92 <__clzsi2+0xe>
 8002a8e:	0c00      	lsrs	r0, r0, #16
 8002a90:	3910      	subs	r1, #16
 8002a92:	0a1b      	lsrs	r3, r3, #8
 8002a94:	4298      	cmp	r0, r3
 8002a96:	d301      	bcc.n	8002a9c <__clzsi2+0x18>
 8002a98:	0a00      	lsrs	r0, r0, #8
 8002a9a:	3908      	subs	r1, #8
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	4298      	cmp	r0, r3
 8002aa0:	d301      	bcc.n	8002aa6 <__clzsi2+0x22>
 8002aa2:	0900      	lsrs	r0, r0, #4
 8002aa4:	3904      	subs	r1, #4
 8002aa6:	a202      	add	r2, pc, #8	; (adr r2, 8002ab0 <__clzsi2+0x2c>)
 8002aa8:	5c10      	ldrb	r0, [r2, r0]
 8002aaa:	1840      	adds	r0, r0, r1
 8002aac:	4770      	bx	lr
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	02020304 	.word	0x02020304
 8002ab4:	01010101 	.word	0x01010101
	...

08002ac0 <__clzdi2>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	2900      	cmp	r1, #0
 8002ac4:	d103      	bne.n	8002ace <__clzdi2+0xe>
 8002ac6:	f7ff ffdd 	bl	8002a84 <__clzsi2>
 8002aca:	3020      	adds	r0, #32
 8002acc:	e002      	b.n	8002ad4 <__clzdi2+0x14>
 8002ace:	0008      	movs	r0, r1
 8002ad0:	f7ff ffd8 	bl	8002a84 <__clzsi2>
 8002ad4:	bd10      	pop	{r4, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)

08002ad8 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8002ad8:	b5b0      	push	{r4, r5, r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8002ae0:	230f      	movs	r3, #15
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]

    /* chip id read try count */
    uint8_t try_count = 5;
 8002ae8:	230e      	movs	r3, #14
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2205      	movs	r2, #5
 8002aee:	701a      	strb	r2, [r3, #0]
    uint8_t chip_id = 0;
 8002af0:	230d      	movs	r3, #13
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
    //rslt = null_ptr_check(dev);

    /* Proceed if null check is fine */
    //if (rslt == BME280_OK)
    //{
        while (try_count)
 8002af8:	e026      	b.n	8002b48 <bme280_init+0x70>
        {
            /* Read the chip-id of bme280 sensor */
        	BME280_SPI_Read(BME280_CHIP_ID_ADDR, &chip_id, 1);
 8002afa:	240d      	movs	r4, #13
 8002afc:	193b      	adds	r3, r7, r4
 8002afe:	2201      	movs	r2, #1
 8002b00:	0019      	movs	r1, r3
 8002b02:	20d0      	movs	r0, #208	; 0xd0
 8002b04:	f001 fc9e 	bl	8004444 <BME280_SPI_Read>
            //rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);

            /* Check for chip id validity */
            if (chip_id == BME280_CHIP_ID) // (rslt == BME280_OK) &&
 8002b08:	193b      	adds	r3, r7, r4
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b60      	cmp	r3, #96	; 0x60
 8002b0e:	d112      	bne.n	8002b36 <bme280_init+0x5e>

                /* Reset the sensor */
                //bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
                //HAL_Delay(2);
                //bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
                rslt = bme280_soft_reset(); //dev
 8002b10:	250f      	movs	r5, #15
 8002b12:	197c      	adds	r4, r7, r5
 8002b14:	f000 f94b 	bl	8002dae <bme280_soft_reset>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	7023      	strb	r3, [r4, #0]

                if (rslt == BME280_OK)
 8002b1c:	197b      	adds	r3, r7, r5
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	b25b      	sxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d116      	bne.n	8002b54 <bme280_init+0x7c>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8002b26:	197c      	adds	r4, r7, r5
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f000 fe2e 	bl	800378c <get_calib_data>
 8002b30:	0003      	movs	r3, r0
 8002b32:	7023      	strb	r3, [r4, #0]
                }

                break;
 8002b34:	e00e      	b.n	8002b54 <bme280_init+0x7c>
            }

            /* Wait for 1 ms */
            //dev->delay_us(1000, dev->intf_ptr);
            HAL_Delay(1);
 8002b36:	2001      	movs	r0, #1
 8002b38:	f002 f8b0 	bl	8004c9c <HAL_Delay>
            --try_count;
 8002b3c:	220e      	movs	r2, #14
 8002b3e:	18bb      	adds	r3, r7, r2
 8002b40:	18ba      	adds	r2, r7, r2
 8002b42:	7812      	ldrb	r2, [r2, #0]
 8002b44:	3a01      	subs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
        while (try_count)
 8002b48:	230e      	movs	r3, #14
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1d3      	bne.n	8002afa <bme280_init+0x22>
 8002b52:	e000      	b.n	8002b56 <bme280_init+0x7e>
                break;
 8002b54:	46c0      	nop			; (mov r8, r8)
        }

        /* Chip id check failed */
        if (!try_count)
 8002b56:	230e      	movs	r3, #14
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d103      	bne.n	8002b68 <bme280_init+0x90>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8002b60:	230f      	movs	r3, #15
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	22fe      	movs	r2, #254	; 0xfe
 8002b66:	701a      	strb	r2, [r3, #0]
        }
    //}

    return rslt;
 8002b68:	230f      	movs	r3, #15
 8002b6a:	18fb      	adds	r3, r7, r3
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	b25b      	sxtb	r3, r3
}
 8002b70:	0018      	movs	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b004      	add	sp, #16
 8002b76:	bdb0      	pop	{r4, r5, r7, pc}

08002b78 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
void bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08a      	sub	sp, #40	; 0x28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	1dfb      	adds	r3, r7, #7
 8002b84:	701a      	strb	r2, [r3, #0]
    //int8_t rslt = 0;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8002b86:	1dfb      	adds	r3, r7, #7
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b0a      	cmp	r3, #10
 8002b8c:	d902      	bls.n	8002b94 <bme280_set_regs+0x1c>
    {
        len = 10;
 8002b8e:	1dfb      	adds	r3, r7, #7
 8002b90:	220a      	movs	r2, #10
 8002b92:	701a      	strb	r2, [r3, #0]
    /* Check for arguments validity */
    //if ((reg_addr != NULL) && (reg_data != NULL)) // (rslt == BME280_OK) &&
    //{
    //    if (len != 0)
    //    {
            temp_buff[0] = reg_data[0];
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	781a      	ldrb	r2, [r3, #0]
 8002b98:	2310      	movs	r3, #16
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
//            if (dev->intf != BME280_I2C_INTF)
//            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8002b9e:	2325      	movs	r3, #37	; 0x25
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	e012      	b.n	8002bce <bme280_set_regs+0x56>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8002ba8:	2025      	movs	r0, #37	; 0x25
 8002baa:	183b      	adds	r3, r7, r0
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	18d3      	adds	r3, r2, r3
 8002bb2:	781a      	ldrb	r2, [r3, #0]
 8002bb4:	183b      	adds	r3, r7, r0
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	68f9      	ldr	r1, [r7, #12]
 8002bba:	18cb      	adds	r3, r1, r3
 8002bbc:	217f      	movs	r1, #127	; 0x7f
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8002bc4:	183b      	adds	r3, r7, r0
 8002bc6:	781a      	ldrb	r2, [r3, #0]
 8002bc8:	183b      	adds	r3, r7, r0
 8002bca:	3201      	adds	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	2325      	movs	r3, #37	; 0x25
 8002bd0:	18fa      	adds	r2, r7, r3
 8002bd2:	1dfb      	adds	r3, r7, #7
 8002bd4:	7812      	ldrb	r2, [r2, #0]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d3e5      	bcc.n	8002ba8 <bme280_set_regs+0x30>
                }
 //           }

            /* Burst write mode */
            if (len > 1)
 8002bdc:	1dfb      	adds	r3, r7, #7
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d911      	bls.n	8002c08 <bme280_set_regs+0x90>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8002be4:	1dfb      	adds	r3, r7, #7
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	2110      	movs	r1, #16
 8002bec:	1879      	adds	r1, r7, r1
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 fe06 	bl	8003800 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8002bf4:	1dfb      	adds	r3, r7, #7
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	18db      	adds	r3, r3, r3
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	2326      	movs	r3, #38	; 0x26
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	3a01      	subs	r2, #1
 8002c04:	801a      	strh	r2, [r3, #0]
 8002c06:	e004      	b.n	8002c12 <bme280_set_regs+0x9a>
            }
            else
            {
                temp_len = len;
 8002c08:	2326      	movs	r3, #38	; 0x26
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	1dfa      	adds	r2, r7, #7
 8002c0e:	7812      	ldrb	r2, [r2, #0]
 8002c10:	801a      	strh	r2, [r3, #0]
            }

            BME280_SPI_Write(reg_addr[0], temp_buff, temp_len);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	0018      	movs	r0, r3
 8002c18:	2326      	movs	r3, #38	; 0x26
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	881a      	ldrh	r2, [r3, #0]
 8002c1e:	2310      	movs	r3, #16
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	0019      	movs	r1, r3
 8002c24:	f001 fc42 	bl	80044ac <BME280_SPI_Write>
//    {
//        rslt = BME280_E_NULL_PTR;
//    }

    //return rslt;
}
 8002c28:	46c0      	nop			; (mov r8, r8)
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b00a      	add	sp, #40	; 0x28
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, struct bme280_dev *dev)
{
 8002c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	0002      	movs	r2, r0
 8002c38:	6039      	str	r1, [r7, #0]
 8002c3a:	1dfb      	adds	r3, r7, #7
 8002c3c:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0;
 8002c3e:	250f      	movs	r5, #15
 8002c40:	197b      	adds	r3, r7, r5
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
    //rslt = null_ptr_check(dev);

    /* Proceed if null check is fine */
    //if (rslt == BME280_OK)
    //{
        rslt = bme280_get_sensor_mode(&sensor_mode); //, dev
 8002c46:	197c      	adds	r4, r7, r5
 8002c48:	260e      	movs	r6, #14
 8002c4a:	19bb      	adds	r3, r7, r6
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f000 f889 	bl	8002d64 <bme280_get_sensor_mode>
 8002c52:	0003      	movs	r3, r0
 8002c54:	7023      	strb	r3, [r4, #0]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8002c56:	002a      	movs	r2, r5
 8002c58:	18bb      	adds	r3, r7, r2
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	b25b      	sxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10a      	bne.n	8002c78 <bme280_set_sensor_settings+0x48>
 8002c62:	19bb      	adds	r3, r7, r6
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d006      	beq.n	8002c78 <bme280_set_sensor_settings+0x48>
        {
            rslt = put_device_to_sleep(dev);
 8002c6a:	18bc      	adds	r4, r7, r2
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f000 fb5b 	bl	800332a <put_device_to_sleep>
 8002c74:	0003      	movs	r3, r0
 8002c76:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME280_OK)
 8002c78:	240f      	movs	r4, #15
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	b25b      	sxtb	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d12d      	bne.n	8002ce0 <bme280_set_sensor_settings+0xb0>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8002c84:	1dfb      	adds	r3, r7, #7
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	0019      	movs	r1, r3
 8002c8a:	2007      	movs	r0, #7
 8002c8c:	f000 fef3 	bl	8003a76 <are_settings_changed>
 8002c90:	1e03      	subs	r3, r0, #0
 8002c92:	d00b      	beq.n	8002cac <bme280_set_sensor_settings+0x7c>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	3328      	adds	r3, #40	; 0x28
 8002c98:	0019      	movs	r1, r3
 8002c9a:	193c      	adds	r4, r7, r4
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	1dfb      	adds	r3, r7, #7
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f000 f980 	bl	8002fa8 <set_osr_settings>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	7023      	strb	r3, [r4, #0]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8002cac:	240f      	movs	r4, #15
 8002cae:	193b      	adds	r3, r7, r4
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	b25b      	sxtb	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d113      	bne.n	8002ce0 <bme280_set_sensor_settings+0xb0>
 8002cb8:	1dfb      	adds	r3, r7, #7
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	0019      	movs	r1, r3
 8002cbe:	2018      	movs	r0, #24
 8002cc0:	f000 fed9 	bl	8003a76 <are_settings_changed>
 8002cc4:	1e03      	subs	r3, r0, #0
 8002cc6:	d00b      	beq.n	8002ce0 <bme280_set_sensor_settings+0xb0>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	3328      	adds	r3, #40	; 0x28
 8002ccc:	0019      	movs	r1, r3
 8002cce:	193c      	adds	r4, r7, r4
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	1dfb      	adds	r3, r7, #7
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f000 fa17 	bl	800310a <set_filter_standby_settings>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	7023      	strb	r3, [r4, #0]
            }
        }
    //}

    return rslt;
 8002ce0:	230f      	movs	r3, #15
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	b25b      	sxtb	r3, r3
}
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b005      	add	sp, #20
 8002cee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cf0 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8002cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	6039      	str	r1, [r7, #0]
 8002cfa:	1dfb      	adds	r3, r7, #7
 8002cfc:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0;
 8002cfe:	250f      	movs	r5, #15
 8002d00:	197b      	adds	r3, r7, r5
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
    /* Check for null pointer in the device structure*/
    //rslt = null_ptr_check(dev);

    //if (rslt == BME280_OK)
    //{
        rslt = bme280_get_sensor_mode(&last_set_mode); //, dev
 8002d06:	197c      	adds	r4, r7, r5
 8002d08:	260e      	movs	r6, #14
 8002d0a:	19bb      	adds	r3, r7, r6
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f000 f829 	bl	8002d64 <bme280_get_sensor_mode>
 8002d12:	0003      	movs	r3, r0
 8002d14:	7023      	strb	r3, [r4, #0]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8002d16:	002a      	movs	r2, r5
 8002d18:	18bb      	adds	r3, r7, r2
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	b25b      	sxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10a      	bne.n	8002d38 <bme280_set_sensor_mode+0x48>
 8002d22:	19bb      	adds	r3, r7, r6
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d006      	beq.n	8002d38 <bme280_set_sensor_mode+0x48>
        {
            rslt = put_device_to_sleep(dev);
 8002d2a:	18bc      	adds	r4, r7, r2
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 fafb 	bl	800332a <put_device_to_sleep>
 8002d34:	0003      	movs	r3, r0
 8002d36:	7023      	strb	r3, [r4, #0]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 8002d38:	220f      	movs	r2, #15
 8002d3a:	18bb      	adds	r3, r7, r2
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	b25b      	sxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d107      	bne.n	8002d54 <bme280_set_sensor_mode+0x64>
        {
            rslt = write_power_mode(sensor_mode); //, dev
 8002d44:	18bc      	adds	r4, r7, r2
 8002d46:	1dfb      	adds	r3, r7, #7
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 fab7 	bl	80032be <write_power_mode>
 8002d50:	0003      	movs	r3, r0
 8002d52:	7023      	strb	r3, [r4, #0]
        }
    //}

    return rslt;
 8002d54:	230f      	movs	r3, #15
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b25b      	sxtb	r3, r3
}
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b005      	add	sp, #20
 8002d62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d64 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode) //, struct bme280_dev *dev
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8002d6c:	230f      	movs	r3, #15
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    //rslt = null_ptr_check(dev);

    if (sensor_mode != NULL) // (rslt == BME280_OK) && (
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00d      	beq.n	8002d96 <bme280_get_sensor_mode+0x32>
    {
        /* Read the power mode register */
    	BME280_SPI_Read(BME280_PWR_CTRL_ADDR, sensor_mode, 1);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	0019      	movs	r1, r3
 8002d80:	20f4      	movs	r0, #244	; 0xf4
 8002d82:	f001 fb5f 	bl	8004444 <BME280_SPI_Read>
        //rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	e003      	b.n	8002d9e <bme280_get_sensor_mode+0x3a>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8002d96:	230f      	movs	r3, #15
 8002d98:	18fb      	adds	r3, r7, r3
 8002d9a:	22ff      	movs	r2, #255	; 0xff
 8002d9c:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002d9e:	230f      	movs	r3, #15
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	b25b      	sxtb	r3, r3
}
 8002da6:	0018      	movs	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b004      	add	sp, #16
 8002dac:	bd80      	pop	{r7, pc}

08002dae <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset() //struct bme280_dev *dev
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
    int8_t rslt = 0;
 8002db4:	1dfb      	adds	r3, r7, #7
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME280_RESET_ADDR;
 8002dba:	1d7b      	adds	r3, r7, #5
 8002dbc:	22e0      	movs	r2, #224	; 0xe0
 8002dbe:	701a      	strb	r2, [r3, #0]
    uint8_t status_reg = 0;
 8002dc0:	1d3b      	adds	r3, r7, #4
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	701a      	strb	r2, [r3, #0]
    uint8_t try_run = 5;
 8002dc6:	1dbb      	adds	r3, r7, #6
 8002dc8:	2205      	movs	r2, #5
 8002dca:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8002dcc:	1cfb      	adds	r3, r7, #3
 8002dce:	22b6      	movs	r2, #182	; 0xb6
 8002dd0:	701a      	strb	r2, [r3, #0]

    /* Proceed if null check is fine */
    //if (rslt == BME280_OK)
    //{
        /* Write the soft reset command in the sensor */
         bme280_set_regs(&reg_addr, &soft_rst_cmd, 1);
 8002dd2:	1cf9      	adds	r1, r7, #3
 8002dd4:	1d7b      	adds	r3, r7, #5
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f7ff fecd 	bl	8002b78 <bme280_set_regs>

        if (rslt == BME280_OK)
 8002dde:	1dfb      	adds	r3, r7, #7
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	b25b      	sxtb	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d11e      	bne.n	8002e26 <bme280_soft_reset+0x78>
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                //dev->delay_us(2000, dev->intf_ptr);
            	HAL_Delay(2);
 8002de8:	2002      	movs	r0, #2
 8002dea:	f001 ff57 	bl	8004c9c <HAL_Delay>
            	BME280_SPI_Read(BME280_STATUS_REG_ADDR, &status_reg, 1);
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	2201      	movs	r2, #1
 8002df2:	0019      	movs	r1, r3
 8002df4:	20f3      	movs	r0, #243	; 0xf3
 8002df6:	f001 fb25 	bl	8004444 <BME280_SPI_Read>
                //rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);

            } while ((try_run--) && (status_reg & BME280_STATUS_IM_UPDATE)); // (rslt == BME280_OK) &&
 8002dfa:	1dbb      	adds	r3, r7, #6
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	1dba      	adds	r2, r7, #6
 8002e00:	1e59      	subs	r1, r3, #1
 8002e02:	7011      	strb	r1, [r2, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <bme280_soft_reset+0x66>
 8002e08:	1d3b      	adds	r3, r7, #4
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	2301      	movs	r3, #1
 8002e10:	4013      	ands	r3, r2
 8002e12:	d1e9      	bne.n	8002de8 <bme280_soft_reset+0x3a>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	001a      	movs	r2, r3
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d002      	beq.n	8002e26 <bme280_soft_reset+0x78>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8002e20:	1dfb      	adds	r3, r7, #7
 8002e22:	22fa      	movs	r2, #250	; 0xfa
 8002e24:	701a      	strb	r2, [r3, #0]
            }
        }
    //}

    return rslt;
 8002e26:	1dfb      	adds	r3, r7, #7
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	b25b      	sxtb	r3, r3
}
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b002      	add	sp, #8
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8002e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e36:	b089      	sub	sp, #36	; 0x24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	230f      	movs	r3, #15
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	1c02      	adds	r2, r0, #0
 8002e44:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0;
 8002e46:	221f      	movs	r2, #31
 8002e48:	18bb      	adds	r3, r7, r2
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_HUMIDITY_CALIB_DATA_LEN] = { 0 }; //BME280_P_T_H_DATA_LEN
 8002e4e:	2418      	movs	r4, #24
 8002e50:	193b      	adds	r3, r7, r4
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	3304      	adds	r3, #4
 8002e58:	2203      	movs	r2, #3
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f005 fce2 	bl	8008826 <memset>
    struct bme280_uncomp_data uncomp_data = { 0 };
 8002e62:	2610      	movs	r6, #16
 8002e64:	19bb      	adds	r3, r7, r6
 8002e66:	0018      	movs	r0, r3
 8002e68:	2308      	movs	r3, #8
 8002e6a:	001a      	movs	r2, r3
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	f005 fcda 	bl	8008826 <memset>

    /* Check for null pointer in the device structure*/
    //rslt = null_ptr_check(dev);

    if (comp_data != NULL) // (rslt == BME280_OK) && (
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d019      	beq.n	8002eac <bme280_get_sensor_data+0x78>
    {
        /* Read the pressure and temperature data from the sensor */
    	BME280_SPI_Read(BME280_DATA_ADDR, reg_data, BME280_HUMIDITY_CALIB_DATA_LEN);
 8002e78:	193b      	adds	r3, r7, r4
 8002e7a:	2207      	movs	r2, #7
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	20f7      	movs	r0, #247	; 0xf7
 8002e80:	f001 fae0 	bl	8004444 <BME280_SPI_Read>
        //rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev); //BME280_P_T_H_DATA_LEN

        //if (rslt == BME280_OK)
        //{
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8002e84:	19ba      	adds	r2, r7, r6
 8002e86:	193b      	adds	r3, r7, r4
 8002e88:	0011      	movs	r1, r2
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f000 f81a 	bl	8002ec4 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8002e90:	687d      	ldr	r5, [r7, #4]
 8002e92:	221f      	movs	r2, #31
 8002e94:	18bc      	adds	r4, r7, r2
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	19b9      	adds	r1, r7, r6
 8002e9a:	230f      	movs	r3, #15
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	7818      	ldrb	r0, [r3, #0]
 8002ea0:	002b      	movs	r3, r5
 8002ea2:	f000 f83d 	bl	8002f20 <bme280_compensate_data>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	7023      	strb	r3, [r4, #0]
 8002eaa:	e003      	b.n	8002eb4 <bme280_get_sensor_data+0x80>
        //}
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8002eac:	231f      	movs	r3, #31
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	22ff      	movs	r2, #255	; 0xff
 8002eb2:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002eb4:	231f      	movs	r3, #31
 8002eb6:	18fb      	adds	r3, r7, r3
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	b25b      	sxtb	r3, r3
}
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b009      	add	sp, #36	; 0x24
 8002ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ec4 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
//    data_lsb = (uint32_t)reg_data[1] << 4;
//    data_xlsb = (uint32_t)reg_data[2] >> 4;
//    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3303      	adds	r3, #3
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	031b      	lsls	r3, r3, #12
 8002ed6:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3304      	adds	r3, #4
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3305      	adds	r3, #5
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3306      	adds	r3, #6
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3307      	adds	r3, #7
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	605a      	str	r2, [r3, #4]
}
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b006      	add	sp, #24
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	230f      	movs	r3, #15
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	1c02      	adds	r2, r0, #0
 8002f32:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_OK;
 8002f34:	2317      	movs	r3, #23
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d026      	beq.n	8002f90 <bme280_compensate_data+0x70>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d023      	beq.n	8002f90 <bme280_compensate_data+0x70>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d020      	beq.n	8002f90 <bme280_compensate_data+0x70>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	2300      	movs	r3, #0
 8002f54:	600a      	str	r2, [r1, #0]
 8002f56:	604b      	str	r3, [r1, #4]
        //comp_data->pressure = 0;
        comp_data->humidity = 0;
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	608a      	str	r2, [r1, #8]
 8002f60:	60cb      	str	r3, [r1, #12]

        /* If pressure or temperature component is selected */
        //if (sensor_comp & (BME280_TEMP | BME280_HUM)) // BME280_PRESS |
        //{
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	0011      	movs	r1, r2
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f000 fa3b 	bl	80033e4 <compensate_temperature>
 8002f6e:	0002      	movs	r2, r0
 8002f70:	000b      	movs	r3, r1
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	600a      	str	r2, [r1, #0]
 8002f76:	604b      	str	r3, [r1, #4]
//        }

        //if (sensor_comp & BME280_HUM)
        //{
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	0011      	movs	r1, r2
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f000 faf6 	bl	8003570 <compensate_humidity>
 8002f84:	0002      	movs	r2, r0
 8002f86:	000b      	movs	r3, r1
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	608a      	str	r2, [r1, #8]
 8002f8c:	60cb      	str	r3, [r1, #12]
 8002f8e:	e003      	b.n	8002f98 <bme280_compensate_data+0x78>
        //}
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8002f90:	2317      	movs	r3, #23
 8002f92:	18fb      	adds	r3, r7, r3
 8002f94:	22ff      	movs	r2, #255	; 0xff
 8002f96:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002f98:	2317      	movs	r3, #23
 8002f9a:	18fb      	adds	r3, r7, r3
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	b25b      	sxtb	r3, r3
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b006      	add	sp, #24
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	210f      	movs	r1, #15
 8002fb4:	187b      	adds	r3, r7, r1
 8002fb6:	1c02      	adds	r2, r0, #0
 8002fb8:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8002fba:	2017      	movs	r0, #23
 8002fbc:	183b      	adds	r3, r7, r0
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	701a      	strb	r2, [r3, #0]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8002fc2:	187b      	adds	r3, r7, r1
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d008      	beq.n	8002fde <set_osr_settings+0x36>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8002fcc:	183c      	adds	r4, r7, r0
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	0011      	movs	r1, r2
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f000 f81b 	bl	8003010 <set_osr_humidity_settings>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	7023      	strb	r3, [r4, #0]
    }

    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8002fde:	200f      	movs	r0, #15
 8002fe0:	183b      	adds	r3, r7, r0
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d00a      	beq.n	8003000 <set_osr_settings+0x58>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8002fea:	2317      	movs	r3, #23
 8002fec:	18fc      	adds	r4, r7, r3
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	183b      	adds	r3, r7, r0
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f000 f845 	bl	8003086 <set_osr_press_temp_settings>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8003000:	2317      	movs	r3, #23
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	b25b      	sxtb	r3, r3
}
 8003008:	0018      	movs	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	b007      	add	sp, #28
 800300e:	bd90      	pop	{r4, r7, pc}

08003010 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8003010:	b5b0      	push	{r4, r5, r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800301a:	250f      	movs	r5, #15
 800301c:	197b      	adds	r3, r7, r5
 800301e:	2200      	movs	r2, #0
 8003020:	701a      	strb	r2, [r3, #0]
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8003022:	200c      	movs	r0, #12
 8003024:	183b      	adds	r3, r7, r0
 8003026:	22f2      	movs	r2, #242	; 0xf2
 8003028:	701a      	strb	r2, [r3, #0]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	789b      	ldrb	r3, [r3, #2]
 800302e:	2207      	movs	r2, #7
 8003030:	4013      	ands	r3, r2
 8003032:	b2da      	uxtb	r2, r3
 8003034:	210e      	movs	r1, #14
 8003036:	187b      	adds	r3, r7, r1
 8003038:	701a      	strb	r2, [r3, #0]

    /* Write the humidity control value in the register */
     bme280_set_regs(&reg_addr, &ctrl_hum, 1);
 800303a:	1879      	adds	r1, r7, r1
 800303c:	0004      	movs	r4, r0
 800303e:	193b      	adds	r3, r7, r4
 8003040:	2201      	movs	r2, #1
 8003042:	0018      	movs	r0, r3
 8003044:	f7ff fd98 	bl	8002b78 <bme280_set_regs>

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 8003048:	197b      	adds	r3, r7, r5
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	b25b      	sxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d111      	bne.n	8003076 <set_osr_humidity_settings+0x66>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8003052:	193b      	adds	r3, r7, r4
 8003054:	22f4      	movs	r2, #244	; 0xf4
 8003056:	701a      	strb	r2, [r3, #0]
        BME280_SPI_Read(reg_addr, &ctrl_meas, 1);
 8003058:	193b      	adds	r3, r7, r4
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	0018      	movs	r0, r3
 800305e:	250d      	movs	r5, #13
 8003060:	197b      	adds	r3, r7, r5
 8003062:	2201      	movs	r2, #1
 8003064:	0019      	movs	r1, r3
 8003066:	f001 f9ed 	bl	8004444 <BME280_SPI_Read>
        //rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);

        //if (rslt == BME280_OK)
        //{
             bme280_set_regs(&reg_addr, &ctrl_meas, 1);
 800306a:	1979      	adds	r1, r7, r5
 800306c:	193b      	adds	r3, r7, r4
 800306e:	2201      	movs	r2, #1
 8003070:	0018      	movs	r0, r3
 8003072:	f7ff fd81 	bl	8002b78 <bme280_set_regs>
        //}
    }

    return rslt;
 8003076:	230f      	movs	r3, #15
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	b25b      	sxtb	r3, r3
}
 800307e:	0018      	movs	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	b004      	add	sp, #16
 8003084:	bdb0      	pop	{r4, r5, r7, pc}

08003086 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8003086:	b5b0      	push	{r4, r5, r7, lr}
 8003088:	b086      	sub	sp, #24
 800308a:	af00      	add	r7, sp, #0
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	240f      	movs	r4, #15
 8003092:	193b      	adds	r3, r7, r4
 8003094:	1c02      	adds	r2, r0, #0
 8003096:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0;
 8003098:	2317      	movs	r3, #23
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80030a0:	2116      	movs	r1, #22
 80030a2:	187b      	adds	r3, r7, r1
 80030a4:	22f4      	movs	r2, #244	; 0xf4
 80030a6:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    BME280_SPI_Read(reg_addr, &reg_data, 1);
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	0018      	movs	r0, r3
 80030ae:	2515      	movs	r5, #21
 80030b0:	197b      	adds	r3, r7, r5
 80030b2:	2201      	movs	r2, #1
 80030b4:	0019      	movs	r1, r3
 80030b6:	f001 f9c5 	bl	8004444 <BME280_SPI_Read>
    //rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);

    //if (rslt == BME280_OK)
    //{
        if (desired_settings & BME280_OSR_PRESS_SEL)
 80030ba:	193b      	adds	r3, r7, r4
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2201      	movs	r2, #1
 80030c0:	4013      	ands	r3, r2
 80030c2:	d005      	beq.n	80030d0 <set_osr_press_temp_settings+0x4a>
        {
            fill_osr_press_settings(&reg_data, settings);
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	197b      	adds	r3, r7, r5
 80030c8:	0011      	movs	r1, r2
 80030ca:	0018      	movs	r0, r3
 80030cc:	f000 f892 	bl	80031f4 <fill_osr_press_settings>
        }

        if (desired_settings & BME280_OSR_TEMP_SEL)
 80030d0:	230f      	movs	r3, #15
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2202      	movs	r2, #2
 80030d8:	4013      	ands	r3, r2
 80030da:	d006      	beq.n	80030ea <set_osr_press_temp_settings+0x64>
        {
            fill_osr_temp_settings(&reg_data, settings);
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	2315      	movs	r3, #21
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	0011      	movs	r1, r2
 80030e4:	0018      	movs	r0, r3
 80030e6:	f000 f8a0 	bl	800322a <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
         bme280_set_regs(&reg_addr, &reg_data, 1);
 80030ea:	2315      	movs	r3, #21
 80030ec:	18f9      	adds	r1, r7, r3
 80030ee:	2316      	movs	r3, #22
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	2201      	movs	r2, #1
 80030f4:	0018      	movs	r0, r3
 80030f6:	f7ff fd3f 	bl	8002b78 <bme280_set_regs>
    //}

    return rslt;
 80030fa:	2317      	movs	r3, #23
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	b25b      	sxtb	r3, r3
}
 8003102:	0018      	movs	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	b006      	add	sp, #24
 8003108:	bdb0      	pop	{r4, r5, r7, pc}

0800310a <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 800310a:	b5b0      	push	{r4, r5, r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	240f      	movs	r4, #15
 8003116:	193b      	adds	r3, r7, r4
 8003118:	1c02      	adds	r2, r0, #0
 800311a:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0;
 800311c:	2317      	movs	r3, #23
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8003124:	2116      	movs	r1, #22
 8003126:	187b      	adds	r3, r7, r1
 8003128:	22f5      	movs	r2, #245	; 0xf5
 800312a:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    BME280_SPI_Read(reg_addr, &reg_data, 1);
 800312c:	187b      	adds	r3, r7, r1
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	0018      	movs	r0, r3
 8003132:	2515      	movs	r5, #21
 8003134:	197b      	adds	r3, r7, r5
 8003136:	2201      	movs	r2, #1
 8003138:	0019      	movs	r1, r3
 800313a:	f001 f983 	bl	8004444 <BME280_SPI_Read>
    //rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);

    //if (rslt == BME280_OK)
    //{
        if (desired_settings & BME280_FILTER_SEL)
 800313e:	193b      	adds	r3, r7, r4
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2208      	movs	r2, #8
 8003144:	4013      	ands	r3, r2
 8003146:	d005      	beq.n	8003154 <set_filter_standby_settings+0x4a>
        {
            fill_filter_settings(&reg_data, settings);
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	197b      	adds	r3, r7, r5
 800314c:	0011      	movs	r1, r2
 800314e:	0018      	movs	r0, r3
 8003150:	f000 f81d 	bl	800318e <fill_filter_settings>
        }

        if (desired_settings & BME280_STANDBY_SEL)
 8003154:	230f      	movs	r3, #15
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2210      	movs	r2, #16
 800315c:	4013      	ands	r3, r2
 800315e:	d006      	beq.n	800316e <set_filter_standby_settings+0x64>
        {
            fill_standby_settings(&reg_data, settings);
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	2315      	movs	r3, #21
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	0011      	movs	r1, r2
 8003168:	0018      	movs	r0, r3
 800316a:	f000 f82b 	bl	80031c4 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
         bme280_set_regs(&reg_addr, &reg_data, 1);
 800316e:	2315      	movs	r3, #21
 8003170:	18f9      	adds	r1, r7, r3
 8003172:	2316      	movs	r3, #22
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	2201      	movs	r2, #1
 8003178:	0018      	movs	r0, r3
 800317a:	f7ff fcfd 	bl	8002b78 <bme280_set_regs>
    //}

    return rslt;
 800317e:	2317      	movs	r3, #23
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	b25b      	sxtb	r3, r3
}
 8003186:	0018      	movs	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	b006      	add	sp, #24
 800318c:	bdb0      	pop	{r4, r5, r7, pc}

0800318e <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	b25b      	sxtb	r3, r3
 800319e:	221c      	movs	r2, #28
 80031a0:	4393      	bics	r3, r2
 80031a2:	b25a      	sxtb	r2, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	78db      	ldrb	r3, [r3, #3]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	b25b      	sxtb	r3, r3
 80031ac:	211c      	movs	r1, #28
 80031ae:	400b      	ands	r3, r1
 80031b0:	b25b      	sxtb	r3, r3
 80031b2:	4313      	orrs	r3, r2
 80031b4:	b25b      	sxtb	r3, r3
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	701a      	strb	r2, [r3, #0]
}
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	b002      	add	sp, #8
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	b25b      	sxtb	r3, r3
 80031d4:	221f      	movs	r2, #31
 80031d6:	4013      	ands	r3, r2
 80031d8:	b25a      	sxtb	r2, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	791b      	ldrb	r3, [r3, #4]
 80031de:	015b      	lsls	r3, r3, #5
 80031e0:	b25b      	sxtb	r3, r3
 80031e2:	4313      	orrs	r3, r2
 80031e4:	b25b      	sxtb	r3, r3
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	701a      	strb	r2, [r3, #0]
}
 80031ec:	46c0      	nop			; (mov r8, r8)
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b002      	add	sp, #8
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	b25b      	sxtb	r3, r3
 8003204:	221c      	movs	r2, #28
 8003206:	4393      	bics	r3, r2
 8003208:	b25a      	sxtb	r2, r3
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	b25b      	sxtb	r3, r3
 8003212:	211c      	movs	r1, #28
 8003214:	400b      	ands	r3, r1
 8003216:	b25b      	sxtb	r3, r3
 8003218:	4313      	orrs	r3, r2
 800321a:	b25b      	sxtb	r3, r3
 800321c:	b2da      	uxtb	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	701a      	strb	r2, [r3, #0]
}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	46bd      	mov	sp, r7
 8003226:	b002      	add	sp, #8
 8003228:	bd80      	pop	{r7, pc}

0800322a <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	b25b      	sxtb	r3, r3
 800323a:	221f      	movs	r2, #31
 800323c:	4013      	ands	r3, r2
 800323e:	b25a      	sxtb	r2, r3
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	785b      	ldrb	r3, [r3, #1]
 8003244:	015b      	lsls	r3, r3, #5
 8003246:	b25b      	sxtb	r3, r3
 8003248:	4313      	orrs	r3, r2
 800324a:	b25b      	sxtb	r3, r3
 800324c:	b2da      	uxtb	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	701a      	strb	r2, [r3, #0]
}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	46bd      	mov	sp, r7
 8003256:	b002      	add	sp, #8
 8003258:	bd80      	pop	{r7, pc}

0800325a <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2207      	movs	r2, #7
 800326a:	4013      	ands	r3, r2
 800326c:	b2da      	uxtb	r2, r3
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3302      	adds	r3, #2
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	109b      	asrs	r3, r3, #2
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2207      	movs	r2, #7
 800327e:	4013      	ands	r3, r2
 8003280:	b2da      	uxtb	r2, r3
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3302      	adds	r3, #2
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	095b      	lsrs	r3, r3, #5
 800328e:	b2da      	uxtb	r2, r3
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3303      	adds	r3, #3
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	109b      	asrs	r3, r3, #2
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2207      	movs	r2, #7
 80032a0:	4013      	ands	r3, r2
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3303      	adds	r3, #3
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	711a      	strb	r2, [r3, #4]
}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b002      	add	sp, #8
 80032bc:	bd80      	pop	{r7, pc}

080032be <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode) //, struct bme280_dev *dev
{
 80032be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032c0:	b085      	sub	sp, #20
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	0002      	movs	r2, r0
 80032c6:	1dfb      	adds	r3, r7, #7
 80032c8:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0;
 80032ca:	260f      	movs	r6, #15
 80032cc:	19bb      	adds	r3, r7, r6
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80032d2:	250e      	movs	r5, #14
 80032d4:	197b      	adds	r3, r7, r5
 80032d6:	22f4      	movs	r2, #244	; 0xf4
 80032d8:	701a      	strb	r2, [r3, #0]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    BME280_SPI_Read(reg_addr, &sensor_mode_reg_val, 1);
 80032da:	197b      	adds	r3, r7, r5
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	0018      	movs	r0, r3
 80032e0:	240d      	movs	r4, #13
 80032e2:	193b      	adds	r3, r7, r4
 80032e4:	2201      	movs	r2, #1
 80032e6:	0019      	movs	r1, r3
 80032e8:	f001 f8ac 	bl	8004444 <BME280_SPI_Read>
    //rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);

    /* Set the power mode */
    //if (rslt == BME280_OK)
    //{
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80032ec:	0020      	movs	r0, r4
 80032ee:	183b      	adds	r3, r7, r0
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	b25b      	sxtb	r3, r3
 80032f4:	2203      	movs	r2, #3
 80032f6:	4393      	bics	r3, r2
 80032f8:	b25a      	sxtb	r2, r3
 80032fa:	1dfb      	adds	r3, r7, #7
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	b25b      	sxtb	r3, r3
 8003300:	2103      	movs	r1, #3
 8003302:	400b      	ands	r3, r1
 8003304:	b25b      	sxtb	r3, r3
 8003306:	4313      	orrs	r3, r2
 8003308:	b25b      	sxtb	r3, r3
 800330a:	b2da      	uxtb	r2, r3
 800330c:	183b      	adds	r3, r7, r0
 800330e:	701a      	strb	r2, [r3, #0]

        /* Write the power mode in the register */
         bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1);
 8003310:	1839      	adds	r1, r7, r0
 8003312:	197b      	adds	r3, r7, r5
 8003314:	2201      	movs	r2, #1
 8003316:	0018      	movs	r0, r3
 8003318:	f7ff fc2e 	bl	8002b78 <bme280_set_regs>
    //}

    return rslt;
 800331c:	19bb      	adds	r3, r7, r6
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	b25b      	sxtb	r3, r3
}
 8003322:	0018      	movs	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	b005      	add	sp, #20
 8003328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800332a <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 800332a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800332c:	b087      	sub	sp, #28
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8003332:	2417      	movs	r4, #23
 8003334:	193b      	adds	r3, r7, r4
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data[4];
    struct bme280_settings settings;

    BME280_SPI_Read(BME280_CTRL_HUM_ADDR, reg_data, 4);
 800333a:	2510      	movs	r5, #16
 800333c:	197b      	adds	r3, r7, r5
 800333e:	2204      	movs	r2, #4
 8003340:	0019      	movs	r1, r3
 8003342:	20f2      	movs	r0, #242	; 0xf2
 8003344:	f001 f87e 	bl	8004444 <BME280_SPI_Read>
    //rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);

    //if (rslt == BME280_OK)
    //{
        parse_device_settings(reg_data, &settings);
 8003348:	2608      	movs	r6, #8
 800334a:	19ba      	adds	r2, r7, r6
 800334c:	197b      	adds	r3, r7, r5
 800334e:	0011      	movs	r1, r2
 8003350:	0018      	movs	r0, r3
 8003352:	f7ff ff82 	bl	800325a <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8003356:	0025      	movs	r5, r4
 8003358:	193c      	adds	r4, r7, r4
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	0018      	movs	r0, r3
 800335e:	f7ff fd26 	bl	8002dae <bme280_soft_reset>
 8003362:	0003      	movs	r3, r0
 8003364:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8003366:	197b      	adds	r3, r7, r5
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	b25b      	sxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d108      	bne.n	8003382 <put_device_to_sleep+0x58>
        {
            rslt = reload_device_settings(&settings, dev);
 8003370:	197c      	adds	r4, r7, r5
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	19bb      	adds	r3, r7, r6
 8003376:	0011      	movs	r1, r2
 8003378:	0018      	movs	r0, r3
 800337a:	f000 f80a 	bl	8003392 <reload_device_settings>
 800337e:	0003      	movs	r3, r0
 8003380:	7023      	strb	r3, [r4, #0]
        }
    //}

    return rslt;
 8003382:	2317      	movs	r3, #23
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	b25b      	sxtb	r3, r3
}
 800338a:	0018      	movs	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	b007      	add	sp, #28
 8003390:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003392 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8003392:	b5b0      	push	{r4, r5, r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800339c:	250f      	movs	r5, #15
 800339e:	197b      	adds	r3, r7, r5
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80033a4:	197c      	adds	r4, r7, r5
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	0019      	movs	r1, r3
 80033ac:	201f      	movs	r0, #31
 80033ae:	f7ff fdfb 	bl	8002fa8 <set_osr_settings>
 80033b2:	0003      	movs	r3, r0
 80033b4:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 80033b6:	197b      	adds	r3, r7, r5
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	b25b      	sxtb	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d108      	bne.n	80033d2 <reload_device_settings+0x40>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80033c0:	197c      	adds	r4, r7, r5
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	0019      	movs	r1, r3
 80033c8:	201f      	movs	r0, #31
 80033ca:	f7ff fe9e 	bl	800310a <set_filter_standby_settings>
 80033ce:	0003      	movs	r3, r0
 80033d0:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80033d2:	230f      	movs	r3, #15
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	b25b      	sxtb	r3, r3
}
 80033da:	0018      	movs	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	b004      	add	sp, #16
 80033e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080033e4 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 80033e4:	b5b0      	push	{r4, r5, r7, lr}
 80033e6:	b08c      	sub	sp, #48	; 0x30
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 80033ee:	2200      	movs	r2, #0
 80033f0:	4b59      	ldr	r3, [pc, #356]	; (8003558 <compensate_temperature+0x174>)
 80033f2:	623a      	str	r2, [r7, #32]
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
    double temperature_max = 85;
 80033f6:	2200      	movs	r2, #0
 80033f8:	4b58      	ldr	r3, [pc, #352]	; (800355c <compensate_temperature+0x178>)
 80033fa:	61ba      	str	r2, [r7, #24]
 80033fc:	61fb      	str	r3, [r7, #28]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	0018      	movs	r0, r3
 8003404:	f7ff fb18 	bl	8002a38 <__aeabi_ui2d>
 8003408:	2200      	movs	r2, #0
 800340a:	4b55      	ldr	r3, [pc, #340]	; (8003560 <compensate_temperature+0x17c>)
 800340c:	f7fe f890 	bl	8001530 <__aeabi_ddiv>
 8003410:	0002      	movs	r2, r0
 8003412:	000b      	movs	r3, r1
 8003414:	0014      	movs	r4, r2
 8003416:	001d      	movs	r5, r3
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	0018      	movs	r0, r3
 800341e:	f7ff fb0b 	bl	8002a38 <__aeabi_ui2d>
 8003422:	2200      	movs	r2, #0
 8003424:	4b4f      	ldr	r3, [pc, #316]	; (8003564 <compensate_temperature+0x180>)
 8003426:	f7fe f883 	bl	8001530 <__aeabi_ddiv>
 800342a:	0002      	movs	r2, r0
 800342c:	000b      	movs	r3, r1
 800342e:	0020      	movs	r0, r4
 8003430:	0029      	movs	r1, r5
 8003432:	f7fe feeb 	bl	800220c <__aeabi_dsub>
 8003436:	0002      	movs	r2, r0
 8003438:	000b      	movs	r3, r1
 800343a:	613a      	str	r2, [r7, #16]
 800343c:	617b      	str	r3, [r7, #20]
    var1 = var1 * ((double)calib_data->dig_t2);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2202      	movs	r2, #2
 8003442:	5e9b      	ldrsh	r3, [r3, r2]
 8003444:	0018      	movs	r0, r3
 8003446:	f7ff fac7 	bl	80029d8 <__aeabi_i2d>
 800344a:	0002      	movs	r2, r0
 800344c:	000b      	movs	r3, r1
 800344e:	6938      	ldr	r0, [r7, #16]
 8003450:	6979      	ldr	r1, [r7, #20]
 8003452:	f7fe fc6f 	bl	8001d34 <__aeabi_dmul>
 8003456:	0002      	movs	r2, r0
 8003458:	000b      	movs	r3, r1
 800345a:	613a      	str	r2, [r7, #16]
 800345c:	617b      	str	r3, [r7, #20]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	0018      	movs	r0, r3
 8003464:	f7ff fae8 	bl	8002a38 <__aeabi_ui2d>
 8003468:	2200      	movs	r2, #0
 800346a:	2382      	movs	r3, #130	; 0x82
 800346c:	05db      	lsls	r3, r3, #23
 800346e:	f7fe f85f 	bl	8001530 <__aeabi_ddiv>
 8003472:	0002      	movs	r2, r0
 8003474:	000b      	movs	r3, r1
 8003476:	0014      	movs	r4, r2
 8003478:	001d      	movs	r5, r3
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	0018      	movs	r0, r3
 8003480:	f7ff fada 	bl	8002a38 <__aeabi_ui2d>
 8003484:	2200      	movs	r2, #0
 8003486:	4b38      	ldr	r3, [pc, #224]	; (8003568 <compensate_temperature+0x184>)
 8003488:	f7fe f852 	bl	8001530 <__aeabi_ddiv>
 800348c:	0002      	movs	r2, r0
 800348e:	000b      	movs	r3, r1
 8003490:	0020      	movs	r0, r4
 8003492:	0029      	movs	r1, r5
 8003494:	f7fe feba 	bl	800220c <__aeabi_dsub>
 8003498:	0002      	movs	r2, r0
 800349a:	000b      	movs	r3, r1
 800349c:	60ba      	str	r2, [r7, #8]
 800349e:	60fb      	str	r3, [r7, #12]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	68b8      	ldr	r0, [r7, #8]
 80034a6:	68f9      	ldr	r1, [r7, #12]
 80034a8:	f7fe fc44 	bl	8001d34 <__aeabi_dmul>
 80034ac:	0002      	movs	r2, r0
 80034ae:	000b      	movs	r3, r1
 80034b0:	0014      	movs	r4, r2
 80034b2:	001d      	movs	r5, r3
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2204      	movs	r2, #4
 80034b8:	5e9b      	ldrsh	r3, [r3, r2]
 80034ba:	0018      	movs	r0, r3
 80034bc:	f7ff fa8c 	bl	80029d8 <__aeabi_i2d>
 80034c0:	0002      	movs	r2, r0
 80034c2:	000b      	movs	r3, r1
 80034c4:	0020      	movs	r0, r4
 80034c6:	0029      	movs	r1, r5
 80034c8:	f7fe fc34 	bl	8001d34 <__aeabi_dmul>
 80034cc:	0002      	movs	r2, r0
 80034ce:	000b      	movs	r3, r1
 80034d0:	60ba      	str	r2, [r7, #8]
 80034d2:	60fb      	str	r3, [r7, #12]
    calib_data->t_fine = (int32_t)(var1 + var2);
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6938      	ldr	r0, [r7, #16]
 80034da:	6979      	ldr	r1, [r7, #20]
 80034dc:	f7fd fcec 	bl	8000eb8 <__aeabi_dadd>
 80034e0:	0002      	movs	r2, r0
 80034e2:	000b      	movs	r3, r1
 80034e4:	0010      	movs	r0, r2
 80034e6:	0019      	movs	r1, r3
 80034e8:	f7ff fa40 	bl	800296c <__aeabi_d2iz>
 80034ec:	0002      	movs	r2, r0
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6938      	ldr	r0, [r7, #16]
 80034f8:	6979      	ldr	r1, [r7, #20]
 80034fa:	f7fd fcdd 	bl	8000eb8 <__aeabi_dadd>
 80034fe:	0002      	movs	r2, r0
 8003500:	000b      	movs	r3, r1
 8003502:	0010      	movs	r0, r2
 8003504:	0019      	movs	r1, r3
 8003506:	2200      	movs	r2, #0
 8003508:	4b18      	ldr	r3, [pc, #96]	; (800356c <compensate_temperature+0x188>)
 800350a:	f7fe f811 	bl	8001530 <__aeabi_ddiv>
 800350e:	0002      	movs	r2, r0
 8003510:	000b      	movs	r3, r1
 8003512:	62ba      	str	r2, [r7, #40]	; 0x28
 8003514:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (temperature < temperature_min)
 8003516:	6a3a      	ldr	r2, [r7, #32]
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800351c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800351e:	f7fc ff9b 	bl	8000458 <__aeabi_dcmplt>
 8003522:	1e03      	subs	r3, r0, #0
 8003524:	d004      	beq.n	8003530 <compensate_temperature+0x14c>
    {
        temperature = temperature_min;
 8003526:	6a3a      	ldr	r2, [r7, #32]
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	62ba      	str	r2, [r7, #40]	; 0x28
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352e:	e00b      	b.n	8003548 <compensate_temperature+0x164>
    }
    else if (temperature > temperature_max)
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003536:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003538:	f7fc ffa2 	bl	8000480 <__aeabi_dcmpgt>
 800353c:	1e03      	subs	r3, r0, #0
 800353e:	d003      	beq.n	8003548 <compensate_temperature+0x164>
    {
        temperature = temperature_max;
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	62ba      	str	r2, [r7, #40]	; 0x28
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    return temperature;
 8003548:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800354c:	0010      	movs	r0, r2
 800354e:	0019      	movs	r1, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	b00c      	add	sp, #48	; 0x30
 8003554:	bdb0      	pop	{r4, r5, r7, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	c0440000 	.word	0xc0440000
 800355c:	40554000 	.word	0x40554000
 8003560:	40d00000 	.word	0x40d00000
 8003564:	40900000 	.word	0x40900000
 8003568:	40c00000 	.word	0x40c00000
 800356c:	40b40000 	.word	0x40b40000

08003570 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8003570:	b5b0      	push	{r4, r5, r7, lr}
 8003572:	b094      	sub	sp, #80	; 0x50
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 800357a:	2200      	movs	r2, #0
 800357c:	2300      	movs	r3, #0
 800357e:	643a      	str	r2, [r7, #64]	; 0x40
 8003580:	647b      	str	r3, [r7, #68]	; 0x44
    double humidity_max = 100.0;
 8003582:	2200      	movs	r2, #0
 8003584:	4b79      	ldr	r3, [pc, #484]	; (800376c <compensate_humidity+0x1fc>)
 8003586:	63ba      	str	r2, [r7, #56]	; 0x38
 8003588:	63fb      	str	r3, [r7, #60]	; 0x3c
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	0018      	movs	r0, r3
 8003590:	f7ff fa22 	bl	80029d8 <__aeabi_i2d>
 8003594:	2200      	movs	r2, #0
 8003596:	4b76      	ldr	r3, [pc, #472]	; (8003770 <compensate_humidity+0x200>)
 8003598:	f7fe fe38 	bl	800220c <__aeabi_dsub>
 800359c:	0002      	movs	r2, r0
 800359e:	000b      	movs	r3, r1
 80035a0:	633a      	str	r2, [r7, #48]	; 0x30
 80035a2:	637b      	str	r3, [r7, #52]	; 0x34
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	221e      	movs	r2, #30
 80035a8:	5e9b      	ldrsh	r3, [r3, r2]
 80035aa:	0018      	movs	r0, r3
 80035ac:	f7ff fa14 	bl	80029d8 <__aeabi_i2d>
 80035b0:	2200      	movs	r2, #0
 80035b2:	4b70      	ldr	r3, [pc, #448]	; (8003774 <compensate_humidity+0x204>)
 80035b4:	f7fe fbbe 	bl	8001d34 <__aeabi_dmul>
 80035b8:	0002      	movs	r2, r0
 80035ba:	000b      	movs	r3, r1
 80035bc:	0014      	movs	r4, r2
 80035be:	001d      	movs	r5, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2220      	movs	r2, #32
 80035c4:	5e9b      	ldrsh	r3, [r3, r2]
 80035c6:	0018      	movs	r0, r3
 80035c8:	f7ff fa06 	bl	80029d8 <__aeabi_i2d>
 80035cc:	2200      	movs	r2, #0
 80035ce:	4b6a      	ldr	r3, [pc, #424]	; (8003778 <compensate_humidity+0x208>)
 80035d0:	f7fd ffae 	bl	8001530 <__aeabi_ddiv>
 80035d4:	0002      	movs	r2, r0
 80035d6:	000b      	movs	r3, r1
 80035d8:	0010      	movs	r0, r2
 80035da:	0019      	movs	r1, r3
 80035dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e0:	f7fe fba8 	bl	8001d34 <__aeabi_dmul>
 80035e4:	0002      	movs	r2, r0
 80035e6:	000b      	movs	r3, r1
 80035e8:	0020      	movs	r0, r4
 80035ea:	0029      	movs	r1, r5
 80035ec:	f7fd fc64 	bl	8000eb8 <__aeabi_dadd>
 80035f0:	0002      	movs	r2, r0
 80035f2:	000b      	movs	r3, r1
 80035f4:	62ba      	str	r2, [r7, #40]	; 0x28
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    var3 = uncomp_data->humidity - var2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	0018      	movs	r0, r3
 80035fe:	f7ff fa1b 	bl	8002a38 <__aeabi_ui2d>
 8003602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003606:	f7fe fe01 	bl	800220c <__aeabi_dsub>
 800360a:	0002      	movs	r2, r0
 800360c:	000b      	movs	r3, r1
 800360e:	623a      	str	r2, [r7, #32]
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	221a      	movs	r2, #26
 8003616:	5e9b      	ldrsh	r3, [r3, r2]
 8003618:	0018      	movs	r0, r3
 800361a:	f7ff f9dd 	bl	80029d8 <__aeabi_i2d>
 800361e:	2200      	movs	r2, #0
 8003620:	4b56      	ldr	r3, [pc, #344]	; (800377c <compensate_humidity+0x20c>)
 8003622:	f7fd ff85 	bl	8001530 <__aeabi_ddiv>
 8003626:	0002      	movs	r2, r0
 8003628:	000b      	movs	r3, r1
 800362a:	61ba      	str	r2, [r7, #24]
 800362c:	61fb      	str	r3, [r7, #28]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	7f1b      	ldrb	r3, [r3, #28]
 8003632:	0018      	movs	r0, r3
 8003634:	f7ff fa00 	bl	8002a38 <__aeabi_ui2d>
 8003638:	2200      	movs	r2, #0
 800363a:	4b51      	ldr	r3, [pc, #324]	; (8003780 <compensate_humidity+0x210>)
 800363c:	f7fd ff78 	bl	8001530 <__aeabi_ddiv>
 8003640:	0002      	movs	r2, r0
 8003642:	000b      	movs	r3, r1
 8003644:	0010      	movs	r0, r2
 8003646:	0019      	movs	r1, r3
 8003648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800364a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364c:	f7fe fb72 	bl	8001d34 <__aeabi_dmul>
 8003650:	0002      	movs	r2, r0
 8003652:	000b      	movs	r3, r1
 8003654:	0010      	movs	r0, r2
 8003656:	0019      	movs	r1, r3
 8003658:	2200      	movs	r2, #0
 800365a:	4b4a      	ldr	r3, [pc, #296]	; (8003784 <compensate_humidity+0x214>)
 800365c:	f7fd fc2c 	bl	8000eb8 <__aeabi_dadd>
 8003660:	0002      	movs	r2, r0
 8003662:	000b      	movs	r3, r1
 8003664:	613a      	str	r2, [r7, #16]
 8003666:	617b      	str	r3, [r7, #20]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2222      	movs	r2, #34	; 0x22
 800366c:	569b      	ldrsb	r3, [r3, r2]
 800366e:	0018      	movs	r0, r3
 8003670:	f7ff f9b2 	bl	80029d8 <__aeabi_i2d>
 8003674:	2200      	movs	r2, #0
 8003676:	4b42      	ldr	r3, [pc, #264]	; (8003780 <compensate_humidity+0x210>)
 8003678:	f7fd ff5a 	bl	8001530 <__aeabi_ddiv>
 800367c:	0002      	movs	r2, r0
 800367e:	000b      	movs	r3, r1
 8003680:	0010      	movs	r0, r2
 8003682:	0019      	movs	r1, r3
 8003684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003688:	f7fe fb54 	bl	8001d34 <__aeabi_dmul>
 800368c:	0002      	movs	r2, r0
 800368e:	000b      	movs	r3, r1
 8003690:	0010      	movs	r0, r2
 8003692:	0019      	movs	r1, r3
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f7fe fb4c 	bl	8001d34 <__aeabi_dmul>
 800369c:	0002      	movs	r2, r0
 800369e:	000b      	movs	r3, r1
 80036a0:	0010      	movs	r0, r2
 80036a2:	0019      	movs	r1, r3
 80036a4:	2200      	movs	r2, #0
 80036a6:	4b37      	ldr	r3, [pc, #220]	; (8003784 <compensate_humidity+0x214>)
 80036a8:	f7fd fc06 	bl	8000eb8 <__aeabi_dadd>
 80036ac:	0002      	movs	r2, r0
 80036ae:	000b      	movs	r3, r1
 80036b0:	60ba      	str	r2, [r7, #8]
 80036b2:	60fb      	str	r3, [r7, #12]
    var6 = var3 * var4 * (var5 * var6);
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	6a38      	ldr	r0, [r7, #32]
 80036ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036bc:	f7fe fb3a 	bl	8001d34 <__aeabi_dmul>
 80036c0:	0002      	movs	r2, r0
 80036c2:	000b      	movs	r3, r1
 80036c4:	0014      	movs	r4, r2
 80036c6:	001d      	movs	r5, r3
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6938      	ldr	r0, [r7, #16]
 80036ce:	6979      	ldr	r1, [r7, #20]
 80036d0:	f7fe fb30 	bl	8001d34 <__aeabi_dmul>
 80036d4:	0002      	movs	r2, r0
 80036d6:	000b      	movs	r3, r1
 80036d8:	0020      	movs	r0, r4
 80036da:	0029      	movs	r1, r5
 80036dc:	f7fe fb2a 	bl	8001d34 <__aeabi_dmul>
 80036e0:	0002      	movs	r2, r0
 80036e2:	000b      	movs	r3, r1
 80036e4:	60ba      	str	r2, [r7, #8]
 80036e6:	60fb      	str	r3, [r7, #12]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	7e1b      	ldrb	r3, [r3, #24]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7ff f9a3 	bl	8002a38 <__aeabi_ui2d>
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f7fe fb1d 	bl	8001d34 <__aeabi_dmul>
 80036fa:	0002      	movs	r2, r0
 80036fc:	000b      	movs	r3, r1
 80036fe:	0010      	movs	r0, r2
 8003700:	0019      	movs	r1, r3
 8003702:	2200      	movs	r2, #0
 8003704:	4b20      	ldr	r3, [pc, #128]	; (8003788 <compensate_humidity+0x218>)
 8003706:	f7fd ff13 	bl	8001530 <__aeabi_ddiv>
 800370a:	0002      	movs	r2, r0
 800370c:	000b      	movs	r3, r1
 800370e:	2000      	movs	r0, #0
 8003710:	491c      	ldr	r1, [pc, #112]	; (8003784 <compensate_humidity+0x214>)
 8003712:	f7fe fd7b 	bl	800220c <__aeabi_dsub>
 8003716:	0002      	movs	r2, r0
 8003718:	000b      	movs	r3, r1
 800371a:	68b8      	ldr	r0, [r7, #8]
 800371c:	68f9      	ldr	r1, [r7, #12]
 800371e:	f7fe fb09 	bl	8001d34 <__aeabi_dmul>
 8003722:	0002      	movs	r2, r0
 8003724:	000b      	movs	r3, r1
 8003726:	64ba      	str	r2, [r7, #72]	; 0x48
 8003728:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (humidity > humidity_max)
 800372a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800372c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003730:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003732:	f7fc fea5 	bl	8000480 <__aeabi_dcmpgt>
 8003736:	1e03      	subs	r3, r0, #0
 8003738:	d004      	beq.n	8003744 <compensate_humidity+0x1d4>
    {
        humidity = humidity_max;
 800373a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800373c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003740:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003742:	e00b      	b.n	800375c <compensate_humidity+0x1ec>
    }
    else if (humidity < humidity_min)
 8003744:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003748:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800374a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800374c:	f7fc fe84 	bl	8000458 <__aeabi_dcmplt>
 8003750:	1e03      	subs	r3, r0, #0
 8003752:	d003      	beq.n	800375c <compensate_humidity+0x1ec>
    {
        humidity = humidity_min;
 8003754:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003758:	64ba      	str	r2, [r7, #72]	; 0x48
 800375a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    return humidity;
 800375c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800375e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8003760:	0010      	movs	r0, r2
 8003762:	0019      	movs	r1, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	b014      	add	sp, #80	; 0x50
 8003768:	bdb0      	pop	{r4, r5, r7, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	40590000 	.word	0x40590000
 8003770:	40f2c000 	.word	0x40f2c000
 8003774:	40500000 	.word	0x40500000
 8003778:	40d00000 	.word	0x40d00000
 800377c:	40f00000 	.word	0x40f00000
 8003780:	41900000 	.word	0x41900000
 8003784:	3ff00000 	.word	0x3ff00000
 8003788:	41200000 	.word	0x41200000

0800378c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 800378c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800378e:	b08b      	sub	sp, #44	; 0x2c
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8003794:	2627      	movs	r6, #39	; 0x27
 8003796:	19bb      	adds	r3, r7, r6
 8003798:	2200      	movs	r2, #0
 800379a:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 800379c:	2526      	movs	r5, #38	; 0x26
 800379e:	197b      	adds	r3, r7, r5
 80037a0:	2288      	movs	r2, #136	; 0x88
 80037a2:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 80037a4:	240c      	movs	r4, #12
 80037a6:	193b      	adds	r3, r7, r4
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	3304      	adds	r3, #4
 80037ae:	2216      	movs	r2, #22
 80037b0:	2100      	movs	r1, #0
 80037b2:	0018      	movs	r0, r3
 80037b4:	f005 f837 	bl	8008826 <memset>

    /* Read the calibration data from the sensor */
    BME280_SPI_Read(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN);
 80037b8:	197b      	adds	r3, r7, r5
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	1939      	adds	r1, r7, r4
 80037be:	221a      	movs	r2, #26
 80037c0:	0018      	movs	r0, r3
 80037c2:	f000 fe3f 	bl	8004444 <BME280_SPI_Read>
    //if (rslt == BME280_OK)
    //{
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	193b      	adds	r3, r7, r4
 80037ca:	0011      	movs	r1, r2
 80037cc:	0018      	movs	r0, r3
 80037ce:	f000 f84f 	bl	8003870 <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80037d2:	197b      	adds	r3, r7, r5
 80037d4:	22e1      	movs	r2, #225	; 0xe1
 80037d6:	701a      	strb	r2, [r3, #0]

        /* Read the humidity calibration data from the sensor */
        BME280_SPI_Read(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN);
 80037d8:	197b      	adds	r3, r7, r5
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	1939      	adds	r1, r7, r4
 80037de:	2207      	movs	r2, #7
 80037e0:	0018      	movs	r0, r3
 80037e2:	f000 fe2f 	bl	8004444 <BME280_SPI_Read>
        //if (rslt == BME280_OK)
        //{
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	193b      	adds	r3, r7, r4
 80037ea:	0011      	movs	r1, r2
 80037ec:	0018      	movs	r0, r3
 80037ee:	f000 f8eb 	bl	80039c8 <parse_humidity_calib_data>
        //}
    //}

    return rslt;
 80037f2:	19bb      	adds	r3, r7, r6
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	b25b      	sxtb	r3, r3
}
 80037f8:	0018      	movs	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b00b      	add	sp, #44	; 0x2c
 80037fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003800 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	001a      	movs	r2, r3
 800380e:	1cfb      	adds	r3, r7, #3
 8003810:	701a      	strb	r2, [r3, #0]
    uint8_t index;

    for (index = 1; index < len; index++)
 8003812:	2317      	movs	r3, #23
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	e01d      	b.n	8003858 <interleave_reg_addr+0x58>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800381c:	2017      	movs	r0, #23
 800381e:	183b      	adds	r3, r7, r0
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	18d2      	adds	r2, r2, r3
 8003826:	183b      	adds	r3, r7, r0
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	3b01      	subs	r3, #1
 800382e:	68b9      	ldr	r1, [r7, #8]
 8003830:	18cb      	adds	r3, r1, r3
 8003832:	7812      	ldrb	r2, [r2, #0]
 8003834:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8003836:	183b      	adds	r3, r7, r0
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	18d2      	adds	r2, r2, r3
 800383e:	183b      	adds	r3, r7, r0
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	0019      	movs	r1, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	185b      	adds	r3, r3, r1
 800384a:	7812      	ldrb	r2, [r2, #0]
 800384c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800384e:	183b      	adds	r3, r7, r0
 8003850:	781a      	ldrb	r2, [r3, #0]
 8003852:	183b      	adds	r3, r7, r0
 8003854:	3201      	adds	r2, #1
 8003856:	701a      	strb	r2, [r3, #0]
 8003858:	2317      	movs	r3, #23
 800385a:	18fa      	adds	r2, r7, r3
 800385c:	1cfb      	adds	r3, r7, #3
 800385e:	7812      	ldrb	r2, [r2, #0]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d3da      	bcc.n	800381c <interleave_reg_addr+0x1c>
    }
}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	46c0      	nop			; (mov r8, r8)
 800386a:	46bd      	mov	sp, r7
 800386c:	b006      	add	sp, #24
 800386e:	bd80      	pop	{r7, pc}

08003870 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3301      	adds	r3, #1
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	b21a      	sxth	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	b21b      	sxth	r3, r3
 800388e:	4313      	orrs	r3, r2
 8003890:	b21b      	sxth	r3, r3
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3303      	adds	r3, #3
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	021b      	lsls	r3, r3, #8
 80038a0:	b21a      	sxth	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3302      	adds	r3, #2
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	b21b      	sxth	r3, r3
 80038aa:	4313      	orrs	r3, r2
 80038ac:	b21a      	sxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3305      	adds	r3, #5
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	b21a      	sxth	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3304      	adds	r3, #4
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	b21b      	sxth	r3, r3
 80038c4:	4313      	orrs	r3, r2
 80038c6:	b21a      	sxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3307      	adds	r3, #7
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	b21a      	sxth	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3306      	adds	r3, #6
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	b21b      	sxth	r3, r3
 80038de:	4313      	orrs	r3, r2
 80038e0:	b21b      	sxth	r3, r3
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3309      	adds	r3, #9
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	b21a      	sxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3308      	adds	r3, #8
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	b21b      	sxth	r3, r3
 80038fa:	4313      	orrs	r3, r2
 80038fc:	b21a      	sxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	330b      	adds	r3, #11
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	021b      	lsls	r3, r3, #8
 800390a:	b21a      	sxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	330a      	adds	r3, #10
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	b21b      	sxth	r3, r3
 8003914:	4313      	orrs	r3, r2
 8003916:	b21a      	sxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	330d      	adds	r3, #13
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	b21a      	sxth	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	330c      	adds	r3, #12
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	b21b      	sxth	r3, r3
 800392e:	4313      	orrs	r3, r2
 8003930:	b21a      	sxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	330f      	adds	r3, #15
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	021b      	lsls	r3, r3, #8
 800393e:	b21a      	sxth	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	330e      	adds	r3, #14
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	b21b      	sxth	r3, r3
 8003948:	4313      	orrs	r3, r2
 800394a:	b21a      	sxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3311      	adds	r3, #17
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	b21a      	sxth	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3310      	adds	r3, #16
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	b21b      	sxth	r3, r3
 8003962:	4313      	orrs	r3, r2
 8003964:	b21a      	sxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3313      	adds	r3, #19
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	021b      	lsls	r3, r3, #8
 8003972:	b21a      	sxth	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3312      	adds	r3, #18
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	b21b      	sxth	r3, r3
 800397c:	4313      	orrs	r3, r2
 800397e:	b21a      	sxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3315      	adds	r3, #21
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	b21a      	sxth	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3314      	adds	r3, #20
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	b21b      	sxth	r3, r3
 8003996:	4313      	orrs	r3, r2
 8003998:	b21a      	sxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3317      	adds	r3, #23
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	021b      	lsls	r3, r3, #8
 80039a6:	b21a      	sxth	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3316      	adds	r3, #22
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	b21b      	sxth	r3, r3
 80039b0:	4313      	orrs	r3, r2
 80039b2:	b21a      	sxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	7e5a      	ldrb	r2, [r3, #25]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	761a      	strb	r2, [r3, #24]
}
 80039c0:	46c0      	nop			; (mov r8, r8)
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b004      	add	sp, #16
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80039c8:	b590      	push	{r4, r7, lr}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3301      	adds	r3, #1
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	b21a      	sxth	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	b21b      	sxth	r3, r3
 80039e6:	4313      	orrs	r3, r2
 80039e8:	b21a      	sxth	r2, r3
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	789a      	ldrb	r2, [r3, #2]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3303      	adds	r3, #3
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	b25b      	sxtb	r3, r3
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	2012      	movs	r0, #18
 8003a06:	183b      	adds	r3, r7, r0
 8003a08:	801a      	strh	r2, [r3, #0]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	b21a      	sxth	r2, r3
 8003a12:	2410      	movs	r4, #16
 8003a14:	193b      	adds	r3, r7, r4
 8003a16:	210f      	movs	r1, #15
 8003a18:	400a      	ands	r2, r1
 8003a1a:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 8003a1c:	183a      	adds	r2, r7, r0
 8003a1e:	193b      	adds	r3, r7, r4
 8003a20:	8812      	ldrh	r2, [r2, #0]
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	b21a      	sxth	r2, r3
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3305      	adds	r3, #5
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	b25b      	sxtb	r3, r3
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	210e      	movs	r1, #14
 8003a3c:	187b      	adds	r3, r7, r1
 8003a3e:	801a      	strh	r2, [r3, #0]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3304      	adds	r3, #4
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	091b      	lsrs	r3, r3, #4
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	200c      	movs	r0, #12
 8003a4c:	183b      	adds	r3, r7, r0
 8003a4e:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 8003a50:	187a      	adds	r2, r7, r1
 8003a52:	183b      	adds	r3, r7, r0
 8003a54:	8812      	ldrh	r2, [r2, #0]
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	b21a      	sxth	r2, r3
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3306      	adds	r3, #6
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	b259      	sxtb	r1, r3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2222      	movs	r2, #34	; 0x22
 8003a6c:	5499      	strb	r1, [r3, r2]
}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b007      	add	sp, #28
 8003a74:	bd90      	pop	{r4, r7, pc}

08003a76 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	0002      	movs	r2, r0
 8003a7e:	1dfb      	adds	r3, r7, #7
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	1dbb      	adds	r3, r7, #6
 8003a84:	1c0a      	adds	r2, r1, #0
 8003a86:	701a      	strb	r2, [r3, #0]
    uint8_t settings_changed = FALSE;
 8003a88:	210f      	movs	r1, #15
 8003a8a:	187b      	adds	r3, r7, r1
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]

    if (sub_settings & desired_settings)
 8003a90:	1dfb      	adds	r3, r7, #7
 8003a92:	1dba      	adds	r2, r7, #6
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	7812      	ldrb	r2, [r2, #0]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <are_settings_changed+0x32>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8003aa0:	187b      	adds	r3, r7, r1
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	e003      	b.n	8003ab0 <are_settings_changed+0x3a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8003aa8:	230f      	movs	r3, #15
 8003aaa:	18fb      	adds	r3, r7, r3
 8003aac:	2200      	movs	r2, #0
 8003aae:	701a      	strb	r2, [r3, #0]
    }

    return settings_changed;
 8003ab0:	230f      	movs	r3, #15
 8003ab2:	18fb      	adds	r3, r7, r3
 8003ab4:	781b      	ldrb	r3, [r3, #0]
}
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b004      	add	sp, #16
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ac0:	b590      	push	{r4, r7, lr}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ac6:	f001 f879 	bl	8004bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003aca:	f000 f865 	bl	8003b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ace:	f000 f9fb 	bl	8003ec8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003ad2:	f000 f9db 	bl	8003e8c <MX_DMA_Init>
  MX_ADC_Init();
 8003ad6:	f000 f8d1 	bl	8003c7c <MX_ADC_Init>
  MX_USART1_UART_Init();
 8003ada:	f000 f9a3 	bl	8003e24 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8003ade:	f000 f969 	bl	8003db4 <MX_SPI1_Init>
  MX_RTC_Init();
 8003ae2:	f000 f931 	bl	8003d48 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(800);
 8003ae6:	23c8      	movs	r3, #200	; 0xc8
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	0018      	movs	r0, r3
 8003aec:	f001 f8d6 	bl	8004c9c <HAL_Delay>
  HAL_ADC_Start_DMA(&hadc, adc_buffer,32);
 8003af0:	4926      	ldr	r1, [pc, #152]	; (8003b8c <main+0xcc>)
 8003af2:	4b27      	ldr	r3, [pc, #156]	; (8003b90 <main+0xd0>)
 8003af4:	2220      	movs	r2, #32
 8003af6:	0018      	movs	r0, r3
 8003af8:	f001 fa84 	bl	8005004 <HAL_ADC_Start_DMA>
  //HAL_UART_Receive_IT(&huart1,  received_byte,2);
  HAL_Delay(800);
 8003afc:	23c8      	movs	r3, #200	; 0xc8
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	0018      	movs	r0, r3
 8003b02:	f001 f8cb 	bl	8004c9c <HAL_Delay>
  int8_t rslt_bme = bme280_init(&dev);
 8003b06:	1dfc      	adds	r4, r7, #7
 8003b08:	4b22      	ldr	r3, [pc, #136]	; (8003b94 <main+0xd4>)
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f7fe ffe4 	bl	8002ad8 <bme280_init>
 8003b10:	0003      	movs	r3, r0
 8003b12:	7023      	strb	r3, [r4, #0]
  if (rslt_bme != BME280_OK)
 8003b14:	1dfb      	adds	r3, r7, #7
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b25b      	sxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d000      	beq.n	8003b20 <main+0x60>
  {
	  while(1);
 8003b1e:	e7fe      	b.n	8003b1e <main+0x5e>
  }
  HAL_Delay(100);
 8003b20:	2064      	movs	r0, #100	; 0x64
 8003b22:	f001 f8bb 	bl	8004c9c <HAL_Delay>
  uint8_t rslt_bma = BMA456_Check_Connection();
 8003b26:	1dbc      	adds	r4, r7, #6
 8003b28:	f000 fd2a 	bl	8004580 <BMA456_Check_Connection>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	7023      	strb	r3, [r4, #0]
  if(rslt_bma != 1)
 8003b30:	1dbb      	adds	r3, r7, #6
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d000      	beq.n	8003b3a <main+0x7a>
  {
	  while(1);
 8003b38:	e7fe      	b.n	8003b38 <main+0x78>
  }
  HAL_Delay(100);
 8003b3a:	2064      	movs	r0, #100	; 0x64
 8003b3c:	f001 f8ae 	bl	8004c9c <HAL_Delay>
  stream_sensor_data_normal_mode(&dev);
 8003b40:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <main+0xd4>)
 8003b42:	0018      	movs	r0, r3
 8003b44:	f000 fce6 	bl	8004514 <stream_sensor_data_normal_mode>
  BMA456_Init();
 8003b48:	f000 fd4e 	bl	80045e8 <BMA456_Init>

//
//  printf("Kuniec \r\n");
  //SendMSG("AT+LSCN, 500"); //start scanowania do vsp z limitem 500 sekund

  HAL_Delay(800);
 8003b4c:	23c8      	movs	r3, #200	; 0xc8
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	0018      	movs	r0, r3
 8003b52:	f001 f8a3 	bl	8004c9c <HAL_Delay>
//  }


  while (1)
  {
	  	HAL_Delay(100);
 8003b56:	2064      	movs	r0, #100	; 0x64
 8003b58:	f001 f8a0 	bl	8004c9c <HAL_Delay>
	  	Tensometr(adc_buffer);
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <main+0xcc>)
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f000 f9fe 	bl	8003f60 <Tensometr>
	  	HAL_Delay(100);
 8003b64:	2064      	movs	r0, #100	; 0x64
 8003b66:	f001 f899 	bl	8004c9c <HAL_Delay>
	  	BME_PRINT();
 8003b6a:	f000 fab5 	bl	80040d8 <BME_PRINT>
	 	HAL_Delay(200);
 8003b6e:	20c8      	movs	r0, #200	; 0xc8
 8003b70:	f001 f894 	bl	8004c9c <HAL_Delay>
	 	BMA_PRINT();
 8003b74:	f000 fb72 	bl	800425c <BMA_PRINT>
	 	HAL_Delay(200);
 8003b78:	20c8      	movs	r0, #200	; 0xc8
 8003b7a:	f001 f88f 	bl	8004c9c <HAL_Delay>
		Sleep();
 8003b7e:	f000 fa79 	bl	8004074 <Sleep>
		HAL_Delay(100);
 8003b82:	2064      	movs	r0, #100	; 0x64
 8003b84:	f001 f88a 	bl	8004c9c <HAL_Delay>
	  	HAL_Delay(100);
 8003b88:	e7e5      	b.n	8003b56 <main+0x96>
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	200003bc 	.word	0x200003bc
 8003b90:	200001fc 	.word	0x200001fc
 8003b94:	200003fc 	.word	0x200003fc

08003b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b09b      	sub	sp, #108	; 0x6c
 8003b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b9e:	2434      	movs	r4, #52	; 0x34
 8003ba0:	193b      	adds	r3, r7, r4
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	2334      	movs	r3, #52	; 0x34
 8003ba6:	001a      	movs	r2, r3
 8003ba8:	2100      	movs	r1, #0
 8003baa:	f004 fe3c 	bl	8008826 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bae:	2320      	movs	r3, #32
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	2314      	movs	r3, #20
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	2100      	movs	r1, #0
 8003bba:	f004 fe34 	bl	8008826 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bbe:	1d3b      	adds	r3, r7, #4
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	231c      	movs	r3, #28
 8003bc4:	001a      	movs	r2, r3
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	f004 fe2d 	bl	8008826 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bcc:	4b29      	ldr	r3, [pc, #164]	; (8003c74 <SystemClock_Config+0xdc>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a29      	ldr	r2, [pc, #164]	; (8003c78 <SystemClock_Config+0xe0>)
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <SystemClock_Config+0xdc>)
 8003bd6:	2180      	movs	r1, #128	; 0x80
 8003bd8:	0109      	lsls	r1, r1, #4
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8003bde:	0021      	movs	r1, r4
 8003be0:	187b      	adds	r3, r7, r1
 8003be2:	2218      	movs	r2, #24
 8003be4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003be6:	187b      	adds	r3, r7, r1
 8003be8:	2201      	movs	r2, #1
 8003bea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003bec:	187b      	adds	r3, r7, r1
 8003bee:	2201      	movs	r2, #1
 8003bf0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003bf2:	187b      	adds	r3, r7, r1
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003bf8:	187b      	adds	r3, r7, r1
 8003bfa:	22a0      	movs	r2, #160	; 0xa0
 8003bfc:	0212      	lsls	r2, r2, #8
 8003bfe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003c00:	187b      	adds	r3, r7, r1
 8003c02:	2200      	movs	r2, #0
 8003c04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c06:	187b      	adds	r3, r7, r1
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f002 f89f 	bl	8005d4c <HAL_RCC_OscConfig>
 8003c0e:	1e03      	subs	r3, r0, #0
 8003c10:	d001      	beq.n	8003c16 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8003c12:	f000 fd89 	bl	8004728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c16:	2120      	movs	r1, #32
 8003c18:	187b      	adds	r3, r7, r1
 8003c1a:	220f      	movs	r2, #15
 8003c1c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003c1e:	187b      	adds	r3, r7, r1
 8003c20:	2200      	movs	r2, #0
 8003c22:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c24:	187b      	adds	r3, r7, r1
 8003c26:	2200      	movs	r2, #0
 8003c28:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c2a:	187b      	adds	r3, r7, r1
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c30:	187b      	adds	r3, r7, r1
 8003c32:	2200      	movs	r2, #0
 8003c34:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003c36:	187b      	adds	r3, r7, r1
 8003c38:	2100      	movs	r1, #0
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f002 fbf0 	bl	8006420 <HAL_RCC_ClockConfig>
 8003c40:	1e03      	subs	r3, r0, #0
 8003c42:	d001      	beq.n	8003c48 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8003c44:	f000 fd70 	bl	8004728 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8003c48:	1d3b      	adds	r3, r7, #4
 8003c4a:	2221      	movs	r2, #33	; 0x21
 8003c4c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003c4e:	1d3b      	adds	r3, r7, #4
 8003c50:	2200      	movs	r2, #0
 8003c52:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003c54:	1d3b      	adds	r3, r7, #4
 8003c56:	2280      	movs	r2, #128	; 0x80
 8003c58:	0292      	lsls	r2, r2, #10
 8003c5a:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c5c:	1d3b      	adds	r3, r7, #4
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f002 fe02 	bl	8006868 <HAL_RCCEx_PeriphCLKConfig>
 8003c64:	1e03      	subs	r3, r0, #0
 8003c66:	d001      	beq.n	8003c6c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003c68:	f000 fd5e 	bl	8004728 <Error_Handler>
  }
}
 8003c6c:	46c0      	nop			; (mov r8, r8)
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b01b      	add	sp, #108	; 0x6c
 8003c72:	bd90      	pop	{r4, r7, pc}
 8003c74:	40007000 	.word	0x40007000
 8003c78:	ffffe7ff 	.word	0xffffe7ff

08003c7c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c82:	003b      	movs	r3, r7
 8003c84:	0018      	movs	r0, r3
 8003c86:	2308      	movs	r3, #8
 8003c88:	001a      	movs	r2, r3
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	f004 fdcb 	bl	8008826 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003c90:	4b2a      	ldr	r3, [pc, #168]	; (8003d3c <MX_ADC_Init+0xc0>)
 8003c92:	4a2b      	ldr	r2, [pc, #172]	; (8003d40 <MX_ADC_Init+0xc4>)
 8003c94:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003c96:	4b29      	ldr	r3, [pc, #164]	; (8003d3c <MX_ADC_Init+0xc0>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8003c9c:	4b27      	ldr	r3, [pc, #156]	; (8003d3c <MX_ADC_Init+0xc0>)
 8003c9e:	22c0      	movs	r2, #192	; 0xc0
 8003ca0:	0612      	lsls	r2, r2, #24
 8003ca2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003ca4:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <MX_ADC_Init+0xc0>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003caa:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <MX_ADC_Init+0xc0>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003cb0:	4b22      	ldr	r3, [pc, #136]	; (8003d3c <MX_ADC_Init+0xc0>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003cb6:	4b21      	ldr	r3, [pc, #132]	; (8003d3c <MX_ADC_Init+0xc0>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003cbc:	4b1f      	ldr	r3, [pc, #124]	; (8003d3c <MX_ADC_Init+0xc0>)
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003cc4:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <MX_ADC_Init+0xc0>)
 8003cc6:	2221      	movs	r2, #33	; 0x21
 8003cc8:	2100      	movs	r1, #0
 8003cca:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ccc:	4b1b      	ldr	r3, [pc, #108]	; (8003d3c <MX_ADC_Init+0xc0>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003cd2:	4b1a      	ldr	r3, [pc, #104]	; (8003d3c <MX_ADC_Init+0xc0>)
 8003cd4:	22c2      	movs	r2, #194	; 0xc2
 8003cd6:	32ff      	adds	r2, #255	; 0xff
 8003cd8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003cda:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <MX_ADC_Init+0xc0>)
 8003cdc:	222c      	movs	r2, #44	; 0x2c
 8003cde:	2101      	movs	r1, #1
 8003ce0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003ce2:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <MX_ADC_Init+0xc0>)
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003ce8:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <MX_ADC_Init+0xc0>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003cee:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <MX_ADC_Init+0xc0>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8003cf4:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <MX_ADC_Init+0xc0>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003cfa:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <MX_ADC_Init+0xc0>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003d00:	4b0e      	ldr	r3, [pc, #56]	; (8003d3c <MX_ADC_Init+0xc0>)
 8003d02:	0018      	movs	r0, r3
 8003d04:	f001 f80a 	bl	8004d1c <HAL_ADC_Init>
 8003d08:	1e03      	subs	r3, r0, #0
 8003d0a:	d001      	beq.n	8003d10 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003d0c:	f000 fd0c 	bl	8004728 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003d10:	003b      	movs	r3, r7
 8003d12:	4a0c      	ldr	r2, [pc, #48]	; (8003d44 <MX_ADC_Init+0xc8>)
 8003d14:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003d16:	003b      	movs	r3, r7
 8003d18:	2280      	movs	r2, #128	; 0x80
 8003d1a:	0152      	lsls	r2, r2, #5
 8003d1c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003d1e:	003a      	movs	r2, r7
 8003d20:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <MX_ADC_Init+0xc0>)
 8003d22:	0011      	movs	r1, r2
 8003d24:	0018      	movs	r0, r3
 8003d26:	f001 f9f7 	bl	8005118 <HAL_ADC_ConfigChannel>
 8003d2a:	1e03      	subs	r3, r0, #0
 8003d2c:	d001      	beq.n	8003d32 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003d2e:	f000 fcfb 	bl	8004728 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b002      	add	sp, #8
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	200001fc 	.word	0x200001fc
 8003d40:	40012400 	.word	0x40012400
 8003d44:	24000200 	.word	0x24000200

08003d48 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003d4c:	4b16      	ldr	r3, [pc, #88]	; (8003da8 <MX_RTC_Init+0x60>)
 8003d4e:	4a17      	ldr	r2, [pc, #92]	; (8003dac <MX_RTC_Init+0x64>)
 8003d50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003d52:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <MX_RTC_Init+0x60>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003d58:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <MX_RTC_Init+0x60>)
 8003d5a:	227f      	movs	r2, #127	; 0x7f
 8003d5c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <MX_RTC_Init+0x60>)
 8003d60:	22ff      	movs	r2, #255	; 0xff
 8003d62:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003d64:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <MX_RTC_Init+0x60>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003d6a:	4b0f      	ldr	r3, [pc, #60]	; (8003da8 <MX_RTC_Init+0x60>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003d70:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <MX_RTC_Init+0x60>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003d76:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <MX_RTC_Init+0x60>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <MX_RTC_Init+0x60>)
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f002 feac 	bl	8006adc <HAL_RTC_Init>
 8003d84:	1e03      	subs	r3, r0, #0
 8003d86:	d001      	beq.n	8003d8c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8003d88:	f000 fcce 	bl	8004728 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x5A56, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003d8c:	4908      	ldr	r1, [pc, #32]	; (8003db0 <MX_RTC_Init+0x68>)
 8003d8e:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <MX_RTC_Init+0x60>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	0018      	movs	r0, r3
 8003d94:	f002 ffd4 	bl	8006d40 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003d98:	1e03      	subs	r3, r0, #0
 8003d9a:	d001      	beq.n	8003da0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8003d9c:	f000 fcc4 	bl	8004728 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003da0:	46c0      	nop			; (mov r8, r8)
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	200002a0 	.word	0x200002a0
 8003dac:	40002800 	.word	0x40002800
 8003db0:	00005a56 	.word	0x00005a56

08003db4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003db8:	4b18      	ldr	r3, [pc, #96]	; (8003e1c <MX_SPI1_Init+0x68>)
 8003dba:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <MX_SPI1_Init+0x6c>)
 8003dbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003dbe:	4b17      	ldr	r3, [pc, #92]	; (8003e1c <MX_SPI1_Init+0x68>)
 8003dc0:	2282      	movs	r2, #130	; 0x82
 8003dc2:	0052      	lsls	r2, r2, #1
 8003dc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003dc6:	4b15      	ldr	r3, [pc, #84]	; (8003e1c <MX_SPI1_Init+0x68>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003dcc:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <MX_SPI1_Init+0x68>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dd2:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <MX_SPI1_Init+0x68>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003dd8:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <MX_SPI1_Init+0x68>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003dde:	4b0f      	ldr	r3, [pc, #60]	; (8003e1c <MX_SPI1_Init+0x68>)
 8003de0:	2280      	movs	r2, #128	; 0x80
 8003de2:	0092      	lsls	r2, r2, #2
 8003de4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003de6:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <MX_SPI1_Init+0x68>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <MX_SPI1_Init+0x68>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003df2:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <MX_SPI1_Init+0x68>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003df8:	4b08      	ldr	r3, [pc, #32]	; (8003e1c <MX_SPI1_Init+0x68>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <MX_SPI1_Init+0x68>)
 8003e00:	2207      	movs	r2, #7
 8003e02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <MX_SPI1_Init+0x68>)
 8003e06:	0018      	movs	r0, r3
 8003e08:	f003 f90e 	bl	8007028 <HAL_SPI_Init>
 8003e0c:	1e03      	subs	r3, r0, #0
 8003e0e:	d001      	beq.n	8003e14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003e10:	f000 fc8a 	bl	8004728 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003e14:	46c0      	nop			; (mov r8, r8)
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	200002c4 	.word	0x200002c4
 8003e20:	40013000 	.word	0x40013000

08003e24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e28:	4b16      	ldr	r3, [pc, #88]	; (8003e84 <MX_USART1_UART_Init+0x60>)
 8003e2a:	4a17      	ldr	r2, [pc, #92]	; (8003e88 <MX_USART1_UART_Init+0x64>)
 8003e2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e2e:	4b15      	ldr	r3, [pc, #84]	; (8003e84 <MX_USART1_UART_Init+0x60>)
 8003e30:	22e1      	movs	r2, #225	; 0xe1
 8003e32:	0252      	lsls	r2, r2, #9
 8003e34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e36:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <MX_USART1_UART_Init+0x60>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e3c:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <MX_USART1_UART_Init+0x60>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <MX_USART1_UART_Init+0x60>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e48:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <MX_USART1_UART_Init+0x60>)
 8003e4a:	220c      	movs	r2, #12
 8003e4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <MX_USART1_UART_Init+0x60>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e54:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <MX_USART1_UART_Init+0x60>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e5a:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <MX_USART1_UART_Init+0x60>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8003e60:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <MX_USART1_UART_Init+0x60>)
 8003e62:	2208      	movs	r2, #8
 8003e64:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8003e66:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <MX_USART1_UART_Init+0x60>)
 8003e68:	2280      	movs	r2, #128	; 0x80
 8003e6a:	0212      	lsls	r2, r2, #8
 8003e6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e6e:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <MX_USART1_UART_Init+0x60>)
 8003e70:	0018      	movs	r0, r3
 8003e72:	f003 ff03 	bl	8007c7c <HAL_UART_Init>
 8003e76:	1e03      	subs	r3, r0, #0
 8003e78:	d001      	beq.n	8003e7e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003e7a:	f000 fc55 	bl	8004728 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	2000031c 	.word	0x2000031c
 8003e88:	40013800 	.word	0x40013800

08003e8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e92:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <MX_DMA_Init+0x38>)
 8003e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e96:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <MX_DMA_Init+0x38>)
 8003e98:	2101      	movs	r1, #1
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8003e9e:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <MX_DMA_Init+0x38>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	607b      	str	r3, [r7, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2100      	movs	r1, #0
 8003eae:	2009      	movs	r0, #9
 8003eb0:	f001 fb70 	bl	8005594 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003eb4:	2009      	movs	r0, #9
 8003eb6:	f001 fb82 	bl	80055be <HAL_NVIC_EnableIRQ>

}
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b002      	add	sp, #8
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	40021000 	.word	0x40021000

08003ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b089      	sub	sp, #36	; 0x24
 8003ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ece:	240c      	movs	r4, #12
 8003ed0:	193b      	adds	r3, r7, r4
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	2314      	movs	r3, #20
 8003ed6:	001a      	movs	r2, r3
 8003ed8:	2100      	movs	r1, #0
 8003eda:	f004 fca4 	bl	8008826 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ede:	4b1f      	ldr	r3, [pc, #124]	; (8003f5c <MX_GPIO_Init+0x94>)
 8003ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee2:	4b1e      	ldr	r3, [pc, #120]	; (8003f5c <MX_GPIO_Init+0x94>)
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eea:	4b1c      	ldr	r3, [pc, #112]	; (8003f5c <MX_GPIO_Init+0x94>)
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	2201      	movs	r2, #1
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ef6:	4b19      	ldr	r3, [pc, #100]	; (8003f5c <MX_GPIO_Init+0x94>)
 8003ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003efa:	4b18      	ldr	r3, [pc, #96]	; (8003f5c <MX_GPIO_Init+0x94>)
 8003efc:	2102      	movs	r1, #2
 8003efe:	430a      	orrs	r2, r1
 8003f00:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f02:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <MX_GPIO_Init+0x94>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	2202      	movs	r2, #2
 8003f08:	4013      	ands	r3, r2
 8003f0a:	607b      	str	r3, [r7, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_SET);
 8003f0e:	23a0      	movs	r3, #160	; 0xa0
 8003f10:	05db      	lsls	r3, r3, #23
 8003f12:	2201      	movs	r2, #1
 8003f14:	2111      	movs	r1, #17
 8003f16:	0018      	movs	r0, r3
 8003f18:	f001 fe9e 	bl	8005c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8003f1c:	23a0      	movs	r3, #160	; 0xa0
 8003f1e:	05db      	lsls	r3, r3, #23
 8003f20:	2200      	movs	r2, #0
 8003f22:	2102      	movs	r1, #2
 8003f24:	0018      	movs	r0, r3
 8003f26:	f001 fe97 	bl	8005c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8003f2a:	0021      	movs	r1, r4
 8003f2c:	187b      	adds	r3, r7, r1
 8003f2e:	2213      	movs	r2, #19
 8003f30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f32:	187b      	adds	r3, r7, r1
 8003f34:	2201      	movs	r2, #1
 8003f36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f38:	187b      	adds	r3, r7, r1
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f3e:	187b      	adds	r3, r7, r1
 8003f40:	2200      	movs	r2, #0
 8003f42:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f44:	187a      	adds	r2, r7, r1
 8003f46:	23a0      	movs	r3, #160	; 0xa0
 8003f48:	05db      	lsls	r3, r3, #23
 8003f4a:	0011      	movs	r1, r2
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f001 fd0d 	bl	800596c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	46bd      	mov	sp, r7
 8003f56:	b009      	add	sp, #36	; 0x24
 8003f58:	bd90      	pop	{r4, r7, pc}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	40021000 	.word	0x40021000

08003f60 <Tensometr>:

/* USER CODE BEGIN 4 */
void Tensometr(){
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
	float suma = 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
	short wynik;
	short counter = 0;
 8003f6a:	2308      	movs	r3, #8
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	2200      	movs	r2, #0
 8003f70:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8003f72:	23a0      	movs	r3, #160	; 0xa0
 8003f74:	05db      	lsls	r3, r3, #23
 8003f76:	2201      	movs	r2, #1
 8003f78:	2102      	movs	r1, #2
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f001 fe6c 	bl	8005c58 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8003f80:	23fa      	movs	r3, #250	; 0xfa
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	0018      	movs	r0, r3
 8003f86:	f000 fe89 	bl	8004c9c <HAL_Delay>
	for(uint8_t i; i<sizeof(adc_buffer); i++){
 8003f8a:	e023      	b.n	8003fd4 <Tensometr+0x74>
		suma += adc_buffer[i];
 8003f8c:	1dfb      	adds	r3, r7, #7
 8003f8e:	781a      	ldrb	r2, [r3, #0]
 8003f90:	4b33      	ldr	r3, [pc, #204]	; (8004060 <Tensometr+0x100>)
 8003f92:	0052      	lsls	r2, r2, #1
 8003f94:	5ad3      	ldrh	r3, [r2, r3]
 8003f96:	0018      	movs	r0, r3
 8003f98:	f7fc ff40 	bl	8000e1c <__aeabi_i2f>
 8003f9c:	1c03      	adds	r3, r0, #0
 8003f9e:	1c19      	adds	r1, r3, #0
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f7fc fbd5 	bl	8000750 <__aeabi_fadd>
 8003fa6:	1c03      	adds	r3, r0, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
		if(adc_buffer[i]!=0){
 8003faa:	1dfb      	adds	r3, r7, #7
 8003fac:	781a      	ldrb	r2, [r3, #0]
 8003fae:	4b2c      	ldr	r3, [pc, #176]	; (8004060 <Tensometr+0x100>)
 8003fb0:	0052      	lsls	r2, r2, #1
 8003fb2:	5ad3      	ldrh	r3, [r2, r3]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <Tensometr+0x6a>
			counter++;
 8003fb8:	2108      	movs	r1, #8
 8003fba:	187b      	adds	r3, r7, r1
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	5e9b      	ldrsh	r3, [r3, r2]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	187b      	adds	r3, r7, r1
 8003fc8:	801a      	strh	r2, [r3, #0]
	for(uint8_t i; i<sizeof(adc_buffer); i++){
 8003fca:	1dfb      	adds	r3, r7, #7
 8003fcc:	781a      	ldrb	r2, [r3, #0]
 8003fce:	1dfb      	adds	r3, r7, #7
 8003fd0:	3201      	adds	r2, #1
 8003fd2:	701a      	strb	r2, [r3, #0]
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b3f      	cmp	r3, #63	; 0x3f
 8003fda:	d9d7      	bls.n	8003f8c <Tensometr+0x2c>
		}
	}
	suma=suma/counter;
 8003fdc:	2308      	movs	r3, #8
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	5e9b      	ldrsh	r3, [r3, r2]
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f7fc ff19 	bl	8000e1c <__aeabi_i2f>
 8003fea:	1c03      	adds	r3, r0, #0
 8003fec:	1c19      	adds	r1, r3, #0
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f7fc fd4c 	bl	8000a8c <__aeabi_fdiv>
 8003ff4:	1c03      	adds	r3, r0, #0
 8003ff6:	60fb      	str	r3, [r7, #12]
	if(suma < 24000){
 8003ff8:	491a      	ldr	r1, [pc, #104]	; (8004064 <Tensometr+0x104>)
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f7fc fa66 	bl	80004cc <__aeabi_fcmplt>
 8004000:	1e03      	subs	r3, r0, #0
 8004002:	d004      	beq.n	800400e <Tensometr+0xae>
		wynik = 0;
 8004004:	230a      	movs	r3, #10
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2200      	movs	r2, #0
 800400a:	801a      	strh	r2, [r3, #0]
 800400c:	e003      	b.n	8004016 <Tensometr+0xb6>
	}
	else{
		wynik = 1;
 800400e:	230a      	movs	r3, #10
 8004010:	18fb      	adds	r3, r7, r3
 8004012:	2201      	movs	r2, #1
 8004014:	801a      	strh	r2, [r3, #0]
	}
	if(wynik){
 8004016:	230a      	movs	r3, #10
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	2200      	movs	r2, #0
 800401c:	5e9b      	ldrsh	r3, [r3, r2]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d007      	beq.n	8004032 <Tensometr+0xd2>
	  HAL_UART_Transmit(&huart1,"Lezy\r\n", 6,HAL_MAX_DELAY);
 8004022:	2301      	movs	r3, #1
 8004024:	425b      	negs	r3, r3
 8004026:	4910      	ldr	r1, [pc, #64]	; (8004068 <Tensometr+0x108>)
 8004028:	4810      	ldr	r0, [pc, #64]	; (800406c <Tensometr+0x10c>)
 800402a:	2206      	movs	r2, #6
 800402c:	f003 fe7a 	bl	8007d24 <HAL_UART_Transmit>
 8004030:	e006      	b.n	8004040 <Tensometr+0xe0>
	}
	else{
	  HAL_UART_Transmit(&huart1,"Nie lezy\r\n", 10,HAL_MAX_DELAY);
 8004032:	2301      	movs	r3, #1
 8004034:	425b      	negs	r3, r3
 8004036:	490e      	ldr	r1, [pc, #56]	; (8004070 <Tensometr+0x110>)
 8004038:	480c      	ldr	r0, [pc, #48]	; (800406c <Tensometr+0x10c>)
 800403a:	220a      	movs	r2, #10
 800403c:	f003 fe72 	bl	8007d24 <HAL_UART_Transmit>
	}
	HAL_Delay(1000);
 8004040:	23fa      	movs	r3, #250	; 0xfa
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	0018      	movs	r0, r3
 8004046:	f000 fe29 	bl	8004c9c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800404a:	23a0      	movs	r3, #160	; 0xa0
 800404c:	05db      	lsls	r3, r3, #23
 800404e:	2200      	movs	r2, #0
 8004050:	2102      	movs	r1, #2
 8004052:	0018      	movs	r0, r3
 8004054:	f001 fe00 	bl	8005c58 <HAL_GPIO_WritePin>

}
 8004058:	46c0      	nop			; (mov r8, r8)
 800405a:	46bd      	mov	sp, r7
 800405c:	b004      	add	sp, #16
 800405e:	bd80      	pop	{r7, pc}
 8004060:	200003bc 	.word	0x200003bc
 8004064:	46bb8000 	.word	0x46bb8000
 8004068:	0800b7a0 	.word	0x0800b7a0
 800406c:	2000031c 	.word	0x2000031c
 8004070:	0800b7a8 	.word	0x0800b7a8

08004074 <Sleep>:
void Sleep(){
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,"Ide spac\r\n", 10,HAL_MAX_DELAY);
 8004078:	2301      	movs	r3, #1
 800407a:	425b      	negs	r3, r3
 800407c:	4911      	ldr	r1, [pc, #68]	; (80040c4 <Sleep+0x50>)
 800407e:	4812      	ldr	r0, [pc, #72]	; (80040c8 <Sleep+0x54>)
 8004080:	220a      	movs	r2, #10
 8004082:	f003 fe4f 	bl	8007d24 <HAL_UART_Transmit>
	HAL_SuspendTick();
 8004086:	f000 fe2d 	bl	8004ce4 <HAL_SuspendTick>
    HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x5A56, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800408a:	4910      	ldr	r1, [pc, #64]	; (80040cc <Sleep+0x58>)
 800408c:	4b10      	ldr	r3, [pc, #64]	; (80040d0 <Sleep+0x5c>)
 800408e:	2200      	movs	r2, #0
 8004090:	0018      	movs	r0, r3
 8004092:	f002 fe55 	bl	8006d40 <HAL_RTCEx_SetWakeUpTimer_IT>
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8004096:	2101      	movs	r1, #1
 8004098:	2001      	movs	r0, #1
 800409a:	f001 fdfb 	bl	8005c94 <HAL_PWR_EnterSTOPMode>
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800409e:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <Sleep+0x5c>)
 80040a0:	0018      	movs	r0, r3
 80040a2:	f002 ff25 	bl	8006ef0 <HAL_RTCEx_DeactivateWakeUpTimer>
	SystemClock_Config();
 80040a6:	f7ff fd77 	bl	8003b98 <SystemClock_Config>
    HAL_ResumeTick();
 80040aa:	f000 fe29 	bl	8004d00 <HAL_ResumeTick>
    HAL_UART_Transmit(&huart1,"Wstaje\r\n", 8,HAL_MAX_DELAY);
 80040ae:	2301      	movs	r3, #1
 80040b0:	425b      	negs	r3, r3
 80040b2:	4908      	ldr	r1, [pc, #32]	; (80040d4 <Sleep+0x60>)
 80040b4:	4804      	ldr	r0, [pc, #16]	; (80040c8 <Sleep+0x54>)
 80040b6:	2208      	movs	r2, #8
 80040b8:	f003 fe34 	bl	8007d24 <HAL_UART_Transmit>
}
 80040bc:	46c0      	nop			; (mov r8, r8)
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	0800b7b4 	.word	0x0800b7b4
 80040c8:	2000031c 	.word	0x2000031c
 80040cc:	00005a56 	.word	0x00005a56
 80040d0:	200002a0 	.word	0x200002a0
 80040d4:	0800b7c0 	.word	0x0800b7c0

080040d8 <BME_PRINT>:
void BME_PRINT(){
 80040d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040da:	b08b      	sub	sp, #44	; 0x2c
 80040dc:	af00      	add	r7, sp, #0
	char TempCala[20] = "Temperatura: ";
 80040de:	2414      	movs	r4, #20
 80040e0:	1939      	adds	r1, r7, r4
 80040e2:	4a35      	ldr	r2, [pc, #212]	; (80041b8 <BME_PRINT+0xe0>)
 80040e4:	000b      	movs	r3, r1
 80040e6:	ca61      	ldmia	r2!, {r0, r5, r6}
 80040e8:	c361      	stmia	r3!, {r0, r5, r6}
 80040ea:	8812      	ldrh	r2, [r2, #0]
 80040ec:	801a      	strh	r2, [r3, #0]
 80040ee:	230e      	movs	r3, #14
 80040f0:	18cb      	adds	r3, r1, r3
 80040f2:	2206      	movs	r2, #6
 80040f4:	2100      	movs	r1, #0
 80040f6:	0018      	movs	r0, r3
 80040f8:	f004 fb95 	bl	8008826 <memset>
	char HumCala[20] = "Wilgotnosc: ";
 80040fc:	0039      	movs	r1, r7
 80040fe:	4a2f      	ldr	r2, [pc, #188]	; (80041bc <BME_PRINT+0xe4>)
 8004100:	000b      	movs	r3, r1
 8004102:	ca61      	ldmia	r2!, {r0, r5, r6}
 8004104:	c361      	stmia	r3!, {r0, r5, r6}
 8004106:	7812      	ldrb	r2, [r2, #0]
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	230d      	movs	r3, #13
 800410c:	18cb      	adds	r3, r1, r3
 800410e:	2207      	movs	r2, #7
 8004110:	2100      	movs	r1, #0
 8004112:	0018      	movs	r0, r3
 8004114:	f004 fb87 	bl	8008826 <memset>

	bme280_get_sensor_data(BME280_HUM, &comp_data,&dev);
 8004118:	4a29      	ldr	r2, [pc, #164]	; (80041c0 <BME_PRINT+0xe8>)
 800411a:	4b2a      	ldr	r3, [pc, #168]	; (80041c4 <BME_PRINT+0xec>)
 800411c:	0019      	movs	r1, r3
 800411e:	2004      	movs	r0, #4
 8004120:	f7fe fe88 	bl	8002e34 <bme280_get_sensor_data>
	sprintf(Temp, "%f",comp_data.temperature);
 8004124:	4b27      	ldr	r3, [pc, #156]	; (80041c4 <BME_PRINT+0xec>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	4927      	ldr	r1, [pc, #156]	; (80041c8 <BME_PRINT+0xf0>)
 800412c:	4827      	ldr	r0, [pc, #156]	; (80041cc <BME_PRINT+0xf4>)
 800412e:	f004 fff1 	bl	8009114 <siprintf>
	sprintf(Hum, "%f",comp_data.humidity);
 8004132:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <BME_PRINT+0xec>)
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	4923      	ldr	r1, [pc, #140]	; (80041c8 <BME_PRINT+0xf0>)
 800413a:	4825      	ldr	r0, [pc, #148]	; (80041d0 <BME_PRINT+0xf8>)
 800413c:	f004 ffea 	bl	8009114 <siprintf>
	strncat(TempCala,Temp,4);
 8004140:	4922      	ldr	r1, [pc, #136]	; (80041cc <BME_PRINT+0xf4>)
 8004142:	193b      	adds	r3, r7, r4
 8004144:	2204      	movs	r2, #4
 8004146:	0018      	movs	r0, r3
 8004148:	f005 f804 	bl	8009154 <strncat>
	strncat(HumCala,Hum,4);
 800414c:	4920      	ldr	r1, [pc, #128]	; (80041d0 <BME_PRINT+0xf8>)
 800414e:	003b      	movs	r3, r7
 8004150:	2204      	movs	r2, #4
 8004152:	0018      	movs	r0, r3
 8004154:	f004 fffe 	bl	8009154 <strncat>
	strcat(TempCala,"\r\n");
 8004158:	193b      	adds	r3, r7, r4
 800415a:	0018      	movs	r0, r3
 800415c:	f7fb ffd4 	bl	8000108 <strlen>
 8004160:	0003      	movs	r3, r0
 8004162:	001a      	movs	r2, r3
 8004164:	193b      	adds	r3, r7, r4
 8004166:	189a      	adds	r2, r3, r2
 8004168:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <BME_PRINT+0xfc>)
 800416a:	0010      	movs	r0, r2
 800416c:	0019      	movs	r1, r3
 800416e:	2303      	movs	r3, #3
 8004170:	001a      	movs	r2, r3
 8004172:	f004 fb4f 	bl	8008814 <memcpy>
	strcat(HumCala,"\r\n");
 8004176:	003b      	movs	r3, r7
 8004178:	0018      	movs	r0, r3
 800417a:	f7fb ffc5 	bl	8000108 <strlen>
 800417e:	0003      	movs	r3, r0
 8004180:	001a      	movs	r2, r3
 8004182:	003b      	movs	r3, r7
 8004184:	189a      	adds	r2, r3, r2
 8004186:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <BME_PRINT+0xfc>)
 8004188:	0010      	movs	r0, r2
 800418a:	0019      	movs	r1, r3
 800418c:	2303      	movs	r3, #3
 800418e:	001a      	movs	r2, r3
 8004190:	f004 fb40 	bl	8008814 <memcpy>
	HAL_UART_Transmit(&huart1,TempCala,19,HAL_MAX_DELAY);
 8004194:	2301      	movs	r3, #1
 8004196:	425b      	negs	r3, r3
 8004198:	1939      	adds	r1, r7, r4
 800419a:	480f      	ldr	r0, [pc, #60]	; (80041d8 <BME_PRINT+0x100>)
 800419c:	2213      	movs	r2, #19
 800419e:	f003 fdc1 	bl	8007d24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,HumCala,18,HAL_MAX_DELAY);
 80041a2:	2301      	movs	r3, #1
 80041a4:	425b      	negs	r3, r3
 80041a6:	0039      	movs	r1, r7
 80041a8:	480b      	ldr	r0, [pc, #44]	; (80041d8 <BME_PRINT+0x100>)
 80041aa:	2212      	movs	r2, #18
 80041ac:	f003 fdba 	bl	8007d24 <HAL_UART_Transmit>

}
 80041b0:	46c0      	nop			; (mov r8, r8)
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b00b      	add	sp, #44	; 0x2c
 80041b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b8:	0800b7d4 	.word	0x0800b7d4
 80041bc:	0800b7e8 	.word	0x0800b7e8
 80041c0:	200003fc 	.word	0x200003fc
 80041c4:	20000430 	.word	0x20000430
 80041c8:	0800b7cc 	.word	0x0800b7cc
 80041cc:	200003a4 	.word	0x200003a4
 80041d0:	200003b0 	.word	0x200003b0
 80041d4:	0800b7d0 	.word	0x0800b7d0
 80041d8:	2000031c 	.word	0x2000031c

080041dc <measureAcc>:
char x[10];
char y[10];
char z[10];
void measureAcc(int16_t *data_read_readable, uint8_t *data_read)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
	BMA456_Get_Sensor_Data(data_read);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	0018      	movs	r0, r3
 80041ea:	f000 fa3d 	bl	8004668 <BMA456_Get_Sensor_Data>
	data_read_readable[0] = (int16_t)data_read[1+2]*256 + data_read[0+2];
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	3303      	adds	r3, #3
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	3302      	adds	r3, #2
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	b29b      	uxth	r3, r3
 8004202:	18d3      	adds	r3, r2, r3
 8004204:	b29b      	uxth	r3, r3
 8004206:	b21a      	sxth	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	801a      	strh	r2, [r3, #0]
	data_read_readable[1] = (int16_t)data_read[3+2]*256 + data_read[2+2];
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	3305      	adds	r3, #5
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	b29b      	uxth	r3, r3
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	b29a      	uxth	r2, r3
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	3304      	adds	r3, #4
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	b29b      	uxth	r3, r3
 8004220:	18d3      	adds	r3, r2, r3
 8004222:	b29a      	uxth	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3302      	adds	r3, #2
 8004228:	b212      	sxth	r2, r2
 800422a:	801a      	strh	r2, [r3, #0]
	data_read_readable[2] = (int16_t)data_read[5+2]*256 + data_read[4+2];
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	3307      	adds	r3, #7
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	b29a      	uxth	r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	3306      	adds	r3, #6
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	18d3      	adds	r3, r2, r3
 8004242:	b29a      	uxth	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	b212      	sxth	r2, r2
 800424a:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100);
 800424c:	2064      	movs	r0, #100	; 0x64
 800424e:	f000 fd25 	bl	8004c9c <HAL_Delay>
}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	46bd      	mov	sp, r7
 8004256:	b002      	add	sp, #8
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <BMA_PRINT>:
void BMA_PRINT(){
 800425c:	b5b0      	push	{r4, r5, r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
	char Grawitacja[20] = "Grawitacja: ";
 8004262:	0039      	movs	r1, r7
 8004264:	4a64      	ldr	r2, [pc, #400]	; (80043f8 <BMA_PRINT+0x19c>)
 8004266:	000b      	movs	r3, r1
 8004268:	ca31      	ldmia	r2!, {r0, r4, r5}
 800426a:	c331      	stmia	r3!, {r0, r4, r5}
 800426c:	7812      	ldrb	r2, [r2, #0]
 800426e:	701a      	strb	r2, [r3, #0]
 8004270:	230d      	movs	r3, #13
 8004272:	18cb      	adds	r3, r1, r3
 8004274:	2207      	movs	r2, #7
 8004276:	2100      	movs	r1, #0
 8004278:	0018      	movs	r0, r3
 800427a:	f004 fad4 	bl	8008826 <memset>
//	strcat(yCala,"\r\n");
//	strcat(zCala,"\r\n");
//	HAL_UART_Transmit(&huart1,xCala,10,HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart1,yCala,10,HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart1,zCala,10,HAL_MAX_DELAY);
	measureAcc(data_read_readable, data_read);
 800427e:	4a5f      	ldr	r2, [pc, #380]	; (80043fc <BMA_PRINT+0x1a0>)
 8004280:	4b5f      	ldr	r3, [pc, #380]	; (8004400 <BMA_PRINT+0x1a4>)
 8004282:	0011      	movs	r1, r2
 8004284:	0018      	movs	r0, r3
 8004286:	f7ff ffa9 	bl	80041dc <measureAcc>
	  for (int i=0; i<3;i++){
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	e0a9      	b.n	80043e4 <BMA_PRINT+0x188>
		  if(data_read_readable[i]>1900 && data_read_readable[i]<2500 && data_read_readable[i]>data_read_readable[(i+1)%3] && data_read_readable[i]>data_read_readable[(i+2)%3]){
 8004290:	4b5b      	ldr	r3, [pc, #364]	; (8004400 <BMA_PRINT+0x1a4>)
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	0052      	lsls	r2, r2, #1
 8004296:	5ed3      	ldrsh	r3, [r2, r3]
 8004298:	4a5a      	ldr	r2, [pc, #360]	; (8004404 <BMA_PRINT+0x1a8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	dd44      	ble.n	8004328 <BMA_PRINT+0xcc>
 800429e:	4b58      	ldr	r3, [pc, #352]	; (8004400 <BMA_PRINT+0x1a4>)
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	0052      	lsls	r2, r2, #1
 80042a4:	5ed3      	ldrsh	r3, [r2, r3]
 80042a6:	4a58      	ldr	r2, [pc, #352]	; (8004408 <BMA_PRINT+0x1ac>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	dc3d      	bgt.n	8004328 <BMA_PRINT+0xcc>
 80042ac:	4b54      	ldr	r3, [pc, #336]	; (8004400 <BMA_PRINT+0x1a4>)
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	0052      	lsls	r2, r2, #1
 80042b2:	5ed4      	ldrsh	r4, [r2, r3]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	3301      	adds	r3, #1
 80042b8:	2103      	movs	r1, #3
 80042ba:	0018      	movs	r0, r3
 80042bc:	f7fc f8b0 	bl	8000420 <__aeabi_idivmod>
 80042c0:	000b      	movs	r3, r1
 80042c2:	001a      	movs	r2, r3
 80042c4:	4b4e      	ldr	r3, [pc, #312]	; (8004400 <BMA_PRINT+0x1a4>)
 80042c6:	0052      	lsls	r2, r2, #1
 80042c8:	5ed3      	ldrsh	r3, [r2, r3]
 80042ca:	429c      	cmp	r4, r3
 80042cc:	dd2c      	ble.n	8004328 <BMA_PRINT+0xcc>
 80042ce:	4b4c      	ldr	r3, [pc, #304]	; (8004400 <BMA_PRINT+0x1a4>)
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	0052      	lsls	r2, r2, #1
 80042d4:	5ed4      	ldrsh	r4, [r2, r3]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	3302      	adds	r3, #2
 80042da:	2103      	movs	r1, #3
 80042dc:	0018      	movs	r0, r3
 80042de:	f7fc f89f 	bl	8000420 <__aeabi_idivmod>
 80042e2:	000b      	movs	r3, r1
 80042e4:	001a      	movs	r2, r3
 80042e6:	4b46      	ldr	r3, [pc, #280]	; (8004400 <BMA_PRINT+0x1a4>)
 80042e8:	0052      	lsls	r2, r2, #1
 80042ea:	5ed3      	ldrsh	r3, [r2, r3]
 80042ec:	429c      	cmp	r4, r3
 80042ee:	dd1b      	ble.n	8004328 <BMA_PRINT+0xcc>
		  //printf("Grawitacja: %c\r\n", axes[i]);
		 // strncat(Grawitacja,axes[i],1);
	      Grawitacja[12] = axes[i];
 80042f0:	4a46      	ldr	r2, [pc, #280]	; (800440c <BMA_PRINT+0x1b0>)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	18d3      	adds	r3, r2, r3
 80042f6:	781a      	ldrb	r2, [r3, #0]
 80042f8:	003b      	movs	r3, r7
 80042fa:	731a      	strb	r2, [r3, #12]
		  strcat(Grawitacja,"\r\n");
 80042fc:	003b      	movs	r3, r7
 80042fe:	0018      	movs	r0, r3
 8004300:	f7fb ff02 	bl	8000108 <strlen>
 8004304:	0003      	movs	r3, r0
 8004306:	001a      	movs	r2, r3
 8004308:	003b      	movs	r3, r7
 800430a:	189a      	adds	r2, r3, r2
 800430c:	4b40      	ldr	r3, [pc, #256]	; (8004410 <BMA_PRINT+0x1b4>)
 800430e:	0010      	movs	r0, r2
 8004310:	0019      	movs	r1, r3
 8004312:	2303      	movs	r3, #3
 8004314:	001a      	movs	r2, r3
 8004316:	f004 fa7d 	bl	8008814 <memcpy>
		  HAL_UART_Transmit(&huart1,Grawitacja,15,HAL_MAX_DELAY);
 800431a:	2301      	movs	r3, #1
 800431c:	425b      	negs	r3, r3
 800431e:	0039      	movs	r1, r7
 8004320:	483c      	ldr	r0, [pc, #240]	; (8004414 <BMA_PRINT+0x1b8>)
 8004322:	220f      	movs	r2, #15
 8004324:	f003 fcfe 	bl	8007d24 <HAL_UART_Transmit>
	  }
		  if(data_read_readable[i]<-1900 && data_read_readable[i]>-2500 && data_read_readable[i]<data_read_readable[(i+1)%3] && data_read_readable[i]<data_read_readable[(i+2)%3]){
 8004328:	4b35      	ldr	r3, [pc, #212]	; (8004400 <BMA_PRINT+0x1a4>)
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	0052      	lsls	r2, r2, #1
 800432e:	5ed3      	ldrsh	r3, [r2, r3]
 8004330:	4a39      	ldr	r2, [pc, #228]	; (8004418 <BMA_PRINT+0x1bc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	da53      	bge.n	80043de <BMA_PRINT+0x182>
 8004336:	4b32      	ldr	r3, [pc, #200]	; (8004400 <BMA_PRINT+0x1a4>)
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	0052      	lsls	r2, r2, #1
 800433c:	5ed3      	ldrsh	r3, [r2, r3]
 800433e:	4a37      	ldr	r2, [pc, #220]	; (800441c <BMA_PRINT+0x1c0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	db4c      	blt.n	80043de <BMA_PRINT+0x182>
 8004344:	4b2e      	ldr	r3, [pc, #184]	; (8004400 <BMA_PRINT+0x1a4>)
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	0052      	lsls	r2, r2, #1
 800434a:	5ed4      	ldrsh	r4, [r2, r3]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	3301      	adds	r3, #1
 8004350:	2103      	movs	r1, #3
 8004352:	0018      	movs	r0, r3
 8004354:	f7fc f864 	bl	8000420 <__aeabi_idivmod>
 8004358:	000b      	movs	r3, r1
 800435a:	001a      	movs	r2, r3
 800435c:	4b28      	ldr	r3, [pc, #160]	; (8004400 <BMA_PRINT+0x1a4>)
 800435e:	0052      	lsls	r2, r2, #1
 8004360:	5ed3      	ldrsh	r3, [r2, r3]
 8004362:	429c      	cmp	r4, r3
 8004364:	da3b      	bge.n	80043de <BMA_PRINT+0x182>
 8004366:	4b26      	ldr	r3, [pc, #152]	; (8004400 <BMA_PRINT+0x1a4>)
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	0052      	lsls	r2, r2, #1
 800436c:	5ed4      	ldrsh	r4, [r2, r3]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	3302      	adds	r3, #2
 8004372:	2103      	movs	r1, #3
 8004374:	0018      	movs	r0, r3
 8004376:	f7fc f853 	bl	8000420 <__aeabi_idivmod>
 800437a:	000b      	movs	r3, r1
 800437c:	001a      	movs	r2, r3
 800437e:	4b20      	ldr	r3, [pc, #128]	; (8004400 <BMA_PRINT+0x1a4>)
 8004380:	0052      	lsls	r2, r2, #1
 8004382:	5ed3      	ldrsh	r3, [r2, r3]
 8004384:	429c      	cmp	r4, r3
 8004386:	da2a      	bge.n	80043de <BMA_PRINT+0x182>
		  		 // printf("Grawitacja: - %c\r\n", axes[i]);
			  strcat(Grawitacja," - ");
 8004388:	003b      	movs	r3, r7
 800438a:	0018      	movs	r0, r3
 800438c:	f7fb febc 	bl	8000108 <strlen>
 8004390:	0003      	movs	r3, r0
 8004392:	001a      	movs	r2, r3
 8004394:	003b      	movs	r3, r7
 8004396:	189a      	adds	r2, r3, r2
 8004398:	4b21      	ldr	r3, [pc, #132]	; (8004420 <BMA_PRINT+0x1c4>)
 800439a:	0010      	movs	r0, r2
 800439c:	0019      	movs	r1, r3
 800439e:	2304      	movs	r3, #4
 80043a0:	001a      	movs	r2, r3
 80043a2:	f004 fa37 	bl	8008814 <memcpy>
			  Grawitacja[15] = axes[i];
 80043a6:	4a19      	ldr	r2, [pc, #100]	; (800440c <BMA_PRINT+0x1b0>)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	18d3      	adds	r3, r2, r3
 80043ac:	781a      	ldrb	r2, [r3, #0]
 80043ae:	003b      	movs	r3, r7
 80043b0:	73da      	strb	r2, [r3, #15]
			  strcat(Grawitacja,"\r\n");
 80043b2:	003b      	movs	r3, r7
 80043b4:	0018      	movs	r0, r3
 80043b6:	f7fb fea7 	bl	8000108 <strlen>
 80043ba:	0003      	movs	r3, r0
 80043bc:	001a      	movs	r2, r3
 80043be:	003b      	movs	r3, r7
 80043c0:	189a      	adds	r2, r3, r2
 80043c2:	4b13      	ldr	r3, [pc, #76]	; (8004410 <BMA_PRINT+0x1b4>)
 80043c4:	0010      	movs	r0, r2
 80043c6:	0019      	movs	r1, r3
 80043c8:	2303      	movs	r3, #3
 80043ca:	001a      	movs	r2, r3
 80043cc:	f004 fa22 	bl	8008814 <memcpy>
			  HAL_UART_Transmit(&huart1,Grawitacja,18,HAL_MAX_DELAY);
 80043d0:	2301      	movs	r3, #1
 80043d2:	425b      	negs	r3, r3
 80043d4:	0039      	movs	r1, r7
 80043d6:	480f      	ldr	r0, [pc, #60]	; (8004414 <BMA_PRINT+0x1b8>)
 80043d8:	2212      	movs	r2, #18
 80043da:	f003 fca3 	bl	8007d24 <HAL_UART_Transmit>
	  for (int i=0; i<3;i++){
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	3301      	adds	r3, #1
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	dc00      	bgt.n	80043ec <BMA_PRINT+0x190>
 80043ea:	e751      	b.n	8004290 <BMA_PRINT+0x34>
		  	  }
	  }
}
 80043ec:	46c0      	nop			; (mov r8, r8)
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	46bd      	mov	sp, r7
 80043f2:	b006      	add	sp, #24
 80043f4:	bdb0      	pop	{r4, r5, r7, pc}
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	0800b800 	.word	0x0800b800
 80043fc:	20000440 	.word	0x20000440
 8004400:	20000448 	.word	0x20000448
 8004404:	0000076c 	.word	0x0000076c
 8004408:	000009c3 	.word	0x000009c3
 800440c:	20000000 	.word	0x20000000
 8004410:	0800b7d0 	.word	0x0800b7d0
 8004414:	2000031c 	.word	0x2000031c
 8004418:	fffff894 	.word	0xfffff894
 800441c:	fffff63d 	.word	0xfffff63d
 8004420:	0800b7fc 	.word	0x0800b7fc

08004424 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]


}
 800442c:	46c0      	nop			; (mov r8, r8)
 800442e:	46bd      	mov	sp, r7
 8004430:	b002      	add	sp, #8
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]


}
 800443c:	46c0      	nop			; (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	b002      	add	sp, #8
 8004442:	bd80      	pop	{r7, pc}

08004444 <BME280_SPI_Read>:
void BME280_SPI_Read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len)
{
 8004444:	b590      	push	{r4, r7, lr}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
 800444e:	240f      	movs	r4, #15
 8004450:	193b      	adds	r3, r7, r4
 8004452:	1c02      	adds	r2, r0, #0
 8004454:	701a      	strb	r2, [r3, #0]
    reg_addr = reg_addr | 0x80;
 8004456:	193b      	adds	r3, r7, r4
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2280      	movs	r2, #128	; 0x80
 800445c:	4252      	negs	r2, r2
 800445e:	4313      	orrs	r3, r2
 8004460:	b2da      	uxtb	r2, r3
 8004462:	193b      	adds	r3, r7, r4
 8004464:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004466:	23a0      	movs	r3, #160	; 0xa0
 8004468:	05db      	lsls	r3, r3, #23
 800446a:	2200      	movs	r2, #0
 800446c:	2110      	movs	r1, #16
 800446e:	0018      	movs	r0, r3
 8004470:	f001 fbf2 	bl	8005c58 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, &reg_addr, 1, 1000);
 8004474:	23fa      	movs	r3, #250	; 0xfa
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	1939      	adds	r1, r7, r4
 800447a:	480b      	ldr	r0, [pc, #44]	; (80044a8 <BME280_SPI_Read+0x64>)
 800447c:	2201      	movs	r2, #1
 800447e:	f002 fe67 	bl	8007150 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, reg_data, len, 1000);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	b29a      	uxth	r2, r3
 8004486:	23fa      	movs	r3, #250	; 0xfa
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	4806      	ldr	r0, [pc, #24]	; (80044a8 <BME280_SPI_Read+0x64>)
 800448e:	f002 ffbd 	bl	800740c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004492:	23a0      	movs	r3, #160	; 0xa0
 8004494:	05db      	lsls	r3, r3, #23
 8004496:	2201      	movs	r2, #1
 8004498:	2110      	movs	r1, #16
 800449a:	0018      	movs	r0, r3
 800449c:	f001 fbdc 	bl	8005c58 <HAL_GPIO_WritePin>
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b005      	add	sp, #20
 80044a6:	bd90      	pop	{r4, r7, pc}
 80044a8:	200002c4 	.word	0x200002c4

080044ac <BME280_SPI_Write>:

void BME280_SPI_Write(uint8_t reg_addr, uint8_t *reg_data, uint32_t len)
{
 80044ac:	b590      	push	{r4, r7, lr}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	607a      	str	r2, [r7, #4]
 80044b6:	240f      	movs	r4, #15
 80044b8:	193b      	adds	r3, r7, r4
 80044ba:	1c02      	adds	r2, r0, #0
 80044bc:	701a      	strb	r2, [r3, #0]
    reg_addr = reg_addr & 0x7F;
 80044be:	193b      	adds	r3, r7, r4
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	227f      	movs	r2, #127	; 0x7f
 80044c4:	4013      	ands	r3, r2
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	193b      	adds	r3, r7, r4
 80044ca:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80044cc:	23a0      	movs	r3, #160	; 0xa0
 80044ce:	05db      	lsls	r3, r3, #23
 80044d0:	2200      	movs	r2, #0
 80044d2:	2110      	movs	r1, #16
 80044d4:	0018      	movs	r0, r3
 80044d6:	f001 fbbf 	bl	8005c58 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, &reg_addr, 1, 1000);
 80044da:	23fa      	movs	r3, #250	; 0xfa
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	1939      	adds	r1, r7, r4
 80044e0:	480b      	ldr	r0, [pc, #44]	; (8004510 <BME280_SPI_Write+0x64>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	f002 fe34 	bl	8007150 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, reg_data, len, 1000);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	23fa      	movs	r3, #250	; 0xfa
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	4807      	ldr	r0, [pc, #28]	; (8004510 <BME280_SPI_Write+0x64>)
 80044f4:	f002 fe2c 	bl	8007150 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80044f8:	23a0      	movs	r3, #160	; 0xa0
 80044fa:	05db      	lsls	r3, r3, #23
 80044fc:	2201      	movs	r2, #1
 80044fe:	2110      	movs	r1, #16
 8004500:	0018      	movs	r0, r3
 8004502:	f001 fba9 	bl	8005c58 <HAL_GPIO_WritePin>
}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	46bd      	mov	sp, r7
 800450a:	b005      	add	sp, #20
 800450c:	bd90      	pop	{r4, r7, pc}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	200002c4 	.word	0x200002c4

08004514 <stream_sensor_data_normal_mode>:

void stream_sensor_data_normal_mode(struct bme280_dev *dev)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	//int8_t rslt;
	uint8_t settings_sel;
	//struct bme280_data comp_data;

	/* Recommended mode of operation: Indoor navigation */
	dev->settings.osr_h = BME280_OVERSAMPLING_1X;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	222a      	movs	r2, #42	; 0x2a
 8004520:	2101      	movs	r1, #1
 8004522:	5499      	strb	r1, [r3, r2]
	dev->settings.osr_p = BME280_NO_OVERSAMPLING; // BME280_OVERSAMPLING_16X;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2228      	movs	r2, #40	; 0x28
 8004528:	2100      	movs	r1, #0
 800452a:	5499      	strb	r1, [r3, r2]
	dev->settings.osr_t = BME280_OVERSAMPLING_2X;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2229      	movs	r2, #41	; 0x29
 8004530:	2102      	movs	r1, #2
 8004532:	5499      	strb	r1, [r3, r2]
	//dev->settings.filter = BME280_FILTER_COEFF_16;
	//dev->settings.standby_time = BME280_STANDBY_TIME_62_5_MS;

	//settings_sel = BME280_OSR_PRESS_SEL;
	settings_sel = BME280_OSR_TEMP_SEL; // |= BME280_OSR_TEMP_SEL;
 8004534:	200f      	movs	r0, #15
 8004536:	183b      	adds	r3, r7, r0
 8004538:	2202      	movs	r2, #2
 800453a:	701a      	strb	r2, [r3, #0]
	settings_sel |= BME280_OSR_HUM_SEL;
 800453c:	183b      	adds	r3, r7, r0
 800453e:	183a      	adds	r2, r7, r0
 8004540:	7812      	ldrb	r2, [r2, #0]
 8004542:	2104      	movs	r1, #4
 8004544:	430a      	orrs	r2, r1
 8004546:	701a      	strb	r2, [r3, #0]
	settings_sel |= BME280_STANDBY_SEL;
 8004548:	183b      	adds	r3, r7, r0
 800454a:	183a      	adds	r2, r7, r0
 800454c:	7812      	ldrb	r2, [r2, #0]
 800454e:	2110      	movs	r1, #16
 8004550:	430a      	orrs	r2, r1
 8004552:	701a      	strb	r2, [r3, #0]
	settings_sel |= BME280_FILTER_SEL;
 8004554:	183b      	adds	r3, r7, r0
 8004556:	183a      	adds	r2, r7, r0
 8004558:	7812      	ldrb	r2, [r2, #0]
 800455a:	2108      	movs	r1, #8
 800455c:	430a      	orrs	r2, r1
 800455e:	701a      	strb	r2, [r3, #0]
	bme280_set_sensor_settings(settings_sel, dev);
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	183b      	adds	r3, r7, r0
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	0011      	movs	r1, r2
 8004568:	0018      	movs	r0, r3
 800456a:	f7fe fb61 	bl	8002c30 <bme280_set_sensor_settings>
	bme280_set_sensor_mode(BME280_NORMAL_MODE, dev);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	0019      	movs	r1, r3
 8004572:	2003      	movs	r0, #3
 8004574:	f7fe fbbc 	bl	8002cf0 <bme280_set_sensor_mode>

}
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	46bd      	mov	sp, r7
 800457c:	b004      	add	sp, #16
 800457e:	bd80      	pop	{r7, pc}

08004580 <BMA456_Check_Connection>:

uint8_t BMA456_Check_Connection()
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af02      	add	r7, sp, #8
	uint8_t reg_addr = 0x00;
 8004586:	1dfb      	adds	r3, r7, #7
 8004588:	2200      	movs	r2, #0
 800458a:	701a      	strb	r2, [r3, #0]
	reg_addr |= 0x80;
 800458c:	1dfb      	adds	r3, r7, #7
 800458e:	1dfa      	adds	r2, r7, #7
 8004590:	7812      	ldrb	r2, [r2, #0]
 8004592:	2180      	movs	r1, #128	; 0x80
 8004594:	4249      	negs	r1, r1
 8004596:	430a      	orrs	r2, r1
 8004598:	701a      	strb	r2, [r3, #0]
	uint8_t reg_addr_tab[2];
	reg_addr_tab[0] = reg_addr;
 800459a:	1d3b      	adds	r3, r7, #4
 800459c:	1dfa      	adds	r2, r7, #7
 800459e:	7812      	ldrb	r2, [r2, #0]
 80045a0:	701a      	strb	r2, [r3, #0]
	uint8_t reg_data[2];

	do{
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80045a2:	23a0      	movs	r3, #160	; 0xa0
 80045a4:	05db      	lsls	r3, r3, #23
 80045a6:	2200      	movs	r2, #0
 80045a8:	2101      	movs	r1, #1
 80045aa:	0018      	movs	r0, r3
 80045ac:	f001 fb54 	bl	8005c58 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&hspi1, reg_addr_tab,reg_data, 2, 1000);
 80045b0:	003a      	movs	r2, r7
 80045b2:	1d39      	adds	r1, r7, #4
 80045b4:	480b      	ldr	r0, [pc, #44]	; (80045e4 <BMA456_Check_Connection+0x64>)
 80045b6:	23fa      	movs	r3, #250	; 0xfa
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	2302      	movs	r3, #2
 80045be:	f003 f853 	bl	8007668 <HAL_SPI_TransmitReceive>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80045c2:	23a0      	movs	r3, #160	; 0xa0
 80045c4:	05db      	lsls	r3, r3, #23
 80045c6:	2201      	movs	r2, #1
 80045c8:	2101      	movs	r1, #1
 80045ca:	0018      	movs	r0, r3
 80045cc:	f001 fb44 	bl	8005c58 <HAL_GPIO_WritePin>
	}while(reg_data[1] != 0x16);
 80045d0:	003b      	movs	r3, r7
 80045d2:	785b      	ldrb	r3, [r3, #1]
 80045d4:	2b16      	cmp	r3, #22
 80045d6:	d1e4      	bne.n	80045a2 <BMA456_Check_Connection+0x22>

    return 1;
 80045d8:	2301      	movs	r3, #1

}
 80045da:	0018      	movs	r0, r3
 80045dc:	46bd      	mov	sp, r7
 80045de:	b002      	add	sp, #8
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	200002c4 	.word	0x200002c4

080045e8 <BMA456_Init>:

void BMA456_Init()
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
	//HAL_Delay(10);

	//BMA456_SPI_Write(BMA456_PWR_CTRL, 0x00, &hspi2);
	//HAL_Delay(10);

	BMA456_SPI_Write(BMA456_CMD, 0xB6);
 80045ec:	21b6      	movs	r1, #182	; 0xb6
 80045ee:	207e      	movs	r0, #126	; 0x7e
 80045f0:	f000 f86a 	bl	80046c8 <BMA456_SPI_Write>
	HAL_Delay(10);
 80045f4:	200a      	movs	r0, #10
 80045f6:	f000 fb51 	bl	8004c9c <HAL_Delay>

	BMA456_SPI_Write(BMA456_PWR_CONF, 0x00);
 80045fa:	2100      	movs	r1, #0
 80045fc:	207c      	movs	r0, #124	; 0x7c
 80045fe:	f000 f863 	bl	80046c8 <BMA456_SPI_Write>
	HAL_Delay(10);
 8004602:	200a      	movs	r0, #10
 8004604:	f000 fb4a 	bl	8004c9c <HAL_Delay>

	BMA456_SPI_Write(BMA456_INIT_CTRL, 0x00);
 8004608:	2100      	movs	r1, #0
 800460a:	2059      	movs	r0, #89	; 0x59
 800460c:	f000 f85c 	bl	80046c8 <BMA456_SPI_Write>
	HAL_Delay(10);
 8004610:	200a      	movs	r0, #10
 8004612:	f000 fb43 	bl	8004c9c <HAL_Delay>

	BMA456_SPI_Write(0x41, 0x03);
 8004616:	2103      	movs	r1, #3
 8004618:	2041      	movs	r0, #65	; 0x41
 800461a:	f000 f855 	bl	80046c8 <BMA456_SPI_Write>
	HAL_Delay(10);
 800461e:	200a      	movs	r0, #10
 8004620:	f000 fb3c 	bl	8004c9c <HAL_Delay>

	BMA456_SPI_Write(BMA456_INIT_CTRL, 0x01);
 8004624:	2101      	movs	r1, #1
 8004626:	2059      	movs	r0, #89	; 0x59
 8004628:	f000 f84e 	bl	80046c8 <BMA456_SPI_Write>
	HAL_Delay(10);
 800462c:	200a      	movs	r0, #10
 800462e:	f000 fb35 	bl	8004c9c <HAL_Delay>

	HAL_Delay (150);
 8004632:	2096      	movs	r0, #150	; 0x96
 8004634:	f000 fb32 	bl	8004c9c <HAL_Delay>

	BMA456_SPI_Write(BMA456_PWR_CTRL, 0x04);
 8004638:	2104      	movs	r1, #4
 800463a:	207d      	movs	r0, #125	; 0x7d
 800463c:	f000 f844 	bl	80046c8 <BMA456_SPI_Write>
	HAL_Delay(10);
 8004640:	200a      	movs	r0, #10
 8004642:	f000 fb2b 	bl	8004c9c <HAL_Delay>

	BMA456_SPI_Write(BMA456_ACC_CONF, 0x17);
 8004646:	2117      	movs	r1, #23
 8004648:	2040      	movs	r0, #64	; 0x40
 800464a:	f000 f83d 	bl	80046c8 <BMA456_SPI_Write>
	HAL_Delay(10);
 800464e:	200a      	movs	r0, #10
 8004650:	f000 fb24 	bl	8004c9c <HAL_Delay>

	BMA456_SPI_Write(BMA456_PWR_CONF, 0x03);
 8004654:	2103      	movs	r1, #3
 8004656:	207c      	movs	r0, #124	; 0x7c
 8004658:	f000 f836 	bl	80046c8 <BMA456_SPI_Write>
	HAL_Delay(10);
 800465c:	200a      	movs	r0, #10
 800465e:	f000 fb1d 	bl	8004c9c <HAL_Delay>
}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <BMA456_Get_Sensor_Data>:

void BMA456_Get_Sensor_Data(uint8_t *data_read)
{
 8004668:	b590      	push	{r4, r7, lr}
 800466a:	b089      	sub	sp, #36	; 0x24
 800466c:	af02      	add	r7, sp, #8
 800466e:	6078      	str	r0, [r7, #4]
	uint8_t reg_addr = 0x12;
 8004670:	2017      	movs	r0, #23
 8004672:	183b      	adds	r3, r7, r0
 8004674:	2212      	movs	r2, #18
 8004676:	701a      	strb	r2, [r3, #0]
	reg_addr |= 0x80;
 8004678:	183b      	adds	r3, r7, r0
 800467a:	183a      	adds	r2, r7, r0
 800467c:	7812      	ldrb	r2, [r2, #0]
 800467e:	2180      	movs	r1, #128	; 0x80
 8004680:	4249      	negs	r1, r1
 8004682:	430a      	orrs	r2, r1
 8004684:	701a      	strb	r2, [r3, #0]
	uint8_t data_sent[BITES_TO_SEND];
	data_sent[0] = reg_addr;
 8004686:	240c      	movs	r4, #12
 8004688:	193b      	adds	r3, r7, r4
 800468a:	183a      	adds	r2, r7, r0
 800468c:	7812      	ldrb	r2, [r2, #0]
 800468e:	701a      	strb	r2, [r3, #0]

	//while(1){
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8004690:	23a0      	movs	r3, #160	; 0xa0
 8004692:	05db      	lsls	r3, r3, #23
 8004694:	2200      	movs	r2, #0
 8004696:	2101      	movs	r1, #1
 8004698:	0018      	movs	r0, r3
 800469a:	f001 fadd 	bl	8005c58 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, data_sent, data_read, BITES_TO_SEND, 100);
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	1939      	adds	r1, r7, r4
 80046a2:	4808      	ldr	r0, [pc, #32]	; (80046c4 <BMA456_Get_Sensor_Data+0x5c>)
 80046a4:	2364      	movs	r3, #100	; 0x64
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	2308      	movs	r3, #8
 80046aa:	f002 ffdd 	bl	8007668 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80046ae:	23a0      	movs	r3, #160	; 0xa0
 80046b0:	05db      	lsls	r3, r3, #23
 80046b2:	2201      	movs	r2, #1
 80046b4:	2101      	movs	r1, #1
 80046b6:	0018      	movs	r0, r3
 80046b8:	f001 face 	bl	8005c58 <HAL_GPIO_WritePin>



	//}
}
 80046bc:	46c0      	nop			; (mov r8, r8)
 80046be:	46bd      	mov	sp, r7
 80046c0:	b007      	add	sp, #28
 80046c2:	bd90      	pop	{r4, r7, pc}
 80046c4:	200002c4 	.word	0x200002c4

080046c8 <BMA456_SPI_Write>:

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);

}
void BMA456_SPI_Write(uint8_t reg_addr, uint8_t reg_data)
{
 80046c8:	b590      	push	{r4, r7, lr}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	0002      	movs	r2, r0
 80046d0:	1dfb      	adds	r3, r7, #7
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	1dbb      	adds	r3, r7, #6
 80046d6:	1c0a      	adds	r2, r1, #0
 80046d8:	701a      	strb	r2, [r3, #0]
	uint8_t reg_data_tab[2];
	reg_data_tab[0] = reg_addr & 0x7F;
 80046da:	1dfb      	adds	r3, r7, #7
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	227f      	movs	r2, #127	; 0x7f
 80046e0:	4013      	ands	r3, r2
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	240c      	movs	r4, #12
 80046e6:	193b      	adds	r3, r7, r4
 80046e8:	701a      	strb	r2, [r3, #0]
	reg_data_tab[1] = reg_data;
 80046ea:	193b      	adds	r3, r7, r4
 80046ec:	1dba      	adds	r2, r7, #6
 80046ee:	7812      	ldrb	r2, [r2, #0]
 80046f0:	705a      	strb	r2, [r3, #1]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80046f2:	23a0      	movs	r3, #160	; 0xa0
 80046f4:	05db      	lsls	r3, r3, #23
 80046f6:	2200      	movs	r2, #0
 80046f8:	2101      	movs	r1, #1
 80046fa:	0018      	movs	r0, r3
 80046fc:	f001 faac 	bl	8005c58 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, reg_data_tab, 2, 1000);
 8004700:	23fa      	movs	r3, #250	; 0xfa
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	1939      	adds	r1, r7, r4
 8004706:	4807      	ldr	r0, [pc, #28]	; (8004724 <BMA456_SPI_Write+0x5c>)
 8004708:	2202      	movs	r2, #2
 800470a:	f002 fd21 	bl	8007150 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800470e:	23a0      	movs	r3, #160	; 0xa0
 8004710:	05db      	lsls	r3, r3, #23
 8004712:	2201      	movs	r2, #1
 8004714:	2101      	movs	r1, #1
 8004716:	0018      	movs	r0, r3
 8004718:	f001 fa9e 	bl	8005c58 <HAL_GPIO_WritePin>
}
 800471c:	46c0      	nop			; (mov r8, r8)
 800471e:	46bd      	mov	sp, r7
 8004720:	b005      	add	sp, #20
 8004722:	bd90      	pop	{r4, r7, pc}
 8004724:	200002c4 	.word	0x200002c4

08004728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800472c:	b672      	cpsid	i
}
 800472e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004730:	e7fe      	b.n	8004730 <Error_Handler+0x8>
	...

08004734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004738:	4b07      	ldr	r3, [pc, #28]	; (8004758 <HAL_MspInit+0x24>)
 800473a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <HAL_MspInit+0x24>)
 800473e:	2101      	movs	r1, #1
 8004740:	430a      	orrs	r2, r1
 8004742:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004744:	4b04      	ldr	r3, [pc, #16]	; (8004758 <HAL_MspInit+0x24>)
 8004746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004748:	4b03      	ldr	r3, [pc, #12]	; (8004758 <HAL_MspInit+0x24>)
 800474a:	2180      	movs	r1, #128	; 0x80
 800474c:	0549      	lsls	r1, r1, #21
 800474e:	430a      	orrs	r2, r1
 8004750:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40021000 	.word	0x40021000

0800475c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800475c:	b590      	push	{r4, r7, lr}
 800475e:	b089      	sub	sp, #36	; 0x24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004764:	240c      	movs	r4, #12
 8004766:	193b      	adds	r3, r7, r4
 8004768:	0018      	movs	r0, r3
 800476a:	2314      	movs	r3, #20
 800476c:	001a      	movs	r2, r3
 800476e:	2100      	movs	r1, #0
 8004770:	f004 f859 	bl	8008826 <memset>
  if(hadc->Instance==ADC1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a28      	ldr	r2, [pc, #160]	; (800481c <HAL_ADC_MspInit+0xc0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d14a      	bne.n	8004814 <HAL_ADC_MspInit+0xb8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800477e:	4b28      	ldr	r3, [pc, #160]	; (8004820 <HAL_ADC_MspInit+0xc4>)
 8004780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004782:	4b27      	ldr	r3, [pc, #156]	; (8004820 <HAL_ADC_MspInit+0xc4>)
 8004784:	2180      	movs	r1, #128	; 0x80
 8004786:	0089      	lsls	r1, r1, #2
 8004788:	430a      	orrs	r2, r1
 800478a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800478c:	4b24      	ldr	r3, [pc, #144]	; (8004820 <HAL_ADC_MspInit+0xc4>)
 800478e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004790:	4b23      	ldr	r3, [pc, #140]	; (8004820 <HAL_ADC_MspInit+0xc4>)
 8004792:	2102      	movs	r1, #2
 8004794:	430a      	orrs	r2, r1
 8004796:	62da      	str	r2, [r3, #44]	; 0x2c
 8004798:	4b21      	ldr	r3, [pc, #132]	; (8004820 <HAL_ADC_MspInit+0xc4>)
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	2202      	movs	r2, #2
 800479e:	4013      	ands	r3, r2
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80047a4:	193b      	adds	r3, r7, r4
 80047a6:	2202      	movs	r2, #2
 80047a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047aa:	193b      	adds	r3, r7, r4
 80047ac:	2203      	movs	r2, #3
 80047ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b0:	193b      	adds	r3, r7, r4
 80047b2:	2200      	movs	r2, #0
 80047b4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b6:	193b      	adds	r3, r7, r4
 80047b8:	4a1a      	ldr	r2, [pc, #104]	; (8004824 <HAL_ADC_MspInit+0xc8>)
 80047ba:	0019      	movs	r1, r3
 80047bc:	0010      	movs	r0, r2
 80047be:	f001 f8d5 	bl	800596c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80047c2:	4b19      	ldr	r3, [pc, #100]	; (8004828 <HAL_ADC_MspInit+0xcc>)
 80047c4:	4a19      	ldr	r2, [pc, #100]	; (800482c <HAL_ADC_MspInit+0xd0>)
 80047c6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80047c8:	4b17      	ldr	r3, [pc, #92]	; (8004828 <HAL_ADC_MspInit+0xcc>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047ce:	4b16      	ldr	r3, [pc, #88]	; (8004828 <HAL_ADC_MspInit+0xcc>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80047d4:	4b14      	ldr	r3, [pc, #80]	; (8004828 <HAL_ADC_MspInit+0xcc>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80047da:	4b13      	ldr	r3, [pc, #76]	; (8004828 <HAL_ADC_MspInit+0xcc>)
 80047dc:	2280      	movs	r2, #128	; 0x80
 80047de:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047e0:	4b11      	ldr	r3, [pc, #68]	; (8004828 <HAL_ADC_MspInit+0xcc>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047e6:	4b10      	ldr	r3, [pc, #64]	; (8004828 <HAL_ADC_MspInit+0xcc>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80047ec:	4b0e      	ldr	r3, [pc, #56]	; (8004828 <HAL_ADC_MspInit+0xcc>)
 80047ee:	2220      	movs	r2, #32
 80047f0:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80047f2:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <HAL_ADC_MspInit+0xcc>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80047f8:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <HAL_ADC_MspInit+0xcc>)
 80047fa:	0018      	movs	r0, r3
 80047fc:	f000 fefc 	bl	80055f8 <HAL_DMA_Init>
 8004800:	1e03      	subs	r3, r0, #0
 8004802:	d001      	beq.n	8004808 <HAL_ADC_MspInit+0xac>
    {
      Error_Handler();
 8004804:	f7ff ff90 	bl	8004728 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a07      	ldr	r2, [pc, #28]	; (8004828 <HAL_ADC_MspInit+0xcc>)
 800480c:	64da      	str	r2, [r3, #76]	; 0x4c
 800480e:	4b06      	ldr	r3, [pc, #24]	; (8004828 <HAL_ADC_MspInit+0xcc>)
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004814:	46c0      	nop			; (mov r8, r8)
 8004816:	46bd      	mov	sp, r7
 8004818:	b009      	add	sp, #36	; 0x24
 800481a:	bd90      	pop	{r4, r7, pc}
 800481c:	40012400 	.word	0x40012400
 8004820:	40021000 	.word	0x40021000
 8004824:	50000400 	.word	0x50000400
 8004828:	20000258 	.word	0x20000258
 800482c:	40020008 	.word	0x40020008

08004830 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a0a      	ldr	r2, [pc, #40]	; (8004868 <HAL_RTC_MspInit+0x38>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d10e      	bne.n	8004860 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004842:	4b0a      	ldr	r3, [pc, #40]	; (800486c <HAL_RTC_MspInit+0x3c>)
 8004844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004846:	4b09      	ldr	r3, [pc, #36]	; (800486c <HAL_RTC_MspInit+0x3c>)
 8004848:	2180      	movs	r1, #128	; 0x80
 800484a:	02c9      	lsls	r1, r1, #11
 800484c:	430a      	orrs	r2, r1
 800484e:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8004850:	2200      	movs	r2, #0
 8004852:	2100      	movs	r1, #0
 8004854:	2002      	movs	r0, #2
 8004856:	f000 fe9d 	bl	8005594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800485a:	2002      	movs	r0, #2
 800485c:	f000 feaf 	bl	80055be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004860:	46c0      	nop			; (mov r8, r8)
 8004862:	46bd      	mov	sp, r7
 8004864:	b002      	add	sp, #8
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40002800 	.word	0x40002800
 800486c:	40021000 	.word	0x40021000

08004870 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004870:	b590      	push	{r4, r7, lr}
 8004872:	b089      	sub	sp, #36	; 0x24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004878:	240c      	movs	r4, #12
 800487a:	193b      	adds	r3, r7, r4
 800487c:	0018      	movs	r0, r3
 800487e:	2314      	movs	r3, #20
 8004880:	001a      	movs	r2, r3
 8004882:	2100      	movs	r1, #0
 8004884:	f003 ffcf 	bl	8008826 <memset>
  if(hspi->Instance==SPI1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a18      	ldr	r2, [pc, #96]	; (80048f0 <HAL_SPI_MspInit+0x80>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d129      	bne.n	80048e6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004892:	4b18      	ldr	r3, [pc, #96]	; (80048f4 <HAL_SPI_MspInit+0x84>)
 8004894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004896:	4b17      	ldr	r3, [pc, #92]	; (80048f4 <HAL_SPI_MspInit+0x84>)
 8004898:	2180      	movs	r1, #128	; 0x80
 800489a:	0149      	lsls	r1, r1, #5
 800489c:	430a      	orrs	r2, r1
 800489e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048a0:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <HAL_SPI_MspInit+0x84>)
 80048a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a4:	4b13      	ldr	r3, [pc, #76]	; (80048f4 <HAL_SPI_MspInit+0x84>)
 80048a6:	2101      	movs	r1, #1
 80048a8:	430a      	orrs	r2, r1
 80048aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80048ac:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <HAL_SPI_MspInit+0x84>)
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	2201      	movs	r2, #1
 80048b2:	4013      	ands	r3, r2
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80048b8:	0021      	movs	r1, r4
 80048ba:	187b      	adds	r3, r7, r1
 80048bc:	22e0      	movs	r2, #224	; 0xe0
 80048be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c0:	187b      	adds	r3, r7, r1
 80048c2:	2202      	movs	r2, #2
 80048c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c6:	187b      	adds	r3, r7, r1
 80048c8:	2200      	movs	r2, #0
 80048ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048cc:	187b      	adds	r3, r7, r1
 80048ce:	2203      	movs	r2, #3
 80048d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80048d2:	187b      	adds	r3, r7, r1
 80048d4:	2200      	movs	r2, #0
 80048d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d8:	187a      	adds	r2, r7, r1
 80048da:	23a0      	movs	r3, #160	; 0xa0
 80048dc:	05db      	lsls	r3, r3, #23
 80048de:	0011      	movs	r1, r2
 80048e0:	0018      	movs	r0, r3
 80048e2:	f001 f843 	bl	800596c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	46bd      	mov	sp, r7
 80048ea:	b009      	add	sp, #36	; 0x24
 80048ec:	bd90      	pop	{r4, r7, pc}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	40013000 	.word	0x40013000
 80048f4:	40021000 	.word	0x40021000

080048f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048f8:	b590      	push	{r4, r7, lr}
 80048fa:	b089      	sub	sp, #36	; 0x24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004900:	240c      	movs	r4, #12
 8004902:	193b      	adds	r3, r7, r4
 8004904:	0018      	movs	r0, r3
 8004906:	2314      	movs	r3, #20
 8004908:	001a      	movs	r2, r3
 800490a:	2100      	movs	r1, #0
 800490c:	f003 ff8b 	bl	8008826 <memset>
  if(huart->Instance==USART1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a18      	ldr	r2, [pc, #96]	; (8004978 <HAL_UART_MspInit+0x80>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d12a      	bne.n	8004970 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800491a:	4b18      	ldr	r3, [pc, #96]	; (800497c <HAL_UART_MspInit+0x84>)
 800491c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800491e:	4b17      	ldr	r3, [pc, #92]	; (800497c <HAL_UART_MspInit+0x84>)
 8004920:	2180      	movs	r1, #128	; 0x80
 8004922:	01c9      	lsls	r1, r1, #7
 8004924:	430a      	orrs	r2, r1
 8004926:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004928:	4b14      	ldr	r3, [pc, #80]	; (800497c <HAL_UART_MspInit+0x84>)
 800492a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492c:	4b13      	ldr	r3, [pc, #76]	; (800497c <HAL_UART_MspInit+0x84>)
 800492e:	2101      	movs	r1, #1
 8004930:	430a      	orrs	r2, r1
 8004932:	62da      	str	r2, [r3, #44]	; 0x2c
 8004934:	4b11      	ldr	r3, [pc, #68]	; (800497c <HAL_UART_MspInit+0x84>)
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	2201      	movs	r2, #1
 800493a:	4013      	ands	r3, r2
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004940:	193b      	adds	r3, r7, r4
 8004942:	22c0      	movs	r2, #192	; 0xc0
 8004944:	00d2      	lsls	r2, r2, #3
 8004946:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004948:	0021      	movs	r1, r4
 800494a:	187b      	adds	r3, r7, r1
 800494c:	2202      	movs	r2, #2
 800494e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004950:	187b      	adds	r3, r7, r1
 8004952:	2200      	movs	r2, #0
 8004954:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004956:	187b      	adds	r3, r7, r1
 8004958:	2203      	movs	r2, #3
 800495a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800495c:	187b      	adds	r3, r7, r1
 800495e:	2204      	movs	r2, #4
 8004960:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004962:	187a      	adds	r2, r7, r1
 8004964:	23a0      	movs	r3, #160	; 0xa0
 8004966:	05db      	lsls	r3, r3, #23
 8004968:	0011      	movs	r1, r2
 800496a:	0018      	movs	r0, r3
 800496c:	f000 fffe 	bl	800596c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004970:	46c0      	nop			; (mov r8, r8)
 8004972:	46bd      	mov	sp, r7
 8004974:	b009      	add	sp, #36	; 0x24
 8004976:	bd90      	pop	{r4, r7, pc}
 8004978:	40013800 	.word	0x40013800
 800497c:	40021000 	.word	0x40021000

08004980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004984:	e7fe      	b.n	8004984 <NMI_Handler+0x4>

08004986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800498a:	e7fe      	b.n	800498a <HardFault_Handler+0x4>

0800498c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004990:	46c0      	nop			; (mov r8, r8)
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049a4:	f000 f95e 	bl	8004c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049a8:	46c0      	nop			; (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80049b4:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <RTC_IRQHandler+0x14>)
 80049b6:	0018      	movs	r0, r3
 80049b8:	f002 fafe 	bl	8006fb8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80049bc:	46c0      	nop			; (mov r8, r8)
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	200002a0 	.word	0x200002a0

080049c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80049cc:	4b03      	ldr	r3, [pc, #12]	; (80049dc <DMA1_Channel1_IRQHandler+0x14>)
 80049ce:	0018      	movs	r0, r3
 80049d0:	f000 fef0 	bl	80057b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80049d4:	46c0      	nop			; (mov r8, r8)
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	20000258 	.word	0x20000258

080049e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  return 1;
 80049e4:	2301      	movs	r3, #1
}
 80049e6:	0018      	movs	r0, r3
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <_kill>:

int _kill(int pid, int sig)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80049f6:	f003 fee3 	bl	80087c0 <__errno>
 80049fa:	0003      	movs	r3, r0
 80049fc:	2216      	movs	r2, #22
 80049fe:	601a      	str	r2, [r3, #0]
  return -1;
 8004a00:	2301      	movs	r3, #1
 8004a02:	425b      	negs	r3, r3
}
 8004a04:	0018      	movs	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	b002      	add	sp, #8
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <_exit>:

void _exit (int status)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004a14:	2301      	movs	r3, #1
 8004a16:	425a      	negs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	0011      	movs	r1, r2
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f7ff ffe5 	bl	80049ec <_kill>
  while (1) {}    /* Make sure we hang here */
 8004a22:	e7fe      	b.n	8004a22 <_exit+0x16>

08004a24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	e00a      	b.n	8004a4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004a36:	e000      	b.n	8004a3a <_read+0x16>
 8004a38:	bf00      	nop
 8004a3a:	0001      	movs	r1, r0
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	60ba      	str	r2, [r7, #8]
 8004a42:	b2ca      	uxtb	r2, r1
 8004a44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	dbf0      	blt.n	8004a36 <_read+0x12>
  }

  return len;
 8004a54:	687b      	ldr	r3, [r7, #4]
}
 8004a56:	0018      	movs	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b006      	add	sp, #24
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b086      	sub	sp, #24
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	e009      	b.n	8004a84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	60ba      	str	r2, [r7, #8]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	0018      	movs	r0, r3
 8004a7a:	e000      	b.n	8004a7e <_write+0x20>
 8004a7c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	3301      	adds	r3, #1
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	dbf1      	blt.n	8004a70 <_write+0x12>
  }
  return len;
 8004a8c:	687b      	ldr	r3, [r7, #4]
}
 8004a8e:	0018      	movs	r0, r3
 8004a90:	46bd      	mov	sp, r7
 8004a92:	b006      	add	sp, #24
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <_close>:

int _close(int file)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b082      	sub	sp, #8
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	425b      	negs	r3, r3
}
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	b002      	add	sp, #8
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b082      	sub	sp, #8
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2280      	movs	r2, #128	; 0x80
 8004ab8:	0192      	lsls	r2, r2, #6
 8004aba:	605a      	str	r2, [r3, #4]
  return 0;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	0018      	movs	r0, r3
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	b002      	add	sp, #8
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <_isatty>:

int _isatty(int file)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b082      	sub	sp, #8
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ace:	2301      	movs	r3, #1
}
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b002      	add	sp, #8
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	b004      	add	sp, #16
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004af8:	4a14      	ldr	r2, [pc, #80]	; (8004b4c <_sbrk+0x5c>)
 8004afa:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <_sbrk+0x60>)
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b04:	4b13      	ldr	r3, [pc, #76]	; (8004b54 <_sbrk+0x64>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d102      	bne.n	8004b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b0c:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <_sbrk+0x64>)
 8004b0e:	4a12      	ldr	r2, [pc, #72]	; (8004b58 <_sbrk+0x68>)
 8004b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b12:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <_sbrk+0x64>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	18d3      	adds	r3, r2, r3
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d207      	bcs.n	8004b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b20:	f003 fe4e 	bl	80087c0 <__errno>
 8004b24:	0003      	movs	r3, r0
 8004b26:	220c      	movs	r2, #12
 8004b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	425b      	negs	r3, r3
 8004b2e:	e009      	b.n	8004b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b30:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <_sbrk+0x64>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b36:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <_sbrk+0x64>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	18d2      	adds	r2, r2, r3
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <_sbrk+0x64>)
 8004b40:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004b42:	68fb      	ldr	r3, [r7, #12]
}
 8004b44:	0018      	movs	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	b006      	add	sp, #24
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	20002000 	.word	0x20002000
 8004b50:	00000400 	.word	0x00000400
 8004b54:	20000450 	.word	0x20000450
 8004b58:	20000468 	.word	0x20000468

08004b5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b60:	46c0      	nop			; (mov r8, r8)
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004b68:	480d      	ldr	r0, [pc, #52]	; (8004ba0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004b6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004b6c:	f7ff fff6 	bl	8004b5c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b70:	480c      	ldr	r0, [pc, #48]	; (8004ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004b72:	490d      	ldr	r1, [pc, #52]	; (8004ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004b74:	4a0d      	ldr	r2, [pc, #52]	; (8004bac <LoopForever+0xe>)
  movs r3, #0
 8004b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b78:	e002      	b.n	8004b80 <LoopCopyDataInit>

08004b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b7e:	3304      	adds	r3, #4

08004b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b84:	d3f9      	bcc.n	8004b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b86:	4a0a      	ldr	r2, [pc, #40]	; (8004bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004b88:	4c0a      	ldr	r4, [pc, #40]	; (8004bb4 <LoopForever+0x16>)
  movs r3, #0
 8004b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b8c:	e001      	b.n	8004b92 <LoopFillZerobss>

08004b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b90:	3204      	adds	r2, #4

08004b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b94:	d3fb      	bcc.n	8004b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004b96:	f003 fe19 	bl	80087cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b9a:	f7fe ff91 	bl	8003ac0 <main>

08004b9e <LoopForever>:

LoopForever:
    b LoopForever
 8004b9e:	e7fe      	b.n	8004b9e <LoopForever>
   ldr   r0, =_estack
 8004ba0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ba8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004bac:	0800bd6c 	.word	0x0800bd6c
  ldr r2, =_sbss
 8004bb0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004bb4:	20000468 	.word	0x20000468

08004bb8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004bb8:	e7fe      	b.n	8004bb8 <ADC1_COMP_IRQHandler>
	...

08004bbc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004bc2:	1dfb      	adds	r3, r7, #7
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_Init+0x3c>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <HAL_Init+0x3c>)
 8004bce:	2140      	movs	r1, #64	; 0x40
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004bd4:	2003      	movs	r0, #3
 8004bd6:	f000 f811 	bl	8004bfc <HAL_InitTick>
 8004bda:	1e03      	subs	r3, r0, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004bde:	1dfb      	adds	r3, r7, #7
 8004be0:	2201      	movs	r2, #1
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	e001      	b.n	8004bea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004be6:	f7ff fda5 	bl	8004734 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004bea:	1dfb      	adds	r3, r7, #7
 8004bec:	781b      	ldrb	r3, [r3, #0]
}
 8004bee:	0018      	movs	r0, r3
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b002      	add	sp, #8
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	40022000 	.word	0x40022000

08004bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bfc:	b590      	push	{r4, r7, lr}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c04:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <HAL_InitTick+0x5c>)
 8004c06:	681c      	ldr	r4, [r3, #0]
 8004c08:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <HAL_InitTick+0x60>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	0019      	movs	r1, r3
 8004c0e:	23fa      	movs	r3, #250	; 0xfa
 8004c10:	0098      	lsls	r0, r3, #2
 8004c12:	f7fb fa95 	bl	8000140 <__udivsi3>
 8004c16:	0003      	movs	r3, r0
 8004c18:	0019      	movs	r1, r3
 8004c1a:	0020      	movs	r0, r4
 8004c1c:	f7fb fa90 	bl	8000140 <__udivsi3>
 8004c20:	0003      	movs	r3, r0
 8004c22:	0018      	movs	r0, r3
 8004c24:	f000 fcdb 	bl	80055de <HAL_SYSTICK_Config>
 8004c28:	1e03      	subs	r3, r0, #0
 8004c2a:	d001      	beq.n	8004c30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e00f      	b.n	8004c50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d80b      	bhi.n	8004c4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	2301      	movs	r3, #1
 8004c3a:	425b      	negs	r3, r3
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f000 fca8 	bl	8005594 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c44:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <HAL_InitTick+0x64>)
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e000      	b.n	8004c50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
}
 8004c50:	0018      	movs	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	b003      	add	sp, #12
 8004c56:	bd90      	pop	{r4, r7, pc}
 8004c58:	20000004 	.word	0x20000004
 8004c5c:	2000000c 	.word	0x2000000c
 8004c60:	20000008 	.word	0x20000008

08004c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c68:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <HAL_IncTick+0x1c>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	001a      	movs	r2, r3
 8004c6e:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <HAL_IncTick+0x20>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	18d2      	adds	r2, r2, r3
 8004c74:	4b03      	ldr	r3, [pc, #12]	; (8004c84 <HAL_IncTick+0x20>)
 8004c76:	601a      	str	r2, [r3, #0]
}
 8004c78:	46c0      	nop			; (mov r8, r8)
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	2000000c 	.word	0x2000000c
 8004c84:	20000454 	.word	0x20000454

08004c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c8c:	4b02      	ldr	r3, [pc, #8]	; (8004c98 <HAL_GetTick+0x10>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
}
 8004c90:	0018      	movs	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	20000454 	.word	0x20000454

08004c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ca4:	f7ff fff0 	bl	8004c88 <HAL_GetTick>
 8004ca8:	0003      	movs	r3, r0
 8004caa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	d005      	beq.n	8004cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <HAL_Delay+0x44>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	001a      	movs	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	189b      	adds	r3, r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	f7ff ffe0 	bl	8004c88 <HAL_GetTick>
 8004cc8:	0002      	movs	r2, r0
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d8f7      	bhi.n	8004cc4 <HAL_Delay+0x28>
  {
  }
}
 8004cd4:	46c0      	nop			; (mov r8, r8)
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	b004      	add	sp, #16
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	2000000c 	.word	0x2000000c

08004ce4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004ce8:	4b04      	ldr	r3, [pc, #16]	; (8004cfc <HAL_SuspendTick+0x18>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4b03      	ldr	r3, [pc, #12]	; (8004cfc <HAL_SuspendTick+0x18>)
 8004cee:	2102      	movs	r1, #2
 8004cf0:	438a      	bics	r2, r1
 8004cf2:	601a      	str	r2, [r3, #0]
}
 8004cf4:	46c0      	nop			; (mov r8, r8)
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	e000e010 	.word	0xe000e010

08004d00 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8004d04:	4b04      	ldr	r3, [pc, #16]	; (8004d18 <HAL_ResumeTick+0x18>)
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	4b03      	ldr	r3, [pc, #12]	; (8004d18 <HAL_ResumeTick+0x18>)
 8004d0a:	2102      	movs	r1, #2
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	601a      	str	r2, [r3, #0]
}
 8004d10:	46c0      	nop			; (mov r8, r8)
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	e000e010 	.word	0xe000e010

08004d1c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e159      	b.n	8004fe2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10a      	bne.n	8004d4c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2250      	movs	r2, #80	; 0x50
 8004d40:	2100      	movs	r1, #0
 8004d42:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	0018      	movs	r0, r3
 8004d48:	f7ff fd08 	bl	800475c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d50:	2210      	movs	r2, #16
 8004d52:	4013      	ands	r3, r2
 8004d54:	2b10      	cmp	r3, #16
 8004d56:	d005      	beq.n	8004d64 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2204      	movs	r2, #4
 8004d60:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004d62:	d00b      	beq.n	8004d7c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d68:	2210      	movs	r2, #16
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2250      	movs	r2, #80	; 0x50
 8004d74:	2100      	movs	r1, #0
 8004d76:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e132      	b.n	8004fe2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d80:	4a9a      	ldr	r2, [pc, #616]	; (8004fec <HAL_ADC_Init+0x2d0>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	2202      	movs	r2, #2
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	2203      	movs	r2, #3
 8004d94:	4013      	ands	r3, r2
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d108      	bne.n	8004dac <HAL_ADC_Init+0x90>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2201      	movs	r2, #1
 8004da2:	4013      	ands	r3, r2
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_ADC_Init+0x90>
 8004da8:	2301      	movs	r3, #1
 8004daa:	e000      	b.n	8004dae <HAL_ADC_Init+0x92>
 8004dac:	2300      	movs	r3, #0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d149      	bne.n	8004e46 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	23c0      	movs	r3, #192	; 0xc0
 8004db8:	061b      	lsls	r3, r3, #24
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d00b      	beq.n	8004dd6 <HAL_ADC_Init+0xba>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	2380      	movs	r3, #128	; 0x80
 8004dc4:	05db      	lsls	r3, r3, #23
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d005      	beq.n	8004dd6 <HAL_ADC_Init+0xba>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	2380      	movs	r3, #128	; 0x80
 8004dd0:	061b      	lsls	r3, r3, #24
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d111      	bne.n	8004dfa <HAL_ADC_Init+0xde>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	0092      	lsls	r2, r2, #2
 8004de2:	0892      	lsrs	r2, r2, #2
 8004de4:	611a      	str	r2, [r3, #16]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6919      	ldr	r1, [r3, #16]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	611a      	str	r2, [r3, #16]
 8004df8:	e014      	b.n	8004e24 <HAL_ADC_Init+0x108>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	0092      	lsls	r2, r2, #2
 8004e06:	0892      	lsrs	r2, r2, #2
 8004e08:	611a      	str	r2, [r3, #16]
 8004e0a:	4b79      	ldr	r3, [pc, #484]	; (8004ff0 <HAL_ADC_Init+0x2d4>)
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	4b78      	ldr	r3, [pc, #480]	; (8004ff0 <HAL_ADC_Init+0x2d4>)
 8004e10:	4978      	ldr	r1, [pc, #480]	; (8004ff4 <HAL_ADC_Init+0x2d8>)
 8004e12:	400a      	ands	r2, r1
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	4b76      	ldr	r3, [pc, #472]	; (8004ff0 <HAL_ADC_Init+0x2d4>)
 8004e18:	6819      	ldr	r1, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	4b74      	ldr	r3, [pc, #464]	; (8004ff0 <HAL_ADC_Init+0x2d4>)
 8004e20:	430a      	orrs	r2, r1
 8004e22:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2118      	movs	r1, #24
 8004e30:	438a      	bics	r2, r1
 8004e32:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68d9      	ldr	r1, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004e46:	4b6a      	ldr	r3, [pc, #424]	; (8004ff0 <HAL_ADC_Init+0x2d4>)
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	4b69      	ldr	r3, [pc, #420]	; (8004ff0 <HAL_ADC_Init+0x2d4>)
 8004e4c:	496a      	ldr	r1, [pc, #424]	; (8004ff8 <HAL_ADC_Init+0x2dc>)
 8004e4e:	400a      	ands	r2, r1
 8004e50:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8004e52:	4b67      	ldr	r3, [pc, #412]	; (8004ff0 <HAL_ADC_Init+0x2d4>)
 8004e54:	6819      	ldr	r1, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5a:	065a      	lsls	r2, r3, #25
 8004e5c:	4b64      	ldr	r3, [pc, #400]	; (8004ff0 <HAL_ADC_Init+0x2d4>)
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	2380      	movs	r3, #128	; 0x80
 8004e6a:	055b      	lsls	r3, r3, #21
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d108      	bne.n	8004e82 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2180      	movs	r1, #128	; 0x80
 8004e7c:	0549      	lsls	r1, r1, #21
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	495b      	ldr	r1, [pc, #364]	; (8004ffc <HAL_ADC_Init+0x2e0>)
 8004e8e:	400a      	ands	r2, r1
 8004e90:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68d9      	ldr	r1, [r3, #12]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d101      	bne.n	8004ea8 <HAL_ADC_Init+0x18c>
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	e000      	b.n	8004eaa <HAL_ADC_Init+0x18e>
 8004ea8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004eaa:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2020      	movs	r0, #32
 8004eb0:	5c1b      	ldrb	r3, [r3, r0]
 8004eb2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004eb4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	202c      	movs	r0, #44	; 0x2c
 8004eba:	5c1b      	ldrb	r3, [r3, r0]
 8004ebc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004ebe:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004ec4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004ecc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004ed4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ee2:	23c2      	movs	r3, #194	; 0xc2
 8004ee4:	33ff      	adds	r3, #255	; 0xff
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d00b      	beq.n	8004f02 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68d9      	ldr	r1, [r3, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2221      	movs	r2, #33	; 0x21
 8004f06:	5c9b      	ldrb	r3, [r3, r2]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d11a      	bne.n	8004f42 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	5c9b      	ldrb	r3, [r3, r2]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d109      	bne.n	8004f2a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2180      	movs	r1, #128	; 0x80
 8004f22:	0249      	lsls	r1, r1, #9
 8004f24:	430a      	orrs	r2, r1
 8004f26:	60da      	str	r2, [r3, #12]
 8004f28:	e00b      	b.n	8004f42 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2e:	2220      	movs	r2, #32
 8004f30:	431a      	orrs	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d11f      	bne.n	8004f8a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	492a      	ldr	r1, [pc, #168]	; (8005000 <HAL_ADC_Init+0x2e4>)
 8004f56:	400a      	ands	r2, r1
 8004f58:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6919      	ldr	r1, [r3, #16]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004f68:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8004f6e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2101      	movs	r1, #1
 8004f84:	430a      	orrs	r2, r1
 8004f86:	611a      	str	r2, [r3, #16]
 8004f88:	e00e      	b.n	8004fa8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	2201      	movs	r2, #1
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d107      	bne.n	8004fa8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	438a      	bics	r2, r1
 8004fa6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695a      	ldr	r2, [r3, #20]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2107      	movs	r1, #7
 8004fb4:	438a      	bics	r2, r1
 8004fb6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6959      	ldr	r1, [r3, #20]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	4393      	bics	r3, r2
 8004fd8:	2201      	movs	r2, #1
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	b002      	add	sp, #8
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	fffffefd 	.word	0xfffffefd
 8004ff0:	40012708 	.word	0x40012708
 8004ff4:	ffc3ffff 	.word	0xffc3ffff
 8004ff8:	fdffffff 	.word	0xfdffffff
 8004ffc:	fffe0219 	.word	0xfffe0219
 8005000:	fffffc03 	.word	0xfffffc03

08005004 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005004:	b590      	push	{r4, r7, lr}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005010:	2317      	movs	r3, #23
 8005012:	18fb      	adds	r3, r7, r3
 8005014:	2200      	movs	r2, #0
 8005016:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2204      	movs	r2, #4
 8005020:	4013      	ands	r3, r2
 8005022:	d15e      	bne.n	80050e2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2250      	movs	r2, #80	; 0x50
 8005028:	5c9b      	ldrb	r3, [r3, r2]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_ADC_Start_DMA+0x2e>
 800502e:	2302      	movs	r3, #2
 8005030:	e05e      	b.n	80050f0 <HAL_ADC_Start_DMA+0xec>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2250      	movs	r2, #80	; 0x50
 8005036:	2101      	movs	r1, #1
 8005038:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2101      	movs	r1, #1
 8005046:	430a      	orrs	r2, r1
 8005048:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d007      	beq.n	8005062 <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8005052:	2317      	movs	r3, #23
 8005054:	18fc      	adds	r4, r7, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	0018      	movs	r0, r3
 800505a:	f000 f8e3 	bl	8005224 <ADC_Enable>
 800505e:	0003      	movs	r3, r0
 8005060:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005062:	2317      	movs	r3, #23
 8005064:	18fb      	adds	r3, r7, r3
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d13e      	bne.n	80050ea <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005070:	4a21      	ldr	r2, [pc, #132]	; (80050f8 <HAL_ADC_Start_DMA+0xf4>)
 8005072:	4013      	ands	r3, r2
 8005074:	2280      	movs	r2, #128	; 0x80
 8005076:	0052      	lsls	r2, r2, #1
 8005078:	431a      	orrs	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2250      	movs	r2, #80	; 0x50
 8005088:	2100      	movs	r1, #0
 800508a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005090:	4a1a      	ldr	r2, [pc, #104]	; (80050fc <HAL_ADC_Start_DMA+0xf8>)
 8005092:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005098:	4a19      	ldr	r2, [pc, #100]	; (8005100 <HAL_ADC_Start_DMA+0xfc>)
 800509a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a0:	4a18      	ldr	r2, [pc, #96]	; (8005104 <HAL_ADC_Start_DMA+0x100>)
 80050a2:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	221c      	movs	r2, #28
 80050aa:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2110      	movs	r1, #16
 80050b8:	430a      	orrs	r2, r1
 80050ba:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3340      	adds	r3, #64	; 0x40
 80050c6:	0019      	movs	r1, r3
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f000 fb0c 	bl	80056e8 <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2104      	movs	r1, #4
 80050dc:	430a      	orrs	r2, r1
 80050de:	609a      	str	r2, [r3, #8]
 80050e0:	e003      	b.n	80050ea <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80050e2:	2317      	movs	r3, #23
 80050e4:	18fb      	adds	r3, r7, r3
 80050e6:	2202      	movs	r2, #2
 80050e8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80050ea:	2317      	movs	r3, #23
 80050ec:	18fb      	adds	r3, r7, r3
 80050ee:	781b      	ldrb	r3, [r3, #0]
}
 80050f0:	0018      	movs	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	b007      	add	sp, #28
 80050f6:	bd90      	pop	{r4, r7, pc}
 80050f8:	fffff0fe 	.word	0xfffff0fe
 80050fc:	080052f5 	.word	0x080052f5
 8005100:	080053a9 	.word	0x080053a9
 8005104:	080053c7 	.word	0x080053c7

08005108 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005110:	46c0      	nop			; (mov r8, r8)
 8005112:	46bd      	mov	sp, r7
 8005114:	b002      	add	sp, #8
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2250      	movs	r2, #80	; 0x50
 8005126:	5c9b      	ldrb	r3, [r3, r2]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_ADC_ConfigChannel+0x18>
 800512c:	2302      	movs	r3, #2
 800512e:	e06c      	b.n	800520a <HAL_ADC_ConfigChannel+0xf2>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2250      	movs	r2, #80	; 0x50
 8005134:	2101      	movs	r1, #1
 8005136:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2204      	movs	r2, #4
 8005140:	4013      	ands	r3, r2
 8005142:	d00b      	beq.n	800515c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005148:	2220      	movs	r2, #32
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2250      	movs	r2, #80	; 0x50
 8005154:	2100      	movs	r1, #0
 8005156:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e056      	b.n	800520a <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	4a2c      	ldr	r2, [pc, #176]	; (8005214 <HAL_ADC_ConfigChannel+0xfc>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d028      	beq.n	80051b8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	035b      	lsls	r3, r3, #13
 8005172:	0b5a      	lsrs	r2, r3, #13
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	2380      	movs	r3, #128	; 0x80
 8005182:	02db      	lsls	r3, r3, #11
 8005184:	4013      	ands	r3, r2
 8005186:	d009      	beq.n	800519c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8005188:	4b23      	ldr	r3, [pc, #140]	; (8005218 <HAL_ADC_ConfigChannel+0x100>)
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	4b22      	ldr	r3, [pc, #136]	; (8005218 <HAL_ADC_ConfigChannel+0x100>)
 800518e:	2180      	movs	r1, #128	; 0x80
 8005190:	0409      	lsls	r1, r1, #16
 8005192:	430a      	orrs	r2, r1
 8005194:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8005196:	200a      	movs	r0, #10
 8005198:	f000 f930 	bl	80053fc <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	2380      	movs	r3, #128	; 0x80
 80051a2:	029b      	lsls	r3, r3, #10
 80051a4:	4013      	ands	r3, r2
 80051a6:	d02b      	beq.n	8005200 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80051a8:	4b1b      	ldr	r3, [pc, #108]	; (8005218 <HAL_ADC_ConfigChannel+0x100>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	4b1a      	ldr	r3, [pc, #104]	; (8005218 <HAL_ADC_ConfigChannel+0x100>)
 80051ae:	2180      	movs	r1, #128	; 0x80
 80051b0:	03c9      	lsls	r1, r1, #15
 80051b2:	430a      	orrs	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	e023      	b.n	8005200 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	035b      	lsls	r3, r3, #13
 80051c4:	0b5b      	lsrs	r3, r3, #13
 80051c6:	43d9      	mvns	r1, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	400a      	ands	r2, r1
 80051ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	2380      	movs	r3, #128	; 0x80
 80051d6:	02db      	lsls	r3, r3, #11
 80051d8:	4013      	ands	r3, r2
 80051da:	d005      	beq.n	80051e8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80051dc:	4b0e      	ldr	r3, [pc, #56]	; (8005218 <HAL_ADC_ConfigChannel+0x100>)
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <HAL_ADC_ConfigChannel+0x100>)
 80051e2:	490e      	ldr	r1, [pc, #56]	; (800521c <HAL_ADC_ConfigChannel+0x104>)
 80051e4:	400a      	ands	r2, r1
 80051e6:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	2380      	movs	r3, #128	; 0x80
 80051ee:	029b      	lsls	r3, r3, #10
 80051f0:	4013      	ands	r3, r2
 80051f2:	d005      	beq.n	8005200 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80051f4:	4b08      	ldr	r3, [pc, #32]	; (8005218 <HAL_ADC_ConfigChannel+0x100>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	4b07      	ldr	r3, [pc, #28]	; (8005218 <HAL_ADC_ConfigChannel+0x100>)
 80051fa:	4909      	ldr	r1, [pc, #36]	; (8005220 <HAL_ADC_ConfigChannel+0x108>)
 80051fc:	400a      	ands	r2, r1
 80051fe:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2250      	movs	r2, #80	; 0x50
 8005204:	2100      	movs	r1, #0
 8005206:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	0018      	movs	r0, r3
 800520c:	46bd      	mov	sp, r7
 800520e:	b002      	add	sp, #8
 8005210:	bd80      	pop	{r7, pc}
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	00001001 	.word	0x00001001
 8005218:	40012708 	.word	0x40012708
 800521c:	ff7fffff 	.word	0xff7fffff
 8005220:	ffbfffff 	.word	0xffbfffff

08005224 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	2203      	movs	r2, #3
 8005238:	4013      	ands	r3, r2
 800523a:	2b01      	cmp	r3, #1
 800523c:	d108      	bne.n	8005250 <ADC_Enable+0x2c>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2201      	movs	r2, #1
 8005246:	4013      	ands	r3, r2
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <ADC_Enable+0x2c>
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <ADC_Enable+0x2e>
 8005250:	2300      	movs	r3, #0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d146      	bne.n	80052e4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	4a24      	ldr	r2, [pc, #144]	; (80052f0 <ADC_Enable+0xcc>)
 800525e:	4013      	ands	r3, r2
 8005260:	d00d      	beq.n	800527e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005266:	2210      	movs	r2, #16
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005272:	2201      	movs	r2, #1
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e033      	b.n	80052e6 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2101      	movs	r1, #1
 800528a:	430a      	orrs	r2, r1
 800528c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800528e:	2001      	movs	r0, #1
 8005290:	f000 f8b4 	bl	80053fc <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8005294:	f7ff fcf8 	bl	8004c88 <HAL_GetTick>
 8005298:	0003      	movs	r3, r0
 800529a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800529c:	e01b      	b.n	80052d6 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800529e:	f7ff fcf3 	bl	8004c88 <HAL_GetTick>
 80052a2:	0002      	movs	r2, r0
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b0a      	cmp	r3, #10
 80052aa:	d914      	bls.n	80052d6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2201      	movs	r2, #1
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d00d      	beq.n	80052d6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052be:	2210      	movs	r2, #16
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ca:	2201      	movs	r2, #1
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e007      	b.n	80052e6 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2201      	movs	r2, #1
 80052de:	4013      	ands	r3, r2
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d1dc      	bne.n	800529e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	0018      	movs	r0, r3
 80052e8:	46bd      	mov	sp, r7
 80052ea:	b004      	add	sp, #16
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	80000017 	.word	0x80000017

080052f4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005300:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005306:	2250      	movs	r2, #80	; 0x50
 8005308:	4013      	ands	r3, r2
 800530a:	d141      	bne.n	8005390 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005310:	2280      	movs	r2, #128	; 0x80
 8005312:	0092      	lsls	r2, r2, #2
 8005314:	431a      	orrs	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68da      	ldr	r2, [r3, #12]
 8005320:	23c0      	movs	r3, #192	; 0xc0
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	4013      	ands	r3, r2
 8005326:	d12e      	bne.n	8005386 <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800532e:	2b00      	cmp	r3, #0
 8005330:	d129      	bne.n	8005386 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2208      	movs	r2, #8
 800533a:	4013      	ands	r3, r2
 800533c:	2b08      	cmp	r3, #8
 800533e:	d122      	bne.n	8005386 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	2204      	movs	r2, #4
 8005348:	4013      	ands	r3, r2
 800534a:	d110      	bne.n	800536e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	210c      	movs	r1, #12
 8005358:	438a      	bics	r2, r1
 800535a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005360:	4a10      	ldr	r2, [pc, #64]	; (80053a4 <ADC_DMAConvCplt+0xb0>)
 8005362:	4013      	ands	r3, r2
 8005364:	2201      	movs	r2, #1
 8005366:	431a      	orrs	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	655a      	str	r2, [r3, #84]	; 0x54
 800536c:	e00b      	b.n	8005386 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005372:	2220      	movs	r2, #32
 8005374:	431a      	orrs	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537e:	2201      	movs	r2, #1
 8005380:	431a      	orrs	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	0018      	movs	r0, r3
 800538a:	f7ff f853 	bl	8004434 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800538e:	e005      	b.n	800539c <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	0010      	movs	r0, r2
 800539a:	4798      	blx	r3
}
 800539c:	46c0      	nop			; (mov r8, r8)
 800539e:	46bd      	mov	sp, r7
 80053a0:	b004      	add	sp, #16
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	fffffefe 	.word	0xfffffefe

080053a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	0018      	movs	r0, r3
 80053ba:	f7ff f833 	bl	8004424 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	46bd      	mov	sp, r7
 80053c2:	b004      	add	sp, #16
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b084      	sub	sp, #16
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d8:	2240      	movs	r2, #64	; 0x40
 80053da:	431a      	orrs	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e4:	2204      	movs	r2, #4
 80053e6:	431a      	orrs	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	0018      	movs	r0, r3
 80053f0:	f7ff fe8a 	bl	8005108 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053f4:	46c0      	nop			; (mov r8, r8)
 80053f6:	46bd      	mov	sp, r7
 80053f8:	b004      	add	sp, #16
 80053fa:	bd80      	pop	{r7, pc}

080053fc <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8005404:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <ADC_DelayMicroSecond+0x38>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	490b      	ldr	r1, [pc, #44]	; (8005438 <ADC_DelayMicroSecond+0x3c>)
 800540a:	0018      	movs	r0, r3
 800540c:	f7fa fe98 	bl	8000140 <__udivsi3>
 8005410:	0003      	movs	r3, r0
 8005412:	001a      	movs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4353      	muls	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800541a:	e002      	b.n	8005422 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3b01      	subs	r3, #1
 8005420:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1f9      	bne.n	800541c <ADC_DelayMicroSecond+0x20>
  }
}
 8005428:	46c0      	nop			; (mov r8, r8)
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	46bd      	mov	sp, r7
 800542e:	b004      	add	sp, #16
 8005430:	bd80      	pop	{r7, pc}
 8005432:	46c0      	nop			; (mov r8, r8)
 8005434:	20000004 	.word	0x20000004
 8005438:	000f4240 	.word	0x000f4240

0800543c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	0002      	movs	r2, r0
 8005444:	1dfb      	adds	r3, r7, #7
 8005446:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005448:	1dfb      	adds	r3, r7, #7
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b7f      	cmp	r3, #127	; 0x7f
 800544e:	d809      	bhi.n	8005464 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005450:	1dfb      	adds	r3, r7, #7
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	001a      	movs	r2, r3
 8005456:	231f      	movs	r3, #31
 8005458:	401a      	ands	r2, r3
 800545a:	4b04      	ldr	r3, [pc, #16]	; (800546c <__NVIC_EnableIRQ+0x30>)
 800545c:	2101      	movs	r1, #1
 800545e:	4091      	lsls	r1, r2
 8005460:	000a      	movs	r2, r1
 8005462:	601a      	str	r2, [r3, #0]
  }
}
 8005464:	46c0      	nop			; (mov r8, r8)
 8005466:	46bd      	mov	sp, r7
 8005468:	b002      	add	sp, #8
 800546a:	bd80      	pop	{r7, pc}
 800546c:	e000e100 	.word	0xe000e100

08005470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005470:	b590      	push	{r4, r7, lr}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	0002      	movs	r2, r0
 8005478:	6039      	str	r1, [r7, #0]
 800547a:	1dfb      	adds	r3, r7, #7
 800547c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800547e:	1dfb      	adds	r3, r7, #7
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b7f      	cmp	r3, #127	; 0x7f
 8005484:	d828      	bhi.n	80054d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005486:	4a2f      	ldr	r2, [pc, #188]	; (8005544 <__NVIC_SetPriority+0xd4>)
 8005488:	1dfb      	adds	r3, r7, #7
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	b25b      	sxtb	r3, r3
 800548e:	089b      	lsrs	r3, r3, #2
 8005490:	33c0      	adds	r3, #192	; 0xc0
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	589b      	ldr	r3, [r3, r2]
 8005496:	1dfa      	adds	r2, r7, #7
 8005498:	7812      	ldrb	r2, [r2, #0]
 800549a:	0011      	movs	r1, r2
 800549c:	2203      	movs	r2, #3
 800549e:	400a      	ands	r2, r1
 80054a0:	00d2      	lsls	r2, r2, #3
 80054a2:	21ff      	movs	r1, #255	; 0xff
 80054a4:	4091      	lsls	r1, r2
 80054a6:	000a      	movs	r2, r1
 80054a8:	43d2      	mvns	r2, r2
 80054aa:	401a      	ands	r2, r3
 80054ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	019b      	lsls	r3, r3, #6
 80054b2:	22ff      	movs	r2, #255	; 0xff
 80054b4:	401a      	ands	r2, r3
 80054b6:	1dfb      	adds	r3, r7, #7
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	0018      	movs	r0, r3
 80054bc:	2303      	movs	r3, #3
 80054be:	4003      	ands	r3, r0
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80054c4:	481f      	ldr	r0, [pc, #124]	; (8005544 <__NVIC_SetPriority+0xd4>)
 80054c6:	1dfb      	adds	r3, r7, #7
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	b25b      	sxtb	r3, r3
 80054cc:	089b      	lsrs	r3, r3, #2
 80054ce:	430a      	orrs	r2, r1
 80054d0:	33c0      	adds	r3, #192	; 0xc0
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80054d6:	e031      	b.n	800553c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80054d8:	4a1b      	ldr	r2, [pc, #108]	; (8005548 <__NVIC_SetPriority+0xd8>)
 80054da:	1dfb      	adds	r3, r7, #7
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	0019      	movs	r1, r3
 80054e0:	230f      	movs	r3, #15
 80054e2:	400b      	ands	r3, r1
 80054e4:	3b08      	subs	r3, #8
 80054e6:	089b      	lsrs	r3, r3, #2
 80054e8:	3306      	adds	r3, #6
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	18d3      	adds	r3, r2, r3
 80054ee:	3304      	adds	r3, #4
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	1dfa      	adds	r2, r7, #7
 80054f4:	7812      	ldrb	r2, [r2, #0]
 80054f6:	0011      	movs	r1, r2
 80054f8:	2203      	movs	r2, #3
 80054fa:	400a      	ands	r2, r1
 80054fc:	00d2      	lsls	r2, r2, #3
 80054fe:	21ff      	movs	r1, #255	; 0xff
 8005500:	4091      	lsls	r1, r2
 8005502:	000a      	movs	r2, r1
 8005504:	43d2      	mvns	r2, r2
 8005506:	401a      	ands	r2, r3
 8005508:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	019b      	lsls	r3, r3, #6
 800550e:	22ff      	movs	r2, #255	; 0xff
 8005510:	401a      	ands	r2, r3
 8005512:	1dfb      	adds	r3, r7, #7
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	0018      	movs	r0, r3
 8005518:	2303      	movs	r3, #3
 800551a:	4003      	ands	r3, r0
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005520:	4809      	ldr	r0, [pc, #36]	; (8005548 <__NVIC_SetPriority+0xd8>)
 8005522:	1dfb      	adds	r3, r7, #7
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	001c      	movs	r4, r3
 8005528:	230f      	movs	r3, #15
 800552a:	4023      	ands	r3, r4
 800552c:	3b08      	subs	r3, #8
 800552e:	089b      	lsrs	r3, r3, #2
 8005530:	430a      	orrs	r2, r1
 8005532:	3306      	adds	r3, #6
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	18c3      	adds	r3, r0, r3
 8005538:	3304      	adds	r3, #4
 800553a:	601a      	str	r2, [r3, #0]
}
 800553c:	46c0      	nop			; (mov r8, r8)
 800553e:	46bd      	mov	sp, r7
 8005540:	b003      	add	sp, #12
 8005542:	bd90      	pop	{r4, r7, pc}
 8005544:	e000e100 	.word	0xe000e100
 8005548:	e000ed00 	.word	0xe000ed00

0800554c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	1e5a      	subs	r2, r3, #1
 8005558:	2380      	movs	r3, #128	; 0x80
 800555a:	045b      	lsls	r3, r3, #17
 800555c:	429a      	cmp	r2, r3
 800555e:	d301      	bcc.n	8005564 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005560:	2301      	movs	r3, #1
 8005562:	e010      	b.n	8005586 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005564:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <SysTick_Config+0x44>)
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	3a01      	subs	r2, #1
 800556a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800556c:	2301      	movs	r3, #1
 800556e:	425b      	negs	r3, r3
 8005570:	2103      	movs	r1, #3
 8005572:	0018      	movs	r0, r3
 8005574:	f7ff ff7c 	bl	8005470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005578:	4b05      	ldr	r3, [pc, #20]	; (8005590 <SysTick_Config+0x44>)
 800557a:	2200      	movs	r2, #0
 800557c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800557e:	4b04      	ldr	r3, [pc, #16]	; (8005590 <SysTick_Config+0x44>)
 8005580:	2207      	movs	r2, #7
 8005582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005584:	2300      	movs	r3, #0
}
 8005586:	0018      	movs	r0, r3
 8005588:	46bd      	mov	sp, r7
 800558a:	b002      	add	sp, #8
 800558c:	bd80      	pop	{r7, pc}
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	e000e010 	.word	0xe000e010

08005594 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	607a      	str	r2, [r7, #4]
 800559e:	210f      	movs	r1, #15
 80055a0:	187b      	adds	r3, r7, r1
 80055a2:	1c02      	adds	r2, r0, #0
 80055a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	187b      	adds	r3, r7, r1
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	b25b      	sxtb	r3, r3
 80055ae:	0011      	movs	r1, r2
 80055b0:	0018      	movs	r0, r3
 80055b2:	f7ff ff5d 	bl	8005470 <__NVIC_SetPriority>
}
 80055b6:	46c0      	nop			; (mov r8, r8)
 80055b8:	46bd      	mov	sp, r7
 80055ba:	b004      	add	sp, #16
 80055bc:	bd80      	pop	{r7, pc}

080055be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b082      	sub	sp, #8
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	0002      	movs	r2, r0
 80055c6:	1dfb      	adds	r3, r7, #7
 80055c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055ca:	1dfb      	adds	r3, r7, #7
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	b25b      	sxtb	r3, r3
 80055d0:	0018      	movs	r0, r3
 80055d2:	f7ff ff33 	bl	800543c <__NVIC_EnableIRQ>
}
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	46bd      	mov	sp, r7
 80055da:	b002      	add	sp, #8
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	0018      	movs	r0, r3
 80055ea:	f7ff ffaf 	bl	800554c <SysTick_Config>
 80055ee:	0003      	movs	r3, r0
}
 80055f0:	0018      	movs	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b002      	add	sp, #8
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e061      	b.n	80056ce <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a32      	ldr	r2, [pc, #200]	; (80056d8 <HAL_DMA_Init+0xe0>)
 8005610:	4694      	mov	ip, r2
 8005612:	4463      	add	r3, ip
 8005614:	2114      	movs	r1, #20
 8005616:	0018      	movs	r0, r3
 8005618:	f7fa fd92 	bl	8000140 <__udivsi3>
 800561c:	0003      	movs	r3, r0
 800561e:	009a      	lsls	r2, r3, #2
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a2d      	ldr	r2, [pc, #180]	; (80056dc <HAL_DMA_Init+0xe4>)
 8005628:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2225      	movs	r2, #37	; 0x25
 800562e:	2102      	movs	r1, #2
 8005630:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4a28      	ldr	r2, [pc, #160]	; (80056e0 <HAL_DMA_Init+0xe8>)
 800563e:	4013      	ands	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800564a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005656:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005662:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	2380      	movs	r3, #128	; 0x80
 800567e:	01db      	lsls	r3, r3, #7
 8005680:	429a      	cmp	r2, r3
 8005682:	d018      	beq.n	80056b6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005684:	4b17      	ldr	r3, [pc, #92]	; (80056e4 <HAL_DMA_Init+0xec>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568c:	211c      	movs	r1, #28
 800568e:	400b      	ands	r3, r1
 8005690:	210f      	movs	r1, #15
 8005692:	4099      	lsls	r1, r3
 8005694:	000b      	movs	r3, r1
 8005696:	43d9      	mvns	r1, r3
 8005698:	4b12      	ldr	r3, [pc, #72]	; (80056e4 <HAL_DMA_Init+0xec>)
 800569a:	400a      	ands	r2, r1
 800569c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800569e:	4b11      	ldr	r3, [pc, #68]	; (80056e4 <HAL_DMA_Init+0xec>)
 80056a0:	6819      	ldr	r1, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056aa:	201c      	movs	r0, #28
 80056ac:	4003      	ands	r3, r0
 80056ae:	409a      	lsls	r2, r3
 80056b0:	4b0c      	ldr	r3, [pc, #48]	; (80056e4 <HAL_DMA_Init+0xec>)
 80056b2:	430a      	orrs	r2, r1
 80056b4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2225      	movs	r2, #37	; 0x25
 80056c0:	2101      	movs	r1, #1
 80056c2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2224      	movs	r2, #36	; 0x24
 80056c8:	2100      	movs	r1, #0
 80056ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	0018      	movs	r0, r3
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b004      	add	sp, #16
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	bffdfff8 	.word	0xbffdfff8
 80056dc:	40020000 	.word	0x40020000
 80056e0:	ffff800f 	.word	0xffff800f
 80056e4:	400200a8 	.word	0x400200a8

080056e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056f6:	2317      	movs	r3, #23
 80056f8:	18fb      	adds	r3, r7, r3
 80056fa:	2200      	movs	r2, #0
 80056fc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2224      	movs	r2, #36	; 0x24
 8005702:	5c9b      	ldrb	r3, [r3, r2]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_DMA_Start_IT+0x24>
 8005708:	2302      	movs	r3, #2
 800570a:	e04f      	b.n	80057ac <HAL_DMA_Start_IT+0xc4>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2224      	movs	r2, #36	; 0x24
 8005710:	2101      	movs	r1, #1
 8005712:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2225      	movs	r2, #37	; 0x25
 8005718:	5c9b      	ldrb	r3, [r3, r2]
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b01      	cmp	r3, #1
 800571e:	d13a      	bne.n	8005796 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2225      	movs	r2, #37	; 0x25
 8005724:	2102      	movs	r1, #2
 8005726:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2101      	movs	r1, #1
 800573a:	438a      	bics	r2, r1
 800573c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 f8e3 	bl	8005910 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	2b00      	cmp	r3, #0
 8005750:	d008      	beq.n	8005764 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	210e      	movs	r1, #14
 800575e:	430a      	orrs	r2, r1
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	e00f      	b.n	8005784 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2104      	movs	r1, #4
 8005770:	438a      	bics	r2, r1
 8005772:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	210a      	movs	r1, #10
 8005780:	430a      	orrs	r2, r1
 8005782:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2101      	movs	r1, #1
 8005790:	430a      	orrs	r2, r1
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	e007      	b.n	80057a6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2224      	movs	r2, #36	; 0x24
 800579a:	2100      	movs	r1, #0
 800579c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800579e:	2317      	movs	r3, #23
 80057a0:	18fb      	adds	r3, r7, r3
 80057a2:	2202      	movs	r2, #2
 80057a4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80057a6:	2317      	movs	r3, #23
 80057a8:	18fb      	adds	r3, r7, r3
 80057aa:	781b      	ldrb	r3, [r3, #0]
}
 80057ac:	0018      	movs	r0, r3
 80057ae:	46bd      	mov	sp, r7
 80057b0:	b006      	add	sp, #24
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d0:	221c      	movs	r2, #28
 80057d2:	4013      	ands	r3, r2
 80057d4:	2204      	movs	r2, #4
 80057d6:	409a      	lsls	r2, r3
 80057d8:	0013      	movs	r3, r2
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4013      	ands	r3, r2
 80057de:	d026      	beq.n	800582e <HAL_DMA_IRQHandler+0x7a>
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2204      	movs	r2, #4
 80057e4:	4013      	ands	r3, r2
 80057e6:	d022      	beq.n	800582e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2220      	movs	r2, #32
 80057f0:	4013      	ands	r3, r2
 80057f2:	d107      	bne.n	8005804 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2104      	movs	r1, #4
 8005800:	438a      	bics	r2, r1
 8005802:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005808:	221c      	movs	r2, #28
 800580a:	401a      	ands	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005810:	2104      	movs	r1, #4
 8005812:	4091      	lsls	r1, r2
 8005814:	000a      	movs	r2, r1
 8005816:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	2b00      	cmp	r3, #0
 800581e:	d100      	bne.n	8005822 <HAL_DMA_IRQHandler+0x6e>
 8005820:	e071      	b.n	8005906 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	0010      	movs	r0, r2
 800582a:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800582c:	e06b      	b.n	8005906 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005832:	221c      	movs	r2, #28
 8005834:	4013      	ands	r3, r2
 8005836:	2202      	movs	r2, #2
 8005838:	409a      	lsls	r2, r3
 800583a:	0013      	movs	r3, r2
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4013      	ands	r3, r2
 8005840:	d02d      	beq.n	800589e <HAL_DMA_IRQHandler+0xea>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2202      	movs	r2, #2
 8005846:	4013      	ands	r3, r2
 8005848:	d029      	beq.n	800589e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2220      	movs	r2, #32
 8005852:	4013      	ands	r3, r2
 8005854:	d10b      	bne.n	800586e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	210a      	movs	r1, #10
 8005862:	438a      	bics	r2, r1
 8005864:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2225      	movs	r2, #37	; 0x25
 800586a:	2101      	movs	r1, #1
 800586c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005872:	221c      	movs	r2, #28
 8005874:	401a      	ands	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	2102      	movs	r1, #2
 800587c:	4091      	lsls	r1, r2
 800587e:	000a      	movs	r2, r1
 8005880:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2224      	movs	r2, #36	; 0x24
 8005886:	2100      	movs	r1, #0
 8005888:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588e:	2b00      	cmp	r3, #0
 8005890:	d039      	beq.n	8005906 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	0010      	movs	r0, r2
 800589a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800589c:	e033      	b.n	8005906 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a2:	221c      	movs	r2, #28
 80058a4:	4013      	ands	r3, r2
 80058a6:	2208      	movs	r2, #8
 80058a8:	409a      	lsls	r2, r3
 80058aa:	0013      	movs	r3, r2
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4013      	ands	r3, r2
 80058b0:	d02a      	beq.n	8005908 <HAL_DMA_IRQHandler+0x154>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2208      	movs	r2, #8
 80058b6:	4013      	ands	r3, r2
 80058b8:	d026      	beq.n	8005908 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	210e      	movs	r1, #14
 80058c6:	438a      	bics	r2, r1
 80058c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ce:	221c      	movs	r2, #28
 80058d0:	401a      	ands	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	2101      	movs	r1, #1
 80058d8:	4091      	lsls	r1, r2
 80058da:	000a      	movs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2225      	movs	r2, #37	; 0x25
 80058e8:	2101      	movs	r1, #1
 80058ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2224      	movs	r2, #36	; 0x24
 80058f0:	2100      	movs	r1, #0
 80058f2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	0010      	movs	r0, r2
 8005904:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	46c0      	nop			; (mov r8, r8)
}
 800590a:	46bd      	mov	sp, r7
 800590c:	b004      	add	sp, #16
 800590e:	bd80      	pop	{r7, pc}

08005910 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005922:	221c      	movs	r2, #28
 8005924:	401a      	ands	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	2101      	movs	r1, #1
 800592c:	4091      	lsls	r1, r2
 800592e:	000a      	movs	r2, r1
 8005930:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b10      	cmp	r3, #16
 8005940:	d108      	bne.n	8005954 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005952:	e007      	b.n	8005964 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	60da      	str	r2, [r3, #12]
}
 8005964:	46c0      	nop			; (mov r8, r8)
 8005966:	46bd      	mov	sp, r7
 8005968:	b004      	add	sp, #16
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005976:	2300      	movs	r3, #0
 8005978:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800597e:	2300      	movs	r3, #0
 8005980:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005982:	e14f      	b.n	8005c24 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2101      	movs	r1, #1
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4091      	lsls	r1, r2
 800598e:	000a      	movs	r2, r1
 8005990:	4013      	ands	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d100      	bne.n	800599c <HAL_GPIO_Init+0x30>
 800599a:	e140      	b.n	8005c1e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2203      	movs	r2, #3
 80059a2:	4013      	ands	r3, r2
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d005      	beq.n	80059b4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2203      	movs	r2, #3
 80059ae:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d130      	bne.n	8005a16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	2203      	movs	r2, #3
 80059c0:	409a      	lsls	r2, r3
 80059c2:	0013      	movs	r3, r2
 80059c4:	43da      	mvns	r2, r3
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	4013      	ands	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	409a      	lsls	r2, r3
 80059d6:	0013      	movs	r3, r2
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059ea:	2201      	movs	r2, #1
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	409a      	lsls	r2, r3
 80059f0:	0013      	movs	r3, r2
 80059f2:	43da      	mvns	r2, r3
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	4013      	ands	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	091b      	lsrs	r3, r3, #4
 8005a00:	2201      	movs	r2, #1
 8005a02:	401a      	ands	r2, r3
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	409a      	lsls	r2, r3
 8005a08:	0013      	movs	r3, r2
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	2203      	movs	r2, #3
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d017      	beq.n	8005a52 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	2203      	movs	r2, #3
 8005a2e:	409a      	lsls	r2, r3
 8005a30:	0013      	movs	r3, r2
 8005a32:	43da      	mvns	r2, r3
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	4013      	ands	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	409a      	lsls	r2, r3
 8005a44:	0013      	movs	r3, r2
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2203      	movs	r2, #3
 8005a58:	4013      	ands	r3, r2
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d123      	bne.n	8005aa6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	08da      	lsrs	r2, r3, #3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	3208      	adds	r2, #8
 8005a66:	0092      	lsls	r2, r2, #2
 8005a68:	58d3      	ldr	r3, [r2, r3]
 8005a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2207      	movs	r2, #7
 8005a70:	4013      	ands	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	220f      	movs	r2, #15
 8005a76:	409a      	lsls	r2, r3
 8005a78:	0013      	movs	r3, r2
 8005a7a:	43da      	mvns	r2, r3
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	2107      	movs	r1, #7
 8005a8a:	400b      	ands	r3, r1
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	409a      	lsls	r2, r3
 8005a90:	0013      	movs	r3, r2
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	08da      	lsrs	r2, r3, #3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3208      	adds	r2, #8
 8005aa0:	0092      	lsls	r2, r2, #2
 8005aa2:	6939      	ldr	r1, [r7, #16]
 8005aa4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	2203      	movs	r2, #3
 8005ab2:	409a      	lsls	r2, r3
 8005ab4:	0013      	movs	r3, r2
 8005ab6:	43da      	mvns	r2, r3
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	4013      	ands	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2203      	movs	r2, #3
 8005ac4:	401a      	ands	r2, r3
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	409a      	lsls	r2, r3
 8005acc:	0013      	movs	r3, r2
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	23c0      	movs	r3, #192	; 0xc0
 8005ae0:	029b      	lsls	r3, r3, #10
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	d100      	bne.n	8005ae8 <HAL_GPIO_Init+0x17c>
 8005ae6:	e09a      	b.n	8005c1e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ae8:	4b54      	ldr	r3, [pc, #336]	; (8005c3c <HAL_GPIO_Init+0x2d0>)
 8005aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aec:	4b53      	ldr	r3, [pc, #332]	; (8005c3c <HAL_GPIO_Init+0x2d0>)
 8005aee:	2101      	movs	r1, #1
 8005af0:	430a      	orrs	r2, r1
 8005af2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8005af4:	4a52      	ldr	r2, [pc, #328]	; (8005c40 <HAL_GPIO_Init+0x2d4>)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	089b      	lsrs	r3, r3, #2
 8005afa:	3302      	adds	r3, #2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	589b      	ldr	r3, [r3, r2]
 8005b00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2203      	movs	r2, #3
 8005b06:	4013      	ands	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	220f      	movs	r2, #15
 8005b0c:	409a      	lsls	r2, r3
 8005b0e:	0013      	movs	r3, r2
 8005b10:	43da      	mvns	r2, r3
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	4013      	ands	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	23a0      	movs	r3, #160	; 0xa0
 8005b1c:	05db      	lsls	r3, r3, #23
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d019      	beq.n	8005b56 <HAL_GPIO_Init+0x1ea>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a47      	ldr	r2, [pc, #284]	; (8005c44 <HAL_GPIO_Init+0x2d8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d013      	beq.n	8005b52 <HAL_GPIO_Init+0x1e6>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a46      	ldr	r2, [pc, #280]	; (8005c48 <HAL_GPIO_Init+0x2dc>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00d      	beq.n	8005b4e <HAL_GPIO_Init+0x1e2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a45      	ldr	r2, [pc, #276]	; (8005c4c <HAL_GPIO_Init+0x2e0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d007      	beq.n	8005b4a <HAL_GPIO_Init+0x1de>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a44      	ldr	r2, [pc, #272]	; (8005c50 <HAL_GPIO_Init+0x2e4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d101      	bne.n	8005b46 <HAL_GPIO_Init+0x1da>
 8005b42:	2305      	movs	r3, #5
 8005b44:	e008      	b.n	8005b58 <HAL_GPIO_Init+0x1ec>
 8005b46:	2306      	movs	r3, #6
 8005b48:	e006      	b.n	8005b58 <HAL_GPIO_Init+0x1ec>
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e004      	b.n	8005b58 <HAL_GPIO_Init+0x1ec>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e002      	b.n	8005b58 <HAL_GPIO_Init+0x1ec>
 8005b52:	2301      	movs	r3, #1
 8005b54:	e000      	b.n	8005b58 <HAL_GPIO_Init+0x1ec>
 8005b56:	2300      	movs	r3, #0
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	2103      	movs	r1, #3
 8005b5c:	400a      	ands	r2, r1
 8005b5e:	0092      	lsls	r2, r2, #2
 8005b60:	4093      	lsls	r3, r2
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b68:	4935      	ldr	r1, [pc, #212]	; (8005c40 <HAL_GPIO_Init+0x2d4>)
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	089b      	lsrs	r3, r3, #2
 8005b6e:	3302      	adds	r3, #2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b76:	4b37      	ldr	r3, [pc, #220]	; (8005c54 <HAL_GPIO_Init+0x2e8>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	43da      	mvns	r2, r3
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	4013      	ands	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	2380      	movs	r3, #128	; 0x80
 8005b8c:	035b      	lsls	r3, r3, #13
 8005b8e:	4013      	ands	r3, r2
 8005b90:	d003      	beq.n	8005b9a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005b9a:	4b2e      	ldr	r3, [pc, #184]	; (8005c54 <HAL_GPIO_Init+0x2e8>)
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005ba0:	4b2c      	ldr	r3, [pc, #176]	; (8005c54 <HAL_GPIO_Init+0x2e8>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	43da      	mvns	r2, r3
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	4013      	ands	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	2380      	movs	r3, #128	; 0x80
 8005bb6:	039b      	lsls	r3, r3, #14
 8005bb8:	4013      	ands	r3, r2
 8005bba:	d003      	beq.n	8005bc4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005bc4:	4b23      	ldr	r3, [pc, #140]	; (8005c54 <HAL_GPIO_Init+0x2e8>)
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8005bca:	4b22      	ldr	r3, [pc, #136]	; (8005c54 <HAL_GPIO_Init+0x2e8>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	43da      	mvns	r2, r3
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	2380      	movs	r3, #128	; 0x80
 8005be0:	029b      	lsls	r3, r3, #10
 8005be2:	4013      	ands	r3, r2
 8005be4:	d003      	beq.n	8005bee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005bee:	4b19      	ldr	r3, [pc, #100]	; (8005c54 <HAL_GPIO_Init+0x2e8>)
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005bf4:	4b17      	ldr	r3, [pc, #92]	; (8005c54 <HAL_GPIO_Init+0x2e8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	43da      	mvns	r2, r3
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	4013      	ands	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	2380      	movs	r3, #128	; 0x80
 8005c0a:	025b      	lsls	r3, r3, #9
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	d003      	beq.n	8005c18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005c18:	4b0e      	ldr	r3, [pc, #56]	; (8005c54 <HAL_GPIO_Init+0x2e8>)
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	3301      	adds	r3, #1
 8005c22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	40da      	lsrs	r2, r3
 8005c2c:	1e13      	subs	r3, r2, #0
 8005c2e:	d000      	beq.n	8005c32 <HAL_GPIO_Init+0x2c6>
 8005c30:	e6a8      	b.n	8005984 <HAL_GPIO_Init+0x18>
  }
}
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	46c0      	nop			; (mov r8, r8)
 8005c36:	46bd      	mov	sp, r7
 8005c38:	b006      	add	sp, #24
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	40021000 	.word	0x40021000
 8005c40:	40010000 	.word	0x40010000
 8005c44:	50000400 	.word	0x50000400
 8005c48:	50000800 	.word	0x50000800
 8005c4c:	50000c00 	.word	0x50000c00
 8005c50:	50001c00 	.word	0x50001c00
 8005c54:	40010400 	.word	0x40010400

08005c58 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	0008      	movs	r0, r1
 8005c62:	0011      	movs	r1, r2
 8005c64:	1cbb      	adds	r3, r7, #2
 8005c66:	1c02      	adds	r2, r0, #0
 8005c68:	801a      	strh	r2, [r3, #0]
 8005c6a:	1c7b      	adds	r3, r7, #1
 8005c6c:	1c0a      	adds	r2, r1, #0
 8005c6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c70:	1c7b      	adds	r3, r7, #1
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d004      	beq.n	8005c82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c78:	1cbb      	adds	r3, r7, #2
 8005c7a:	881a      	ldrh	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005c80:	e003      	b.n	8005c8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005c82:	1cbb      	adds	r3, r7, #2
 8005c84:	881a      	ldrh	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c8a:	46c0      	nop			; (mov r8, r8)
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	b002      	add	sp, #8
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	000a      	movs	r2, r1
 8005c9e:	1cfb      	adds	r3, r7, #3
 8005ca0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005ca6:	4b25      	ldr	r3, [pc, #148]	; (8005d3c <HAL_PWR_EnterSTOPMode+0xa8>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	2380      	movs	r3, #128	; 0x80
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4013      	ands	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005cb2:	4b23      	ldr	r3, [pc, #140]	; (8005d40 <HAL_PWR_EnterSTOPMode+0xac>)
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	4013      	ands	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d008      	beq.n	8005cd4 <HAL_PWR_EnterSTOPMode+0x40>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d005      	beq.n	8005cd4 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8005cc8:	4b1c      	ldr	r3, [pc, #112]	; (8005d3c <HAL_PWR_EnterSTOPMode+0xa8>)
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	4b1b      	ldr	r3, [pc, #108]	; (8005d3c <HAL_PWR_EnterSTOPMode+0xa8>)
 8005cce:	491d      	ldr	r1, [pc, #116]	; (8005d44 <HAL_PWR_EnterSTOPMode+0xb0>)
 8005cd0:	400a      	ands	r2, r1
 8005cd2:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8005cd4:	4b19      	ldr	r3, [pc, #100]	; (8005d3c <HAL_PWR_EnterSTOPMode+0xa8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2203      	movs	r2, #3
 8005cde:	4393      	bics	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8005cea:	4b14      	ldr	r3, [pc, #80]	; (8005d3c <HAL_PWR_EnterSTOPMode+0xa8>)
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005cf0:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <HAL_PWR_EnterSTOPMode+0xb4>)
 8005cf2:	691a      	ldr	r2, [r3, #16]
 8005cf4:	4b14      	ldr	r3, [pc, #80]	; (8005d48 <HAL_PWR_EnterSTOPMode+0xb4>)
 8005cf6:	2104      	movs	r1, #4
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8005cfc:	1cfb      	adds	r3, r7, #3
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005d04:	bf30      	wfi
 8005d06:	e002      	b.n	8005d0e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005d08:	bf40      	sev
    __WFE();
 8005d0a:	bf20      	wfe
    __WFE();
 8005d0c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005d0e:	4b0e      	ldr	r3, [pc, #56]	; (8005d48 <HAL_PWR_EnterSTOPMode+0xb4>)
 8005d10:	691a      	ldr	r2, [r3, #16]
 8005d12:	4b0d      	ldr	r3, [pc, #52]	; (8005d48 <HAL_PWR_EnterSTOPMode+0xb4>)
 8005d14:	2104      	movs	r1, #4
 8005d16:	438a      	bics	r2, r1
 8005d18:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d009      	beq.n	8005d34 <HAL_PWR_EnterSTOPMode+0xa0>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d006      	beq.n	8005d34 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8005d26:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <HAL_PWR_EnterSTOPMode+0xa8>)
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	4b04      	ldr	r3, [pc, #16]	; (8005d3c <HAL_PWR_EnterSTOPMode+0xa8>)
 8005d2c:	2180      	movs	r1, #128	; 0x80
 8005d2e:	0089      	lsls	r1, r1, #2
 8005d30:	430a      	orrs	r2, r1
 8005d32:	601a      	str	r2, [r3, #0]
  }
}
 8005d34:	46c0      	nop			; (mov r8, r8)
 8005d36:	46bd      	mov	sp, r7
 8005d38:	b006      	add	sp, #24
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	40007000 	.word	0x40007000
 8005d40:	40010000 	.word	0x40010000
 8005d44:	fffffdff 	.word	0xfffffdff
 8005d48:	e000ed00 	.word	0xe000ed00

08005d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d4c:	b5b0      	push	{r4, r5, r7, lr}
 8005d4e:	b08a      	sub	sp, #40	; 0x28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d102      	bne.n	8005d60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f000 fb5a 	bl	8006414 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d60:	4bce      	ldr	r3, [pc, #824]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	220c      	movs	r2, #12
 8005d66:	4013      	ands	r3, r2
 8005d68:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d6a:	4bcc      	ldr	r3, [pc, #816]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	2380      	movs	r3, #128	; 0x80
 8005d70:	025b      	lsls	r3, r3, #9
 8005d72:	4013      	ands	r3, r2
 8005d74:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	d100      	bne.n	8005d82 <HAL_RCC_OscConfig+0x36>
 8005d80:	e07c      	b.n	8005e7c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	2b08      	cmp	r3, #8
 8005d86:	d007      	beq.n	8005d98 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	2b0c      	cmp	r3, #12
 8005d8c:	d111      	bne.n	8005db2 <HAL_RCC_OscConfig+0x66>
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	025b      	lsls	r3, r3, #9
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d10c      	bne.n	8005db2 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d98:	4bc0      	ldr	r3, [pc, #768]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	2380      	movs	r3, #128	; 0x80
 8005d9e:	029b      	lsls	r3, r3, #10
 8005da0:	4013      	ands	r3, r2
 8005da2:	d100      	bne.n	8005da6 <HAL_RCC_OscConfig+0x5a>
 8005da4:	e069      	b.n	8005e7a <HAL_RCC_OscConfig+0x12e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d165      	bne.n	8005e7a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e330      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	2380      	movs	r3, #128	; 0x80
 8005db8:	025b      	lsls	r3, r3, #9
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d107      	bne.n	8005dce <HAL_RCC_OscConfig+0x82>
 8005dbe:	4bb7      	ldr	r3, [pc, #732]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4bb6      	ldr	r3, [pc, #728]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005dc4:	2180      	movs	r1, #128	; 0x80
 8005dc6:	0249      	lsls	r1, r1, #9
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	e027      	b.n	8005e1e <HAL_RCC_OscConfig+0xd2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	23a0      	movs	r3, #160	; 0xa0
 8005dd4:	02db      	lsls	r3, r3, #11
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d10e      	bne.n	8005df8 <HAL_RCC_OscConfig+0xac>
 8005dda:	4bb0      	ldr	r3, [pc, #704]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4baf      	ldr	r3, [pc, #700]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005de0:	2180      	movs	r1, #128	; 0x80
 8005de2:	02c9      	lsls	r1, r1, #11
 8005de4:	430a      	orrs	r2, r1
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	4bac      	ldr	r3, [pc, #688]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	4bab      	ldr	r3, [pc, #684]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005dee:	2180      	movs	r1, #128	; 0x80
 8005df0:	0249      	lsls	r1, r1, #9
 8005df2:	430a      	orrs	r2, r1
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	e012      	b.n	8005e1e <HAL_RCC_OscConfig+0xd2>
 8005df8:	4ba8      	ldr	r3, [pc, #672]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	4ba7      	ldr	r3, [pc, #668]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005dfe:	49a8      	ldr	r1, [pc, #672]	; (80060a0 <HAL_RCC_OscConfig+0x354>)
 8005e00:	400a      	ands	r2, r1
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	4ba5      	ldr	r3, [pc, #660]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	2380      	movs	r3, #128	; 0x80
 8005e0a:	025b      	lsls	r3, r3, #9
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4ba2      	ldr	r3, [pc, #648]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4ba1      	ldr	r3, [pc, #644]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005e18:	49a2      	ldr	r1, [pc, #648]	; (80060a4 <HAL_RCC_OscConfig+0x358>)
 8005e1a:	400a      	ands	r2, r1
 8005e1c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d014      	beq.n	8005e50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e26:	f7fe ff2f 	bl	8004c88 <HAL_GetTick>
 8005e2a:	0003      	movs	r3, r0
 8005e2c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e30:	f7fe ff2a 	bl	8004c88 <HAL_GetTick>
 8005e34:	0002      	movs	r2, r0
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b64      	cmp	r3, #100	; 0x64
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e2e8      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e42:	4b96      	ldr	r3, [pc, #600]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	2380      	movs	r3, #128	; 0x80
 8005e48:	029b      	lsls	r3, r3, #10
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	d0f0      	beq.n	8005e30 <HAL_RCC_OscConfig+0xe4>
 8005e4e:	e015      	b.n	8005e7c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e50:	f7fe ff1a 	bl	8004c88 <HAL_GetTick>
 8005e54:	0003      	movs	r3, r0
 8005e56:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e58:	e008      	b.n	8005e6c <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e5a:	f7fe ff15 	bl	8004c88 <HAL_GetTick>
 8005e5e:	0002      	movs	r2, r0
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b64      	cmp	r3, #100	; 0x64
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e2d3      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e6c:	4b8b      	ldr	r3, [pc, #556]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	2380      	movs	r3, #128	; 0x80
 8005e72:	029b      	lsls	r3, r3, #10
 8005e74:	4013      	ands	r3, r2
 8005e76:	d1f0      	bne.n	8005e5a <HAL_RCC_OscConfig+0x10e>
 8005e78:	e000      	b.n	8005e7c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e7a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2202      	movs	r2, #2
 8005e82:	4013      	ands	r3, r2
 8005e84:	d100      	bne.n	8005e88 <HAL_RCC_OscConfig+0x13c>
 8005e86:	e08b      	b.n	8005fa0 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d005      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	2b0c      	cmp	r3, #12
 8005e98:	d13e      	bne.n	8005f18 <HAL_RCC_OscConfig+0x1cc>
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d13b      	bne.n	8005f18 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005ea0:	4b7e      	ldr	r3, [pc, #504]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	d004      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x168>
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e2af      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb4:	4b79      	ldr	r3, [pc, #484]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	4a7b      	ldr	r2, [pc, #492]	; (80060a8 <HAL_RCC_OscConfig+0x35c>)
 8005eba:	4013      	ands	r3, r2
 8005ebc:	0019      	movs	r1, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	021a      	lsls	r2, r3, #8
 8005ec4:	4b75      	ldr	r3, [pc, #468]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005eca:	4b74      	ldr	r3, [pc, #464]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2209      	movs	r2, #9
 8005ed0:	4393      	bics	r3, r2
 8005ed2:	0019      	movs	r1, r3
 8005ed4:	4b71      	ldr	r3, [pc, #452]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005edc:	f000 fbe8 	bl	80066b0 <HAL_RCC_GetSysClockFreq>
 8005ee0:	0001      	movs	r1, r0
 8005ee2:	4b6e      	ldr	r3, [pc, #440]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	091b      	lsrs	r3, r3, #4
 8005ee8:	220f      	movs	r2, #15
 8005eea:	4013      	ands	r3, r2
 8005eec:	4a6f      	ldr	r2, [pc, #444]	; (80060ac <HAL_RCC_OscConfig+0x360>)
 8005eee:	5cd3      	ldrb	r3, [r2, r3]
 8005ef0:	000a      	movs	r2, r1
 8005ef2:	40da      	lsrs	r2, r3
 8005ef4:	4b6e      	ldr	r3, [pc, #440]	; (80060b0 <HAL_RCC_OscConfig+0x364>)
 8005ef6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005ef8:	4b6e      	ldr	r3, [pc, #440]	; (80060b4 <HAL_RCC_OscConfig+0x368>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2513      	movs	r5, #19
 8005efe:	197c      	adds	r4, r7, r5
 8005f00:	0018      	movs	r0, r3
 8005f02:	f7fe fe7b 	bl	8004bfc <HAL_InitTick>
 8005f06:	0003      	movs	r3, r0
 8005f08:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005f0a:	197b      	adds	r3, r7, r5
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d046      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8005f12:	197b      	adds	r3, r7, r5
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	e27d      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d027      	beq.n	8005f6e <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005f1e:	4b5f      	ldr	r3, [pc, #380]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2209      	movs	r2, #9
 8005f24:	4393      	bics	r3, r2
 8005f26:	0019      	movs	r1, r3
 8005f28:	4b5c      	ldr	r3, [pc, #368]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f30:	f7fe feaa 	bl	8004c88 <HAL_GetTick>
 8005f34:	0003      	movs	r3, r0
 8005f36:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f3a:	f7fe fea5 	bl	8004c88 <HAL_GetTick>
 8005f3e:	0002      	movs	r2, r0
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e263      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f4c:	4b53      	ldr	r3, [pc, #332]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2204      	movs	r2, #4
 8005f52:	4013      	ands	r3, r2
 8005f54:	d0f1      	beq.n	8005f3a <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f56:	4b51      	ldr	r3, [pc, #324]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	4a53      	ldr	r2, [pc, #332]	; (80060a8 <HAL_RCC_OscConfig+0x35c>)
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	0019      	movs	r1, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	021a      	lsls	r2, r3, #8
 8005f66:	4b4d      	ldr	r3, [pc, #308]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	605a      	str	r2, [r3, #4]
 8005f6c:	e018      	b.n	8005fa0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f6e:	4b4b      	ldr	r3, [pc, #300]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	4b4a      	ldr	r3, [pc, #296]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005f74:	2101      	movs	r1, #1
 8005f76:	438a      	bics	r2, r1
 8005f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f7a:	f7fe fe85 	bl	8004c88 <HAL_GetTick>
 8005f7e:	0003      	movs	r3, r0
 8005f80:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f84:	f7fe fe80 	bl	8004c88 <HAL_GetTick>
 8005f88:	0002      	movs	r2, r0
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e23e      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f96:	4b41      	ldr	r3, [pc, #260]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2204      	movs	r2, #4
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	d1f1      	bne.n	8005f84 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2210      	movs	r2, #16
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	d100      	bne.n	8005fac <HAL_RCC_OscConfig+0x260>
 8005faa:	e0a1      	b.n	80060f0 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d140      	bne.n	8006034 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005fb2:	4b3a      	ldr	r3, [pc, #232]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	2380      	movs	r3, #128	; 0x80
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4013      	ands	r3, r2
 8005fbc:	d005      	beq.n	8005fca <HAL_RCC_OscConfig+0x27e>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e224      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fca:	4b34      	ldr	r3, [pc, #208]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	4a3a      	ldr	r2, [pc, #232]	; (80060b8 <HAL_RCC_OscConfig+0x36c>)
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	0019      	movs	r1, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a1a      	ldr	r2, [r3, #32]
 8005fd8:	4b30      	ldr	r3, [pc, #192]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fde:	4b2f      	ldr	r3, [pc, #188]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	0a19      	lsrs	r1, r3, #8
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	061a      	lsls	r2, r3, #24
 8005fec:	4b2b      	ldr	r3, [pc, #172]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	0b5b      	lsrs	r3, r3, #13
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	2280      	movs	r2, #128	; 0x80
 8005ffc:	0212      	lsls	r2, r2, #8
 8005ffe:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006000:	4b26      	ldr	r3, [pc, #152]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	091b      	lsrs	r3, r3, #4
 8006006:	210f      	movs	r1, #15
 8006008:	400b      	ands	r3, r1
 800600a:	4928      	ldr	r1, [pc, #160]	; (80060ac <HAL_RCC_OscConfig+0x360>)
 800600c:	5ccb      	ldrb	r3, [r1, r3]
 800600e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006010:	4b27      	ldr	r3, [pc, #156]	; (80060b0 <HAL_RCC_OscConfig+0x364>)
 8006012:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8006014:	4b27      	ldr	r3, [pc, #156]	; (80060b4 <HAL_RCC_OscConfig+0x368>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2513      	movs	r5, #19
 800601a:	197c      	adds	r4, r7, r5
 800601c:	0018      	movs	r0, r3
 800601e:	f7fe fded 	bl	8004bfc <HAL_InitTick>
 8006022:	0003      	movs	r3, r0
 8006024:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006026:	197b      	adds	r3, r7, r5
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d060      	beq.n	80060f0 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 800602e:	197b      	adds	r3, r7, r5
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	e1ef      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d03f      	beq.n	80060bc <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800603c:	4b17      	ldr	r3, [pc, #92]	; (800609c <HAL_RCC_OscConfig+0x350>)
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	4b16      	ldr	r3, [pc, #88]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8006042:	2180      	movs	r1, #128	; 0x80
 8006044:	0049      	lsls	r1, r1, #1
 8006046:	430a      	orrs	r2, r1
 8006048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800604a:	f7fe fe1d 	bl	8004c88 <HAL_GetTick>
 800604e:	0003      	movs	r3, r0
 8006050:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006054:	f7fe fe18 	bl	8004c88 <HAL_GetTick>
 8006058:	0002      	movs	r2, r0
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e1d6      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006066:	4b0d      	ldr	r3, [pc, #52]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	2380      	movs	r3, #128	; 0x80
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4013      	ands	r3, r2
 8006070:	d0f0      	beq.n	8006054 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006072:	4b0a      	ldr	r3, [pc, #40]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	4a10      	ldr	r2, [pc, #64]	; (80060b8 <HAL_RCC_OscConfig+0x36c>)
 8006078:	4013      	ands	r3, r2
 800607a:	0019      	movs	r1, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a1a      	ldr	r2, [r3, #32]
 8006080:	4b06      	ldr	r3, [pc, #24]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8006082:	430a      	orrs	r2, r1
 8006084:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006086:	4b05      	ldr	r3, [pc, #20]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	021b      	lsls	r3, r3, #8
 800608c:	0a19      	lsrs	r1, r3, #8
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	061a      	lsls	r2, r3, #24
 8006094:	4b01      	ldr	r3, [pc, #4]	; (800609c <HAL_RCC_OscConfig+0x350>)
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
 800609a:	e029      	b.n	80060f0 <HAL_RCC_OscConfig+0x3a4>
 800609c:	40021000 	.word	0x40021000
 80060a0:	fffeffff 	.word	0xfffeffff
 80060a4:	fffbffff 	.word	0xfffbffff
 80060a8:	ffffe0ff 	.word	0xffffe0ff
 80060ac:	0800b914 	.word	0x0800b914
 80060b0:	20000004 	.word	0x20000004
 80060b4:	20000008 	.word	0x20000008
 80060b8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80060bc:	4bbe      	ldr	r3, [pc, #760]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	4bbd      	ldr	r3, [pc, #756]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 80060c2:	49be      	ldr	r1, [pc, #760]	; (80063bc <HAL_RCC_OscConfig+0x670>)
 80060c4:	400a      	ands	r2, r1
 80060c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c8:	f7fe fdde 	bl	8004c88 <HAL_GetTick>
 80060cc:	0003      	movs	r3, r0
 80060ce:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80060d0:	e008      	b.n	80060e4 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060d2:	f7fe fdd9 	bl	8004c88 <HAL_GetTick>
 80060d6:	0002      	movs	r2, r0
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d901      	bls.n	80060e4 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e197      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80060e4:	4bb4      	ldr	r3, [pc, #720]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	2380      	movs	r3, #128	; 0x80
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4013      	ands	r3, r2
 80060ee:	d1f0      	bne.n	80060d2 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2208      	movs	r2, #8
 80060f6:	4013      	ands	r3, r2
 80060f8:	d036      	beq.n	8006168 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d019      	beq.n	8006136 <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006102:	4bad      	ldr	r3, [pc, #692]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 8006104:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006106:	4bac      	ldr	r3, [pc, #688]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 8006108:	2101      	movs	r1, #1
 800610a:	430a      	orrs	r2, r1
 800610c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800610e:	f7fe fdbb 	bl	8004c88 <HAL_GetTick>
 8006112:	0003      	movs	r3, r0
 8006114:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006118:	f7fe fdb6 	bl	8004c88 <HAL_GetTick>
 800611c:	0002      	movs	r2, r0
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e174      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800612a:	4ba3      	ldr	r3, [pc, #652]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 800612c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800612e:	2202      	movs	r2, #2
 8006130:	4013      	ands	r3, r2
 8006132:	d0f1      	beq.n	8006118 <HAL_RCC_OscConfig+0x3cc>
 8006134:	e018      	b.n	8006168 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006136:	4ba0      	ldr	r3, [pc, #640]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 8006138:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800613a:	4b9f      	ldr	r3, [pc, #636]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 800613c:	2101      	movs	r1, #1
 800613e:	438a      	bics	r2, r1
 8006140:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006142:	f7fe fda1 	bl	8004c88 <HAL_GetTick>
 8006146:	0003      	movs	r3, r0
 8006148:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800614c:	f7fe fd9c 	bl	8004c88 <HAL_GetTick>
 8006150:	0002      	movs	r2, r0
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e15a      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800615e:	4b96      	ldr	r3, [pc, #600]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 8006160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006162:	2202      	movs	r2, #2
 8006164:	4013      	ands	r3, r2
 8006166:	d1f1      	bne.n	800614c <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2204      	movs	r2, #4
 800616e:	4013      	ands	r3, r2
 8006170:	d100      	bne.n	8006174 <HAL_RCC_OscConfig+0x428>
 8006172:	e0ae      	b.n	80062d2 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006174:	2027      	movs	r0, #39	; 0x27
 8006176:	183b      	adds	r3, r7, r0
 8006178:	2200      	movs	r2, #0
 800617a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800617c:	4b8e      	ldr	r3, [pc, #568]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 800617e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006180:	2380      	movs	r3, #128	; 0x80
 8006182:	055b      	lsls	r3, r3, #21
 8006184:	4013      	ands	r3, r2
 8006186:	d109      	bne.n	800619c <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006188:	4b8b      	ldr	r3, [pc, #556]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 800618a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800618c:	4b8a      	ldr	r3, [pc, #552]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 800618e:	2180      	movs	r1, #128	; 0x80
 8006190:	0549      	lsls	r1, r1, #21
 8006192:	430a      	orrs	r2, r1
 8006194:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006196:	183b      	adds	r3, r7, r0
 8006198:	2201      	movs	r2, #1
 800619a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800619c:	4b88      	ldr	r3, [pc, #544]	; (80063c0 <HAL_RCC_OscConfig+0x674>)
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	2380      	movs	r3, #128	; 0x80
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	4013      	ands	r3, r2
 80061a6:	d11a      	bne.n	80061de <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061a8:	4b85      	ldr	r3, [pc, #532]	; (80063c0 <HAL_RCC_OscConfig+0x674>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	4b84      	ldr	r3, [pc, #528]	; (80063c0 <HAL_RCC_OscConfig+0x674>)
 80061ae:	2180      	movs	r1, #128	; 0x80
 80061b0:	0049      	lsls	r1, r1, #1
 80061b2:	430a      	orrs	r2, r1
 80061b4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061b6:	f7fe fd67 	bl	8004c88 <HAL_GetTick>
 80061ba:	0003      	movs	r3, r0
 80061bc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061c0:	f7fe fd62 	bl	8004c88 <HAL_GetTick>
 80061c4:	0002      	movs	r2, r0
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b64      	cmp	r3, #100	; 0x64
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e120      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061d2:	4b7b      	ldr	r3, [pc, #492]	; (80063c0 <HAL_RCC_OscConfig+0x674>)
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	2380      	movs	r3, #128	; 0x80
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	4013      	ands	r3, r2
 80061dc:	d0f0      	beq.n	80061c0 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	2380      	movs	r3, #128	; 0x80
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d107      	bne.n	80061fa <HAL_RCC_OscConfig+0x4ae>
 80061ea:	4b73      	ldr	r3, [pc, #460]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 80061ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061ee:	4b72      	ldr	r3, [pc, #456]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 80061f0:	2180      	movs	r1, #128	; 0x80
 80061f2:	0049      	lsls	r1, r1, #1
 80061f4:	430a      	orrs	r2, r1
 80061f6:	651a      	str	r2, [r3, #80]	; 0x50
 80061f8:	e031      	b.n	800625e <HAL_RCC_OscConfig+0x512>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10c      	bne.n	800621c <HAL_RCC_OscConfig+0x4d0>
 8006202:	4b6d      	ldr	r3, [pc, #436]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 8006204:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006206:	4b6c      	ldr	r3, [pc, #432]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 8006208:	496c      	ldr	r1, [pc, #432]	; (80063bc <HAL_RCC_OscConfig+0x670>)
 800620a:	400a      	ands	r2, r1
 800620c:	651a      	str	r2, [r3, #80]	; 0x50
 800620e:	4b6a      	ldr	r3, [pc, #424]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 8006210:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006212:	4b69      	ldr	r3, [pc, #420]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 8006214:	496b      	ldr	r1, [pc, #428]	; (80063c4 <HAL_RCC_OscConfig+0x678>)
 8006216:	400a      	ands	r2, r1
 8006218:	651a      	str	r2, [r3, #80]	; 0x50
 800621a:	e020      	b.n	800625e <HAL_RCC_OscConfig+0x512>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	23a0      	movs	r3, #160	; 0xa0
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	429a      	cmp	r2, r3
 8006226:	d10e      	bne.n	8006246 <HAL_RCC_OscConfig+0x4fa>
 8006228:	4b63      	ldr	r3, [pc, #396]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 800622a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800622c:	4b62      	ldr	r3, [pc, #392]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 800622e:	2180      	movs	r1, #128	; 0x80
 8006230:	00c9      	lsls	r1, r1, #3
 8006232:	430a      	orrs	r2, r1
 8006234:	651a      	str	r2, [r3, #80]	; 0x50
 8006236:	4b60      	ldr	r3, [pc, #384]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 8006238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800623a:	4b5f      	ldr	r3, [pc, #380]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 800623c:	2180      	movs	r1, #128	; 0x80
 800623e:	0049      	lsls	r1, r1, #1
 8006240:	430a      	orrs	r2, r1
 8006242:	651a      	str	r2, [r3, #80]	; 0x50
 8006244:	e00b      	b.n	800625e <HAL_RCC_OscConfig+0x512>
 8006246:	4b5c      	ldr	r3, [pc, #368]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 8006248:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800624a:	4b5b      	ldr	r3, [pc, #364]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 800624c:	495b      	ldr	r1, [pc, #364]	; (80063bc <HAL_RCC_OscConfig+0x670>)
 800624e:	400a      	ands	r2, r1
 8006250:	651a      	str	r2, [r3, #80]	; 0x50
 8006252:	4b59      	ldr	r3, [pc, #356]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 8006254:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006256:	4b58      	ldr	r3, [pc, #352]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 8006258:	495a      	ldr	r1, [pc, #360]	; (80063c4 <HAL_RCC_OscConfig+0x678>)
 800625a:	400a      	ands	r2, r1
 800625c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d015      	beq.n	8006292 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006266:	f7fe fd0f 	bl	8004c88 <HAL_GetTick>
 800626a:	0003      	movs	r3, r0
 800626c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800626e:	e009      	b.n	8006284 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006270:	f7fe fd0a 	bl	8004c88 <HAL_GetTick>
 8006274:	0002      	movs	r2, r0
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	4a53      	ldr	r2, [pc, #332]	; (80063c8 <HAL_RCC_OscConfig+0x67c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d901      	bls.n	8006284 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e0c7      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006284:	4b4c      	ldr	r3, [pc, #304]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 8006286:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006288:	2380      	movs	r3, #128	; 0x80
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4013      	ands	r3, r2
 800628e:	d0ef      	beq.n	8006270 <HAL_RCC_OscConfig+0x524>
 8006290:	e014      	b.n	80062bc <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006292:	f7fe fcf9 	bl	8004c88 <HAL_GetTick>
 8006296:	0003      	movs	r3, r0
 8006298:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800629a:	e009      	b.n	80062b0 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800629c:	f7fe fcf4 	bl	8004c88 <HAL_GetTick>
 80062a0:	0002      	movs	r2, r0
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	4a48      	ldr	r2, [pc, #288]	; (80063c8 <HAL_RCC_OscConfig+0x67c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e0b1      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062b0:	4b41      	ldr	r3, [pc, #260]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 80062b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062b4:	2380      	movs	r3, #128	; 0x80
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4013      	ands	r3, r2
 80062ba:	d1ef      	bne.n	800629c <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80062bc:	2327      	movs	r3, #39	; 0x27
 80062be:	18fb      	adds	r3, r7, r3
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d105      	bne.n	80062d2 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062c6:	4b3c      	ldr	r3, [pc, #240]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 80062c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ca:	4b3b      	ldr	r3, [pc, #236]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 80062cc:	493f      	ldr	r1, [pc, #252]	; (80063cc <HAL_RCC_OscConfig+0x680>)
 80062ce:	400a      	ands	r2, r1
 80062d0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d100      	bne.n	80062dc <HAL_RCC_OscConfig+0x590>
 80062da:	e09a      	b.n	8006412 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	2b0c      	cmp	r3, #12
 80062e0:	d064      	beq.n	80063ac <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d145      	bne.n	8006376 <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ea:	4b33      	ldr	r3, [pc, #204]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	4b32      	ldr	r3, [pc, #200]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 80062f0:	4937      	ldr	r1, [pc, #220]	; (80063d0 <HAL_RCC_OscConfig+0x684>)
 80062f2:	400a      	ands	r2, r1
 80062f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062f6:	f7fe fcc7 	bl	8004c88 <HAL_GetTick>
 80062fa:	0003      	movs	r3, r0
 80062fc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80062fe:	e008      	b.n	8006312 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006300:	f7fe fcc2 	bl	8004c88 <HAL_GetTick>
 8006304:	0002      	movs	r2, r0
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b02      	cmp	r3, #2
 800630c:	d901      	bls.n	8006312 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e080      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006312:	4b29      	ldr	r3, [pc, #164]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	2380      	movs	r3, #128	; 0x80
 8006318:	049b      	lsls	r3, r3, #18
 800631a:	4013      	ands	r3, r2
 800631c:	d1f0      	bne.n	8006300 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800631e:	4b26      	ldr	r3, [pc, #152]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	4a2c      	ldr	r2, [pc, #176]	; (80063d4 <HAL_RCC_OscConfig+0x688>)
 8006324:	4013      	ands	r3, r2
 8006326:	0019      	movs	r1, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	431a      	orrs	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006336:	431a      	orrs	r2, r3
 8006338:	4b1f      	ldr	r3, [pc, #124]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 800633a:	430a      	orrs	r2, r1
 800633c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800633e:	4b1e      	ldr	r3, [pc, #120]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	4b1d      	ldr	r3, [pc, #116]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 8006344:	2180      	movs	r1, #128	; 0x80
 8006346:	0449      	lsls	r1, r1, #17
 8006348:	430a      	orrs	r2, r1
 800634a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800634c:	f7fe fc9c 	bl	8004c88 <HAL_GetTick>
 8006350:	0003      	movs	r3, r0
 8006352:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006354:	e008      	b.n	8006368 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006356:	f7fe fc97 	bl	8004c88 <HAL_GetTick>
 800635a:	0002      	movs	r2, r0
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d901      	bls.n	8006368 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e055      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006368:	4b13      	ldr	r3, [pc, #76]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	2380      	movs	r3, #128	; 0x80
 800636e:	049b      	lsls	r3, r3, #18
 8006370:	4013      	ands	r3, r2
 8006372:	d0f0      	beq.n	8006356 <HAL_RCC_OscConfig+0x60a>
 8006374:	e04d      	b.n	8006412 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006376:	4b10      	ldr	r3, [pc, #64]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4b0f      	ldr	r3, [pc, #60]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 800637c:	4914      	ldr	r1, [pc, #80]	; (80063d0 <HAL_RCC_OscConfig+0x684>)
 800637e:	400a      	ands	r2, r1
 8006380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006382:	f7fe fc81 	bl	8004c88 <HAL_GetTick>
 8006386:	0003      	movs	r3, r0
 8006388:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800638c:	f7fe fc7c 	bl	8004c88 <HAL_GetTick>
 8006390:	0002      	movs	r2, r0
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e03a      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800639e:	4b06      	ldr	r3, [pc, #24]	; (80063b8 <HAL_RCC_OscConfig+0x66c>)
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	2380      	movs	r3, #128	; 0x80
 80063a4:	049b      	lsls	r3, r3, #18
 80063a6:	4013      	ands	r3, r2
 80063a8:	d1f0      	bne.n	800638c <HAL_RCC_OscConfig+0x640>
 80063aa:	e032      	b.n	8006412 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d111      	bne.n	80063d8 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e02d      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
 80063b8:	40021000 	.word	0x40021000
 80063bc:	fffffeff 	.word	0xfffffeff
 80063c0:	40007000 	.word	0x40007000
 80063c4:	fffffbff 	.word	0xfffffbff
 80063c8:	00001388 	.word	0x00001388
 80063cc:	efffffff 	.word	0xefffffff
 80063d0:	feffffff 	.word	0xfeffffff
 80063d4:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80063d8:	4b10      	ldr	r3, [pc, #64]	; (800641c <HAL_RCC_OscConfig+0x6d0>)
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	2380      	movs	r3, #128	; 0x80
 80063e2:	025b      	lsls	r3, r3, #9
 80063e4:	401a      	ands	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d10f      	bne.n	800640e <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80063ee:	69fa      	ldr	r2, [r7, #28]
 80063f0:	23f0      	movs	r3, #240	; 0xf0
 80063f2:	039b      	lsls	r3, r3, #14
 80063f4:	401a      	ands	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d107      	bne.n	800640e <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	23c0      	movs	r3, #192	; 0xc0
 8006402:	041b      	lsls	r3, r3, #16
 8006404:	401a      	ands	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800640a:	429a      	cmp	r2, r3
 800640c:	d001      	beq.n	8006412 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	0018      	movs	r0, r3
 8006416:	46bd      	mov	sp, r7
 8006418:	b00a      	add	sp, #40	; 0x28
 800641a:	bdb0      	pop	{r4, r5, r7, pc}
 800641c:	40021000 	.word	0x40021000

08006420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006420:	b5b0      	push	{r4, r5, r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e128      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006434:	4b96      	ldr	r3, [pc, #600]	; (8006690 <HAL_RCC_ClockConfig+0x270>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2201      	movs	r2, #1
 800643a:	4013      	ands	r3, r2
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d91e      	bls.n	8006480 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006442:	4b93      	ldr	r3, [pc, #588]	; (8006690 <HAL_RCC_ClockConfig+0x270>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2201      	movs	r2, #1
 8006448:	4393      	bics	r3, r2
 800644a:	0019      	movs	r1, r3
 800644c:	4b90      	ldr	r3, [pc, #576]	; (8006690 <HAL_RCC_ClockConfig+0x270>)
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006454:	f7fe fc18 	bl	8004c88 <HAL_GetTick>
 8006458:	0003      	movs	r3, r0
 800645a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800645c:	e009      	b.n	8006472 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800645e:	f7fe fc13 	bl	8004c88 <HAL_GetTick>
 8006462:	0002      	movs	r2, r0
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	4a8a      	ldr	r2, [pc, #552]	; (8006694 <HAL_RCC_ClockConfig+0x274>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e109      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006472:	4b87      	ldr	r3, [pc, #540]	; (8006690 <HAL_RCC_ClockConfig+0x270>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2201      	movs	r2, #1
 8006478:	4013      	ands	r3, r2
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d1ee      	bne.n	800645e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2202      	movs	r2, #2
 8006486:	4013      	ands	r3, r2
 8006488:	d009      	beq.n	800649e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800648a:	4b83      	ldr	r3, [pc, #524]	; (8006698 <HAL_RCC_ClockConfig+0x278>)
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	22f0      	movs	r2, #240	; 0xf0
 8006490:	4393      	bics	r3, r2
 8006492:	0019      	movs	r1, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	4b7f      	ldr	r3, [pc, #508]	; (8006698 <HAL_RCC_ClockConfig+0x278>)
 800649a:	430a      	orrs	r2, r1
 800649c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2201      	movs	r2, #1
 80064a4:	4013      	ands	r3, r2
 80064a6:	d100      	bne.n	80064aa <HAL_RCC_ClockConfig+0x8a>
 80064a8:	e089      	b.n	80065be <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d107      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064b2:	4b79      	ldr	r3, [pc, #484]	; (8006698 <HAL_RCC_ClockConfig+0x278>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	2380      	movs	r3, #128	; 0x80
 80064b8:	029b      	lsls	r3, r3, #10
 80064ba:	4013      	ands	r3, r2
 80064bc:	d120      	bne.n	8006500 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e0e1      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d107      	bne.n	80064da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064ca:	4b73      	ldr	r3, [pc, #460]	; (8006698 <HAL_RCC_ClockConfig+0x278>)
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	2380      	movs	r3, #128	; 0x80
 80064d0:	049b      	lsls	r3, r3, #18
 80064d2:	4013      	ands	r3, r2
 80064d4:	d114      	bne.n	8006500 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e0d5      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d106      	bne.n	80064f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064e2:	4b6d      	ldr	r3, [pc, #436]	; (8006698 <HAL_RCC_ClockConfig+0x278>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2204      	movs	r2, #4
 80064e8:	4013      	ands	r3, r2
 80064ea:	d109      	bne.n	8006500 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e0ca      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80064f0:	4b69      	ldr	r3, [pc, #420]	; (8006698 <HAL_RCC_ClockConfig+0x278>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	2380      	movs	r3, #128	; 0x80
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4013      	ands	r3, r2
 80064fa:	d101      	bne.n	8006500 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e0c2      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006500:	4b65      	ldr	r3, [pc, #404]	; (8006698 <HAL_RCC_ClockConfig+0x278>)
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	2203      	movs	r2, #3
 8006506:	4393      	bics	r3, r2
 8006508:	0019      	movs	r1, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	4b62      	ldr	r3, [pc, #392]	; (8006698 <HAL_RCC_ClockConfig+0x278>)
 8006510:	430a      	orrs	r2, r1
 8006512:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006514:	f7fe fbb8 	bl	8004c88 <HAL_GetTick>
 8006518:	0003      	movs	r3, r0
 800651a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2b02      	cmp	r3, #2
 8006522:	d111      	bne.n	8006548 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006524:	e009      	b.n	800653a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006526:	f7fe fbaf 	bl	8004c88 <HAL_GetTick>
 800652a:	0002      	movs	r2, r0
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	4a58      	ldr	r2, [pc, #352]	; (8006694 <HAL_RCC_ClockConfig+0x274>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d901      	bls.n	800653a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e0a5      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800653a:	4b57      	ldr	r3, [pc, #348]	; (8006698 <HAL_RCC_ClockConfig+0x278>)
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	220c      	movs	r2, #12
 8006540:	4013      	ands	r3, r2
 8006542:	2b08      	cmp	r3, #8
 8006544:	d1ef      	bne.n	8006526 <HAL_RCC_ClockConfig+0x106>
 8006546:	e03a      	b.n	80065be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b03      	cmp	r3, #3
 800654e:	d111      	bne.n	8006574 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006550:	e009      	b.n	8006566 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006552:	f7fe fb99 	bl	8004c88 <HAL_GetTick>
 8006556:	0002      	movs	r2, r0
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	4a4d      	ldr	r2, [pc, #308]	; (8006694 <HAL_RCC_ClockConfig+0x274>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e08f      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006566:	4b4c      	ldr	r3, [pc, #304]	; (8006698 <HAL_RCC_ClockConfig+0x278>)
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	220c      	movs	r2, #12
 800656c:	4013      	ands	r3, r2
 800656e:	2b0c      	cmp	r3, #12
 8006570:	d1ef      	bne.n	8006552 <HAL_RCC_ClockConfig+0x132>
 8006572:	e024      	b.n	80065be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d11b      	bne.n	80065b4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800657c:	e009      	b.n	8006592 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800657e:	f7fe fb83 	bl	8004c88 <HAL_GetTick>
 8006582:	0002      	movs	r2, r0
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	4a42      	ldr	r2, [pc, #264]	; (8006694 <HAL_RCC_ClockConfig+0x274>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e079      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006592:	4b41      	ldr	r3, [pc, #260]	; (8006698 <HAL_RCC_ClockConfig+0x278>)
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	220c      	movs	r2, #12
 8006598:	4013      	ands	r3, r2
 800659a:	2b04      	cmp	r3, #4
 800659c:	d1ef      	bne.n	800657e <HAL_RCC_ClockConfig+0x15e>
 800659e:	e00e      	b.n	80065be <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065a0:	f7fe fb72 	bl	8004c88 <HAL_GetTick>
 80065a4:	0002      	movs	r2, r0
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	4a3a      	ldr	r2, [pc, #232]	; (8006694 <HAL_RCC_ClockConfig+0x274>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d901      	bls.n	80065b4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e068      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80065b4:	4b38      	ldr	r3, [pc, #224]	; (8006698 <HAL_RCC_ClockConfig+0x278>)
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	220c      	movs	r2, #12
 80065ba:	4013      	ands	r3, r2
 80065bc:	d1f0      	bne.n	80065a0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065be:	4b34      	ldr	r3, [pc, #208]	; (8006690 <HAL_RCC_ClockConfig+0x270>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2201      	movs	r2, #1
 80065c4:	4013      	ands	r3, r2
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d21e      	bcs.n	800660a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065cc:	4b30      	ldr	r3, [pc, #192]	; (8006690 <HAL_RCC_ClockConfig+0x270>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2201      	movs	r2, #1
 80065d2:	4393      	bics	r3, r2
 80065d4:	0019      	movs	r1, r3
 80065d6:	4b2e      	ldr	r3, [pc, #184]	; (8006690 <HAL_RCC_ClockConfig+0x270>)
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80065de:	f7fe fb53 	bl	8004c88 <HAL_GetTick>
 80065e2:	0003      	movs	r3, r0
 80065e4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065e6:	e009      	b.n	80065fc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065e8:	f7fe fb4e 	bl	8004c88 <HAL_GetTick>
 80065ec:	0002      	movs	r2, r0
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	4a28      	ldr	r2, [pc, #160]	; (8006694 <HAL_RCC_ClockConfig+0x274>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e044      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065fc:	4b24      	ldr	r3, [pc, #144]	; (8006690 <HAL_RCC_ClockConfig+0x270>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2201      	movs	r2, #1
 8006602:	4013      	ands	r3, r2
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d1ee      	bne.n	80065e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2204      	movs	r2, #4
 8006610:	4013      	ands	r3, r2
 8006612:	d009      	beq.n	8006628 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006614:	4b20      	ldr	r3, [pc, #128]	; (8006698 <HAL_RCC_ClockConfig+0x278>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	4a20      	ldr	r2, [pc, #128]	; (800669c <HAL_RCC_ClockConfig+0x27c>)
 800661a:	4013      	ands	r3, r2
 800661c:	0019      	movs	r1, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	4b1d      	ldr	r3, [pc, #116]	; (8006698 <HAL_RCC_ClockConfig+0x278>)
 8006624:	430a      	orrs	r2, r1
 8006626:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2208      	movs	r2, #8
 800662e:	4013      	ands	r3, r2
 8006630:	d00a      	beq.n	8006648 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006632:	4b19      	ldr	r3, [pc, #100]	; (8006698 <HAL_RCC_ClockConfig+0x278>)
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	4a1a      	ldr	r2, [pc, #104]	; (80066a0 <HAL_RCC_ClockConfig+0x280>)
 8006638:	4013      	ands	r3, r2
 800663a:	0019      	movs	r1, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	00da      	lsls	r2, r3, #3
 8006642:	4b15      	ldr	r3, [pc, #84]	; (8006698 <HAL_RCC_ClockConfig+0x278>)
 8006644:	430a      	orrs	r2, r1
 8006646:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006648:	f000 f832 	bl	80066b0 <HAL_RCC_GetSysClockFreq>
 800664c:	0001      	movs	r1, r0
 800664e:	4b12      	ldr	r3, [pc, #72]	; (8006698 <HAL_RCC_ClockConfig+0x278>)
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	091b      	lsrs	r3, r3, #4
 8006654:	220f      	movs	r2, #15
 8006656:	4013      	ands	r3, r2
 8006658:	4a12      	ldr	r2, [pc, #72]	; (80066a4 <HAL_RCC_ClockConfig+0x284>)
 800665a:	5cd3      	ldrb	r3, [r2, r3]
 800665c:	000a      	movs	r2, r1
 800665e:	40da      	lsrs	r2, r3
 8006660:	4b11      	ldr	r3, [pc, #68]	; (80066a8 <HAL_RCC_ClockConfig+0x288>)
 8006662:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006664:	4b11      	ldr	r3, [pc, #68]	; (80066ac <HAL_RCC_ClockConfig+0x28c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	250b      	movs	r5, #11
 800666a:	197c      	adds	r4, r7, r5
 800666c:	0018      	movs	r0, r3
 800666e:	f7fe fac5 	bl	8004bfc <HAL_InitTick>
 8006672:	0003      	movs	r3, r0
 8006674:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006676:	197b      	adds	r3, r7, r5
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d002      	beq.n	8006684 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800667e:	197b      	adds	r3, r7, r5
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	e000      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	0018      	movs	r0, r3
 8006688:	46bd      	mov	sp, r7
 800668a:	b004      	add	sp, #16
 800668c:	bdb0      	pop	{r4, r5, r7, pc}
 800668e:	46c0      	nop			; (mov r8, r8)
 8006690:	40022000 	.word	0x40022000
 8006694:	00001388 	.word	0x00001388
 8006698:	40021000 	.word	0x40021000
 800669c:	fffff8ff 	.word	0xfffff8ff
 80066a0:	ffffc7ff 	.word	0xffffc7ff
 80066a4:	0800b914 	.word	0x0800b914
 80066a8:	20000004 	.word	0x20000004
 80066ac:	20000008 	.word	0x20000008

080066b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066b0:	b5b0      	push	{r4, r5, r7, lr}
 80066b2:	b08e      	sub	sp, #56	; 0x38
 80066b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80066b6:	4b4c      	ldr	r3, [pc, #304]	; (80067e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80066bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066be:	230c      	movs	r3, #12
 80066c0:	4013      	ands	r3, r2
 80066c2:	2b0c      	cmp	r3, #12
 80066c4:	d014      	beq.n	80066f0 <HAL_RCC_GetSysClockFreq+0x40>
 80066c6:	d900      	bls.n	80066ca <HAL_RCC_GetSysClockFreq+0x1a>
 80066c8:	e07b      	b.n	80067c2 <HAL_RCC_GetSysClockFreq+0x112>
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d002      	beq.n	80066d4 <HAL_RCC_GetSysClockFreq+0x24>
 80066ce:	2b08      	cmp	r3, #8
 80066d0:	d00b      	beq.n	80066ea <HAL_RCC_GetSysClockFreq+0x3a>
 80066d2:	e076      	b.n	80067c2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80066d4:	4b44      	ldr	r3, [pc, #272]	; (80067e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2210      	movs	r2, #16
 80066da:	4013      	ands	r3, r2
 80066dc:	d002      	beq.n	80066e4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80066de:	4b43      	ldr	r3, [pc, #268]	; (80067ec <HAL_RCC_GetSysClockFreq+0x13c>)
 80066e0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80066e2:	e07c      	b.n	80067de <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80066e4:	4b42      	ldr	r3, [pc, #264]	; (80067f0 <HAL_RCC_GetSysClockFreq+0x140>)
 80066e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80066e8:	e079      	b.n	80067de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80066ea:	4b42      	ldr	r3, [pc, #264]	; (80067f4 <HAL_RCC_GetSysClockFreq+0x144>)
 80066ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80066ee:	e076      	b.n	80067de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80066f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f2:	0c9a      	lsrs	r2, r3, #18
 80066f4:	230f      	movs	r3, #15
 80066f6:	401a      	ands	r2, r3
 80066f8:	4b3f      	ldr	r3, [pc, #252]	; (80067f8 <HAL_RCC_GetSysClockFreq+0x148>)
 80066fa:	5c9b      	ldrb	r3, [r3, r2]
 80066fc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80066fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006700:	0d9a      	lsrs	r2, r3, #22
 8006702:	2303      	movs	r3, #3
 8006704:	4013      	ands	r3, r2
 8006706:	3301      	adds	r3, #1
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800670a:	4b37      	ldr	r3, [pc, #220]	; (80067e8 <HAL_RCC_GetSysClockFreq+0x138>)
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	2380      	movs	r3, #128	; 0x80
 8006710:	025b      	lsls	r3, r3, #9
 8006712:	4013      	ands	r3, r2
 8006714:	d01a      	beq.n	800674c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006718:	61bb      	str	r3, [r7, #24]
 800671a:	2300      	movs	r3, #0
 800671c:	61fb      	str	r3, [r7, #28]
 800671e:	4a35      	ldr	r2, [pc, #212]	; (80067f4 <HAL_RCC_GetSysClockFreq+0x144>)
 8006720:	2300      	movs	r3, #0
 8006722:	69b8      	ldr	r0, [r7, #24]
 8006724:	69f9      	ldr	r1, [r7, #28]
 8006726:	f7f9 ff19 	bl	800055c <__aeabi_lmul>
 800672a:	0002      	movs	r2, r0
 800672c:	000b      	movs	r3, r1
 800672e:	0010      	movs	r0, r2
 8006730:	0019      	movs	r1, r3
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	613b      	str	r3, [r7, #16]
 8006736:	2300      	movs	r3, #0
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f7f9 feed 	bl	800051c <__aeabi_uldivmod>
 8006742:	0002      	movs	r2, r0
 8006744:	000b      	movs	r3, r1
 8006746:	0013      	movs	r3, r2
 8006748:	637b      	str	r3, [r7, #52]	; 0x34
 800674a:	e037      	b.n	80067bc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800674c:	4b26      	ldr	r3, [pc, #152]	; (80067e8 <HAL_RCC_GetSysClockFreq+0x138>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2210      	movs	r2, #16
 8006752:	4013      	ands	r3, r2
 8006754:	d01a      	beq.n	800678c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006758:	60bb      	str	r3, [r7, #8]
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	4a23      	ldr	r2, [pc, #140]	; (80067ec <HAL_RCC_GetSysClockFreq+0x13c>)
 8006760:	2300      	movs	r3, #0
 8006762:	68b8      	ldr	r0, [r7, #8]
 8006764:	68f9      	ldr	r1, [r7, #12]
 8006766:	f7f9 fef9 	bl	800055c <__aeabi_lmul>
 800676a:	0002      	movs	r2, r0
 800676c:	000b      	movs	r3, r1
 800676e:	0010      	movs	r0, r2
 8006770:	0019      	movs	r1, r3
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	603b      	str	r3, [r7, #0]
 8006776:	2300      	movs	r3, #0
 8006778:	607b      	str	r3, [r7, #4]
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f7f9 fecd 	bl	800051c <__aeabi_uldivmod>
 8006782:	0002      	movs	r2, r0
 8006784:	000b      	movs	r3, r1
 8006786:	0013      	movs	r3, r2
 8006788:	637b      	str	r3, [r7, #52]	; 0x34
 800678a:	e017      	b.n	80067bc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	0018      	movs	r0, r3
 8006790:	2300      	movs	r3, #0
 8006792:	0019      	movs	r1, r3
 8006794:	4a16      	ldr	r2, [pc, #88]	; (80067f0 <HAL_RCC_GetSysClockFreq+0x140>)
 8006796:	2300      	movs	r3, #0
 8006798:	f7f9 fee0 	bl	800055c <__aeabi_lmul>
 800679c:	0002      	movs	r2, r0
 800679e:	000b      	movs	r3, r1
 80067a0:	0010      	movs	r0, r2
 80067a2:	0019      	movs	r1, r3
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	001c      	movs	r4, r3
 80067a8:	2300      	movs	r3, #0
 80067aa:	001d      	movs	r5, r3
 80067ac:	0022      	movs	r2, r4
 80067ae:	002b      	movs	r3, r5
 80067b0:	f7f9 feb4 	bl	800051c <__aeabi_uldivmod>
 80067b4:	0002      	movs	r2, r0
 80067b6:	000b      	movs	r3, r1
 80067b8:	0013      	movs	r3, r2
 80067ba:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80067bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80067c0:	e00d      	b.n	80067de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80067c2:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	0b5b      	lsrs	r3, r3, #13
 80067c8:	2207      	movs	r2, #7
 80067ca:	4013      	ands	r3, r2
 80067cc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	3301      	adds	r3, #1
 80067d2:	2280      	movs	r2, #128	; 0x80
 80067d4:	0212      	lsls	r2, r2, #8
 80067d6:	409a      	lsls	r2, r3
 80067d8:	0013      	movs	r3, r2
 80067da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80067dc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80067e0:	0018      	movs	r0, r3
 80067e2:	46bd      	mov	sp, r7
 80067e4:	b00e      	add	sp, #56	; 0x38
 80067e6:	bdb0      	pop	{r4, r5, r7, pc}
 80067e8:	40021000 	.word	0x40021000
 80067ec:	003d0900 	.word	0x003d0900
 80067f0:	00f42400 	.word	0x00f42400
 80067f4:	007a1200 	.word	0x007a1200
 80067f8:	0800b92c 	.word	0x0800b92c

080067fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006800:	4b02      	ldr	r3, [pc, #8]	; (800680c <HAL_RCC_GetHCLKFreq+0x10>)
 8006802:	681b      	ldr	r3, [r3, #0]
}
 8006804:	0018      	movs	r0, r3
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	46c0      	nop			; (mov r8, r8)
 800680c:	20000004 	.word	0x20000004

08006810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006814:	f7ff fff2 	bl	80067fc <HAL_RCC_GetHCLKFreq>
 8006818:	0001      	movs	r1, r0
 800681a:	4b06      	ldr	r3, [pc, #24]	; (8006834 <HAL_RCC_GetPCLK1Freq+0x24>)
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	0a1b      	lsrs	r3, r3, #8
 8006820:	2207      	movs	r2, #7
 8006822:	4013      	ands	r3, r2
 8006824:	4a04      	ldr	r2, [pc, #16]	; (8006838 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006826:	5cd3      	ldrb	r3, [r2, r3]
 8006828:	40d9      	lsrs	r1, r3
 800682a:	000b      	movs	r3, r1
}
 800682c:	0018      	movs	r0, r3
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	40021000 	.word	0x40021000
 8006838:	0800b924 	.word	0x0800b924

0800683c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006840:	f7ff ffdc 	bl	80067fc <HAL_RCC_GetHCLKFreq>
 8006844:	0001      	movs	r1, r0
 8006846:	4b06      	ldr	r3, [pc, #24]	; (8006860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	0adb      	lsrs	r3, r3, #11
 800684c:	2207      	movs	r2, #7
 800684e:	4013      	ands	r3, r2
 8006850:	4a04      	ldr	r2, [pc, #16]	; (8006864 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006852:	5cd3      	ldrb	r3, [r2, r3]
 8006854:	40d9      	lsrs	r1, r3
 8006856:	000b      	movs	r3, r1
}
 8006858:	0018      	movs	r0, r3
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	46c0      	nop			; (mov r8, r8)
 8006860:	40021000 	.word	0x40021000
 8006864:	0800b924 	.word	0x0800b924

08006868 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006870:	2017      	movs	r0, #23
 8006872:	183b      	adds	r3, r7, r0
 8006874:	2200      	movs	r2, #0
 8006876:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2220      	movs	r2, #32
 800687e:	4013      	ands	r3, r2
 8006880:	d100      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8006882:	e0c7      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006884:	4b8b      	ldr	r3, [pc, #556]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006888:	2380      	movs	r3, #128	; 0x80
 800688a:	055b      	lsls	r3, r3, #21
 800688c:	4013      	ands	r3, r2
 800688e:	d109      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006890:	4b88      	ldr	r3, [pc, #544]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006894:	4b87      	ldr	r3, [pc, #540]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006896:	2180      	movs	r1, #128	; 0x80
 8006898:	0549      	lsls	r1, r1, #21
 800689a:	430a      	orrs	r2, r1
 800689c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800689e:	183b      	adds	r3, r7, r0
 80068a0:	2201      	movs	r2, #1
 80068a2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068a4:	4b84      	ldr	r3, [pc, #528]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	2380      	movs	r3, #128	; 0x80
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	4013      	ands	r3, r2
 80068ae:	d11a      	bne.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068b0:	4b81      	ldr	r3, [pc, #516]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	4b80      	ldr	r3, [pc, #512]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80068b6:	2180      	movs	r1, #128	; 0x80
 80068b8:	0049      	lsls	r1, r1, #1
 80068ba:	430a      	orrs	r2, r1
 80068bc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068be:	f7fe f9e3 	bl	8004c88 <HAL_GetTick>
 80068c2:	0003      	movs	r3, r0
 80068c4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068c6:	e008      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068c8:	f7fe f9de 	bl	8004c88 <HAL_GetTick>
 80068cc:	0002      	movs	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b64      	cmp	r3, #100	; 0x64
 80068d4:	d901      	bls.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e0e8      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068da:	4b77      	ldr	r3, [pc, #476]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	2380      	movs	r3, #128	; 0x80
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	4013      	ands	r3, r2
 80068e4:	d0f0      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80068e6:	4b73      	ldr	r3, [pc, #460]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	23c0      	movs	r3, #192	; 0xc0
 80068ec:	039b      	lsls	r3, r3, #14
 80068ee:	4013      	ands	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	23c0      	movs	r3, #192	; 0xc0
 80068f8:	039b      	lsls	r3, r3, #14
 80068fa:	4013      	ands	r3, r2
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d013      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	23c0      	movs	r3, #192	; 0xc0
 8006908:	029b      	lsls	r3, r3, #10
 800690a:	401a      	ands	r2, r3
 800690c:	23c0      	movs	r3, #192	; 0xc0
 800690e:	029b      	lsls	r3, r3, #10
 8006910:	429a      	cmp	r2, r3
 8006912:	d10a      	bne.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006914:	4b67      	ldr	r3, [pc, #412]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	2380      	movs	r3, #128	; 0x80
 800691a:	029b      	lsls	r3, r3, #10
 800691c:	401a      	ands	r2, r3
 800691e:	2380      	movs	r3, #128	; 0x80
 8006920:	029b      	lsls	r3, r3, #10
 8006922:	429a      	cmp	r2, r3
 8006924:	d101      	bne.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e0c0      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800692a:	4b62      	ldr	r3, [pc, #392]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800692c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800692e:	23c0      	movs	r3, #192	; 0xc0
 8006930:	029b      	lsls	r3, r3, #10
 8006932:	4013      	ands	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d03b      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	23c0      	movs	r3, #192	; 0xc0
 8006942:	029b      	lsls	r3, r3, #10
 8006944:	4013      	ands	r3, r2
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	429a      	cmp	r2, r3
 800694a:	d033      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2220      	movs	r2, #32
 8006952:	4013      	ands	r3, r2
 8006954:	d02e      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006956:	4b57      	ldr	r3, [pc, #348]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695a:	4a58      	ldr	r2, [pc, #352]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800695c:	4013      	ands	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006960:	4b54      	ldr	r3, [pc, #336]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006962:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006964:	4b53      	ldr	r3, [pc, #332]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006966:	2180      	movs	r1, #128	; 0x80
 8006968:	0309      	lsls	r1, r1, #12
 800696a:	430a      	orrs	r2, r1
 800696c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800696e:	4b51      	ldr	r3, [pc, #324]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006970:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006972:	4b50      	ldr	r3, [pc, #320]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006974:	4952      	ldr	r1, [pc, #328]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006976:	400a      	ands	r2, r1
 8006978:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800697a:	4b4e      	ldr	r3, [pc, #312]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	2380      	movs	r3, #128	; 0x80
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	4013      	ands	r3, r2
 8006988:	d014      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800698a:	f7fe f97d 	bl	8004c88 <HAL_GetTick>
 800698e:	0003      	movs	r3, r0
 8006990:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006992:	e009      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006994:	f7fe f978 	bl	8004c88 <HAL_GetTick>
 8006998:	0002      	movs	r2, r0
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	4a49      	ldr	r2, [pc, #292]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d901      	bls.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e081      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069a8:	4b42      	ldr	r3, [pc, #264]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80069aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069ac:	2380      	movs	r3, #128	; 0x80
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4013      	ands	r3, r2
 80069b2:	d0ef      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2220      	movs	r2, #32
 80069ba:	4013      	ands	r3, r2
 80069bc:	d01f      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	23c0      	movs	r3, #192	; 0xc0
 80069c4:	029b      	lsls	r3, r3, #10
 80069c6:	401a      	ands	r2, r3
 80069c8:	23c0      	movs	r3, #192	; 0xc0
 80069ca:	029b      	lsls	r3, r3, #10
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d10c      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x182>
 80069d0:	4b38      	ldr	r3, [pc, #224]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a3c      	ldr	r2, [pc, #240]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069d6:	4013      	ands	r3, r2
 80069d8:	0019      	movs	r1, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	23c0      	movs	r3, #192	; 0xc0
 80069e0:	039b      	lsls	r3, r3, #14
 80069e2:	401a      	ands	r2, r3
 80069e4:	4b33      	ldr	r3, [pc, #204]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80069e6:	430a      	orrs	r2, r1
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	4b32      	ldr	r3, [pc, #200]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80069ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	23c0      	movs	r3, #192	; 0xc0
 80069f4:	029b      	lsls	r3, r3, #10
 80069f6:	401a      	ands	r2, r3
 80069f8:	4b2e      	ldr	r3, [pc, #184]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80069fa:	430a      	orrs	r2, r1
 80069fc:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80069fe:	2317      	movs	r3, #23
 8006a00:	18fb      	adds	r3, r7, r3
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d105      	bne.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a08:	4b2a      	ldr	r3, [pc, #168]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a0c:	4b29      	ldr	r3, [pc, #164]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006a0e:	492f      	ldr	r1, [pc, #188]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006a10:	400a      	ands	r2, r1
 8006a12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	d009      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a1e:	4b25      	ldr	r3, [pc, #148]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a22:	2203      	movs	r2, #3
 8006a24:	4393      	bics	r3, r2
 8006a26:	0019      	movs	r1, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	4b21      	ldr	r3, [pc, #132]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2202      	movs	r2, #2
 8006a38:	4013      	ands	r3, r2
 8006a3a:	d009      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a3c:	4b1d      	ldr	r3, [pc, #116]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a40:	220c      	movs	r2, #12
 8006a42:	4393      	bics	r3, r2
 8006a44:	0019      	movs	r1, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	4b1a      	ldr	r3, [pc, #104]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2204      	movs	r2, #4
 8006a56:	4013      	ands	r3, r2
 8006a58:	d009      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a5a:	4b16      	ldr	r3, [pc, #88]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a5e:	4a1c      	ldr	r2, [pc, #112]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a60:	4013      	ands	r3, r2
 8006a62:	0019      	movs	r1, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	4b12      	ldr	r3, [pc, #72]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2208      	movs	r2, #8
 8006a74:	4013      	ands	r3, r2
 8006a76:	d009      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a78:	4b0e      	ldr	r3, [pc, #56]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a7c:	4a15      	ldr	r2, [pc, #84]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006a7e:	4013      	ands	r3, r2
 8006a80:	0019      	movs	r1, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	695a      	ldr	r2, [r3, #20]
 8006a86:	4b0b      	ldr	r3, [pc, #44]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2280      	movs	r2, #128	; 0x80
 8006a92:	4013      	ands	r3, r2
 8006a94:	d009      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006a96:	4b07      	ldr	r3, [pc, #28]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a9a:	4a0f      	ldr	r2, [pc, #60]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	0019      	movs	r1, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	699a      	ldr	r2, [r3, #24]
 8006aa4:	4b03      	ldr	r3, [pc, #12]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	0018      	movs	r0, r3
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	b006      	add	sp, #24
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	40021000 	.word	0x40021000
 8006ab8:	40007000 	.word	0x40007000
 8006abc:	fffcffff 	.word	0xfffcffff
 8006ac0:	fff7ffff 	.word	0xfff7ffff
 8006ac4:	00001388 	.word	0x00001388
 8006ac8:	ffcfffff 	.word	0xffcfffff
 8006acc:	efffffff 	.word	0xefffffff
 8006ad0:	fffff3ff 	.word	0xfffff3ff
 8006ad4:	ffffcfff 	.word	0xffffcfff
 8006ad8:	fff3ffff 	.word	0xfff3ffff

08006adc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006adc:	b5b0      	push	{r4, r5, r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006ae4:	230f      	movs	r3, #15
 8006ae6:	18fb      	adds	r3, r7, r3
 8006ae8:	2201      	movs	r2, #1
 8006aea:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e088      	b.n	8006c08 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2221      	movs	r2, #33	; 0x21
 8006afa:	5c9b      	ldrb	r3, [r3, r2]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d107      	bne.n	8006b12 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2220      	movs	r2, #32
 8006b06:	2100      	movs	r1, #0
 8006b08:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	f7fd fe8f 	bl	8004830 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2221      	movs	r2, #33	; 0x21
 8006b16:	2102      	movs	r1, #2
 8006b18:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	2210      	movs	r2, #16
 8006b22:	4013      	ands	r3, r2
 8006b24:	2b10      	cmp	r3, #16
 8006b26:	d05f      	beq.n	8006be8 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	22ca      	movs	r2, #202	; 0xca
 8006b2e:	625a      	str	r2, [r3, #36]	; 0x24
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2253      	movs	r2, #83	; 0x53
 8006b36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006b38:	250f      	movs	r5, #15
 8006b3a:	197c      	adds	r4, r7, r5
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	0018      	movs	r0, r3
 8006b40:	f000 f890 	bl	8006c64 <RTC_EnterInitMode>
 8006b44:	0003      	movs	r3, r0
 8006b46:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8006b48:	0028      	movs	r0, r5
 8006b4a:	183b      	adds	r3, r7, r0
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d12c      	bne.n	8006bac <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	492c      	ldr	r1, [pc, #176]	; (8006c10 <HAL_RTC_Init+0x134>)
 8006b5e:	400a      	ands	r2, r1
 8006b60:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6899      	ldr	r1, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	431a      	orrs	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	68d2      	ldr	r2, [r2, #12]
 8006b88:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	6919      	ldr	r1, [r3, #16]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	041a      	lsls	r2, r3, #16
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006b9e:	183c      	adds	r4, r7, r0
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	f000 f8a2 	bl	8006cec <RTC_ExitInitMode>
 8006ba8:	0003      	movs	r3, r0
 8006baa:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8006bac:	230f      	movs	r3, #15
 8006bae:	18fb      	adds	r3, r7, r3
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d113      	bne.n	8006bde <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2103      	movs	r1, #3
 8006bc2:	438a      	bics	r2, r1
 8006bc4:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	69da      	ldr	r2, [r3, #28]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	22ff      	movs	r2, #255	; 0xff
 8006be4:	625a      	str	r2, [r3, #36]	; 0x24
 8006be6:	e003      	b.n	8006bf0 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006be8:	230f      	movs	r3, #15
 8006bea:	18fb      	adds	r3, r7, r3
 8006bec:	2200      	movs	r2, #0
 8006bee:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8006bf0:	230f      	movs	r3, #15
 8006bf2:	18fb      	adds	r3, r7, r3
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d103      	bne.n	8006c02 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2221      	movs	r2, #33	; 0x21
 8006bfe:	2101      	movs	r1, #1
 8006c00:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006c02:	230f      	movs	r3, #15
 8006c04:	18fb      	adds	r3, r7, r3
 8006c06:	781b      	ldrb	r3, [r3, #0]
}
 8006c08:	0018      	movs	r0, r3
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	b004      	add	sp, #16
 8006c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8006c10:	ff8fffbf 	.word	0xff8fffbf

08006c14 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a0e      	ldr	r2, [pc, #56]	; (8006c60 <HAL_RTC_WaitForSynchro+0x4c>)
 8006c26:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c28:	f7fe f82e 	bl	8004c88 <HAL_GetTick>
 8006c2c:	0003      	movs	r3, r0
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006c30:	e00a      	b.n	8006c48 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c32:	f7fe f829 	bl	8004c88 <HAL_GetTick>
 8006c36:	0002      	movs	r2, r0
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	1ad2      	subs	r2, r2, r3
 8006c3c:	23fa      	movs	r3, #250	; 0xfa
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d901      	bls.n	8006c48 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e006      	b.n	8006c56 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	4013      	ands	r3, r2
 8006c52:	d0ee      	beq.n	8006c32 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	0018      	movs	r0, r3
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	b004      	add	sp, #16
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	46c0      	nop			; (mov r8, r8)
 8006c60:	00017f5f 	.word	0x00017f5f

08006c64 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006c70:	230f      	movs	r3, #15
 8006c72:	18fb      	adds	r3, r7, r3
 8006c74:	2200      	movs	r2, #0
 8006c76:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	2240      	movs	r2, #64	; 0x40
 8006c80:	4013      	ands	r3, r2
 8006c82:	d12c      	bne.n	8006cde <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2180      	movs	r1, #128	; 0x80
 8006c90:	430a      	orrs	r2, r1
 8006c92:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c94:	f7fd fff8 	bl	8004c88 <HAL_GetTick>
 8006c98:	0003      	movs	r3, r0
 8006c9a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006c9c:	e014      	b.n	8006cc8 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c9e:	f7fd fff3 	bl	8004c88 <HAL_GetTick>
 8006ca2:	0002      	movs	r2, r0
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	1ad2      	subs	r2, r2, r3
 8006ca8:	200f      	movs	r0, #15
 8006caa:	183b      	adds	r3, r7, r0
 8006cac:	1839      	adds	r1, r7, r0
 8006cae:	7809      	ldrb	r1, [r1, #0]
 8006cb0:	7019      	strb	r1, [r3, #0]
 8006cb2:	23fa      	movs	r3, #250	; 0xfa
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d906      	bls.n	8006cc8 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2221      	movs	r2, #33	; 0x21
 8006cbe:	2104      	movs	r1, #4
 8006cc0:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8006cc2:	183b      	adds	r3, r7, r0
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	2240      	movs	r2, #64	; 0x40
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	d104      	bne.n	8006cde <RTC_EnterInitMode+0x7a>
 8006cd4:	230f      	movs	r3, #15
 8006cd6:	18fb      	adds	r3, r7, r3
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d1df      	bne.n	8006c9e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8006cde:	230f      	movs	r3, #15
 8006ce0:	18fb      	adds	r3, r7, r3
 8006ce2:	781b      	ldrb	r3, [r3, #0]
}
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	b004      	add	sp, #16
 8006cea:	bd80      	pop	{r7, pc}

08006cec <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006cec:	b590      	push	{r4, r7, lr}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf4:	240f      	movs	r4, #15
 8006cf6:	193b      	adds	r3, r7, r4
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2180      	movs	r1, #128	; 0x80
 8006d08:	438a      	bics	r2, r1
 8006d0a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	2220      	movs	r2, #32
 8006d14:	4013      	ands	r3, r2
 8006d16:	d10c      	bne.n	8006d32 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	f7ff ff7a 	bl	8006c14 <HAL_RTC_WaitForSynchro>
 8006d20:	1e03      	subs	r3, r0, #0
 8006d22:	d006      	beq.n	8006d32 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2221      	movs	r2, #33	; 0x21
 8006d28:	2104      	movs	r1, #4
 8006d2a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8006d2c:	193b      	adds	r3, r7, r4
 8006d2e:	2201      	movs	r2, #1
 8006d30:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8006d32:	230f      	movs	r3, #15
 8006d34:	18fb      	adds	r3, r7, r3
 8006d36:	781b      	ldrb	r3, [r3, #0]
}
 8006d38:	0018      	movs	r0, r3
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	b005      	add	sp, #20
 8006d3e:	bd90      	pop	{r4, r7, pc}

08006d40 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006d4c:	4b64      	ldr	r3, [pc, #400]	; (8006ee0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	22fa      	movs	r2, #250	; 0xfa
 8006d52:	01d1      	lsls	r1, r2, #7
 8006d54:	0018      	movs	r0, r3
 8006d56:	f7f9 f9f3 	bl	8000140 <__udivsi3>
 8006d5a:	0003      	movs	r3, r0
 8006d5c:	001a      	movs	r2, r3
 8006d5e:	0013      	movs	r3, r2
 8006d60:	015b      	lsls	r3, r3, #5
 8006d62:	1a9b      	subs	r3, r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	189b      	adds	r3, r3, r2
 8006d68:	00db      	lsls	r3, r3, #3
 8006d6a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	5c9b      	ldrb	r3, [r3, r2]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d101      	bne.n	8006d7a <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8006d76:	2302      	movs	r3, #2
 8006d78:	e0ad      	b.n	8006ed6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	2101      	movs	r1, #1
 8006d80:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2221      	movs	r2, #33	; 0x21
 8006d86:	2102      	movs	r1, #2
 8006d88:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	22ca      	movs	r2, #202	; 0xca
 8006d90:	625a      	str	r2, [r3, #36]	; 0x24
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2253      	movs	r2, #83	; 0x53
 8006d98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	2380      	movs	r3, #128	; 0x80
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	4013      	ands	r3, r2
 8006da6:	d019      	beq.n	8006ddc <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10d      	bne.n	8006dd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	22ff      	movs	r2, #255	; 0xff
 8006dba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2221      	movs	r2, #33	; 0x21
 8006dc0:	2103      	movs	r1, #3
 8006dc2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	2100      	movs	r1, #0
 8006dca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e082      	b.n	8006ed6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	2204      	movs	r2, #4
 8006dd8:	4013      	ands	r3, r2
 8006dda:	d1e5      	bne.n	8006da8 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	493f      	ldr	r1, [pc, #252]	; (8006ee4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8006de8:	400a      	ands	r2, r1
 8006dea:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	22ff      	movs	r2, #255	; 0xff
 8006df4:	401a      	ands	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	493b      	ldr	r1, [pc, #236]	; (8006ee8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006e00:	4b37      	ldr	r3, [pc, #220]	; (8006ee0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	22fa      	movs	r2, #250	; 0xfa
 8006e06:	01d1      	lsls	r1, r2, #7
 8006e08:	0018      	movs	r0, r3
 8006e0a:	f7f9 f999 	bl	8000140 <__udivsi3>
 8006e0e:	0003      	movs	r3, r0
 8006e10:	001a      	movs	r2, r3
 8006e12:	0013      	movs	r3, r2
 8006e14:	015b      	lsls	r3, r3, #5
 8006e16:	1a9b      	subs	r3, r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	189b      	adds	r3, r3, r2
 8006e1c:	00db      	lsls	r3, r3, #3
 8006e1e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10d      	bne.n	8006e48 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	22ff      	movs	r2, #255	; 0xff
 8006e32:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2221      	movs	r2, #33	; 0x21
 8006e38:	2103      	movs	r1, #3
 8006e3a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2220      	movs	r2, #32
 8006e40:	2100      	movs	r1, #0
 8006e42:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e046      	b.n	8006ed6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	2204      	movs	r2, #4
 8006e50:	4013      	ands	r3, r2
 8006e52:	d0e5      	beq.n	8006e20 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689a      	ldr	r2, [r3, #8]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2107      	movs	r1, #7
 8006e60:	438a      	bics	r2, r1
 8006e62:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6899      	ldr	r1, [r3, #8]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006e7c:	4b1b      	ldr	r3, [pc, #108]	; (8006eec <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	4b1a      	ldr	r3, [pc, #104]	; (8006eec <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8006e82:	2180      	movs	r1, #128	; 0x80
 8006e84:	0349      	lsls	r1, r1, #13
 8006e86:	430a      	orrs	r2, r1
 8006e88:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006e8a:	4b18      	ldr	r3, [pc, #96]	; (8006eec <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8006e8c:	689a      	ldr	r2, [r3, #8]
 8006e8e:	4b17      	ldr	r3, [pc, #92]	; (8006eec <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8006e90:	2180      	movs	r1, #128	; 0x80
 8006e92:	0349      	lsls	r1, r1, #13
 8006e94:	430a      	orrs	r2, r1
 8006e96:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689a      	ldr	r2, [r3, #8]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2180      	movs	r1, #128	; 0x80
 8006ea4:	01c9      	lsls	r1, r1, #7
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2180      	movs	r1, #128	; 0x80
 8006eb6:	00c9      	lsls	r1, r1, #3
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	22ff      	movs	r2, #255	; 0xff
 8006ec2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2221      	movs	r2, #33	; 0x21
 8006ec8:	2101      	movs	r1, #1
 8006eca:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	0018      	movs	r0, r3
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	b006      	add	sp, #24
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	46c0      	nop			; (mov r8, r8)
 8006ee0:	20000004 	.word	0x20000004
 8006ee4:	fffffbff 	.word	0xfffffbff
 8006ee8:	fffffb7f 	.word	0xfffffb7f
 8006eec:	40010400 	.word	0x40010400

08006ef0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2220      	movs	r2, #32
 8006f00:	5c9b      	ldrb	r3, [r3, r2]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d101      	bne.n	8006f0a <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8006f06:	2302      	movs	r3, #2
 8006f08:	e04e      	b.n	8006fa8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	2101      	movs	r1, #1
 8006f10:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2221      	movs	r2, #33	; 0x21
 8006f16:	2102      	movs	r1, #2
 8006f18:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	22ca      	movs	r2, #202	; 0xca
 8006f20:	625a      	str	r2, [r3, #36]	; 0x24
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2253      	movs	r2, #83	; 0x53
 8006f28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	491e      	ldr	r1, [pc, #120]	; (8006fb0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8006f36:	400a      	ands	r2, r1
 8006f38:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	491b      	ldr	r1, [pc, #108]	; (8006fb4 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8006f46:	400a      	ands	r2, r1
 8006f48:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f4a:	f7fd fe9d 	bl	8004c88 <HAL_GetTick>
 8006f4e:	0003      	movs	r3, r0
 8006f50:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006f52:	e016      	b.n	8006f82 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f54:	f7fd fe98 	bl	8004c88 <HAL_GetTick>
 8006f58:	0002      	movs	r2, r0
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	1ad2      	subs	r2, r2, r3
 8006f5e:	23fa      	movs	r3, #250	; 0xfa
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d90d      	bls.n	8006f82 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	22ff      	movs	r2, #255	; 0xff
 8006f6c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2221      	movs	r2, #33	; 0x21
 8006f72:	2103      	movs	r1, #3
 8006f74:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e012      	b.n	8006fa8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	2204      	movs	r2, #4
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	d0e2      	beq.n	8006f54 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	22ff      	movs	r2, #255	; 0xff
 8006f94:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2221      	movs	r2, #33	; 0x21
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	0018      	movs	r0, r3
 8006faa:	46bd      	mov	sp, r7
 8006fac:	b004      	add	sp, #16
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	fffffbff 	.word	0xfffffbff
 8006fb4:	ffffbfff 	.word	0xffffbfff

08006fb8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006fc0:	4b13      	ldr	r3, [pc, #76]	; (8007010 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8006fc2:	2280      	movs	r2, #128	; 0x80
 8006fc4:	0352      	lsls	r2, r2, #13
 8006fc6:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689a      	ldr	r2, [r3, #8]
 8006fce:	2380      	movs	r3, #128	; 0x80
 8006fd0:	01db      	lsls	r3, r3, #7
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	d014      	beq.n	8007000 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68da      	ldr	r2, [r3, #12]
 8006fdc:	2380      	movs	r3, #128	; 0x80
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	d00d      	beq.n	8007000 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	22ff      	movs	r2, #255	; 0xff
 8006fec:	401a      	ands	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4908      	ldr	r1, [pc, #32]	; (8007014 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	f000 f80c 	bl	8007018 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2221      	movs	r2, #33	; 0x21
 8007004:	2101      	movs	r1, #1
 8007006:	5499      	strb	r1, [r3, r2]
}
 8007008:	46c0      	nop			; (mov r8, r8)
 800700a:	46bd      	mov	sp, r7
 800700c:	b002      	add	sp, #8
 800700e:	bd80      	pop	{r7, pc}
 8007010:	40010400 	.word	0x40010400
 8007014:	fffffb7f 	.word	0xfffffb7f

08007018 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8007020:	46c0      	nop			; (mov r8, r8)
 8007022:	46bd      	mov	sp, r7
 8007024:	b002      	add	sp, #8
 8007026:	bd80      	pop	{r7, pc}

08007028 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e083      	b.n	8007142 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	2b00      	cmp	r3, #0
 8007040:	d109      	bne.n	8007056 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	2382      	movs	r3, #130	; 0x82
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	429a      	cmp	r2, r3
 800704c:	d009      	beq.n	8007062 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	61da      	str	r2, [r3, #28]
 8007054:	e005      	b.n	8007062 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2251      	movs	r2, #81	; 0x51
 800706c:	5c9b      	ldrb	r3, [r3, r2]
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	d107      	bne.n	8007084 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2250      	movs	r2, #80	; 0x50
 8007078:	2100      	movs	r1, #0
 800707a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	0018      	movs	r0, r3
 8007080:	f7fd fbf6 	bl	8004870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2251      	movs	r2, #81	; 0x51
 8007088:	2102      	movs	r1, #2
 800708a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2140      	movs	r1, #64	; 0x40
 8007098:	438a      	bics	r2, r1
 800709a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	2382      	movs	r3, #130	; 0x82
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	401a      	ands	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6899      	ldr	r1, [r3, #8]
 80070aa:	2384      	movs	r3, #132	; 0x84
 80070ac:	021b      	lsls	r3, r3, #8
 80070ae:	400b      	ands	r3, r1
 80070b0:	431a      	orrs	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68d9      	ldr	r1, [r3, #12]
 80070b6:	2380      	movs	r3, #128	; 0x80
 80070b8:	011b      	lsls	r3, r3, #4
 80070ba:	400b      	ands	r3, r1
 80070bc:	431a      	orrs	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	2102      	movs	r1, #2
 80070c4:	400b      	ands	r3, r1
 80070c6:	431a      	orrs	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	2101      	movs	r1, #1
 80070ce:	400b      	ands	r3, r1
 80070d0:	431a      	orrs	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6999      	ldr	r1, [r3, #24]
 80070d6:	2380      	movs	r3, #128	; 0x80
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	400b      	ands	r3, r1
 80070dc:	431a      	orrs	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	2138      	movs	r1, #56	; 0x38
 80070e4:	400b      	ands	r3, r1
 80070e6:	431a      	orrs	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	2180      	movs	r1, #128	; 0x80
 80070ee:	400b      	ands	r3, r1
 80070f0:	431a      	orrs	r2, r3
 80070f2:	0011      	movs	r1, r2
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070f8:	2380      	movs	r3, #128	; 0x80
 80070fa:	019b      	lsls	r3, r3, #6
 80070fc:	401a      	ands	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	0c1b      	lsrs	r3, r3, #16
 800710c:	2204      	movs	r2, #4
 800710e:	4013      	ands	r3, r2
 8007110:	0019      	movs	r1, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007116:	2210      	movs	r2, #16
 8007118:	401a      	ands	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	69da      	ldr	r2, [r3, #28]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4907      	ldr	r1, [pc, #28]	; (800714c <HAL_SPI_Init+0x124>)
 800712e:	400a      	ands	r2, r1
 8007130:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2251      	movs	r2, #81	; 0x51
 800713c:	2101      	movs	r1, #1
 800713e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	0018      	movs	r0, r3
 8007144:	46bd      	mov	sp, r7
 8007146:	b002      	add	sp, #8
 8007148:	bd80      	pop	{r7, pc}
 800714a:	46c0      	nop			; (mov r8, r8)
 800714c:	fffff7ff 	.word	0xfffff7ff

08007150 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b088      	sub	sp, #32
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	603b      	str	r3, [r7, #0]
 800715c:	1dbb      	adds	r3, r7, #6
 800715e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007160:	231f      	movs	r3, #31
 8007162:	18fb      	adds	r3, r7, r3
 8007164:	2200      	movs	r2, #0
 8007166:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2250      	movs	r2, #80	; 0x50
 800716c:	5c9b      	ldrb	r3, [r3, r2]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d101      	bne.n	8007176 <HAL_SPI_Transmit+0x26>
 8007172:	2302      	movs	r3, #2
 8007174:	e145      	b.n	8007402 <HAL_SPI_Transmit+0x2b2>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2250      	movs	r2, #80	; 0x50
 800717a:	2101      	movs	r1, #1
 800717c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800717e:	f7fd fd83 	bl	8004c88 <HAL_GetTick>
 8007182:	0003      	movs	r3, r0
 8007184:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007186:	2316      	movs	r3, #22
 8007188:	18fb      	adds	r3, r7, r3
 800718a:	1dba      	adds	r2, r7, #6
 800718c:	8812      	ldrh	r2, [r2, #0]
 800718e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2251      	movs	r2, #81	; 0x51
 8007194:	5c9b      	ldrb	r3, [r3, r2]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b01      	cmp	r3, #1
 800719a:	d004      	beq.n	80071a6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800719c:	231f      	movs	r3, #31
 800719e:	18fb      	adds	r3, r7, r3
 80071a0:	2202      	movs	r2, #2
 80071a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80071a4:	e126      	b.n	80073f4 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <HAL_SPI_Transmit+0x64>
 80071ac:	1dbb      	adds	r3, r7, #6
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d104      	bne.n	80071be <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80071b4:	231f      	movs	r3, #31
 80071b6:	18fb      	adds	r3, r7, r3
 80071b8:	2201      	movs	r2, #1
 80071ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80071bc:	e11a      	b.n	80073f4 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2251      	movs	r2, #81	; 0x51
 80071c2:	2103      	movs	r1, #3
 80071c4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	1dba      	adds	r2, r7, #6
 80071d6:	8812      	ldrh	r2, [r2, #0]
 80071d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	1dba      	adds	r2, r7, #6
 80071de:	8812      	ldrh	r2, [r2, #0]
 80071e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	689a      	ldr	r2, [r3, #8]
 8007204:	2380      	movs	r3, #128	; 0x80
 8007206:	021b      	lsls	r3, r3, #8
 8007208:	429a      	cmp	r2, r3
 800720a:	d110      	bne.n	800722e <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2140      	movs	r1, #64	; 0x40
 8007218:	438a      	bics	r2, r1
 800721a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2180      	movs	r1, #128	; 0x80
 8007228:	01c9      	lsls	r1, r1, #7
 800722a:	430a      	orrs	r2, r1
 800722c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2240      	movs	r2, #64	; 0x40
 8007236:	4013      	ands	r3, r2
 8007238:	2b40      	cmp	r3, #64	; 0x40
 800723a:	d007      	beq.n	800724c <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2140      	movs	r1, #64	; 0x40
 8007248:	430a      	orrs	r2, r1
 800724a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	2380      	movs	r3, #128	; 0x80
 8007252:	011b      	lsls	r3, r3, #4
 8007254:	429a      	cmp	r2, r3
 8007256:	d152      	bne.n	80072fe <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d004      	beq.n	800726a <HAL_SPI_Transmit+0x11a>
 8007260:	2316      	movs	r3, #22
 8007262:	18fb      	adds	r3, r7, r3
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d143      	bne.n	80072f2 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726e:	881a      	ldrh	r2, [r3, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727a:	1c9a      	adds	r2, r3, #2
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007284:	b29b      	uxth	r3, r3
 8007286:	3b01      	subs	r3, #1
 8007288:	b29a      	uxth	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800728e:	e030      	b.n	80072f2 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	2202      	movs	r2, #2
 8007298:	4013      	ands	r3, r2
 800729a:	2b02      	cmp	r3, #2
 800729c:	d112      	bne.n	80072c4 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a2:	881a      	ldrh	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ae:	1c9a      	adds	r2, r3, #2
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b29a      	uxth	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80072c2:	e016      	b.n	80072f2 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072c4:	f7fd fce0 	bl	8004c88 <HAL_GetTick>
 80072c8:	0002      	movs	r2, r0
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d802      	bhi.n	80072da <HAL_SPI_Transmit+0x18a>
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	3301      	adds	r3, #1
 80072d8:	d102      	bne.n	80072e0 <HAL_SPI_Transmit+0x190>
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d108      	bne.n	80072f2 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 80072e0:	231f      	movs	r3, #31
 80072e2:	18fb      	adds	r3, r7, r3
 80072e4:	2203      	movs	r2, #3
 80072e6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2251      	movs	r2, #81	; 0x51
 80072ec:	2101      	movs	r1, #1
 80072ee:	5499      	strb	r1, [r3, r2]
          goto error;
 80072f0:	e080      	b.n	80073f4 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1c9      	bne.n	8007290 <HAL_SPI_Transmit+0x140>
 80072fc:	e053      	b.n	80073a6 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d004      	beq.n	8007310 <HAL_SPI_Transmit+0x1c0>
 8007306:	2316      	movs	r3, #22
 8007308:	18fb      	adds	r3, r7, r3
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d145      	bne.n	800739c <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	330c      	adds	r3, #12
 800731a:	7812      	ldrb	r2, [r2, #0]
 800731c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800732c:	b29b      	uxth	r3, r3
 800732e:	3b01      	subs	r3, #1
 8007330:	b29a      	uxth	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007336:	e031      	b.n	800739c <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	2202      	movs	r2, #2
 8007340:	4013      	ands	r3, r2
 8007342:	2b02      	cmp	r3, #2
 8007344:	d113      	bne.n	800736e <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	330c      	adds	r3, #12
 8007350:	7812      	ldrb	r2, [r2, #0]
 8007352:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007358:	1c5a      	adds	r2, r3, #1
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007362:	b29b      	uxth	r3, r3
 8007364:	3b01      	subs	r3, #1
 8007366:	b29a      	uxth	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	86da      	strh	r2, [r3, #54]	; 0x36
 800736c:	e016      	b.n	800739c <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800736e:	f7fd fc8b 	bl	8004c88 <HAL_GetTick>
 8007372:	0002      	movs	r2, r0
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	429a      	cmp	r2, r3
 800737c:	d802      	bhi.n	8007384 <HAL_SPI_Transmit+0x234>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	3301      	adds	r3, #1
 8007382:	d102      	bne.n	800738a <HAL_SPI_Transmit+0x23a>
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d108      	bne.n	800739c <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 800738a:	231f      	movs	r3, #31
 800738c:	18fb      	adds	r3, r7, r3
 800738e:	2203      	movs	r2, #3
 8007390:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2251      	movs	r2, #81	; 0x51
 8007396:	2101      	movs	r1, #1
 8007398:	5499      	strb	r1, [r3, r2]
          goto error;
 800739a:	e02b      	b.n	80073f4 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1c8      	bne.n	8007338 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073a6:	69ba      	ldr	r2, [r7, #24]
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	0018      	movs	r0, r3
 80073ae:	f000 fc1f 	bl	8007bf0 <SPI_EndRxTxTransaction>
 80073b2:	1e03      	subs	r3, r0, #0
 80073b4:	d002      	beq.n	80073bc <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2220      	movs	r2, #32
 80073ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10a      	bne.n	80073da <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073c4:	2300      	movs	r3, #0
 80073c6:	613b      	str	r3, [r7, #16]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	613b      	str	r3, [r7, #16]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	613b      	str	r3, [r7, #16]
 80073d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d004      	beq.n	80073ec <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 80073e2:	231f      	movs	r3, #31
 80073e4:	18fb      	adds	r3, r7, r3
 80073e6:	2201      	movs	r2, #1
 80073e8:	701a      	strb	r2, [r3, #0]
 80073ea:	e003      	b.n	80073f4 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2251      	movs	r2, #81	; 0x51
 80073f0:	2101      	movs	r1, #1
 80073f2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2250      	movs	r2, #80	; 0x50
 80073f8:	2100      	movs	r1, #0
 80073fa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80073fc:	231f      	movs	r3, #31
 80073fe:	18fb      	adds	r3, r7, r3
 8007400:	781b      	ldrb	r3, [r3, #0]
}
 8007402:	0018      	movs	r0, r3
 8007404:	46bd      	mov	sp, r7
 8007406:	b008      	add	sp, #32
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800740c:	b590      	push	{r4, r7, lr}
 800740e:	b089      	sub	sp, #36	; 0x24
 8007410:	af02      	add	r7, sp, #8
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	603b      	str	r3, [r7, #0]
 8007418:	1dbb      	adds	r3, r7, #6
 800741a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800741c:	2117      	movs	r1, #23
 800741e:	187b      	adds	r3, r7, r1
 8007420:	2200      	movs	r2, #0
 8007422:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2251      	movs	r2, #81	; 0x51
 8007428:	5c9b      	ldrb	r3, [r3, r2]
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b01      	cmp	r3, #1
 800742e:	d003      	beq.n	8007438 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8007430:	187b      	adds	r3, r7, r1
 8007432:	2202      	movs	r2, #2
 8007434:	701a      	strb	r2, [r3, #0]
    goto error;
 8007436:	e109      	b.n	800764c <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	2382      	movs	r3, #130	; 0x82
 800743e:	005b      	lsls	r3, r3, #1
 8007440:	429a      	cmp	r2, r3
 8007442:	d113      	bne.n	800746c <HAL_SPI_Receive+0x60>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10f      	bne.n	800746c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2251      	movs	r2, #81	; 0x51
 8007450:	2104      	movs	r1, #4
 8007452:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007454:	1dbb      	adds	r3, r7, #6
 8007456:	881c      	ldrh	r4, [r3, #0]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	68b9      	ldr	r1, [r7, #8]
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	0023      	movs	r3, r4
 8007464:	f000 f900 	bl	8007668 <HAL_SPI_TransmitReceive>
 8007468:	0003      	movs	r3, r0
 800746a:	e0f6      	b.n	800765a <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2250      	movs	r2, #80	; 0x50
 8007470:	5c9b      	ldrb	r3, [r3, r2]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d101      	bne.n	800747a <HAL_SPI_Receive+0x6e>
 8007476:	2302      	movs	r3, #2
 8007478:	e0ef      	b.n	800765a <HAL_SPI_Receive+0x24e>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2250      	movs	r2, #80	; 0x50
 800747e:	2101      	movs	r1, #1
 8007480:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007482:	f7fd fc01 	bl	8004c88 <HAL_GetTick>
 8007486:	0003      	movs	r3, r0
 8007488:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <HAL_SPI_Receive+0x8c>
 8007490:	1dbb      	adds	r3, r7, #6
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d104      	bne.n	80074a2 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8007498:	2317      	movs	r3, #23
 800749a:	18fb      	adds	r3, r7, r3
 800749c:	2201      	movs	r2, #1
 800749e:	701a      	strb	r2, [r3, #0]
    goto error;
 80074a0:	e0d4      	b.n	800764c <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2251      	movs	r2, #81	; 0x51
 80074a6:	2104      	movs	r1, #4
 80074a8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	1dba      	adds	r2, r7, #6
 80074ba:	8812      	ldrh	r2, [r2, #0]
 80074bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	1dba      	adds	r2, r7, #6
 80074c2:	8812      	ldrh	r2, [r2, #0]
 80074c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	2380      	movs	r3, #128	; 0x80
 80074ea:	021b      	lsls	r3, r3, #8
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d10f      	bne.n	8007510 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2140      	movs	r1, #64	; 0x40
 80074fc:	438a      	bics	r2, r1
 80074fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4956      	ldr	r1, [pc, #344]	; (8007664 <HAL_SPI_Receive+0x258>)
 800750c:	400a      	ands	r2, r1
 800750e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2240      	movs	r2, #64	; 0x40
 8007518:	4013      	ands	r3, r2
 800751a:	2b40      	cmp	r3, #64	; 0x40
 800751c:	d007      	beq.n	800752e <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2140      	movs	r1, #64	; 0x40
 800752a:	430a      	orrs	r2, r1
 800752c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d000      	beq.n	8007538 <HAL_SPI_Receive+0x12c>
 8007536:	e06c      	b.n	8007612 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007538:	e033      	b.n	80075a2 <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	2201      	movs	r2, #1
 8007542:	4013      	ands	r3, r2
 8007544:	2b01      	cmp	r3, #1
 8007546:	d115      	bne.n	8007574 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	330c      	adds	r3, #12
 800754e:	001a      	movs	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007554:	7812      	ldrb	r2, [r2, #0]
 8007556:	b2d2      	uxtb	r2, r2
 8007558:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007568:	b29b      	uxth	r3, r3
 800756a:	3b01      	subs	r3, #1
 800756c:	b29a      	uxth	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007572:	e016      	b.n	80075a2 <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007574:	f7fd fb88 	bl	8004c88 <HAL_GetTick>
 8007578:	0002      	movs	r2, r0
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	429a      	cmp	r2, r3
 8007582:	d802      	bhi.n	800758a <HAL_SPI_Receive+0x17e>
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	3301      	adds	r3, #1
 8007588:	d102      	bne.n	8007590 <HAL_SPI_Receive+0x184>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d108      	bne.n	80075a2 <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8007590:	2317      	movs	r3, #23
 8007592:	18fb      	adds	r3, r7, r3
 8007594:	2203      	movs	r2, #3
 8007596:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2251      	movs	r2, #81	; 0x51
 800759c:	2101      	movs	r1, #1
 800759e:	5499      	strb	r1, [r3, r2]
          goto error;
 80075a0:	e054      	b.n	800764c <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1c6      	bne.n	800753a <HAL_SPI_Receive+0x12e>
 80075ac:	e036      	b.n	800761c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	2201      	movs	r2, #1
 80075b6:	4013      	ands	r3, r2
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d113      	bne.n	80075e4 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68da      	ldr	r2, [r3, #12]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	b292      	uxth	r2, r2
 80075c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ce:	1c9a      	adds	r2, r3, #2
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075d8:	b29b      	uxth	r3, r3
 80075da:	3b01      	subs	r3, #1
 80075dc:	b29a      	uxth	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075e2:	e016      	b.n	8007612 <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075e4:	f7fd fb50 	bl	8004c88 <HAL_GetTick>
 80075e8:	0002      	movs	r2, r0
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d802      	bhi.n	80075fa <HAL_SPI_Receive+0x1ee>
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	3301      	adds	r3, #1
 80075f8:	d102      	bne.n	8007600 <HAL_SPI_Receive+0x1f4>
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d108      	bne.n	8007612 <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8007600:	2317      	movs	r3, #23
 8007602:	18fb      	adds	r3, r7, r3
 8007604:	2203      	movs	r2, #3
 8007606:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2251      	movs	r2, #81	; 0x51
 800760c:	2101      	movs	r1, #1
 800760e:	5499      	strb	r1, [r3, r2]
          goto error;
 8007610:	e01c      	b.n	800764c <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007616:	b29b      	uxth	r3, r3
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1c8      	bne.n	80075ae <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	0018      	movs	r0, r3
 8007624:	f000 fa7a 	bl	8007b1c <SPI_EndRxTransaction>
 8007628:	1e03      	subs	r3, r0, #0
 800762a:	d002      	beq.n	8007632 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2220      	movs	r2, #32
 8007630:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007636:	2b00      	cmp	r3, #0
 8007638:	d004      	beq.n	8007644 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 800763a:	2317      	movs	r3, #23
 800763c:	18fb      	adds	r3, r7, r3
 800763e:	2201      	movs	r2, #1
 8007640:	701a      	strb	r2, [r3, #0]
 8007642:	e003      	b.n	800764c <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2251      	movs	r2, #81	; 0x51
 8007648:	2101      	movs	r1, #1
 800764a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2250      	movs	r2, #80	; 0x50
 8007650:	2100      	movs	r1, #0
 8007652:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007654:	2317      	movs	r3, #23
 8007656:	18fb      	adds	r3, r7, r3
 8007658:	781b      	ldrb	r3, [r3, #0]
}
 800765a:	0018      	movs	r0, r3
 800765c:	46bd      	mov	sp, r7
 800765e:	b007      	add	sp, #28
 8007660:	bd90      	pop	{r4, r7, pc}
 8007662:	46c0      	nop			; (mov r8, r8)
 8007664:	ffffbfff 	.word	0xffffbfff

08007668 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b08c      	sub	sp, #48	; 0x30
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
 8007674:	001a      	movs	r2, r3
 8007676:	1cbb      	adds	r3, r7, #2
 8007678:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800767a:	2301      	movs	r3, #1
 800767c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800767e:	232b      	movs	r3, #43	; 0x2b
 8007680:	18fb      	adds	r3, r7, r3
 8007682:	2200      	movs	r2, #0
 8007684:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2250      	movs	r2, #80	; 0x50
 800768a:	5c9b      	ldrb	r3, [r3, r2]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d101      	bne.n	8007694 <HAL_SPI_TransmitReceive+0x2c>
 8007690:	2302      	movs	r3, #2
 8007692:	e1b0      	b.n	80079f6 <HAL_SPI_TransmitReceive+0x38e>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2250      	movs	r2, #80	; 0x50
 8007698:	2101      	movs	r1, #1
 800769a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800769c:	f7fd faf4 	bl	8004c88 <HAL_GetTick>
 80076a0:	0003      	movs	r3, r0
 80076a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076a4:	2023      	movs	r0, #35	; 0x23
 80076a6:	183b      	adds	r3, r7, r0
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	2151      	movs	r1, #81	; 0x51
 80076ac:	5c52      	ldrb	r2, [r2, r1]
 80076ae:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80076b6:	231a      	movs	r3, #26
 80076b8:	18fb      	adds	r3, r7, r3
 80076ba:	1cba      	adds	r2, r7, #2
 80076bc:	8812      	ldrh	r2, [r2, #0]
 80076be:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076c0:	183b      	adds	r3, r7, r0
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d011      	beq.n	80076ec <HAL_SPI_TransmitReceive+0x84>
 80076c8:	69fa      	ldr	r2, [r7, #28]
 80076ca:	2382      	movs	r3, #130	; 0x82
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d107      	bne.n	80076e2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d103      	bne.n	80076e2 <HAL_SPI_TransmitReceive+0x7a>
 80076da:	183b      	adds	r3, r7, r0
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d004      	beq.n	80076ec <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80076e2:	232b      	movs	r3, #43	; 0x2b
 80076e4:	18fb      	adds	r3, r7, r3
 80076e6:	2202      	movs	r2, #2
 80076e8:	701a      	strb	r2, [r3, #0]
    goto error;
 80076ea:	e17d      	b.n	80079e8 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d006      	beq.n	8007700 <HAL_SPI_TransmitReceive+0x98>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d003      	beq.n	8007700 <HAL_SPI_TransmitReceive+0x98>
 80076f8:	1cbb      	adds	r3, r7, #2
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d104      	bne.n	800770a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007700:	232b      	movs	r3, #43	; 0x2b
 8007702:	18fb      	adds	r3, r7, r3
 8007704:	2201      	movs	r2, #1
 8007706:	701a      	strb	r2, [r3, #0]
    goto error;
 8007708:	e16e      	b.n	80079e8 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2251      	movs	r2, #81	; 0x51
 800770e:	5c9b      	ldrb	r3, [r3, r2]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b04      	cmp	r3, #4
 8007714:	d003      	beq.n	800771e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2251      	movs	r2, #81	; 0x51
 800771a:	2105      	movs	r1, #5
 800771c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	1cba      	adds	r2, r7, #2
 800772e:	8812      	ldrh	r2, [r2, #0]
 8007730:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	1cba      	adds	r2, r7, #2
 8007736:	8812      	ldrh	r2, [r2, #0]
 8007738:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	1cba      	adds	r2, r7, #2
 8007744:	8812      	ldrh	r2, [r2, #0]
 8007746:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	1cba      	adds	r2, r7, #2
 800774c:	8812      	ldrh	r2, [r2, #0]
 800774e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2240      	movs	r2, #64	; 0x40
 8007764:	4013      	ands	r3, r2
 8007766:	2b40      	cmp	r3, #64	; 0x40
 8007768:	d007      	beq.n	800777a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2140      	movs	r1, #64	; 0x40
 8007776:	430a      	orrs	r2, r1
 8007778:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	2380      	movs	r3, #128	; 0x80
 8007780:	011b      	lsls	r3, r3, #4
 8007782:	429a      	cmp	r2, r3
 8007784:	d000      	beq.n	8007788 <HAL_SPI_TransmitReceive+0x120>
 8007786:	e07f      	b.n	8007888 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d005      	beq.n	800779c <HAL_SPI_TransmitReceive+0x134>
 8007790:	231a      	movs	r3, #26
 8007792:	18fb      	adds	r3, r7, r3
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d000      	beq.n	800779c <HAL_SPI_TransmitReceive+0x134>
 800779a:	e06a      	b.n	8007872 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a0:	881a      	ldrh	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ac:	1c9a      	adds	r2, r3, #2
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	3b01      	subs	r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077c0:	e057      	b.n	8007872 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	2202      	movs	r2, #2
 80077ca:	4013      	ands	r3, r2
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d11b      	bne.n	8007808 <HAL_SPI_TransmitReceive+0x1a0>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d016      	beq.n	8007808 <HAL_SPI_TransmitReceive+0x1a0>
 80077da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d113      	bne.n	8007808 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e4:	881a      	ldrh	r2, [r3, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f0:	1c9a      	adds	r2, r3, #2
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	3b01      	subs	r3, #1
 80077fe:	b29a      	uxth	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007804:	2300      	movs	r3, #0
 8007806:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	2201      	movs	r2, #1
 8007810:	4013      	ands	r3, r2
 8007812:	2b01      	cmp	r3, #1
 8007814:	d119      	bne.n	800784a <HAL_SPI_TransmitReceive+0x1e2>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800781a:	b29b      	uxth	r3, r3
 800781c:	2b00      	cmp	r3, #0
 800781e:	d014      	beq.n	800784a <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68da      	ldr	r2, [r3, #12]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782a:	b292      	uxth	r2, r2
 800782c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007832:	1c9a      	adds	r2, r3, #2
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800783c:	b29b      	uxth	r3, r3
 800783e:	3b01      	subs	r3, #1
 8007840:	b29a      	uxth	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007846:	2301      	movs	r3, #1
 8007848:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800784a:	f7fd fa1d 	bl	8004c88 <HAL_GetTick>
 800784e:	0002      	movs	r2, r0
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007856:	429a      	cmp	r2, r3
 8007858:	d80b      	bhi.n	8007872 <HAL_SPI_TransmitReceive+0x20a>
 800785a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785c:	3301      	adds	r3, #1
 800785e:	d008      	beq.n	8007872 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8007860:	232b      	movs	r3, #43	; 0x2b
 8007862:	18fb      	adds	r3, r7, r3
 8007864:	2203      	movs	r2, #3
 8007866:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2251      	movs	r2, #81	; 0x51
 800786c:	2101      	movs	r1, #1
 800786e:	5499      	strb	r1, [r3, r2]
        goto error;
 8007870:	e0ba      	b.n	80079e8 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007876:	b29b      	uxth	r3, r3
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1a2      	bne.n	80077c2 <HAL_SPI_TransmitReceive+0x15a>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007880:	b29b      	uxth	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d19d      	bne.n	80077c2 <HAL_SPI_TransmitReceive+0x15a>
 8007886:	e083      	b.n	8007990 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d005      	beq.n	800789c <HAL_SPI_TransmitReceive+0x234>
 8007890:	231a      	movs	r3, #26
 8007892:	18fb      	adds	r3, r7, r3
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d000      	beq.n	800789c <HAL_SPI_TransmitReceive+0x234>
 800789a:	e06f      	b.n	800797c <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	330c      	adds	r3, #12
 80078a6:	7812      	ldrb	r2, [r2, #0]
 80078a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	3b01      	subs	r3, #1
 80078bc:	b29a      	uxth	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078c2:	e05b      	b.n	800797c <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	2202      	movs	r2, #2
 80078cc:	4013      	ands	r3, r2
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d11c      	bne.n	800790c <HAL_SPI_TransmitReceive+0x2a4>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d017      	beq.n	800790c <HAL_SPI_TransmitReceive+0x2a4>
 80078dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d114      	bne.n	800790c <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	330c      	adds	r3, #12
 80078ec:	7812      	ldrb	r2, [r2, #0]
 80078ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f4:	1c5a      	adds	r2, r3, #1
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078fe:	b29b      	uxth	r3, r3
 8007900:	3b01      	subs	r3, #1
 8007902:	b29a      	uxth	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	2201      	movs	r2, #1
 8007914:	4013      	ands	r3, r2
 8007916:	2b01      	cmp	r3, #1
 8007918:	d119      	bne.n	800794e <HAL_SPI_TransmitReceive+0x2e6>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791e:	b29b      	uxth	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	d014      	beq.n	800794e <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68da      	ldr	r2, [r3, #12]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792e:	b2d2      	uxtb	r2, r2
 8007930:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007936:	1c5a      	adds	r2, r3, #1
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007940:	b29b      	uxth	r3, r3
 8007942:	3b01      	subs	r3, #1
 8007944:	b29a      	uxth	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800794a:	2301      	movs	r3, #1
 800794c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800794e:	f7fd f99b 	bl	8004c88 <HAL_GetTick>
 8007952:	0002      	movs	r2, r0
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800795a:	429a      	cmp	r2, r3
 800795c:	d802      	bhi.n	8007964 <HAL_SPI_TransmitReceive+0x2fc>
 800795e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007960:	3301      	adds	r3, #1
 8007962:	d102      	bne.n	800796a <HAL_SPI_TransmitReceive+0x302>
 8007964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007966:	2b00      	cmp	r3, #0
 8007968:	d108      	bne.n	800797c <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 800796a:	232b      	movs	r3, #43	; 0x2b
 800796c:	18fb      	adds	r3, r7, r3
 800796e:	2203      	movs	r2, #3
 8007970:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2251      	movs	r2, #81	; 0x51
 8007976:	2101      	movs	r1, #1
 8007978:	5499      	strb	r1, [r3, r2]
        goto error;
 800797a:	e035      	b.n	80079e8 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007980:	b29b      	uxth	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d19e      	bne.n	80078c4 <HAL_SPI_TransmitReceive+0x25c>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800798a:	b29b      	uxth	r3, r3
 800798c:	2b00      	cmp	r3, #0
 800798e:	d199      	bne.n	80078c4 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007992:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	0018      	movs	r0, r3
 8007998:	f000 f92a 	bl	8007bf0 <SPI_EndRxTxTransaction>
 800799c:	1e03      	subs	r3, r0, #0
 800799e:	d007      	beq.n	80079b0 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 80079a0:	232b      	movs	r3, #43	; 0x2b
 80079a2:	18fb      	adds	r3, r7, r3
 80079a4:	2201      	movs	r2, #1
 80079a6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2220      	movs	r2, #32
 80079ac:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80079ae:	e01b      	b.n	80079e8 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10a      	bne.n	80079ce <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079b8:	2300      	movs	r3, #0
 80079ba:	617b      	str	r3, [r7, #20]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	617b      	str	r3, [r7, #20]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	617b      	str	r3, [r7, #20]
 80079cc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d004      	beq.n	80079e0 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 80079d6:	232b      	movs	r3, #43	; 0x2b
 80079d8:	18fb      	adds	r3, r7, r3
 80079da:	2201      	movs	r2, #1
 80079dc:	701a      	strb	r2, [r3, #0]
 80079de:	e003      	b.n	80079e8 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2251      	movs	r2, #81	; 0x51
 80079e4:	2101      	movs	r1, #1
 80079e6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2250      	movs	r2, #80	; 0x50
 80079ec:	2100      	movs	r1, #0
 80079ee:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80079f0:	232b      	movs	r3, #43	; 0x2b
 80079f2:	18fb      	adds	r3, r7, r3
 80079f4:	781b      	ldrb	r3, [r3, #0]
}
 80079f6:	0018      	movs	r0, r3
 80079f8:	46bd      	mov	sp, r7
 80079fa:	b00c      	add	sp, #48	; 0x30
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b088      	sub	sp, #32
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	603b      	str	r3, [r7, #0]
 8007a0c:	1dfb      	adds	r3, r7, #7
 8007a0e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a10:	f7fd f93a 	bl	8004c88 <HAL_GetTick>
 8007a14:	0002      	movs	r2, r0
 8007a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a18:	1a9b      	subs	r3, r3, r2
 8007a1a:	683a      	ldr	r2, [r7, #0]
 8007a1c:	18d3      	adds	r3, r2, r3
 8007a1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a20:	f7fd f932 	bl	8004c88 <HAL_GetTick>
 8007a24:	0003      	movs	r3, r0
 8007a26:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a28:	4b3a      	ldr	r3, [pc, #232]	; (8007b14 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	015b      	lsls	r3, r3, #5
 8007a2e:	0d1b      	lsrs	r3, r3, #20
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	4353      	muls	r3, r2
 8007a34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a36:	e058      	b.n	8007aea <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	d055      	beq.n	8007aea <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a3e:	f7fd f923 	bl	8004c88 <HAL_GetTick>
 8007a42:	0002      	movs	r2, r0
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	69fa      	ldr	r2, [r7, #28]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d902      	bls.n	8007a54 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d142      	bne.n	8007ada <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685a      	ldr	r2, [r3, #4]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	21e0      	movs	r1, #224	; 0xe0
 8007a60:	438a      	bics	r2, r1
 8007a62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	2382      	movs	r3, #130	; 0x82
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d113      	bne.n	8007a98 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	689a      	ldr	r2, [r3, #8]
 8007a74:	2380      	movs	r3, #128	; 0x80
 8007a76:	021b      	lsls	r3, r3, #8
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d005      	beq.n	8007a88 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	2380      	movs	r3, #128	; 0x80
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d107      	bne.n	8007a98 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2140      	movs	r1, #64	; 0x40
 8007a94:	438a      	bics	r2, r1
 8007a96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a9c:	2380      	movs	r3, #128	; 0x80
 8007a9e:	019b      	lsls	r3, r3, #6
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d110      	bne.n	8007ac6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	491a      	ldr	r1, [pc, #104]	; (8007b18 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007ab0:	400a      	ands	r2, r1
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2180      	movs	r1, #128	; 0x80
 8007ac0:	0189      	lsls	r1, r1, #6
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2251      	movs	r2, #81	; 0x51
 8007aca:	2101      	movs	r1, #1
 8007acc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2250      	movs	r2, #80	; 0x50
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e017      	b.n	8007b0a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	4013      	ands	r3, r2
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	425a      	negs	r2, r3
 8007afa:	4153      	adcs	r3, r2
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	001a      	movs	r2, r3
 8007b00:	1dfb      	adds	r3, r7, #7
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d197      	bne.n	8007a38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	b008      	add	sp, #32
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	20000004 	.word	0x20000004
 8007b18:	ffffdfff 	.word	0xffffdfff

08007b1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af02      	add	r7, sp, #8
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	2382      	movs	r3, #130	; 0x82
 8007b2e:	005b      	lsls	r3, r3, #1
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d113      	bne.n	8007b5c <SPI_EndRxTransaction+0x40>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	689a      	ldr	r2, [r3, #8]
 8007b38:	2380      	movs	r3, #128	; 0x80
 8007b3a:	021b      	lsls	r3, r3, #8
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d005      	beq.n	8007b4c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	2380      	movs	r3, #128	; 0x80
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d107      	bne.n	8007b5c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2140      	movs	r1, #64	; 0x40
 8007b58:	438a      	bics	r2, r1
 8007b5a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	2382      	movs	r3, #130	; 0x82
 8007b62:	005b      	lsls	r3, r3, #1
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d12b      	bne.n	8007bc0 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	689a      	ldr	r2, [r3, #8]
 8007b6c:	2380      	movs	r3, #128	; 0x80
 8007b6e:	00db      	lsls	r3, r3, #3
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d012      	beq.n	8007b9a <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	0013      	movs	r3, r2
 8007b7e:	2200      	movs	r2, #0
 8007b80:	2180      	movs	r1, #128	; 0x80
 8007b82:	f7ff ff3d 	bl	8007a00 <SPI_WaitFlagStateUntilTimeout>
 8007b86:	1e03      	subs	r3, r0, #0
 8007b88:	d02d      	beq.n	8007be6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b8e:	2220      	movs	r2, #32
 8007b90:	431a      	orrs	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e026      	b.n	8007be8 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	0013      	movs	r3, r2
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	f7ff ff2a 	bl	8007a00 <SPI_WaitFlagStateUntilTimeout>
 8007bac:	1e03      	subs	r3, r0, #0
 8007bae:	d01a      	beq.n	8007be6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e013      	b.n	8007be8 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	0013      	movs	r3, r2
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2101      	movs	r1, #1
 8007bce:	f7ff ff17 	bl	8007a00 <SPI_WaitFlagStateUntilTimeout>
 8007bd2:	1e03      	subs	r3, r0, #0
 8007bd4:	d007      	beq.n	8007be6 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bda:	2220      	movs	r2, #32
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e000      	b.n	8007be8 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	0018      	movs	r0, r3
 8007bea:	46bd      	mov	sp, r7
 8007bec:	b004      	add	sp, #16
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b088      	sub	sp, #32
 8007bf4:	af02      	add	r7, sp, #8
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007bfc:	4b1d      	ldr	r3, [pc, #116]	; (8007c74 <SPI_EndRxTxTransaction+0x84>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	491d      	ldr	r1, [pc, #116]	; (8007c78 <SPI_EndRxTxTransaction+0x88>)
 8007c02:	0018      	movs	r0, r3
 8007c04:	f7f8 fa9c 	bl	8000140 <__udivsi3>
 8007c08:	0003      	movs	r3, r0
 8007c0a:	001a      	movs	r2, r3
 8007c0c:	0013      	movs	r3, r2
 8007c0e:	015b      	lsls	r3, r3, #5
 8007c10:	1a9b      	subs	r3, r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	189b      	adds	r3, r3, r2
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	2382      	movs	r3, #130	; 0x82
 8007c20:	005b      	lsls	r3, r3, #1
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d112      	bne.n	8007c4c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	0013      	movs	r3, r2
 8007c30:	2200      	movs	r2, #0
 8007c32:	2180      	movs	r1, #128	; 0x80
 8007c34:	f7ff fee4 	bl	8007a00 <SPI_WaitFlagStateUntilTimeout>
 8007c38:	1e03      	subs	r3, r0, #0
 8007c3a:	d016      	beq.n	8007c6a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c40:	2220      	movs	r2, #32
 8007c42:	431a      	orrs	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e00f      	b.n	8007c6c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00a      	beq.n	8007c68 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	3b01      	subs	r3, #1
 8007c56:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	2280      	movs	r2, #128	; 0x80
 8007c60:	4013      	ands	r3, r2
 8007c62:	2b80      	cmp	r3, #128	; 0x80
 8007c64:	d0f2      	beq.n	8007c4c <SPI_EndRxTxTransaction+0x5c>
 8007c66:	e000      	b.n	8007c6a <SPI_EndRxTxTransaction+0x7a>
        break;
 8007c68:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	0018      	movs	r0, r3
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	b006      	add	sp, #24
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	20000004 	.word	0x20000004
 8007c78:	016e3600 	.word	0x016e3600

08007c7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e044      	b.n	8007d18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d107      	bne.n	8007ca6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2278      	movs	r2, #120	; 0x78
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	f7fc fe29 	bl	80048f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2224      	movs	r2, #36	; 0x24
 8007caa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	438a      	bics	r2, r1
 8007cba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	0018      	movs	r0, r3
 8007cc0:	f000 f8d0 	bl	8007e64 <UART_SetConfig>
 8007cc4:	0003      	movs	r3, r0
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d101      	bne.n	8007cce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e024      	b.n	8007d18 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	0018      	movs	r0, r3
 8007cda:	f000 fb47 	bl	800836c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	490d      	ldr	r1, [pc, #52]	; (8007d20 <HAL_UART_Init+0xa4>)
 8007cea:	400a      	ands	r2, r1
 8007cec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689a      	ldr	r2, [r3, #8]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	212a      	movs	r1, #42	; 0x2a
 8007cfa:	438a      	bics	r2, r1
 8007cfc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2101      	movs	r1, #1
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	0018      	movs	r0, r3
 8007d12:	f000 fbdf 	bl	80084d4 <UART_CheckIdleState>
 8007d16:	0003      	movs	r3, r0
}
 8007d18:	0018      	movs	r0, r3
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	b002      	add	sp, #8
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	ffffb7ff 	.word	0xffffb7ff

08007d24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08a      	sub	sp, #40	; 0x28
 8007d28:	af02      	add	r7, sp, #8
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	603b      	str	r3, [r7, #0]
 8007d30:	1dbb      	adds	r3, r7, #6
 8007d32:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d38:	2b20      	cmp	r3, #32
 8007d3a:	d000      	beq.n	8007d3e <HAL_UART_Transmit+0x1a>
 8007d3c:	e08c      	b.n	8007e58 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <HAL_UART_Transmit+0x28>
 8007d44:	1dbb      	adds	r3, r7, #6
 8007d46:	881b      	ldrh	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e084      	b.n	8007e5a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	2380      	movs	r3, #128	; 0x80
 8007d56:	015b      	lsls	r3, r3, #5
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d109      	bne.n	8007d70 <HAL_UART_Transmit+0x4c>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d105      	bne.n	8007d70 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2201      	movs	r2, #1
 8007d68:	4013      	ands	r3, r2
 8007d6a:	d001      	beq.n	8007d70 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e074      	b.n	8007e5a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2284      	movs	r2, #132	; 0x84
 8007d74:	2100      	movs	r1, #0
 8007d76:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2221      	movs	r2, #33	; 0x21
 8007d7c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d7e:	f7fc ff83 	bl	8004c88 <HAL_GetTick>
 8007d82:	0003      	movs	r3, r0
 8007d84:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	1dba      	adds	r2, r7, #6
 8007d8a:	2150      	movs	r1, #80	; 0x50
 8007d8c:	8812      	ldrh	r2, [r2, #0]
 8007d8e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	1dba      	adds	r2, r7, #6
 8007d94:	2152      	movs	r1, #82	; 0x52
 8007d96:	8812      	ldrh	r2, [r2, #0]
 8007d98:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	689a      	ldr	r2, [r3, #8]
 8007d9e:	2380      	movs	r3, #128	; 0x80
 8007da0:	015b      	lsls	r3, r3, #5
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d108      	bne.n	8007db8 <HAL_UART_Transmit+0x94>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d104      	bne.n	8007db8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8007dae:	2300      	movs	r3, #0
 8007db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	61bb      	str	r3, [r7, #24]
 8007db6:	e003      	b.n	8007dc0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007dc0:	e02f      	b.n	8007e22 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	0013      	movs	r3, r2
 8007dcc:	2200      	movs	r2, #0
 8007dce:	2180      	movs	r1, #128	; 0x80
 8007dd0:	f000 fc28 	bl	8008624 <UART_WaitOnFlagUntilTimeout>
 8007dd4:	1e03      	subs	r3, r0, #0
 8007dd6:	d004      	beq.n	8007de2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e03b      	b.n	8007e5a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10b      	bne.n	8007e00 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	001a      	movs	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	05d2      	lsls	r2, r2, #23
 8007df4:	0dd2      	lsrs	r2, r2, #23
 8007df6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	3302      	adds	r3, #2
 8007dfc:	61bb      	str	r3, [r7, #24]
 8007dfe:	e007      	b.n	8007e10 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	781a      	ldrb	r2, [r3, #0]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2252      	movs	r2, #82	; 0x52
 8007e14:	5a9b      	ldrh	r3, [r3, r2]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	b299      	uxth	r1, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2252      	movs	r2, #82	; 0x52
 8007e20:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2252      	movs	r2, #82	; 0x52
 8007e26:	5a9b      	ldrh	r3, [r3, r2]
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1c9      	bne.n	8007dc2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	0013      	movs	r3, r2
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2140      	movs	r1, #64	; 0x40
 8007e3c:	f000 fbf2 	bl	8008624 <UART_WaitOnFlagUntilTimeout>
 8007e40:	1e03      	subs	r3, r0, #0
 8007e42:	d004      	beq.n	8007e4e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2220      	movs	r2, #32
 8007e48:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e005      	b.n	8007e5a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2220      	movs	r2, #32
 8007e52:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	e000      	b.n	8007e5a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007e58:	2302      	movs	r3, #2
  }
}
 8007e5a:	0018      	movs	r0, r3
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	b008      	add	sp, #32
 8007e60:	bd80      	pop	{r7, pc}
	...

08007e64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e64:	b5b0      	push	{r4, r5, r7, lr}
 8007e66:	b08e      	sub	sp, #56	; 0x38
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e6c:	231a      	movs	r3, #26
 8007e6e:	2218      	movs	r2, #24
 8007e70:	189b      	adds	r3, r3, r2
 8007e72:	19db      	adds	r3, r3, r7
 8007e74:	2200      	movs	r2, #0
 8007e76:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	431a      	orrs	r2, r3
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	431a      	orrs	r2, r3
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4ac6      	ldr	r2, [pc, #792]	; (80081b0 <UART_SetConfig+0x34c>)
 8007e98:	4013      	ands	r3, r2
 8007e9a:	0019      	movs	r1, r3
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	4ac1      	ldr	r2, [pc, #772]	; (80081b4 <UART_SetConfig+0x350>)
 8007eae:	4013      	ands	r3, r2
 8007eb0:	0019      	movs	r1, r3
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	68da      	ldr	r2, [r3, #12]
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4abb      	ldr	r2, [pc, #748]	; (80081b8 <UART_SetConfig+0x354>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d004      	beq.n	8007ed8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	4ab7      	ldr	r2, [pc, #732]	; (80081bc <UART_SetConfig+0x358>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	0019      	movs	r1, r3
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007eea:	430a      	orrs	r2, r1
 8007eec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4ab3      	ldr	r2, [pc, #716]	; (80081c0 <UART_SetConfig+0x35c>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d131      	bne.n	8007f5c <UART_SetConfig+0xf8>
 8007ef8:	4bb2      	ldr	r3, [pc, #712]	; (80081c4 <UART_SetConfig+0x360>)
 8007efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007efc:	2203      	movs	r2, #3
 8007efe:	4013      	ands	r3, r2
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d01d      	beq.n	8007f40 <UART_SetConfig+0xdc>
 8007f04:	d823      	bhi.n	8007f4e <UART_SetConfig+0xea>
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d00c      	beq.n	8007f24 <UART_SetConfig+0xc0>
 8007f0a:	d820      	bhi.n	8007f4e <UART_SetConfig+0xea>
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <UART_SetConfig+0xb2>
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d00e      	beq.n	8007f32 <UART_SetConfig+0xce>
 8007f14:	e01b      	b.n	8007f4e <UART_SetConfig+0xea>
 8007f16:	231b      	movs	r3, #27
 8007f18:	2218      	movs	r2, #24
 8007f1a:	189b      	adds	r3, r3, r2
 8007f1c:	19db      	adds	r3, r3, r7
 8007f1e:	2201      	movs	r2, #1
 8007f20:	701a      	strb	r2, [r3, #0]
 8007f22:	e09c      	b.n	800805e <UART_SetConfig+0x1fa>
 8007f24:	231b      	movs	r3, #27
 8007f26:	2218      	movs	r2, #24
 8007f28:	189b      	adds	r3, r3, r2
 8007f2a:	19db      	adds	r3, r3, r7
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	e095      	b.n	800805e <UART_SetConfig+0x1fa>
 8007f32:	231b      	movs	r3, #27
 8007f34:	2218      	movs	r2, #24
 8007f36:	189b      	adds	r3, r3, r2
 8007f38:	19db      	adds	r3, r3, r7
 8007f3a:	2204      	movs	r2, #4
 8007f3c:	701a      	strb	r2, [r3, #0]
 8007f3e:	e08e      	b.n	800805e <UART_SetConfig+0x1fa>
 8007f40:	231b      	movs	r3, #27
 8007f42:	2218      	movs	r2, #24
 8007f44:	189b      	adds	r3, r3, r2
 8007f46:	19db      	adds	r3, r3, r7
 8007f48:	2208      	movs	r2, #8
 8007f4a:	701a      	strb	r2, [r3, #0]
 8007f4c:	e087      	b.n	800805e <UART_SetConfig+0x1fa>
 8007f4e:	231b      	movs	r3, #27
 8007f50:	2218      	movs	r2, #24
 8007f52:	189b      	adds	r3, r3, r2
 8007f54:	19db      	adds	r3, r3, r7
 8007f56:	2210      	movs	r2, #16
 8007f58:	701a      	strb	r2, [r3, #0]
 8007f5a:	e080      	b.n	800805e <UART_SetConfig+0x1fa>
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a99      	ldr	r2, [pc, #612]	; (80081c8 <UART_SetConfig+0x364>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d131      	bne.n	8007fca <UART_SetConfig+0x166>
 8007f66:	4b97      	ldr	r3, [pc, #604]	; (80081c4 <UART_SetConfig+0x360>)
 8007f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f6a:	220c      	movs	r2, #12
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	2b0c      	cmp	r3, #12
 8007f70:	d01d      	beq.n	8007fae <UART_SetConfig+0x14a>
 8007f72:	d823      	bhi.n	8007fbc <UART_SetConfig+0x158>
 8007f74:	2b08      	cmp	r3, #8
 8007f76:	d00c      	beq.n	8007f92 <UART_SetConfig+0x12e>
 8007f78:	d820      	bhi.n	8007fbc <UART_SetConfig+0x158>
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d002      	beq.n	8007f84 <UART_SetConfig+0x120>
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d00e      	beq.n	8007fa0 <UART_SetConfig+0x13c>
 8007f82:	e01b      	b.n	8007fbc <UART_SetConfig+0x158>
 8007f84:	231b      	movs	r3, #27
 8007f86:	2218      	movs	r2, #24
 8007f88:	189b      	adds	r3, r3, r2
 8007f8a:	19db      	adds	r3, r3, r7
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	701a      	strb	r2, [r3, #0]
 8007f90:	e065      	b.n	800805e <UART_SetConfig+0x1fa>
 8007f92:	231b      	movs	r3, #27
 8007f94:	2218      	movs	r2, #24
 8007f96:	189b      	adds	r3, r3, r2
 8007f98:	19db      	adds	r3, r3, r7
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	701a      	strb	r2, [r3, #0]
 8007f9e:	e05e      	b.n	800805e <UART_SetConfig+0x1fa>
 8007fa0:	231b      	movs	r3, #27
 8007fa2:	2218      	movs	r2, #24
 8007fa4:	189b      	adds	r3, r3, r2
 8007fa6:	19db      	adds	r3, r3, r7
 8007fa8:	2204      	movs	r2, #4
 8007faa:	701a      	strb	r2, [r3, #0]
 8007fac:	e057      	b.n	800805e <UART_SetConfig+0x1fa>
 8007fae:	231b      	movs	r3, #27
 8007fb0:	2218      	movs	r2, #24
 8007fb2:	189b      	adds	r3, r3, r2
 8007fb4:	19db      	adds	r3, r3, r7
 8007fb6:	2208      	movs	r2, #8
 8007fb8:	701a      	strb	r2, [r3, #0]
 8007fba:	e050      	b.n	800805e <UART_SetConfig+0x1fa>
 8007fbc:	231b      	movs	r3, #27
 8007fbe:	2218      	movs	r2, #24
 8007fc0:	189b      	adds	r3, r3, r2
 8007fc2:	19db      	adds	r3, r3, r7
 8007fc4:	2210      	movs	r2, #16
 8007fc6:	701a      	strb	r2, [r3, #0]
 8007fc8:	e049      	b.n	800805e <UART_SetConfig+0x1fa>
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a7a      	ldr	r2, [pc, #488]	; (80081b8 <UART_SetConfig+0x354>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d13e      	bne.n	8008052 <UART_SetConfig+0x1ee>
 8007fd4:	4b7b      	ldr	r3, [pc, #492]	; (80081c4 <UART_SetConfig+0x360>)
 8007fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fd8:	23c0      	movs	r3, #192	; 0xc0
 8007fda:	011b      	lsls	r3, r3, #4
 8007fdc:	4013      	ands	r3, r2
 8007fde:	22c0      	movs	r2, #192	; 0xc0
 8007fe0:	0112      	lsls	r2, r2, #4
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d027      	beq.n	8008036 <UART_SetConfig+0x1d2>
 8007fe6:	22c0      	movs	r2, #192	; 0xc0
 8007fe8:	0112      	lsls	r2, r2, #4
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d82a      	bhi.n	8008044 <UART_SetConfig+0x1e0>
 8007fee:	2280      	movs	r2, #128	; 0x80
 8007ff0:	0112      	lsls	r2, r2, #4
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d011      	beq.n	800801a <UART_SetConfig+0x1b6>
 8007ff6:	2280      	movs	r2, #128	; 0x80
 8007ff8:	0112      	lsls	r2, r2, #4
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d822      	bhi.n	8008044 <UART_SetConfig+0x1e0>
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d004      	beq.n	800800c <UART_SetConfig+0x1a8>
 8008002:	2280      	movs	r2, #128	; 0x80
 8008004:	00d2      	lsls	r2, r2, #3
 8008006:	4293      	cmp	r3, r2
 8008008:	d00e      	beq.n	8008028 <UART_SetConfig+0x1c4>
 800800a:	e01b      	b.n	8008044 <UART_SetConfig+0x1e0>
 800800c:	231b      	movs	r3, #27
 800800e:	2218      	movs	r2, #24
 8008010:	189b      	adds	r3, r3, r2
 8008012:	19db      	adds	r3, r3, r7
 8008014:	2200      	movs	r2, #0
 8008016:	701a      	strb	r2, [r3, #0]
 8008018:	e021      	b.n	800805e <UART_SetConfig+0x1fa>
 800801a:	231b      	movs	r3, #27
 800801c:	2218      	movs	r2, #24
 800801e:	189b      	adds	r3, r3, r2
 8008020:	19db      	adds	r3, r3, r7
 8008022:	2202      	movs	r2, #2
 8008024:	701a      	strb	r2, [r3, #0]
 8008026:	e01a      	b.n	800805e <UART_SetConfig+0x1fa>
 8008028:	231b      	movs	r3, #27
 800802a:	2218      	movs	r2, #24
 800802c:	189b      	adds	r3, r3, r2
 800802e:	19db      	adds	r3, r3, r7
 8008030:	2204      	movs	r2, #4
 8008032:	701a      	strb	r2, [r3, #0]
 8008034:	e013      	b.n	800805e <UART_SetConfig+0x1fa>
 8008036:	231b      	movs	r3, #27
 8008038:	2218      	movs	r2, #24
 800803a:	189b      	adds	r3, r3, r2
 800803c:	19db      	adds	r3, r3, r7
 800803e:	2208      	movs	r2, #8
 8008040:	701a      	strb	r2, [r3, #0]
 8008042:	e00c      	b.n	800805e <UART_SetConfig+0x1fa>
 8008044:	231b      	movs	r3, #27
 8008046:	2218      	movs	r2, #24
 8008048:	189b      	adds	r3, r3, r2
 800804a:	19db      	adds	r3, r3, r7
 800804c:	2210      	movs	r2, #16
 800804e:	701a      	strb	r2, [r3, #0]
 8008050:	e005      	b.n	800805e <UART_SetConfig+0x1fa>
 8008052:	231b      	movs	r3, #27
 8008054:	2218      	movs	r2, #24
 8008056:	189b      	adds	r3, r3, r2
 8008058:	19db      	adds	r3, r3, r7
 800805a:	2210      	movs	r2, #16
 800805c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a55      	ldr	r2, [pc, #340]	; (80081b8 <UART_SetConfig+0x354>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d000      	beq.n	800806a <UART_SetConfig+0x206>
 8008068:	e084      	b.n	8008174 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800806a:	231b      	movs	r3, #27
 800806c:	2218      	movs	r2, #24
 800806e:	189b      	adds	r3, r3, r2
 8008070:	19db      	adds	r3, r3, r7
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	2b08      	cmp	r3, #8
 8008076:	d01d      	beq.n	80080b4 <UART_SetConfig+0x250>
 8008078:	dc20      	bgt.n	80080bc <UART_SetConfig+0x258>
 800807a:	2b04      	cmp	r3, #4
 800807c:	d015      	beq.n	80080aa <UART_SetConfig+0x246>
 800807e:	dc1d      	bgt.n	80080bc <UART_SetConfig+0x258>
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <UART_SetConfig+0x226>
 8008084:	2b02      	cmp	r3, #2
 8008086:	d005      	beq.n	8008094 <UART_SetConfig+0x230>
 8008088:	e018      	b.n	80080bc <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800808a:	f7fe fbc1 	bl	8006810 <HAL_RCC_GetPCLK1Freq>
 800808e:	0003      	movs	r3, r0
 8008090:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008092:	e01c      	b.n	80080ce <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008094:	4b4b      	ldr	r3, [pc, #300]	; (80081c4 <UART_SetConfig+0x360>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2210      	movs	r2, #16
 800809a:	4013      	ands	r3, r2
 800809c:	d002      	beq.n	80080a4 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800809e:	4b4b      	ldr	r3, [pc, #300]	; (80081cc <UART_SetConfig+0x368>)
 80080a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80080a2:	e014      	b.n	80080ce <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80080a4:	4b4a      	ldr	r3, [pc, #296]	; (80081d0 <UART_SetConfig+0x36c>)
 80080a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80080a8:	e011      	b.n	80080ce <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080aa:	f7fe fb01 	bl	80066b0 <HAL_RCC_GetSysClockFreq>
 80080ae:	0003      	movs	r3, r0
 80080b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80080b2:	e00c      	b.n	80080ce <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080b4:	2380      	movs	r3, #128	; 0x80
 80080b6:	021b      	lsls	r3, r3, #8
 80080b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80080ba:	e008      	b.n	80080ce <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80080bc:	2300      	movs	r3, #0
 80080be:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80080c0:	231a      	movs	r3, #26
 80080c2:	2218      	movs	r2, #24
 80080c4:	189b      	adds	r3, r3, r2
 80080c6:	19db      	adds	r3, r3, r7
 80080c8:	2201      	movs	r2, #1
 80080ca:	701a      	strb	r2, [r3, #0]
        break;
 80080cc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d100      	bne.n	80080d6 <UART_SetConfig+0x272>
 80080d4:	e132      	b.n	800833c <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	685a      	ldr	r2, [r3, #4]
 80080da:	0013      	movs	r3, r2
 80080dc:	005b      	lsls	r3, r3, #1
 80080de:	189b      	adds	r3, r3, r2
 80080e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d305      	bcc.n	80080f2 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80080ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d906      	bls.n	8008100 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80080f2:	231a      	movs	r3, #26
 80080f4:	2218      	movs	r2, #24
 80080f6:	189b      	adds	r3, r3, r2
 80080f8:	19db      	adds	r3, r3, r7
 80080fa:	2201      	movs	r2, #1
 80080fc:	701a      	strb	r2, [r3, #0]
 80080fe:	e11d      	b.n	800833c <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008102:	613b      	str	r3, [r7, #16]
 8008104:	2300      	movs	r3, #0
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	6939      	ldr	r1, [r7, #16]
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	000b      	movs	r3, r1
 800810e:	0e1b      	lsrs	r3, r3, #24
 8008110:	0010      	movs	r0, r2
 8008112:	0205      	lsls	r5, r0, #8
 8008114:	431d      	orrs	r5, r3
 8008116:	000b      	movs	r3, r1
 8008118:	021c      	lsls	r4, r3, #8
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	085b      	lsrs	r3, r3, #1
 8008120:	60bb      	str	r3, [r7, #8]
 8008122:	2300      	movs	r3, #0
 8008124:	60fb      	str	r3, [r7, #12]
 8008126:	68b8      	ldr	r0, [r7, #8]
 8008128:	68f9      	ldr	r1, [r7, #12]
 800812a:	1900      	adds	r0, r0, r4
 800812c:	4169      	adcs	r1, r5
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	603b      	str	r3, [r7, #0]
 8008134:	2300      	movs	r3, #0
 8008136:	607b      	str	r3, [r7, #4]
 8008138:	683a      	ldr	r2, [r7, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f7f8 f9ee 	bl	800051c <__aeabi_uldivmod>
 8008140:	0002      	movs	r2, r0
 8008142:	000b      	movs	r3, r1
 8008144:	0013      	movs	r3, r2
 8008146:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800814a:	23c0      	movs	r3, #192	; 0xc0
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	429a      	cmp	r2, r3
 8008150:	d309      	bcc.n	8008166 <UART_SetConfig+0x302>
 8008152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008154:	2380      	movs	r3, #128	; 0x80
 8008156:	035b      	lsls	r3, r3, #13
 8008158:	429a      	cmp	r2, r3
 800815a:	d204      	bcs.n	8008166 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008162:	60da      	str	r2, [r3, #12]
 8008164:	e0ea      	b.n	800833c <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8008166:	231a      	movs	r3, #26
 8008168:	2218      	movs	r2, #24
 800816a:	189b      	adds	r3, r3, r2
 800816c:	19db      	adds	r3, r3, r7
 800816e:	2201      	movs	r2, #1
 8008170:	701a      	strb	r2, [r3, #0]
 8008172:	e0e3      	b.n	800833c <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	69da      	ldr	r2, [r3, #28]
 8008178:	2380      	movs	r3, #128	; 0x80
 800817a:	021b      	lsls	r3, r3, #8
 800817c:	429a      	cmp	r2, r3
 800817e:	d000      	beq.n	8008182 <UART_SetConfig+0x31e>
 8008180:	e085      	b.n	800828e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8008182:	231b      	movs	r3, #27
 8008184:	2218      	movs	r2, #24
 8008186:	189b      	adds	r3, r3, r2
 8008188:	19db      	adds	r3, r3, r7
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	2b08      	cmp	r3, #8
 800818e:	d837      	bhi.n	8008200 <UART_SetConfig+0x39c>
 8008190:	009a      	lsls	r2, r3, #2
 8008192:	4b10      	ldr	r3, [pc, #64]	; (80081d4 <UART_SetConfig+0x370>)
 8008194:	18d3      	adds	r3, r2, r3
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800819a:	f7fe fb39 	bl	8006810 <HAL_RCC_GetPCLK1Freq>
 800819e:	0003      	movs	r3, r0
 80081a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081a2:	e036      	b.n	8008212 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081a4:	f7fe fb4a 	bl	800683c <HAL_RCC_GetPCLK2Freq>
 80081a8:	0003      	movs	r3, r0
 80081aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081ac:	e031      	b.n	8008212 <UART_SetConfig+0x3ae>
 80081ae:	46c0      	nop			; (mov r8, r8)
 80081b0:	efff69f3 	.word	0xefff69f3
 80081b4:	ffffcfff 	.word	0xffffcfff
 80081b8:	40004800 	.word	0x40004800
 80081bc:	fffff4ff 	.word	0xfffff4ff
 80081c0:	40013800 	.word	0x40013800
 80081c4:	40021000 	.word	0x40021000
 80081c8:	40004400 	.word	0x40004400
 80081cc:	003d0900 	.word	0x003d0900
 80081d0:	00f42400 	.word	0x00f42400
 80081d4:	0800b938 	.word	0x0800b938
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081d8:	4b60      	ldr	r3, [pc, #384]	; (800835c <UART_SetConfig+0x4f8>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2210      	movs	r2, #16
 80081de:	4013      	ands	r3, r2
 80081e0:	d002      	beq.n	80081e8 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80081e2:	4b5f      	ldr	r3, [pc, #380]	; (8008360 <UART_SetConfig+0x4fc>)
 80081e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081e6:	e014      	b.n	8008212 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80081e8:	4b5e      	ldr	r3, [pc, #376]	; (8008364 <UART_SetConfig+0x500>)
 80081ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081ec:	e011      	b.n	8008212 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081ee:	f7fe fa5f 	bl	80066b0 <HAL_RCC_GetSysClockFreq>
 80081f2:	0003      	movs	r3, r0
 80081f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081f6:	e00c      	b.n	8008212 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081f8:	2380      	movs	r3, #128	; 0x80
 80081fa:	021b      	lsls	r3, r3, #8
 80081fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081fe:	e008      	b.n	8008212 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8008200:	2300      	movs	r3, #0
 8008202:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008204:	231a      	movs	r3, #26
 8008206:	2218      	movs	r2, #24
 8008208:	189b      	adds	r3, r3, r2
 800820a:	19db      	adds	r3, r3, r7
 800820c:	2201      	movs	r2, #1
 800820e:	701a      	strb	r2, [r3, #0]
        break;
 8008210:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008214:	2b00      	cmp	r3, #0
 8008216:	d100      	bne.n	800821a <UART_SetConfig+0x3b6>
 8008218:	e090      	b.n	800833c <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800821a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821c:	005a      	lsls	r2, r3, #1
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	085b      	lsrs	r3, r3, #1
 8008224:	18d2      	adds	r2, r2, r3
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	0019      	movs	r1, r3
 800822c:	0010      	movs	r0, r2
 800822e:	f7f7 ff87 	bl	8000140 <__udivsi3>
 8008232:	0003      	movs	r3, r0
 8008234:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	2b0f      	cmp	r3, #15
 800823a:	d921      	bls.n	8008280 <UART_SetConfig+0x41c>
 800823c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800823e:	2380      	movs	r3, #128	; 0x80
 8008240:	025b      	lsls	r3, r3, #9
 8008242:	429a      	cmp	r2, r3
 8008244:	d21c      	bcs.n	8008280 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008248:	b29a      	uxth	r2, r3
 800824a:	200e      	movs	r0, #14
 800824c:	2418      	movs	r4, #24
 800824e:	1903      	adds	r3, r0, r4
 8008250:	19db      	adds	r3, r3, r7
 8008252:	210f      	movs	r1, #15
 8008254:	438a      	bics	r2, r1
 8008256:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825a:	085b      	lsrs	r3, r3, #1
 800825c:	b29b      	uxth	r3, r3
 800825e:	2207      	movs	r2, #7
 8008260:	4013      	ands	r3, r2
 8008262:	b299      	uxth	r1, r3
 8008264:	1903      	adds	r3, r0, r4
 8008266:	19db      	adds	r3, r3, r7
 8008268:	1902      	adds	r2, r0, r4
 800826a:	19d2      	adds	r2, r2, r7
 800826c:	8812      	ldrh	r2, [r2, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	1902      	adds	r2, r0, r4
 8008278:	19d2      	adds	r2, r2, r7
 800827a:	8812      	ldrh	r2, [r2, #0]
 800827c:	60da      	str	r2, [r3, #12]
 800827e:	e05d      	b.n	800833c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8008280:	231a      	movs	r3, #26
 8008282:	2218      	movs	r2, #24
 8008284:	189b      	adds	r3, r3, r2
 8008286:	19db      	adds	r3, r3, r7
 8008288:	2201      	movs	r2, #1
 800828a:	701a      	strb	r2, [r3, #0]
 800828c:	e056      	b.n	800833c <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800828e:	231b      	movs	r3, #27
 8008290:	2218      	movs	r2, #24
 8008292:	189b      	adds	r3, r3, r2
 8008294:	19db      	adds	r3, r3, r7
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2b08      	cmp	r3, #8
 800829a:	d822      	bhi.n	80082e2 <UART_SetConfig+0x47e>
 800829c:	009a      	lsls	r2, r3, #2
 800829e:	4b32      	ldr	r3, [pc, #200]	; (8008368 <UART_SetConfig+0x504>)
 80082a0:	18d3      	adds	r3, r2, r3
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082a6:	f7fe fab3 	bl	8006810 <HAL_RCC_GetPCLK1Freq>
 80082aa:	0003      	movs	r3, r0
 80082ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082ae:	e021      	b.n	80082f4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082b0:	f7fe fac4 	bl	800683c <HAL_RCC_GetPCLK2Freq>
 80082b4:	0003      	movs	r3, r0
 80082b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082b8:	e01c      	b.n	80082f4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082ba:	4b28      	ldr	r3, [pc, #160]	; (800835c <UART_SetConfig+0x4f8>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2210      	movs	r2, #16
 80082c0:	4013      	ands	r3, r2
 80082c2:	d002      	beq.n	80082ca <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80082c4:	4b26      	ldr	r3, [pc, #152]	; (8008360 <UART_SetConfig+0x4fc>)
 80082c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80082c8:	e014      	b.n	80082f4 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80082ca:	4b26      	ldr	r3, [pc, #152]	; (8008364 <UART_SetConfig+0x500>)
 80082cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082ce:	e011      	b.n	80082f4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082d0:	f7fe f9ee 	bl	80066b0 <HAL_RCC_GetSysClockFreq>
 80082d4:	0003      	movs	r3, r0
 80082d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082d8:	e00c      	b.n	80082f4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082da:	2380      	movs	r3, #128	; 0x80
 80082dc:	021b      	lsls	r3, r3, #8
 80082de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082e0:	e008      	b.n	80082f4 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80082e2:	2300      	movs	r3, #0
 80082e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80082e6:	231a      	movs	r3, #26
 80082e8:	2218      	movs	r2, #24
 80082ea:	189b      	adds	r3, r3, r2
 80082ec:	19db      	adds	r3, r3, r7
 80082ee:	2201      	movs	r2, #1
 80082f0:	701a      	strb	r2, [r3, #0]
        break;
 80082f2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80082f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d020      	beq.n	800833c <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	085a      	lsrs	r2, r3, #1
 8008300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008302:	18d2      	adds	r2, r2, r3
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	0019      	movs	r1, r3
 800830a:	0010      	movs	r0, r2
 800830c:	f7f7 ff18 	bl	8000140 <__udivsi3>
 8008310:	0003      	movs	r3, r0
 8008312:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008316:	2b0f      	cmp	r3, #15
 8008318:	d90a      	bls.n	8008330 <UART_SetConfig+0x4cc>
 800831a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800831c:	2380      	movs	r3, #128	; 0x80
 800831e:	025b      	lsls	r3, r3, #9
 8008320:	429a      	cmp	r2, r3
 8008322:	d205      	bcs.n	8008330 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008326:	b29a      	uxth	r2, r3
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	60da      	str	r2, [r3, #12]
 800832e:	e005      	b.n	800833c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8008330:	231a      	movs	r3, #26
 8008332:	2218      	movs	r2, #24
 8008334:	189b      	adds	r3, r3, r2
 8008336:	19db      	adds	r3, r3, r7
 8008338:	2201      	movs	r2, #1
 800833a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	2200      	movs	r2, #0
 8008340:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	2200      	movs	r2, #0
 8008346:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008348:	231a      	movs	r3, #26
 800834a:	2218      	movs	r2, #24
 800834c:	189b      	adds	r3, r3, r2
 800834e:	19db      	adds	r3, r3, r7
 8008350:	781b      	ldrb	r3, [r3, #0]
}
 8008352:	0018      	movs	r0, r3
 8008354:	46bd      	mov	sp, r7
 8008356:	b00e      	add	sp, #56	; 0x38
 8008358:	bdb0      	pop	{r4, r5, r7, pc}
 800835a:	46c0      	nop			; (mov r8, r8)
 800835c:	40021000 	.word	0x40021000
 8008360:	003d0900 	.word	0x003d0900
 8008364:	00f42400 	.word	0x00f42400
 8008368:	0800b95c 	.word	0x0800b95c

0800836c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	2201      	movs	r2, #1
 800837a:	4013      	ands	r3, r2
 800837c:	d00b      	beq.n	8008396 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	4a4a      	ldr	r2, [pc, #296]	; (80084b0 <UART_AdvFeatureConfig+0x144>)
 8008386:	4013      	ands	r3, r2
 8008388:	0019      	movs	r1, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	430a      	orrs	r2, r1
 8008394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	2202      	movs	r2, #2
 800839c:	4013      	ands	r3, r2
 800839e:	d00b      	beq.n	80083b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	4a43      	ldr	r2, [pc, #268]	; (80084b4 <UART_AdvFeatureConfig+0x148>)
 80083a8:	4013      	ands	r3, r2
 80083aa:	0019      	movs	r1, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	430a      	orrs	r2, r1
 80083b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	2204      	movs	r2, #4
 80083be:	4013      	ands	r3, r2
 80083c0:	d00b      	beq.n	80083da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	4a3b      	ldr	r2, [pc, #236]	; (80084b8 <UART_AdvFeatureConfig+0x14c>)
 80083ca:	4013      	ands	r3, r2
 80083cc:	0019      	movs	r1, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	430a      	orrs	r2, r1
 80083d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083de:	2208      	movs	r2, #8
 80083e0:	4013      	ands	r3, r2
 80083e2:	d00b      	beq.n	80083fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	4a34      	ldr	r2, [pc, #208]	; (80084bc <UART_AdvFeatureConfig+0x150>)
 80083ec:	4013      	ands	r3, r2
 80083ee:	0019      	movs	r1, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	430a      	orrs	r2, r1
 80083fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008400:	2210      	movs	r2, #16
 8008402:	4013      	ands	r3, r2
 8008404:	d00b      	beq.n	800841e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	4a2c      	ldr	r2, [pc, #176]	; (80084c0 <UART_AdvFeatureConfig+0x154>)
 800840e:	4013      	ands	r3, r2
 8008410:	0019      	movs	r1, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	430a      	orrs	r2, r1
 800841c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	2220      	movs	r2, #32
 8008424:	4013      	ands	r3, r2
 8008426:	d00b      	beq.n	8008440 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	4a25      	ldr	r2, [pc, #148]	; (80084c4 <UART_AdvFeatureConfig+0x158>)
 8008430:	4013      	ands	r3, r2
 8008432:	0019      	movs	r1, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	430a      	orrs	r2, r1
 800843e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008444:	2240      	movs	r2, #64	; 0x40
 8008446:	4013      	ands	r3, r2
 8008448:	d01d      	beq.n	8008486 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	4a1d      	ldr	r2, [pc, #116]	; (80084c8 <UART_AdvFeatureConfig+0x15c>)
 8008452:	4013      	ands	r3, r2
 8008454:	0019      	movs	r1, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	430a      	orrs	r2, r1
 8008460:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008466:	2380      	movs	r3, #128	; 0x80
 8008468:	035b      	lsls	r3, r3, #13
 800846a:	429a      	cmp	r2, r3
 800846c:	d10b      	bne.n	8008486 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	4a15      	ldr	r2, [pc, #84]	; (80084cc <UART_AdvFeatureConfig+0x160>)
 8008476:	4013      	ands	r3, r2
 8008478:	0019      	movs	r1, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848a:	2280      	movs	r2, #128	; 0x80
 800848c:	4013      	ands	r3, r2
 800848e:	d00b      	beq.n	80084a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	4a0e      	ldr	r2, [pc, #56]	; (80084d0 <UART_AdvFeatureConfig+0x164>)
 8008498:	4013      	ands	r3, r2
 800849a:	0019      	movs	r1, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	605a      	str	r2, [r3, #4]
  }
}
 80084a8:	46c0      	nop			; (mov r8, r8)
 80084aa:	46bd      	mov	sp, r7
 80084ac:	b002      	add	sp, #8
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	fffdffff 	.word	0xfffdffff
 80084b4:	fffeffff 	.word	0xfffeffff
 80084b8:	fffbffff 	.word	0xfffbffff
 80084bc:	ffff7fff 	.word	0xffff7fff
 80084c0:	ffffefff 	.word	0xffffefff
 80084c4:	ffffdfff 	.word	0xffffdfff
 80084c8:	ffefffff 	.word	0xffefffff
 80084cc:	ff9fffff 	.word	0xff9fffff
 80084d0:	fff7ffff 	.word	0xfff7ffff

080084d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b092      	sub	sp, #72	; 0x48
 80084d8:	af02      	add	r7, sp, #8
 80084da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2284      	movs	r2, #132	; 0x84
 80084e0:	2100      	movs	r1, #0
 80084e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084e4:	f7fc fbd0 	bl	8004c88 <HAL_GetTick>
 80084e8:	0003      	movs	r3, r0
 80084ea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2208      	movs	r2, #8
 80084f4:	4013      	ands	r3, r2
 80084f6:	2b08      	cmp	r3, #8
 80084f8:	d12c      	bne.n	8008554 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084fc:	2280      	movs	r2, #128	; 0x80
 80084fe:	0391      	lsls	r1, r2, #14
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	4a46      	ldr	r2, [pc, #280]	; (800861c <UART_CheckIdleState+0x148>)
 8008504:	9200      	str	r2, [sp, #0]
 8008506:	2200      	movs	r2, #0
 8008508:	f000 f88c 	bl	8008624 <UART_WaitOnFlagUntilTimeout>
 800850c:	1e03      	subs	r3, r0, #0
 800850e:	d021      	beq.n	8008554 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008510:	f3ef 8310 	mrs	r3, PRIMASK
 8008514:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008518:	63bb      	str	r3, [r7, #56]	; 0x38
 800851a:	2301      	movs	r3, #1
 800851c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800851e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008520:	f383 8810 	msr	PRIMASK, r3
}
 8008524:	46c0      	nop			; (mov r8, r8)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2180      	movs	r1, #128	; 0x80
 8008532:	438a      	bics	r2, r1
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008538:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800853a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853c:	f383 8810 	msr	PRIMASK, r3
}
 8008540:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2220      	movs	r2, #32
 8008546:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2278      	movs	r2, #120	; 0x78
 800854c:	2100      	movs	r1, #0
 800854e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e05f      	b.n	8008614 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2204      	movs	r2, #4
 800855c:	4013      	ands	r3, r2
 800855e:	2b04      	cmp	r3, #4
 8008560:	d146      	bne.n	80085f0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008564:	2280      	movs	r2, #128	; 0x80
 8008566:	03d1      	lsls	r1, r2, #15
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	4a2c      	ldr	r2, [pc, #176]	; (800861c <UART_CheckIdleState+0x148>)
 800856c:	9200      	str	r2, [sp, #0]
 800856e:	2200      	movs	r2, #0
 8008570:	f000 f858 	bl	8008624 <UART_WaitOnFlagUntilTimeout>
 8008574:	1e03      	subs	r3, r0, #0
 8008576:	d03b      	beq.n	80085f0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008578:	f3ef 8310 	mrs	r3, PRIMASK
 800857c:	60fb      	str	r3, [r7, #12]
  return(result);
 800857e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008580:	637b      	str	r3, [r7, #52]	; 0x34
 8008582:	2301      	movs	r3, #1
 8008584:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	f383 8810 	msr	PRIMASK, r3
}
 800858c:	46c0      	nop			; (mov r8, r8)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4921      	ldr	r1, [pc, #132]	; (8008620 <UART_CheckIdleState+0x14c>)
 800859a:	400a      	ands	r2, r1
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f383 8810 	msr	PRIMASK, r3
}
 80085a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085aa:	f3ef 8310 	mrs	r3, PRIMASK
 80085ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80085b0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085b2:	633b      	str	r3, [r7, #48]	; 0x30
 80085b4:	2301      	movs	r3, #1
 80085b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	f383 8810 	msr	PRIMASK, r3
}
 80085be:	46c0      	nop			; (mov r8, r8)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	689a      	ldr	r2, [r3, #8]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2101      	movs	r1, #1
 80085cc:	438a      	bics	r2, r1
 80085ce:	609a      	str	r2, [r3, #8]
 80085d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	f383 8810 	msr	PRIMASK, r3
}
 80085da:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2280      	movs	r2, #128	; 0x80
 80085e0:	2120      	movs	r1, #32
 80085e2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2278      	movs	r2, #120	; 0x78
 80085e8:	2100      	movs	r1, #0
 80085ea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e011      	b.n	8008614 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2280      	movs	r2, #128	; 0x80
 80085fa:	2120      	movs	r1, #32
 80085fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2278      	movs	r2, #120	; 0x78
 800860e:	2100      	movs	r1, #0
 8008610:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	0018      	movs	r0, r3
 8008616:	46bd      	mov	sp, r7
 8008618:	b010      	add	sp, #64	; 0x40
 800861a:	bd80      	pop	{r7, pc}
 800861c:	01ffffff 	.word	0x01ffffff
 8008620:	fffffedf 	.word	0xfffffedf

08008624 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	603b      	str	r3, [r7, #0]
 8008630:	1dfb      	adds	r3, r7, #7
 8008632:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008634:	e04b      	b.n	80086ce <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	3301      	adds	r3, #1
 800863a:	d048      	beq.n	80086ce <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800863c:	f7fc fb24 	bl	8004c88 <HAL_GetTick>
 8008640:	0002      	movs	r2, r0
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	69ba      	ldr	r2, [r7, #24]
 8008648:	429a      	cmp	r2, r3
 800864a:	d302      	bcc.n	8008652 <UART_WaitOnFlagUntilTimeout+0x2e>
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d101      	bne.n	8008656 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e04b      	b.n	80086ee <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2204      	movs	r2, #4
 800865e:	4013      	ands	r3, r2
 8008660:	d035      	beq.n	80086ce <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	2208      	movs	r2, #8
 800866a:	4013      	ands	r3, r2
 800866c:	2b08      	cmp	r3, #8
 800866e:	d111      	bne.n	8008694 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2208      	movs	r2, #8
 8008676:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	0018      	movs	r0, r3
 800867c:	f000 f83c 	bl	80086f8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2284      	movs	r2, #132	; 0x84
 8008684:	2108      	movs	r1, #8
 8008686:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2278      	movs	r2, #120	; 0x78
 800868c:	2100      	movs	r1, #0
 800868e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e02c      	b.n	80086ee <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	69da      	ldr	r2, [r3, #28]
 800869a:	2380      	movs	r3, #128	; 0x80
 800869c:	011b      	lsls	r3, r3, #4
 800869e:	401a      	ands	r2, r3
 80086a0:	2380      	movs	r3, #128	; 0x80
 80086a2:	011b      	lsls	r3, r3, #4
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d112      	bne.n	80086ce <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2280      	movs	r2, #128	; 0x80
 80086ae:	0112      	lsls	r2, r2, #4
 80086b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	0018      	movs	r0, r3
 80086b6:	f000 f81f 	bl	80086f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2284      	movs	r2, #132	; 0x84
 80086be:	2120      	movs	r1, #32
 80086c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2278      	movs	r2, #120	; 0x78
 80086c6:	2100      	movs	r1, #0
 80086c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e00f      	b.n	80086ee <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	68ba      	ldr	r2, [r7, #8]
 80086d6:	4013      	ands	r3, r2
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	425a      	negs	r2, r3
 80086de:	4153      	adcs	r3, r2
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	001a      	movs	r2, r3
 80086e4:	1dfb      	adds	r3, r7, #7
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d0a4      	beq.n	8008636 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	0018      	movs	r0, r3
 80086f0:	46bd      	mov	sp, r7
 80086f2:	b004      	add	sp, #16
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08e      	sub	sp, #56	; 0x38
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008700:	f3ef 8310 	mrs	r3, PRIMASK
 8008704:	617b      	str	r3, [r7, #20]
  return(result);
 8008706:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008708:	637b      	str	r3, [r7, #52]	; 0x34
 800870a:	2301      	movs	r3, #1
 800870c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	f383 8810 	msr	PRIMASK, r3
}
 8008714:	46c0      	nop			; (mov r8, r8)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4926      	ldr	r1, [pc, #152]	; (80087bc <UART_EndRxTransfer+0xc4>)
 8008722:	400a      	ands	r2, r1
 8008724:	601a      	str	r2, [r3, #0]
 8008726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008728:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	f383 8810 	msr	PRIMASK, r3
}
 8008730:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008732:	f3ef 8310 	mrs	r3, PRIMASK
 8008736:	623b      	str	r3, [r7, #32]
  return(result);
 8008738:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800873a:	633b      	str	r3, [r7, #48]	; 0x30
 800873c:	2301      	movs	r3, #1
 800873e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	f383 8810 	msr	PRIMASK, r3
}
 8008746:	46c0      	nop			; (mov r8, r8)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	689a      	ldr	r2, [r3, #8]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2101      	movs	r1, #1
 8008754:	438a      	bics	r2, r1
 8008756:	609a      	str	r2, [r3, #8]
 8008758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	f383 8810 	msr	PRIMASK, r3
}
 8008762:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008768:	2b01      	cmp	r3, #1
 800876a:	d118      	bne.n	800879e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800876c:	f3ef 8310 	mrs	r3, PRIMASK
 8008770:	60bb      	str	r3, [r7, #8]
  return(result);
 8008772:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008776:	2301      	movs	r3, #1
 8008778:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f383 8810 	msr	PRIMASK, r3
}
 8008780:	46c0      	nop			; (mov r8, r8)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2110      	movs	r1, #16
 800878e:	438a      	bics	r2, r1
 8008790:	601a      	str	r2, [r3, #0]
 8008792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008794:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f383 8810 	msr	PRIMASK, r3
}
 800879c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2280      	movs	r2, #128	; 0x80
 80087a2:	2120      	movs	r1, #32
 80087a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80087b2:	46c0      	nop			; (mov r8, r8)
 80087b4:	46bd      	mov	sp, r7
 80087b6:	b00e      	add	sp, #56	; 0x38
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	46c0      	nop			; (mov r8, r8)
 80087bc:	fffffedf 	.word	0xfffffedf

080087c0 <__errno>:
 80087c0:	4b01      	ldr	r3, [pc, #4]	; (80087c8 <__errno+0x8>)
 80087c2:	6818      	ldr	r0, [r3, #0]
 80087c4:	4770      	bx	lr
 80087c6:	46c0      	nop			; (mov r8, r8)
 80087c8:	20000010 	.word	0x20000010

080087cc <__libc_init_array>:
 80087cc:	b570      	push	{r4, r5, r6, lr}
 80087ce:	2600      	movs	r6, #0
 80087d0:	4d0c      	ldr	r5, [pc, #48]	; (8008804 <__libc_init_array+0x38>)
 80087d2:	4c0d      	ldr	r4, [pc, #52]	; (8008808 <__libc_init_array+0x3c>)
 80087d4:	1b64      	subs	r4, r4, r5
 80087d6:	10a4      	asrs	r4, r4, #2
 80087d8:	42a6      	cmp	r6, r4
 80087da:	d109      	bne.n	80087f0 <__libc_init_array+0x24>
 80087dc:	2600      	movs	r6, #0
 80087de:	f002 ffd1 	bl	800b784 <_init>
 80087e2:	4d0a      	ldr	r5, [pc, #40]	; (800880c <__libc_init_array+0x40>)
 80087e4:	4c0a      	ldr	r4, [pc, #40]	; (8008810 <__libc_init_array+0x44>)
 80087e6:	1b64      	subs	r4, r4, r5
 80087e8:	10a4      	asrs	r4, r4, #2
 80087ea:	42a6      	cmp	r6, r4
 80087ec:	d105      	bne.n	80087fa <__libc_init_array+0x2e>
 80087ee:	bd70      	pop	{r4, r5, r6, pc}
 80087f0:	00b3      	lsls	r3, r6, #2
 80087f2:	58eb      	ldr	r3, [r5, r3]
 80087f4:	4798      	blx	r3
 80087f6:	3601      	adds	r6, #1
 80087f8:	e7ee      	b.n	80087d8 <__libc_init_array+0xc>
 80087fa:	00b3      	lsls	r3, r6, #2
 80087fc:	58eb      	ldr	r3, [r5, r3]
 80087fe:	4798      	blx	r3
 8008800:	3601      	adds	r6, #1
 8008802:	e7f2      	b.n	80087ea <__libc_init_array+0x1e>
 8008804:	0800bd64 	.word	0x0800bd64
 8008808:	0800bd64 	.word	0x0800bd64
 800880c:	0800bd64 	.word	0x0800bd64
 8008810:	0800bd68 	.word	0x0800bd68

08008814 <memcpy>:
 8008814:	2300      	movs	r3, #0
 8008816:	b510      	push	{r4, lr}
 8008818:	429a      	cmp	r2, r3
 800881a:	d100      	bne.n	800881e <memcpy+0xa>
 800881c:	bd10      	pop	{r4, pc}
 800881e:	5ccc      	ldrb	r4, [r1, r3]
 8008820:	54c4      	strb	r4, [r0, r3]
 8008822:	3301      	adds	r3, #1
 8008824:	e7f8      	b.n	8008818 <memcpy+0x4>

08008826 <memset>:
 8008826:	0003      	movs	r3, r0
 8008828:	1882      	adds	r2, r0, r2
 800882a:	4293      	cmp	r3, r2
 800882c:	d100      	bne.n	8008830 <memset+0xa>
 800882e:	4770      	bx	lr
 8008830:	7019      	strb	r1, [r3, #0]
 8008832:	3301      	adds	r3, #1
 8008834:	e7f9      	b.n	800882a <memset+0x4>

08008836 <__cvt>:
 8008836:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008838:	001e      	movs	r6, r3
 800883a:	2300      	movs	r3, #0
 800883c:	0014      	movs	r4, r2
 800883e:	b08b      	sub	sp, #44	; 0x2c
 8008840:	429e      	cmp	r6, r3
 8008842:	da04      	bge.n	800884e <__cvt+0x18>
 8008844:	2180      	movs	r1, #128	; 0x80
 8008846:	0609      	lsls	r1, r1, #24
 8008848:	1873      	adds	r3, r6, r1
 800884a:	001e      	movs	r6, r3
 800884c:	232d      	movs	r3, #45	; 0x2d
 800884e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008850:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008852:	7013      	strb	r3, [r2, #0]
 8008854:	2320      	movs	r3, #32
 8008856:	2203      	movs	r2, #3
 8008858:	439f      	bics	r7, r3
 800885a:	2f46      	cmp	r7, #70	; 0x46
 800885c:	d007      	beq.n	800886e <__cvt+0x38>
 800885e:	003b      	movs	r3, r7
 8008860:	3b45      	subs	r3, #69	; 0x45
 8008862:	4259      	negs	r1, r3
 8008864:	414b      	adcs	r3, r1
 8008866:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008868:	3a01      	subs	r2, #1
 800886a:	18cb      	adds	r3, r1, r3
 800886c:	9310      	str	r3, [sp, #64]	; 0x40
 800886e:	ab09      	add	r3, sp, #36	; 0x24
 8008870:	9304      	str	r3, [sp, #16]
 8008872:	ab08      	add	r3, sp, #32
 8008874:	9303      	str	r3, [sp, #12]
 8008876:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008878:	9200      	str	r2, [sp, #0]
 800887a:	9302      	str	r3, [sp, #8]
 800887c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800887e:	0022      	movs	r2, r4
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	0033      	movs	r3, r6
 8008884:	f000 fd06 	bl	8009294 <_dtoa_r>
 8008888:	0005      	movs	r5, r0
 800888a:	2f47      	cmp	r7, #71	; 0x47
 800888c:	d102      	bne.n	8008894 <__cvt+0x5e>
 800888e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008890:	07db      	lsls	r3, r3, #31
 8008892:	d528      	bpl.n	80088e6 <__cvt+0xb0>
 8008894:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008896:	18eb      	adds	r3, r5, r3
 8008898:	9307      	str	r3, [sp, #28]
 800889a:	2f46      	cmp	r7, #70	; 0x46
 800889c:	d114      	bne.n	80088c8 <__cvt+0x92>
 800889e:	782b      	ldrb	r3, [r5, #0]
 80088a0:	2b30      	cmp	r3, #48	; 0x30
 80088a2:	d10c      	bne.n	80088be <__cvt+0x88>
 80088a4:	2200      	movs	r2, #0
 80088a6:	2300      	movs	r3, #0
 80088a8:	0020      	movs	r0, r4
 80088aa:	0031      	movs	r1, r6
 80088ac:	f7f7 fdce 	bl	800044c <__aeabi_dcmpeq>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d104      	bne.n	80088be <__cvt+0x88>
 80088b4:	2301      	movs	r3, #1
 80088b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80088b8:	1a9b      	subs	r3, r3, r2
 80088ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80088c0:	9a07      	ldr	r2, [sp, #28]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	18d3      	adds	r3, r2, r3
 80088c6:	9307      	str	r3, [sp, #28]
 80088c8:	2200      	movs	r2, #0
 80088ca:	2300      	movs	r3, #0
 80088cc:	0020      	movs	r0, r4
 80088ce:	0031      	movs	r1, r6
 80088d0:	f7f7 fdbc 	bl	800044c <__aeabi_dcmpeq>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d001      	beq.n	80088dc <__cvt+0xa6>
 80088d8:	9b07      	ldr	r3, [sp, #28]
 80088da:	9309      	str	r3, [sp, #36]	; 0x24
 80088dc:	2230      	movs	r2, #48	; 0x30
 80088de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e0:	9907      	ldr	r1, [sp, #28]
 80088e2:	428b      	cmp	r3, r1
 80088e4:	d306      	bcc.n	80088f4 <__cvt+0xbe>
 80088e6:	0028      	movs	r0, r5
 80088e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80088ec:	1b5b      	subs	r3, r3, r5
 80088ee:	6013      	str	r3, [r2, #0]
 80088f0:	b00b      	add	sp, #44	; 0x2c
 80088f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088f4:	1c59      	adds	r1, r3, #1
 80088f6:	9109      	str	r1, [sp, #36]	; 0x24
 80088f8:	701a      	strb	r2, [r3, #0]
 80088fa:	e7f0      	b.n	80088de <__cvt+0xa8>

080088fc <__exponent>:
 80088fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088fe:	1c83      	adds	r3, r0, #2
 8008900:	b087      	sub	sp, #28
 8008902:	9303      	str	r3, [sp, #12]
 8008904:	0005      	movs	r5, r0
 8008906:	000c      	movs	r4, r1
 8008908:	232b      	movs	r3, #43	; 0x2b
 800890a:	7002      	strb	r2, [r0, #0]
 800890c:	2900      	cmp	r1, #0
 800890e:	da01      	bge.n	8008914 <__exponent+0x18>
 8008910:	424c      	negs	r4, r1
 8008912:	3302      	adds	r3, #2
 8008914:	706b      	strb	r3, [r5, #1]
 8008916:	2c09      	cmp	r4, #9
 8008918:	dd31      	ble.n	800897e <__exponent+0x82>
 800891a:	270a      	movs	r7, #10
 800891c:	ab04      	add	r3, sp, #16
 800891e:	1dde      	adds	r6, r3, #7
 8008920:	0020      	movs	r0, r4
 8008922:	0039      	movs	r1, r7
 8008924:	9601      	str	r6, [sp, #4]
 8008926:	f7f7 fd7b 	bl	8000420 <__aeabi_idivmod>
 800892a:	3e01      	subs	r6, #1
 800892c:	3130      	adds	r1, #48	; 0x30
 800892e:	0020      	movs	r0, r4
 8008930:	7031      	strb	r1, [r6, #0]
 8008932:	0039      	movs	r1, r7
 8008934:	9402      	str	r4, [sp, #8]
 8008936:	f7f7 fc8d 	bl	8000254 <__divsi3>
 800893a:	9b02      	ldr	r3, [sp, #8]
 800893c:	0004      	movs	r4, r0
 800893e:	2b63      	cmp	r3, #99	; 0x63
 8008940:	dcee      	bgt.n	8008920 <__exponent+0x24>
 8008942:	9b01      	ldr	r3, [sp, #4]
 8008944:	3430      	adds	r4, #48	; 0x30
 8008946:	1e9a      	subs	r2, r3, #2
 8008948:	0013      	movs	r3, r2
 800894a:	9903      	ldr	r1, [sp, #12]
 800894c:	7014      	strb	r4, [r2, #0]
 800894e:	a804      	add	r0, sp, #16
 8008950:	3007      	adds	r0, #7
 8008952:	4298      	cmp	r0, r3
 8008954:	d80e      	bhi.n	8008974 <__exponent+0x78>
 8008956:	ab04      	add	r3, sp, #16
 8008958:	3307      	adds	r3, #7
 800895a:	2000      	movs	r0, #0
 800895c:	429a      	cmp	r2, r3
 800895e:	d804      	bhi.n	800896a <__exponent+0x6e>
 8008960:	ab04      	add	r3, sp, #16
 8008962:	3009      	adds	r0, #9
 8008964:	18c0      	adds	r0, r0, r3
 8008966:	9b01      	ldr	r3, [sp, #4]
 8008968:	1ac0      	subs	r0, r0, r3
 800896a:	9b03      	ldr	r3, [sp, #12]
 800896c:	1818      	adds	r0, r3, r0
 800896e:	1b40      	subs	r0, r0, r5
 8008970:	b007      	add	sp, #28
 8008972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008974:	7818      	ldrb	r0, [r3, #0]
 8008976:	3301      	adds	r3, #1
 8008978:	7008      	strb	r0, [r1, #0]
 800897a:	3101      	adds	r1, #1
 800897c:	e7e7      	b.n	800894e <__exponent+0x52>
 800897e:	2330      	movs	r3, #48	; 0x30
 8008980:	18e4      	adds	r4, r4, r3
 8008982:	70ab      	strb	r3, [r5, #2]
 8008984:	1d28      	adds	r0, r5, #4
 8008986:	70ec      	strb	r4, [r5, #3]
 8008988:	e7f1      	b.n	800896e <__exponent+0x72>
	...

0800898c <_printf_float>:
 800898c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800898e:	b095      	sub	sp, #84	; 0x54
 8008990:	000c      	movs	r4, r1
 8008992:	9209      	str	r2, [sp, #36]	; 0x24
 8008994:	001e      	movs	r6, r3
 8008996:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008998:	0007      	movs	r7, r0
 800899a:	f001 fa95 	bl	8009ec8 <_localeconv_r>
 800899e:	6803      	ldr	r3, [r0, #0]
 80089a0:	0018      	movs	r0, r3
 80089a2:	930c      	str	r3, [sp, #48]	; 0x30
 80089a4:	f7f7 fbb0 	bl	8000108 <strlen>
 80089a8:	2300      	movs	r3, #0
 80089aa:	9312      	str	r3, [sp, #72]	; 0x48
 80089ac:	7e23      	ldrb	r3, [r4, #24]
 80089ae:	2207      	movs	r2, #7
 80089b0:	930a      	str	r3, [sp, #40]	; 0x28
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	900e      	str	r0, [sp, #56]	; 0x38
 80089b6:	930d      	str	r3, [sp, #52]	; 0x34
 80089b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80089ba:	682b      	ldr	r3, [r5, #0]
 80089bc:	05c9      	lsls	r1, r1, #23
 80089be:	d547      	bpl.n	8008a50 <_printf_float+0xc4>
 80089c0:	189b      	adds	r3, r3, r2
 80089c2:	4393      	bics	r3, r2
 80089c4:	001a      	movs	r2, r3
 80089c6:	3208      	adds	r2, #8
 80089c8:	602a      	str	r2, [r5, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	64a2      	str	r2, [r4, #72]	; 0x48
 80089d0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80089d2:	2201      	movs	r2, #1
 80089d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80089d6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80089d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80089da:	006b      	lsls	r3, r5, #1
 80089dc:	085b      	lsrs	r3, r3, #1
 80089de:	930f      	str	r3, [sp, #60]	; 0x3c
 80089e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80089e2:	4ba7      	ldr	r3, [pc, #668]	; (8008c80 <_printf_float+0x2f4>)
 80089e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80089e6:	4252      	negs	r2, r2
 80089e8:	f7f9 ffa2 	bl	8002930 <__aeabi_dcmpun>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	d131      	bne.n	8008a54 <_printf_float+0xc8>
 80089f0:	2201      	movs	r2, #1
 80089f2:	4ba3      	ldr	r3, [pc, #652]	; (8008c80 <_printf_float+0x2f4>)
 80089f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80089f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80089f8:	4252      	negs	r2, r2
 80089fa:	f7f7 fd37 	bl	800046c <__aeabi_dcmple>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d128      	bne.n	8008a54 <_printf_float+0xc8>
 8008a02:	2200      	movs	r2, #0
 8008a04:	2300      	movs	r3, #0
 8008a06:	0029      	movs	r1, r5
 8008a08:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008a0a:	f7f7 fd25 	bl	8000458 <__aeabi_dcmplt>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d003      	beq.n	8008a1a <_printf_float+0x8e>
 8008a12:	0023      	movs	r3, r4
 8008a14:	222d      	movs	r2, #45	; 0x2d
 8008a16:	3343      	adds	r3, #67	; 0x43
 8008a18:	701a      	strb	r2, [r3, #0]
 8008a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a1c:	4d99      	ldr	r5, [pc, #612]	; (8008c84 <_printf_float+0x2f8>)
 8008a1e:	2b47      	cmp	r3, #71	; 0x47
 8008a20:	d900      	bls.n	8008a24 <_printf_float+0x98>
 8008a22:	4d99      	ldr	r5, [pc, #612]	; (8008c88 <_printf_float+0x2fc>)
 8008a24:	2303      	movs	r3, #3
 8008a26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a28:	6123      	str	r3, [r4, #16]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	439a      	bics	r2, r3
 8008a2e:	2300      	movs	r3, #0
 8008a30:	6022      	str	r2, [r4, #0]
 8008a32:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a36:	0021      	movs	r1, r4
 8008a38:	0038      	movs	r0, r7
 8008a3a:	9600      	str	r6, [sp, #0]
 8008a3c:	aa13      	add	r2, sp, #76	; 0x4c
 8008a3e:	f000 f9e7 	bl	8008e10 <_printf_common>
 8008a42:	1c43      	adds	r3, r0, #1
 8008a44:	d000      	beq.n	8008a48 <_printf_float+0xbc>
 8008a46:	e0a2      	b.n	8008b8e <_printf_float+0x202>
 8008a48:	2001      	movs	r0, #1
 8008a4a:	4240      	negs	r0, r0
 8008a4c:	b015      	add	sp, #84	; 0x54
 8008a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a50:	3307      	adds	r3, #7
 8008a52:	e7b6      	b.n	80089c2 <_printf_float+0x36>
 8008a54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a56:	002b      	movs	r3, r5
 8008a58:	0010      	movs	r0, r2
 8008a5a:	0029      	movs	r1, r5
 8008a5c:	f7f9 ff68 	bl	8002930 <__aeabi_dcmpun>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d00b      	beq.n	8008a7c <_printf_float+0xf0>
 8008a64:	2d00      	cmp	r5, #0
 8008a66:	da03      	bge.n	8008a70 <_printf_float+0xe4>
 8008a68:	0023      	movs	r3, r4
 8008a6a:	222d      	movs	r2, #45	; 0x2d
 8008a6c:	3343      	adds	r3, #67	; 0x43
 8008a6e:	701a      	strb	r2, [r3, #0]
 8008a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a72:	4d86      	ldr	r5, [pc, #536]	; (8008c8c <_printf_float+0x300>)
 8008a74:	2b47      	cmp	r3, #71	; 0x47
 8008a76:	d9d5      	bls.n	8008a24 <_printf_float+0x98>
 8008a78:	4d85      	ldr	r5, [pc, #532]	; (8008c90 <_printf_float+0x304>)
 8008a7a:	e7d3      	b.n	8008a24 <_printf_float+0x98>
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a80:	6863      	ldr	r3, [r4, #4]
 8008a82:	4391      	bics	r1, r2
 8008a84:	910f      	str	r1, [sp, #60]	; 0x3c
 8008a86:	1c5a      	adds	r2, r3, #1
 8008a88:	d149      	bne.n	8008b1e <_printf_float+0x192>
 8008a8a:	3307      	adds	r3, #7
 8008a8c:	6063      	str	r3, [r4, #4]
 8008a8e:	2380      	movs	r3, #128	; 0x80
 8008a90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a92:	00db      	lsls	r3, r3, #3
 8008a94:	4313      	orrs	r3, r2
 8008a96:	2200      	movs	r2, #0
 8008a98:	9206      	str	r2, [sp, #24]
 8008a9a:	aa12      	add	r2, sp, #72	; 0x48
 8008a9c:	9205      	str	r2, [sp, #20]
 8008a9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aa0:	a908      	add	r1, sp, #32
 8008aa2:	9204      	str	r2, [sp, #16]
 8008aa4:	aa11      	add	r2, sp, #68	; 0x44
 8008aa6:	9203      	str	r2, [sp, #12]
 8008aa8:	2223      	movs	r2, #35	; 0x23
 8008aaa:	6023      	str	r3, [r4, #0]
 8008aac:	9301      	str	r3, [sp, #4]
 8008aae:	6863      	ldr	r3, [r4, #4]
 8008ab0:	1852      	adds	r2, r2, r1
 8008ab2:	9202      	str	r2, [sp, #8]
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	0038      	movs	r0, r7
 8008ab8:	002b      	movs	r3, r5
 8008aba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008abc:	f7ff febb 	bl	8008836 <__cvt>
 8008ac0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ac2:	0005      	movs	r5, r0
 8008ac4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008ac6:	2b47      	cmp	r3, #71	; 0x47
 8008ac8:	d108      	bne.n	8008adc <_printf_float+0x150>
 8008aca:	1ccb      	adds	r3, r1, #3
 8008acc:	db02      	blt.n	8008ad4 <_printf_float+0x148>
 8008ace:	6863      	ldr	r3, [r4, #4]
 8008ad0:	4299      	cmp	r1, r3
 8008ad2:	dd48      	ble.n	8008b66 <_printf_float+0x1da>
 8008ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad6:	3b02      	subs	r3, #2
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	930a      	str	r3, [sp, #40]	; 0x28
 8008adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ade:	2b65      	cmp	r3, #101	; 0x65
 8008ae0:	d824      	bhi.n	8008b2c <_printf_float+0x1a0>
 8008ae2:	0020      	movs	r0, r4
 8008ae4:	001a      	movs	r2, r3
 8008ae6:	3901      	subs	r1, #1
 8008ae8:	3050      	adds	r0, #80	; 0x50
 8008aea:	9111      	str	r1, [sp, #68]	; 0x44
 8008aec:	f7ff ff06 	bl	80088fc <__exponent>
 8008af0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008af2:	900b      	str	r0, [sp, #44]	; 0x2c
 8008af4:	1813      	adds	r3, r2, r0
 8008af6:	6123      	str	r3, [r4, #16]
 8008af8:	2a01      	cmp	r2, #1
 8008afa:	dc02      	bgt.n	8008b02 <_printf_float+0x176>
 8008afc:	6822      	ldr	r2, [r4, #0]
 8008afe:	07d2      	lsls	r2, r2, #31
 8008b00:	d501      	bpl.n	8008b06 <_printf_float+0x17a>
 8008b02:	3301      	adds	r3, #1
 8008b04:	6123      	str	r3, [r4, #16]
 8008b06:	2323      	movs	r3, #35	; 0x23
 8008b08:	aa08      	add	r2, sp, #32
 8008b0a:	189b      	adds	r3, r3, r2
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d100      	bne.n	8008b14 <_printf_float+0x188>
 8008b12:	e78f      	b.n	8008a34 <_printf_float+0xa8>
 8008b14:	0023      	movs	r3, r4
 8008b16:	222d      	movs	r2, #45	; 0x2d
 8008b18:	3343      	adds	r3, #67	; 0x43
 8008b1a:	701a      	strb	r2, [r3, #0]
 8008b1c:	e78a      	b.n	8008a34 <_printf_float+0xa8>
 8008b1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b20:	2a47      	cmp	r2, #71	; 0x47
 8008b22:	d1b4      	bne.n	8008a8e <_printf_float+0x102>
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1b2      	bne.n	8008a8e <_printf_float+0x102>
 8008b28:	3301      	adds	r3, #1
 8008b2a:	e7af      	b.n	8008a8c <_printf_float+0x100>
 8008b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b2e:	2b66      	cmp	r3, #102	; 0x66
 8008b30:	d11b      	bne.n	8008b6a <_printf_float+0x1de>
 8008b32:	6863      	ldr	r3, [r4, #4]
 8008b34:	2900      	cmp	r1, #0
 8008b36:	dd0d      	ble.n	8008b54 <_printf_float+0x1c8>
 8008b38:	6121      	str	r1, [r4, #16]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d102      	bne.n	8008b44 <_printf_float+0x1b8>
 8008b3e:	6822      	ldr	r2, [r4, #0]
 8008b40:	07d2      	lsls	r2, r2, #31
 8008b42:	d502      	bpl.n	8008b4a <_printf_float+0x1be>
 8008b44:	3301      	adds	r3, #1
 8008b46:	1859      	adds	r1, r3, r1
 8008b48:	6121      	str	r1, [r4, #16]
 8008b4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b4c:	65a3      	str	r3, [r4, #88]	; 0x58
 8008b4e:	2300      	movs	r3, #0
 8008b50:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b52:	e7d8      	b.n	8008b06 <_printf_float+0x17a>
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d103      	bne.n	8008b60 <_printf_float+0x1d4>
 8008b58:	2201      	movs	r2, #1
 8008b5a:	6821      	ldr	r1, [r4, #0]
 8008b5c:	4211      	tst	r1, r2
 8008b5e:	d000      	beq.n	8008b62 <_printf_float+0x1d6>
 8008b60:	1c9a      	adds	r2, r3, #2
 8008b62:	6122      	str	r2, [r4, #16]
 8008b64:	e7f1      	b.n	8008b4a <_printf_float+0x1be>
 8008b66:	2367      	movs	r3, #103	; 0x67
 8008b68:	930a      	str	r3, [sp, #40]	; 0x28
 8008b6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	db06      	blt.n	8008b80 <_printf_float+0x1f4>
 8008b72:	6822      	ldr	r2, [r4, #0]
 8008b74:	6123      	str	r3, [r4, #16]
 8008b76:	07d2      	lsls	r2, r2, #31
 8008b78:	d5e7      	bpl.n	8008b4a <_printf_float+0x1be>
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	6123      	str	r3, [r4, #16]
 8008b7e:	e7e4      	b.n	8008b4a <_printf_float+0x1be>
 8008b80:	2101      	movs	r1, #1
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	dc01      	bgt.n	8008b8a <_printf_float+0x1fe>
 8008b86:	1849      	adds	r1, r1, r1
 8008b88:	1ac9      	subs	r1, r1, r3
 8008b8a:	1852      	adds	r2, r2, r1
 8008b8c:	e7e9      	b.n	8008b62 <_printf_float+0x1d6>
 8008b8e:	6822      	ldr	r2, [r4, #0]
 8008b90:	0553      	lsls	r3, r2, #21
 8008b92:	d407      	bmi.n	8008ba4 <_printf_float+0x218>
 8008b94:	6923      	ldr	r3, [r4, #16]
 8008b96:	002a      	movs	r2, r5
 8008b98:	0038      	movs	r0, r7
 8008b9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b9c:	47b0      	blx	r6
 8008b9e:	1c43      	adds	r3, r0, #1
 8008ba0:	d128      	bne.n	8008bf4 <_printf_float+0x268>
 8008ba2:	e751      	b.n	8008a48 <_printf_float+0xbc>
 8008ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba6:	2b65      	cmp	r3, #101	; 0x65
 8008ba8:	d800      	bhi.n	8008bac <_printf_float+0x220>
 8008baa:	e0e1      	b.n	8008d70 <_printf_float+0x3e4>
 8008bac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008bae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f7f7 fc4a 	bl	800044c <__aeabi_dcmpeq>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d031      	beq.n	8008c20 <_printf_float+0x294>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	0038      	movs	r0, r7
 8008bc0:	4a34      	ldr	r2, [pc, #208]	; (8008c94 <_printf_float+0x308>)
 8008bc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bc4:	47b0      	blx	r6
 8008bc6:	1c43      	adds	r3, r0, #1
 8008bc8:	d100      	bne.n	8008bcc <_printf_float+0x240>
 8008bca:	e73d      	b.n	8008a48 <_printf_float+0xbc>
 8008bcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	db02      	blt.n	8008bda <_printf_float+0x24e>
 8008bd4:	6823      	ldr	r3, [r4, #0]
 8008bd6:	07db      	lsls	r3, r3, #31
 8008bd8:	d50c      	bpl.n	8008bf4 <_printf_float+0x268>
 8008bda:	0038      	movs	r0, r7
 8008bdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008be0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008be2:	47b0      	blx	r6
 8008be4:	2500      	movs	r5, #0
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	d100      	bne.n	8008bec <_printf_float+0x260>
 8008bea:	e72d      	b.n	8008a48 <_printf_float+0xbc>
 8008bec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	42ab      	cmp	r3, r5
 8008bf2:	dc0a      	bgt.n	8008c0a <_printf_float+0x27e>
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	079b      	lsls	r3, r3, #30
 8008bf8:	d500      	bpl.n	8008bfc <_printf_float+0x270>
 8008bfa:	e106      	b.n	8008e0a <_printf_float+0x47e>
 8008bfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bfe:	68e0      	ldr	r0, [r4, #12]
 8008c00:	4298      	cmp	r0, r3
 8008c02:	db00      	blt.n	8008c06 <_printf_float+0x27a>
 8008c04:	e722      	b.n	8008a4c <_printf_float+0xc0>
 8008c06:	0018      	movs	r0, r3
 8008c08:	e720      	b.n	8008a4c <_printf_float+0xc0>
 8008c0a:	0022      	movs	r2, r4
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	0038      	movs	r0, r7
 8008c10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c12:	321a      	adds	r2, #26
 8008c14:	47b0      	blx	r6
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d100      	bne.n	8008c1c <_printf_float+0x290>
 8008c1a:	e715      	b.n	8008a48 <_printf_float+0xbc>
 8008c1c:	3501      	adds	r5, #1
 8008c1e:	e7e5      	b.n	8008bec <_printf_float+0x260>
 8008c20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	dc38      	bgt.n	8008c98 <_printf_float+0x30c>
 8008c26:	2301      	movs	r3, #1
 8008c28:	0038      	movs	r0, r7
 8008c2a:	4a1a      	ldr	r2, [pc, #104]	; (8008c94 <_printf_float+0x308>)
 8008c2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c2e:	47b0      	blx	r6
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	d100      	bne.n	8008c36 <_printf_float+0x2aa>
 8008c34:	e708      	b.n	8008a48 <_printf_float+0xbc>
 8008c36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	d102      	bne.n	8008c44 <_printf_float+0x2b8>
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	07db      	lsls	r3, r3, #31
 8008c42:	d5d7      	bpl.n	8008bf4 <_printf_float+0x268>
 8008c44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c46:	0038      	movs	r0, r7
 8008c48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c4c:	47b0      	blx	r6
 8008c4e:	1c43      	adds	r3, r0, #1
 8008c50:	d100      	bne.n	8008c54 <_printf_float+0x2c8>
 8008c52:	e6f9      	b.n	8008a48 <_printf_float+0xbc>
 8008c54:	2300      	movs	r3, #0
 8008c56:	930a      	str	r3, [sp, #40]	; 0x28
 8008c58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c5c:	425b      	negs	r3, r3
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	dc01      	bgt.n	8008c66 <_printf_float+0x2da>
 8008c62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c64:	e797      	b.n	8008b96 <_printf_float+0x20a>
 8008c66:	0022      	movs	r2, r4
 8008c68:	2301      	movs	r3, #1
 8008c6a:	0038      	movs	r0, r7
 8008c6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c6e:	321a      	adds	r2, #26
 8008c70:	47b0      	blx	r6
 8008c72:	1c43      	adds	r3, r0, #1
 8008c74:	d100      	bne.n	8008c78 <_printf_float+0x2ec>
 8008c76:	e6e7      	b.n	8008a48 <_printf_float+0xbc>
 8008c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	e7eb      	b.n	8008c56 <_printf_float+0x2ca>
 8008c7e:	46c0      	nop			; (mov r8, r8)
 8008c80:	7fefffff 	.word	0x7fefffff
 8008c84:	0800b984 	.word	0x0800b984
 8008c88:	0800b988 	.word	0x0800b988
 8008c8c:	0800b98c 	.word	0x0800b98c
 8008c90:	0800b990 	.word	0x0800b990
 8008c94:	0800b994 	.word	0x0800b994
 8008c98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c9c:	920a      	str	r2, [sp, #40]	; 0x28
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	dd00      	ble.n	8008ca4 <_printf_float+0x318>
 8008ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	dc3c      	bgt.n	8008d24 <_printf_float+0x398>
 8008caa:	2300      	movs	r3, #0
 8008cac:	930d      	str	r3, [sp, #52]	; 0x34
 8008cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cb0:	43db      	mvns	r3, r3
 8008cb2:	17db      	asrs	r3, r3, #31
 8008cb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cba:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	dc34      	bgt.n	8008d34 <_printf_float+0x3a8>
 8008cca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ccc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	db3d      	blt.n	8008d4e <_printf_float+0x3c2>
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	07db      	lsls	r3, r3, #31
 8008cd6:	d43a      	bmi.n	8008d4e <_printf_float+0x3c2>
 8008cd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cdc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	1a52      	subs	r2, r2, r1
 8008ce2:	920a      	str	r2, [sp, #40]	; 0x28
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	dd00      	ble.n	8008cea <_printf_float+0x35e>
 8008ce8:	930a      	str	r3, [sp, #40]	; 0x28
 8008cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dc36      	bgt.n	8008d5e <_printf_float+0x3d2>
 8008cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf2:	2500      	movs	r5, #0
 8008cf4:	43db      	mvns	r3, r3
 8008cf6:	17db      	asrs	r3, r3, #31
 8008cf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008cfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d00:	1a9b      	subs	r3, r3, r2
 8008d02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d04:	400a      	ands	r2, r1
 8008d06:	1a9b      	subs	r3, r3, r2
 8008d08:	42ab      	cmp	r3, r5
 8008d0a:	dc00      	bgt.n	8008d0e <_printf_float+0x382>
 8008d0c:	e772      	b.n	8008bf4 <_printf_float+0x268>
 8008d0e:	0022      	movs	r2, r4
 8008d10:	2301      	movs	r3, #1
 8008d12:	0038      	movs	r0, r7
 8008d14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d16:	321a      	adds	r2, #26
 8008d18:	47b0      	blx	r6
 8008d1a:	1c43      	adds	r3, r0, #1
 8008d1c:	d100      	bne.n	8008d20 <_printf_float+0x394>
 8008d1e:	e693      	b.n	8008a48 <_printf_float+0xbc>
 8008d20:	3501      	adds	r5, #1
 8008d22:	e7ea      	b.n	8008cfa <_printf_float+0x36e>
 8008d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d26:	002a      	movs	r2, r5
 8008d28:	0038      	movs	r0, r7
 8008d2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d2c:	47b0      	blx	r6
 8008d2e:	1c43      	adds	r3, r0, #1
 8008d30:	d1bb      	bne.n	8008caa <_printf_float+0x31e>
 8008d32:	e689      	b.n	8008a48 <_printf_float+0xbc>
 8008d34:	0022      	movs	r2, r4
 8008d36:	2301      	movs	r3, #1
 8008d38:	0038      	movs	r0, r7
 8008d3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d3c:	321a      	adds	r2, #26
 8008d3e:	47b0      	blx	r6
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	d100      	bne.n	8008d46 <_printf_float+0x3ba>
 8008d44:	e680      	b.n	8008a48 <_printf_float+0xbc>
 8008d46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d48:	3301      	adds	r3, #1
 8008d4a:	930d      	str	r3, [sp, #52]	; 0x34
 8008d4c:	e7b3      	b.n	8008cb6 <_printf_float+0x32a>
 8008d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d50:	0038      	movs	r0, r7
 8008d52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d56:	47b0      	blx	r6
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d1bd      	bne.n	8008cd8 <_printf_float+0x34c>
 8008d5c:	e674      	b.n	8008a48 <_printf_float+0xbc>
 8008d5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d60:	0038      	movs	r0, r7
 8008d62:	18ea      	adds	r2, r5, r3
 8008d64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d68:	47b0      	blx	r6
 8008d6a:	1c43      	adds	r3, r0, #1
 8008d6c:	d1c0      	bne.n	8008cf0 <_printf_float+0x364>
 8008d6e:	e66b      	b.n	8008a48 <_printf_float+0xbc>
 8008d70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	dc02      	bgt.n	8008d7c <_printf_float+0x3f0>
 8008d76:	2301      	movs	r3, #1
 8008d78:	421a      	tst	r2, r3
 8008d7a:	d034      	beq.n	8008de6 <_printf_float+0x45a>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	002a      	movs	r2, r5
 8008d80:	0038      	movs	r0, r7
 8008d82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d84:	47b0      	blx	r6
 8008d86:	1c43      	adds	r3, r0, #1
 8008d88:	d100      	bne.n	8008d8c <_printf_float+0x400>
 8008d8a:	e65d      	b.n	8008a48 <_printf_float+0xbc>
 8008d8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d8e:	0038      	movs	r0, r7
 8008d90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d94:	47b0      	blx	r6
 8008d96:	1c43      	adds	r3, r0, #1
 8008d98:	d100      	bne.n	8008d9c <_printf_float+0x410>
 8008d9a:	e655      	b.n	8008a48 <_printf_float+0xbc>
 8008d9c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008d9e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008da0:	2200      	movs	r2, #0
 8008da2:	2300      	movs	r3, #0
 8008da4:	f7f7 fb52 	bl	800044c <__aeabi_dcmpeq>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d11a      	bne.n	8008de2 <_printf_float+0x456>
 8008dac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dae:	1c6a      	adds	r2, r5, #1
 8008db0:	3b01      	subs	r3, #1
 8008db2:	0038      	movs	r0, r7
 8008db4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008db6:	47b0      	blx	r6
 8008db8:	1c43      	adds	r3, r0, #1
 8008dba:	d10e      	bne.n	8008dda <_printf_float+0x44e>
 8008dbc:	e644      	b.n	8008a48 <_printf_float+0xbc>
 8008dbe:	0022      	movs	r2, r4
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	0038      	movs	r0, r7
 8008dc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dc6:	321a      	adds	r2, #26
 8008dc8:	47b0      	blx	r6
 8008dca:	1c43      	adds	r3, r0, #1
 8008dcc:	d100      	bne.n	8008dd0 <_printf_float+0x444>
 8008dce:	e63b      	b.n	8008a48 <_printf_float+0xbc>
 8008dd0:	3501      	adds	r5, #1
 8008dd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	42ab      	cmp	r3, r5
 8008dd8:	dcf1      	bgt.n	8008dbe <_printf_float+0x432>
 8008dda:	0022      	movs	r2, r4
 8008ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dde:	3250      	adds	r2, #80	; 0x50
 8008de0:	e6da      	b.n	8008b98 <_printf_float+0x20c>
 8008de2:	2500      	movs	r5, #0
 8008de4:	e7f5      	b.n	8008dd2 <_printf_float+0x446>
 8008de6:	002a      	movs	r2, r5
 8008de8:	e7e3      	b.n	8008db2 <_printf_float+0x426>
 8008dea:	0022      	movs	r2, r4
 8008dec:	2301      	movs	r3, #1
 8008dee:	0038      	movs	r0, r7
 8008df0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008df2:	3219      	adds	r2, #25
 8008df4:	47b0      	blx	r6
 8008df6:	1c43      	adds	r3, r0, #1
 8008df8:	d100      	bne.n	8008dfc <_printf_float+0x470>
 8008dfa:	e625      	b.n	8008a48 <_printf_float+0xbc>
 8008dfc:	3501      	adds	r5, #1
 8008dfe:	68e3      	ldr	r3, [r4, #12]
 8008e00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	42ab      	cmp	r3, r5
 8008e06:	dcf0      	bgt.n	8008dea <_printf_float+0x45e>
 8008e08:	e6f8      	b.n	8008bfc <_printf_float+0x270>
 8008e0a:	2500      	movs	r5, #0
 8008e0c:	e7f7      	b.n	8008dfe <_printf_float+0x472>
 8008e0e:	46c0      	nop			; (mov r8, r8)

08008e10 <_printf_common>:
 8008e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e12:	0015      	movs	r5, r2
 8008e14:	9301      	str	r3, [sp, #4]
 8008e16:	688a      	ldr	r2, [r1, #8]
 8008e18:	690b      	ldr	r3, [r1, #16]
 8008e1a:	000c      	movs	r4, r1
 8008e1c:	9000      	str	r0, [sp, #0]
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	da00      	bge.n	8008e24 <_printf_common+0x14>
 8008e22:	0013      	movs	r3, r2
 8008e24:	0022      	movs	r2, r4
 8008e26:	602b      	str	r3, [r5, #0]
 8008e28:	3243      	adds	r2, #67	; 0x43
 8008e2a:	7812      	ldrb	r2, [r2, #0]
 8008e2c:	2a00      	cmp	r2, #0
 8008e2e:	d001      	beq.n	8008e34 <_printf_common+0x24>
 8008e30:	3301      	adds	r3, #1
 8008e32:	602b      	str	r3, [r5, #0]
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	069b      	lsls	r3, r3, #26
 8008e38:	d502      	bpl.n	8008e40 <_printf_common+0x30>
 8008e3a:	682b      	ldr	r3, [r5, #0]
 8008e3c:	3302      	adds	r3, #2
 8008e3e:	602b      	str	r3, [r5, #0]
 8008e40:	6822      	ldr	r2, [r4, #0]
 8008e42:	2306      	movs	r3, #6
 8008e44:	0017      	movs	r7, r2
 8008e46:	401f      	ands	r7, r3
 8008e48:	421a      	tst	r2, r3
 8008e4a:	d027      	beq.n	8008e9c <_printf_common+0x8c>
 8008e4c:	0023      	movs	r3, r4
 8008e4e:	3343      	adds	r3, #67	; 0x43
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	1e5a      	subs	r2, r3, #1
 8008e54:	4193      	sbcs	r3, r2
 8008e56:	6822      	ldr	r2, [r4, #0]
 8008e58:	0692      	lsls	r2, r2, #26
 8008e5a:	d430      	bmi.n	8008ebe <_printf_common+0xae>
 8008e5c:	0022      	movs	r2, r4
 8008e5e:	9901      	ldr	r1, [sp, #4]
 8008e60:	9800      	ldr	r0, [sp, #0]
 8008e62:	9e08      	ldr	r6, [sp, #32]
 8008e64:	3243      	adds	r2, #67	; 0x43
 8008e66:	47b0      	blx	r6
 8008e68:	1c43      	adds	r3, r0, #1
 8008e6a:	d025      	beq.n	8008eb8 <_printf_common+0xa8>
 8008e6c:	2306      	movs	r3, #6
 8008e6e:	6820      	ldr	r0, [r4, #0]
 8008e70:	682a      	ldr	r2, [r5, #0]
 8008e72:	68e1      	ldr	r1, [r4, #12]
 8008e74:	2500      	movs	r5, #0
 8008e76:	4003      	ands	r3, r0
 8008e78:	2b04      	cmp	r3, #4
 8008e7a:	d103      	bne.n	8008e84 <_printf_common+0x74>
 8008e7c:	1a8d      	subs	r5, r1, r2
 8008e7e:	43eb      	mvns	r3, r5
 8008e80:	17db      	asrs	r3, r3, #31
 8008e82:	401d      	ands	r5, r3
 8008e84:	68a3      	ldr	r3, [r4, #8]
 8008e86:	6922      	ldr	r2, [r4, #16]
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	dd01      	ble.n	8008e90 <_printf_common+0x80>
 8008e8c:	1a9b      	subs	r3, r3, r2
 8008e8e:	18ed      	adds	r5, r5, r3
 8008e90:	2700      	movs	r7, #0
 8008e92:	42bd      	cmp	r5, r7
 8008e94:	d120      	bne.n	8008ed8 <_printf_common+0xc8>
 8008e96:	2000      	movs	r0, #0
 8008e98:	e010      	b.n	8008ebc <_printf_common+0xac>
 8008e9a:	3701      	adds	r7, #1
 8008e9c:	68e3      	ldr	r3, [r4, #12]
 8008e9e:	682a      	ldr	r2, [r5, #0]
 8008ea0:	1a9b      	subs	r3, r3, r2
 8008ea2:	42bb      	cmp	r3, r7
 8008ea4:	ddd2      	ble.n	8008e4c <_printf_common+0x3c>
 8008ea6:	0022      	movs	r2, r4
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	9901      	ldr	r1, [sp, #4]
 8008eac:	9800      	ldr	r0, [sp, #0]
 8008eae:	9e08      	ldr	r6, [sp, #32]
 8008eb0:	3219      	adds	r2, #25
 8008eb2:	47b0      	blx	r6
 8008eb4:	1c43      	adds	r3, r0, #1
 8008eb6:	d1f0      	bne.n	8008e9a <_printf_common+0x8a>
 8008eb8:	2001      	movs	r0, #1
 8008eba:	4240      	negs	r0, r0
 8008ebc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ebe:	2030      	movs	r0, #48	; 0x30
 8008ec0:	18e1      	adds	r1, r4, r3
 8008ec2:	3143      	adds	r1, #67	; 0x43
 8008ec4:	7008      	strb	r0, [r1, #0]
 8008ec6:	0021      	movs	r1, r4
 8008ec8:	1c5a      	adds	r2, r3, #1
 8008eca:	3145      	adds	r1, #69	; 0x45
 8008ecc:	7809      	ldrb	r1, [r1, #0]
 8008ece:	18a2      	adds	r2, r4, r2
 8008ed0:	3243      	adds	r2, #67	; 0x43
 8008ed2:	3302      	adds	r3, #2
 8008ed4:	7011      	strb	r1, [r2, #0]
 8008ed6:	e7c1      	b.n	8008e5c <_printf_common+0x4c>
 8008ed8:	0022      	movs	r2, r4
 8008eda:	2301      	movs	r3, #1
 8008edc:	9901      	ldr	r1, [sp, #4]
 8008ede:	9800      	ldr	r0, [sp, #0]
 8008ee0:	9e08      	ldr	r6, [sp, #32]
 8008ee2:	321a      	adds	r2, #26
 8008ee4:	47b0      	blx	r6
 8008ee6:	1c43      	adds	r3, r0, #1
 8008ee8:	d0e6      	beq.n	8008eb8 <_printf_common+0xa8>
 8008eea:	3701      	adds	r7, #1
 8008eec:	e7d1      	b.n	8008e92 <_printf_common+0x82>
	...

08008ef0 <_printf_i>:
 8008ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ef2:	b08b      	sub	sp, #44	; 0x2c
 8008ef4:	9206      	str	r2, [sp, #24]
 8008ef6:	000a      	movs	r2, r1
 8008ef8:	3243      	adds	r2, #67	; 0x43
 8008efa:	9307      	str	r3, [sp, #28]
 8008efc:	9005      	str	r0, [sp, #20]
 8008efe:	9204      	str	r2, [sp, #16]
 8008f00:	7e0a      	ldrb	r2, [r1, #24]
 8008f02:	000c      	movs	r4, r1
 8008f04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f06:	2a78      	cmp	r2, #120	; 0x78
 8008f08:	d807      	bhi.n	8008f1a <_printf_i+0x2a>
 8008f0a:	2a62      	cmp	r2, #98	; 0x62
 8008f0c:	d809      	bhi.n	8008f22 <_printf_i+0x32>
 8008f0e:	2a00      	cmp	r2, #0
 8008f10:	d100      	bne.n	8008f14 <_printf_i+0x24>
 8008f12:	e0c1      	b.n	8009098 <_printf_i+0x1a8>
 8008f14:	2a58      	cmp	r2, #88	; 0x58
 8008f16:	d100      	bne.n	8008f1a <_printf_i+0x2a>
 8008f18:	e08c      	b.n	8009034 <_printf_i+0x144>
 8008f1a:	0026      	movs	r6, r4
 8008f1c:	3642      	adds	r6, #66	; 0x42
 8008f1e:	7032      	strb	r2, [r6, #0]
 8008f20:	e022      	b.n	8008f68 <_printf_i+0x78>
 8008f22:	0010      	movs	r0, r2
 8008f24:	3863      	subs	r0, #99	; 0x63
 8008f26:	2815      	cmp	r0, #21
 8008f28:	d8f7      	bhi.n	8008f1a <_printf_i+0x2a>
 8008f2a:	f7f7 f8ff 	bl	800012c <__gnu_thumb1_case_shi>
 8008f2e:	0016      	.short	0x0016
 8008f30:	fff6001f 	.word	0xfff6001f
 8008f34:	fff6fff6 	.word	0xfff6fff6
 8008f38:	001ffff6 	.word	0x001ffff6
 8008f3c:	fff6fff6 	.word	0xfff6fff6
 8008f40:	fff6fff6 	.word	0xfff6fff6
 8008f44:	003600a8 	.word	0x003600a8
 8008f48:	fff6009a 	.word	0xfff6009a
 8008f4c:	00b9fff6 	.word	0x00b9fff6
 8008f50:	0036fff6 	.word	0x0036fff6
 8008f54:	fff6fff6 	.word	0xfff6fff6
 8008f58:	009e      	.short	0x009e
 8008f5a:	0026      	movs	r6, r4
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	3642      	adds	r6, #66	; 0x42
 8008f60:	1d11      	adds	r1, r2, #4
 8008f62:	6019      	str	r1, [r3, #0]
 8008f64:	6813      	ldr	r3, [r2, #0]
 8008f66:	7033      	strb	r3, [r6, #0]
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e0a7      	b.n	80090bc <_printf_i+0x1cc>
 8008f6c:	6808      	ldr	r0, [r1, #0]
 8008f6e:	6819      	ldr	r1, [r3, #0]
 8008f70:	1d0a      	adds	r2, r1, #4
 8008f72:	0605      	lsls	r5, r0, #24
 8008f74:	d50b      	bpl.n	8008f8e <_printf_i+0x9e>
 8008f76:	680d      	ldr	r5, [r1, #0]
 8008f78:	601a      	str	r2, [r3, #0]
 8008f7a:	2d00      	cmp	r5, #0
 8008f7c:	da03      	bge.n	8008f86 <_printf_i+0x96>
 8008f7e:	232d      	movs	r3, #45	; 0x2d
 8008f80:	9a04      	ldr	r2, [sp, #16]
 8008f82:	426d      	negs	r5, r5
 8008f84:	7013      	strb	r3, [r2, #0]
 8008f86:	4b61      	ldr	r3, [pc, #388]	; (800910c <_printf_i+0x21c>)
 8008f88:	270a      	movs	r7, #10
 8008f8a:	9303      	str	r3, [sp, #12]
 8008f8c:	e01b      	b.n	8008fc6 <_printf_i+0xd6>
 8008f8e:	680d      	ldr	r5, [r1, #0]
 8008f90:	601a      	str	r2, [r3, #0]
 8008f92:	0641      	lsls	r1, r0, #25
 8008f94:	d5f1      	bpl.n	8008f7a <_printf_i+0x8a>
 8008f96:	b22d      	sxth	r5, r5
 8008f98:	e7ef      	b.n	8008f7a <_printf_i+0x8a>
 8008f9a:	680d      	ldr	r5, [r1, #0]
 8008f9c:	6819      	ldr	r1, [r3, #0]
 8008f9e:	1d08      	adds	r0, r1, #4
 8008fa0:	6018      	str	r0, [r3, #0]
 8008fa2:	062e      	lsls	r6, r5, #24
 8008fa4:	d501      	bpl.n	8008faa <_printf_i+0xba>
 8008fa6:	680d      	ldr	r5, [r1, #0]
 8008fa8:	e003      	b.n	8008fb2 <_printf_i+0xc2>
 8008faa:	066d      	lsls	r5, r5, #25
 8008fac:	d5fb      	bpl.n	8008fa6 <_printf_i+0xb6>
 8008fae:	680d      	ldr	r5, [r1, #0]
 8008fb0:	b2ad      	uxth	r5, r5
 8008fb2:	4b56      	ldr	r3, [pc, #344]	; (800910c <_printf_i+0x21c>)
 8008fb4:	2708      	movs	r7, #8
 8008fb6:	9303      	str	r3, [sp, #12]
 8008fb8:	2a6f      	cmp	r2, #111	; 0x6f
 8008fba:	d000      	beq.n	8008fbe <_printf_i+0xce>
 8008fbc:	3702      	adds	r7, #2
 8008fbe:	0023      	movs	r3, r4
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	3343      	adds	r3, #67	; 0x43
 8008fc4:	701a      	strb	r2, [r3, #0]
 8008fc6:	6863      	ldr	r3, [r4, #4]
 8008fc8:	60a3      	str	r3, [r4, #8]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	db03      	blt.n	8008fd6 <_printf_i+0xe6>
 8008fce:	2204      	movs	r2, #4
 8008fd0:	6821      	ldr	r1, [r4, #0]
 8008fd2:	4391      	bics	r1, r2
 8008fd4:	6021      	str	r1, [r4, #0]
 8008fd6:	2d00      	cmp	r5, #0
 8008fd8:	d102      	bne.n	8008fe0 <_printf_i+0xf0>
 8008fda:	9e04      	ldr	r6, [sp, #16]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00c      	beq.n	8008ffa <_printf_i+0x10a>
 8008fe0:	9e04      	ldr	r6, [sp, #16]
 8008fe2:	0028      	movs	r0, r5
 8008fe4:	0039      	movs	r1, r7
 8008fe6:	f7f7 f931 	bl	800024c <__aeabi_uidivmod>
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	3e01      	subs	r6, #1
 8008fee:	5c5b      	ldrb	r3, [r3, r1]
 8008ff0:	7033      	strb	r3, [r6, #0]
 8008ff2:	002b      	movs	r3, r5
 8008ff4:	0005      	movs	r5, r0
 8008ff6:	429f      	cmp	r7, r3
 8008ff8:	d9f3      	bls.n	8008fe2 <_printf_i+0xf2>
 8008ffa:	2f08      	cmp	r7, #8
 8008ffc:	d109      	bne.n	8009012 <_printf_i+0x122>
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	07db      	lsls	r3, r3, #31
 8009002:	d506      	bpl.n	8009012 <_printf_i+0x122>
 8009004:	6863      	ldr	r3, [r4, #4]
 8009006:	6922      	ldr	r2, [r4, #16]
 8009008:	4293      	cmp	r3, r2
 800900a:	dc02      	bgt.n	8009012 <_printf_i+0x122>
 800900c:	2330      	movs	r3, #48	; 0x30
 800900e:	3e01      	subs	r6, #1
 8009010:	7033      	strb	r3, [r6, #0]
 8009012:	9b04      	ldr	r3, [sp, #16]
 8009014:	1b9b      	subs	r3, r3, r6
 8009016:	6123      	str	r3, [r4, #16]
 8009018:	9b07      	ldr	r3, [sp, #28]
 800901a:	0021      	movs	r1, r4
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	9805      	ldr	r0, [sp, #20]
 8009020:	9b06      	ldr	r3, [sp, #24]
 8009022:	aa09      	add	r2, sp, #36	; 0x24
 8009024:	f7ff fef4 	bl	8008e10 <_printf_common>
 8009028:	1c43      	adds	r3, r0, #1
 800902a:	d14c      	bne.n	80090c6 <_printf_i+0x1d6>
 800902c:	2001      	movs	r0, #1
 800902e:	4240      	negs	r0, r0
 8009030:	b00b      	add	sp, #44	; 0x2c
 8009032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009034:	3145      	adds	r1, #69	; 0x45
 8009036:	700a      	strb	r2, [r1, #0]
 8009038:	4a34      	ldr	r2, [pc, #208]	; (800910c <_printf_i+0x21c>)
 800903a:	9203      	str	r2, [sp, #12]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	6821      	ldr	r1, [r4, #0]
 8009040:	ca20      	ldmia	r2!, {r5}
 8009042:	601a      	str	r2, [r3, #0]
 8009044:	0608      	lsls	r0, r1, #24
 8009046:	d516      	bpl.n	8009076 <_printf_i+0x186>
 8009048:	07cb      	lsls	r3, r1, #31
 800904a:	d502      	bpl.n	8009052 <_printf_i+0x162>
 800904c:	2320      	movs	r3, #32
 800904e:	4319      	orrs	r1, r3
 8009050:	6021      	str	r1, [r4, #0]
 8009052:	2710      	movs	r7, #16
 8009054:	2d00      	cmp	r5, #0
 8009056:	d1b2      	bne.n	8008fbe <_printf_i+0xce>
 8009058:	2320      	movs	r3, #32
 800905a:	6822      	ldr	r2, [r4, #0]
 800905c:	439a      	bics	r2, r3
 800905e:	6022      	str	r2, [r4, #0]
 8009060:	e7ad      	b.n	8008fbe <_printf_i+0xce>
 8009062:	2220      	movs	r2, #32
 8009064:	6809      	ldr	r1, [r1, #0]
 8009066:	430a      	orrs	r2, r1
 8009068:	6022      	str	r2, [r4, #0]
 800906a:	0022      	movs	r2, r4
 800906c:	2178      	movs	r1, #120	; 0x78
 800906e:	3245      	adds	r2, #69	; 0x45
 8009070:	7011      	strb	r1, [r2, #0]
 8009072:	4a27      	ldr	r2, [pc, #156]	; (8009110 <_printf_i+0x220>)
 8009074:	e7e1      	b.n	800903a <_printf_i+0x14a>
 8009076:	0648      	lsls	r0, r1, #25
 8009078:	d5e6      	bpl.n	8009048 <_printf_i+0x158>
 800907a:	b2ad      	uxth	r5, r5
 800907c:	e7e4      	b.n	8009048 <_printf_i+0x158>
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	680d      	ldr	r5, [r1, #0]
 8009082:	1d10      	adds	r0, r2, #4
 8009084:	6949      	ldr	r1, [r1, #20]
 8009086:	6018      	str	r0, [r3, #0]
 8009088:	6813      	ldr	r3, [r2, #0]
 800908a:	062e      	lsls	r6, r5, #24
 800908c:	d501      	bpl.n	8009092 <_printf_i+0x1a2>
 800908e:	6019      	str	r1, [r3, #0]
 8009090:	e002      	b.n	8009098 <_printf_i+0x1a8>
 8009092:	066d      	lsls	r5, r5, #25
 8009094:	d5fb      	bpl.n	800908e <_printf_i+0x19e>
 8009096:	8019      	strh	r1, [r3, #0]
 8009098:	2300      	movs	r3, #0
 800909a:	9e04      	ldr	r6, [sp, #16]
 800909c:	6123      	str	r3, [r4, #16]
 800909e:	e7bb      	b.n	8009018 <_printf_i+0x128>
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	1d11      	adds	r1, r2, #4
 80090a4:	6019      	str	r1, [r3, #0]
 80090a6:	6816      	ldr	r6, [r2, #0]
 80090a8:	2100      	movs	r1, #0
 80090aa:	0030      	movs	r0, r6
 80090ac:	6862      	ldr	r2, [r4, #4]
 80090ae:	f000 ff19 	bl	8009ee4 <memchr>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d001      	beq.n	80090ba <_printf_i+0x1ca>
 80090b6:	1b80      	subs	r0, r0, r6
 80090b8:	6060      	str	r0, [r4, #4]
 80090ba:	6863      	ldr	r3, [r4, #4]
 80090bc:	6123      	str	r3, [r4, #16]
 80090be:	2300      	movs	r3, #0
 80090c0:	9a04      	ldr	r2, [sp, #16]
 80090c2:	7013      	strb	r3, [r2, #0]
 80090c4:	e7a8      	b.n	8009018 <_printf_i+0x128>
 80090c6:	6923      	ldr	r3, [r4, #16]
 80090c8:	0032      	movs	r2, r6
 80090ca:	9906      	ldr	r1, [sp, #24]
 80090cc:	9805      	ldr	r0, [sp, #20]
 80090ce:	9d07      	ldr	r5, [sp, #28]
 80090d0:	47a8      	blx	r5
 80090d2:	1c43      	adds	r3, r0, #1
 80090d4:	d0aa      	beq.n	800902c <_printf_i+0x13c>
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	079b      	lsls	r3, r3, #30
 80090da:	d415      	bmi.n	8009108 <_printf_i+0x218>
 80090dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090de:	68e0      	ldr	r0, [r4, #12]
 80090e0:	4298      	cmp	r0, r3
 80090e2:	daa5      	bge.n	8009030 <_printf_i+0x140>
 80090e4:	0018      	movs	r0, r3
 80090e6:	e7a3      	b.n	8009030 <_printf_i+0x140>
 80090e8:	0022      	movs	r2, r4
 80090ea:	2301      	movs	r3, #1
 80090ec:	9906      	ldr	r1, [sp, #24]
 80090ee:	9805      	ldr	r0, [sp, #20]
 80090f0:	9e07      	ldr	r6, [sp, #28]
 80090f2:	3219      	adds	r2, #25
 80090f4:	47b0      	blx	r6
 80090f6:	1c43      	adds	r3, r0, #1
 80090f8:	d098      	beq.n	800902c <_printf_i+0x13c>
 80090fa:	3501      	adds	r5, #1
 80090fc:	68e3      	ldr	r3, [r4, #12]
 80090fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009100:	1a9b      	subs	r3, r3, r2
 8009102:	42ab      	cmp	r3, r5
 8009104:	dcf0      	bgt.n	80090e8 <_printf_i+0x1f8>
 8009106:	e7e9      	b.n	80090dc <_printf_i+0x1ec>
 8009108:	2500      	movs	r5, #0
 800910a:	e7f7      	b.n	80090fc <_printf_i+0x20c>
 800910c:	0800b996 	.word	0x0800b996
 8009110:	0800b9a7 	.word	0x0800b9a7

08009114 <siprintf>:
 8009114:	b40e      	push	{r1, r2, r3}
 8009116:	b500      	push	{lr}
 8009118:	490b      	ldr	r1, [pc, #44]	; (8009148 <siprintf+0x34>)
 800911a:	b09c      	sub	sp, #112	; 0x70
 800911c:	ab1d      	add	r3, sp, #116	; 0x74
 800911e:	9002      	str	r0, [sp, #8]
 8009120:	9006      	str	r0, [sp, #24]
 8009122:	9107      	str	r1, [sp, #28]
 8009124:	9104      	str	r1, [sp, #16]
 8009126:	4809      	ldr	r0, [pc, #36]	; (800914c <siprintf+0x38>)
 8009128:	4909      	ldr	r1, [pc, #36]	; (8009150 <siprintf+0x3c>)
 800912a:	cb04      	ldmia	r3!, {r2}
 800912c:	9105      	str	r1, [sp, #20]
 800912e:	6800      	ldr	r0, [r0, #0]
 8009130:	a902      	add	r1, sp, #8
 8009132:	9301      	str	r3, [sp, #4]
 8009134:	f001 fbee 	bl	800a914 <_svfiprintf_r>
 8009138:	2300      	movs	r3, #0
 800913a:	9a02      	ldr	r2, [sp, #8]
 800913c:	7013      	strb	r3, [r2, #0]
 800913e:	b01c      	add	sp, #112	; 0x70
 8009140:	bc08      	pop	{r3}
 8009142:	b003      	add	sp, #12
 8009144:	4718      	bx	r3
 8009146:	46c0      	nop			; (mov r8, r8)
 8009148:	7fffffff 	.word	0x7fffffff
 800914c:	20000010 	.word	0x20000010
 8009150:	ffff0208 	.word	0xffff0208

08009154 <strncat>:
 8009154:	0003      	movs	r3, r0
 8009156:	b510      	push	{r4, lr}
 8009158:	781c      	ldrb	r4, [r3, #0]
 800915a:	2c00      	cmp	r4, #0
 800915c:	d107      	bne.n	800916e <strncat+0x1a>
 800915e:	3a01      	subs	r2, #1
 8009160:	1c54      	adds	r4, r2, #1
 8009162:	d003      	beq.n	800916c <strncat+0x18>
 8009164:	780c      	ldrb	r4, [r1, #0]
 8009166:	701c      	strb	r4, [r3, #0]
 8009168:	2c00      	cmp	r4, #0
 800916a:	d102      	bne.n	8009172 <strncat+0x1e>
 800916c:	bd10      	pop	{r4, pc}
 800916e:	3301      	adds	r3, #1
 8009170:	e7f2      	b.n	8009158 <strncat+0x4>
 8009172:	2a00      	cmp	r2, #0
 8009174:	d100      	bne.n	8009178 <strncat+0x24>
 8009176:	705a      	strb	r2, [r3, #1]
 8009178:	3301      	adds	r3, #1
 800917a:	3101      	adds	r1, #1
 800917c:	e7ef      	b.n	800915e <strncat+0xa>

0800917e <quorem>:
 800917e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009180:	0006      	movs	r6, r0
 8009182:	690b      	ldr	r3, [r1, #16]
 8009184:	6932      	ldr	r2, [r6, #16]
 8009186:	b087      	sub	sp, #28
 8009188:	2000      	movs	r0, #0
 800918a:	9103      	str	r1, [sp, #12]
 800918c:	429a      	cmp	r2, r3
 800918e:	db65      	blt.n	800925c <quorem+0xde>
 8009190:	3b01      	subs	r3, #1
 8009192:	009c      	lsls	r4, r3, #2
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	000b      	movs	r3, r1
 8009198:	3314      	adds	r3, #20
 800919a:	9305      	str	r3, [sp, #20]
 800919c:	191b      	adds	r3, r3, r4
 800919e:	9304      	str	r3, [sp, #16]
 80091a0:	0033      	movs	r3, r6
 80091a2:	3314      	adds	r3, #20
 80091a4:	9302      	str	r3, [sp, #8]
 80091a6:	191c      	adds	r4, r3, r4
 80091a8:	9b04      	ldr	r3, [sp, #16]
 80091aa:	6827      	ldr	r7, [r4, #0]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	0038      	movs	r0, r7
 80091b0:	1c5d      	adds	r5, r3, #1
 80091b2:	0029      	movs	r1, r5
 80091b4:	9301      	str	r3, [sp, #4]
 80091b6:	f7f6 ffc3 	bl	8000140 <__udivsi3>
 80091ba:	9001      	str	r0, [sp, #4]
 80091bc:	42af      	cmp	r7, r5
 80091be:	d324      	bcc.n	800920a <quorem+0x8c>
 80091c0:	2500      	movs	r5, #0
 80091c2:	46ac      	mov	ip, r5
 80091c4:	9802      	ldr	r0, [sp, #8]
 80091c6:	9f05      	ldr	r7, [sp, #20]
 80091c8:	cf08      	ldmia	r7!, {r3}
 80091ca:	9a01      	ldr	r2, [sp, #4]
 80091cc:	b299      	uxth	r1, r3
 80091ce:	4351      	muls	r1, r2
 80091d0:	0c1b      	lsrs	r3, r3, #16
 80091d2:	4353      	muls	r3, r2
 80091d4:	1949      	adds	r1, r1, r5
 80091d6:	0c0a      	lsrs	r2, r1, #16
 80091d8:	189b      	adds	r3, r3, r2
 80091da:	6802      	ldr	r2, [r0, #0]
 80091dc:	b289      	uxth	r1, r1
 80091de:	b292      	uxth	r2, r2
 80091e0:	4462      	add	r2, ip
 80091e2:	1a52      	subs	r2, r2, r1
 80091e4:	6801      	ldr	r1, [r0, #0]
 80091e6:	0c1d      	lsrs	r5, r3, #16
 80091e8:	0c09      	lsrs	r1, r1, #16
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	1acb      	subs	r3, r1, r3
 80091ee:	1411      	asrs	r1, r2, #16
 80091f0:	185b      	adds	r3, r3, r1
 80091f2:	1419      	asrs	r1, r3, #16
 80091f4:	b292      	uxth	r2, r2
 80091f6:	041b      	lsls	r3, r3, #16
 80091f8:	431a      	orrs	r2, r3
 80091fa:	9b04      	ldr	r3, [sp, #16]
 80091fc:	468c      	mov	ip, r1
 80091fe:	c004      	stmia	r0!, {r2}
 8009200:	42bb      	cmp	r3, r7
 8009202:	d2e1      	bcs.n	80091c8 <quorem+0x4a>
 8009204:	6823      	ldr	r3, [r4, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d030      	beq.n	800926c <quorem+0xee>
 800920a:	0030      	movs	r0, r6
 800920c:	9903      	ldr	r1, [sp, #12]
 800920e:	f001 f8f9 	bl	800a404 <__mcmp>
 8009212:	2800      	cmp	r0, #0
 8009214:	db21      	blt.n	800925a <quorem+0xdc>
 8009216:	0030      	movs	r0, r6
 8009218:	2400      	movs	r4, #0
 800921a:	9b01      	ldr	r3, [sp, #4]
 800921c:	9903      	ldr	r1, [sp, #12]
 800921e:	3301      	adds	r3, #1
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	3014      	adds	r0, #20
 8009224:	3114      	adds	r1, #20
 8009226:	6803      	ldr	r3, [r0, #0]
 8009228:	c920      	ldmia	r1!, {r5}
 800922a:	b29a      	uxth	r2, r3
 800922c:	1914      	adds	r4, r2, r4
 800922e:	b2aa      	uxth	r2, r5
 8009230:	1aa2      	subs	r2, r4, r2
 8009232:	0c1b      	lsrs	r3, r3, #16
 8009234:	0c2d      	lsrs	r5, r5, #16
 8009236:	1414      	asrs	r4, r2, #16
 8009238:	1b5b      	subs	r3, r3, r5
 800923a:	191b      	adds	r3, r3, r4
 800923c:	141c      	asrs	r4, r3, #16
 800923e:	b292      	uxth	r2, r2
 8009240:	041b      	lsls	r3, r3, #16
 8009242:	4313      	orrs	r3, r2
 8009244:	c008      	stmia	r0!, {r3}
 8009246:	9b04      	ldr	r3, [sp, #16]
 8009248:	428b      	cmp	r3, r1
 800924a:	d2ec      	bcs.n	8009226 <quorem+0xa8>
 800924c:	9b00      	ldr	r3, [sp, #0]
 800924e:	9a02      	ldr	r2, [sp, #8]
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	18d3      	adds	r3, r2, r3
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	2a00      	cmp	r2, #0
 8009258:	d015      	beq.n	8009286 <quorem+0x108>
 800925a:	9801      	ldr	r0, [sp, #4]
 800925c:	b007      	add	sp, #28
 800925e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d106      	bne.n	8009274 <quorem+0xf6>
 8009266:	9b00      	ldr	r3, [sp, #0]
 8009268:	3b01      	subs	r3, #1
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	9b02      	ldr	r3, [sp, #8]
 800926e:	3c04      	subs	r4, #4
 8009270:	42a3      	cmp	r3, r4
 8009272:	d3f5      	bcc.n	8009260 <quorem+0xe2>
 8009274:	9b00      	ldr	r3, [sp, #0]
 8009276:	6133      	str	r3, [r6, #16]
 8009278:	e7c7      	b.n	800920a <quorem+0x8c>
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	2a00      	cmp	r2, #0
 800927e:	d106      	bne.n	800928e <quorem+0x110>
 8009280:	9a00      	ldr	r2, [sp, #0]
 8009282:	3a01      	subs	r2, #1
 8009284:	9200      	str	r2, [sp, #0]
 8009286:	9a02      	ldr	r2, [sp, #8]
 8009288:	3b04      	subs	r3, #4
 800928a:	429a      	cmp	r2, r3
 800928c:	d3f5      	bcc.n	800927a <quorem+0xfc>
 800928e:	9b00      	ldr	r3, [sp, #0]
 8009290:	6133      	str	r3, [r6, #16]
 8009292:	e7e2      	b.n	800925a <quorem+0xdc>

08009294 <_dtoa_r>:
 8009294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009296:	b09d      	sub	sp, #116	; 0x74
 8009298:	9202      	str	r2, [sp, #8]
 800929a:	9303      	str	r3, [sp, #12]
 800929c:	9b02      	ldr	r3, [sp, #8]
 800929e:	9c03      	ldr	r4, [sp, #12]
 80092a0:	9308      	str	r3, [sp, #32]
 80092a2:	9409      	str	r4, [sp, #36]	; 0x24
 80092a4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80092a6:	0007      	movs	r7, r0
 80092a8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80092aa:	2c00      	cmp	r4, #0
 80092ac:	d10e      	bne.n	80092cc <_dtoa_r+0x38>
 80092ae:	2010      	movs	r0, #16
 80092b0:	f000 fe0e 	bl	8009ed0 <malloc>
 80092b4:	1e02      	subs	r2, r0, #0
 80092b6:	6278      	str	r0, [r7, #36]	; 0x24
 80092b8:	d104      	bne.n	80092c4 <_dtoa_r+0x30>
 80092ba:	21ea      	movs	r1, #234	; 0xea
 80092bc:	4bc7      	ldr	r3, [pc, #796]	; (80095dc <_dtoa_r+0x348>)
 80092be:	48c8      	ldr	r0, [pc, #800]	; (80095e0 <_dtoa_r+0x34c>)
 80092c0:	f001 fc3a 	bl	800ab38 <__assert_func>
 80092c4:	6044      	str	r4, [r0, #4]
 80092c6:	6084      	str	r4, [r0, #8]
 80092c8:	6004      	str	r4, [r0, #0]
 80092ca:	60c4      	str	r4, [r0, #12]
 80092cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ce:	6819      	ldr	r1, [r3, #0]
 80092d0:	2900      	cmp	r1, #0
 80092d2:	d00a      	beq.n	80092ea <_dtoa_r+0x56>
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	2301      	movs	r3, #1
 80092d8:	4093      	lsls	r3, r2
 80092da:	604a      	str	r2, [r1, #4]
 80092dc:	608b      	str	r3, [r1, #8]
 80092de:	0038      	movs	r0, r7
 80092e0:	f000 fe50 	bl	8009f84 <_Bfree>
 80092e4:	2200      	movs	r2, #0
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	9b03      	ldr	r3, [sp, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	da20      	bge.n	8009332 <_dtoa_r+0x9e>
 80092f0:	2301      	movs	r3, #1
 80092f2:	602b      	str	r3, [r5, #0]
 80092f4:	9b03      	ldr	r3, [sp, #12]
 80092f6:	005b      	lsls	r3, r3, #1
 80092f8:	085b      	lsrs	r3, r3, #1
 80092fa:	9309      	str	r3, [sp, #36]	; 0x24
 80092fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80092fe:	4bb9      	ldr	r3, [pc, #740]	; (80095e4 <_dtoa_r+0x350>)
 8009300:	4ab8      	ldr	r2, [pc, #736]	; (80095e4 <_dtoa_r+0x350>)
 8009302:	402b      	ands	r3, r5
 8009304:	4293      	cmp	r3, r2
 8009306:	d117      	bne.n	8009338 <_dtoa_r+0xa4>
 8009308:	4bb7      	ldr	r3, [pc, #732]	; (80095e8 <_dtoa_r+0x354>)
 800930a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800930c:	0328      	lsls	r0, r5, #12
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	9b02      	ldr	r3, [sp, #8]
 8009312:	0b00      	lsrs	r0, r0, #12
 8009314:	4318      	orrs	r0, r3
 8009316:	d101      	bne.n	800931c <_dtoa_r+0x88>
 8009318:	f000 fdbf 	bl	8009e9a <_dtoa_r+0xc06>
 800931c:	48b3      	ldr	r0, [pc, #716]	; (80095ec <_dtoa_r+0x358>)
 800931e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009320:	9006      	str	r0, [sp, #24]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d002      	beq.n	800932c <_dtoa_r+0x98>
 8009326:	4bb2      	ldr	r3, [pc, #712]	; (80095f0 <_dtoa_r+0x35c>)
 8009328:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800932a:	6013      	str	r3, [r2, #0]
 800932c:	9806      	ldr	r0, [sp, #24]
 800932e:	b01d      	add	sp, #116	; 0x74
 8009330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009332:	2300      	movs	r3, #0
 8009334:	602b      	str	r3, [r5, #0]
 8009336:	e7e1      	b.n	80092fc <_dtoa_r+0x68>
 8009338:	9b08      	ldr	r3, [sp, #32]
 800933a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800933c:	9312      	str	r3, [sp, #72]	; 0x48
 800933e:	9413      	str	r4, [sp, #76]	; 0x4c
 8009340:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009342:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009344:	2200      	movs	r2, #0
 8009346:	2300      	movs	r3, #0
 8009348:	f7f7 f880 	bl	800044c <__aeabi_dcmpeq>
 800934c:	1e04      	subs	r4, r0, #0
 800934e:	d009      	beq.n	8009364 <_dtoa_r+0xd0>
 8009350:	2301      	movs	r3, #1
 8009352:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009354:	6013      	str	r3, [r2, #0]
 8009356:	4ba7      	ldr	r3, [pc, #668]	; (80095f4 <_dtoa_r+0x360>)
 8009358:	9306      	str	r3, [sp, #24]
 800935a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800935c:	2b00      	cmp	r3, #0
 800935e:	d0e5      	beq.n	800932c <_dtoa_r+0x98>
 8009360:	4ba5      	ldr	r3, [pc, #660]	; (80095f8 <_dtoa_r+0x364>)
 8009362:	e7e1      	b.n	8009328 <_dtoa_r+0x94>
 8009364:	ab1a      	add	r3, sp, #104	; 0x68
 8009366:	9301      	str	r3, [sp, #4]
 8009368:	ab1b      	add	r3, sp, #108	; 0x6c
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	0038      	movs	r0, r7
 800936e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009370:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009372:	f001 f8fb 	bl	800a56c <__d2b>
 8009376:	006e      	lsls	r6, r5, #1
 8009378:	9005      	str	r0, [sp, #20]
 800937a:	0d76      	lsrs	r6, r6, #21
 800937c:	d100      	bne.n	8009380 <_dtoa_r+0xec>
 800937e:	e07c      	b.n	800947a <_dtoa_r+0x1e6>
 8009380:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009382:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009384:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009386:	4a9d      	ldr	r2, [pc, #628]	; (80095fc <_dtoa_r+0x368>)
 8009388:	031b      	lsls	r3, r3, #12
 800938a:	0b1b      	lsrs	r3, r3, #12
 800938c:	431a      	orrs	r2, r3
 800938e:	0011      	movs	r1, r2
 8009390:	4b9b      	ldr	r3, [pc, #620]	; (8009600 <_dtoa_r+0x36c>)
 8009392:	9418      	str	r4, [sp, #96]	; 0x60
 8009394:	18f6      	adds	r6, r6, r3
 8009396:	2200      	movs	r2, #0
 8009398:	4b9a      	ldr	r3, [pc, #616]	; (8009604 <_dtoa_r+0x370>)
 800939a:	f7f8 ff37 	bl	800220c <__aeabi_dsub>
 800939e:	4a9a      	ldr	r2, [pc, #616]	; (8009608 <_dtoa_r+0x374>)
 80093a0:	4b9a      	ldr	r3, [pc, #616]	; (800960c <_dtoa_r+0x378>)
 80093a2:	f7f8 fcc7 	bl	8001d34 <__aeabi_dmul>
 80093a6:	4a9a      	ldr	r2, [pc, #616]	; (8009610 <_dtoa_r+0x37c>)
 80093a8:	4b9a      	ldr	r3, [pc, #616]	; (8009614 <_dtoa_r+0x380>)
 80093aa:	f7f7 fd85 	bl	8000eb8 <__aeabi_dadd>
 80093ae:	0004      	movs	r4, r0
 80093b0:	0030      	movs	r0, r6
 80093b2:	000d      	movs	r5, r1
 80093b4:	f7f9 fb10 	bl	80029d8 <__aeabi_i2d>
 80093b8:	4a97      	ldr	r2, [pc, #604]	; (8009618 <_dtoa_r+0x384>)
 80093ba:	4b98      	ldr	r3, [pc, #608]	; (800961c <_dtoa_r+0x388>)
 80093bc:	f7f8 fcba 	bl	8001d34 <__aeabi_dmul>
 80093c0:	0002      	movs	r2, r0
 80093c2:	000b      	movs	r3, r1
 80093c4:	0020      	movs	r0, r4
 80093c6:	0029      	movs	r1, r5
 80093c8:	f7f7 fd76 	bl	8000eb8 <__aeabi_dadd>
 80093cc:	0004      	movs	r4, r0
 80093ce:	000d      	movs	r5, r1
 80093d0:	f7f9 facc 	bl	800296c <__aeabi_d2iz>
 80093d4:	2200      	movs	r2, #0
 80093d6:	9002      	str	r0, [sp, #8]
 80093d8:	2300      	movs	r3, #0
 80093da:	0020      	movs	r0, r4
 80093dc:	0029      	movs	r1, r5
 80093de:	f7f7 f83b 	bl	8000458 <__aeabi_dcmplt>
 80093e2:	2800      	cmp	r0, #0
 80093e4:	d00b      	beq.n	80093fe <_dtoa_r+0x16a>
 80093e6:	9802      	ldr	r0, [sp, #8]
 80093e8:	f7f9 faf6 	bl	80029d8 <__aeabi_i2d>
 80093ec:	002b      	movs	r3, r5
 80093ee:	0022      	movs	r2, r4
 80093f0:	f7f7 f82c 	bl	800044c <__aeabi_dcmpeq>
 80093f4:	4243      	negs	r3, r0
 80093f6:	4158      	adcs	r0, r3
 80093f8:	9b02      	ldr	r3, [sp, #8]
 80093fa:	1a1b      	subs	r3, r3, r0
 80093fc:	9302      	str	r3, [sp, #8]
 80093fe:	2301      	movs	r3, #1
 8009400:	9316      	str	r3, [sp, #88]	; 0x58
 8009402:	9b02      	ldr	r3, [sp, #8]
 8009404:	2b16      	cmp	r3, #22
 8009406:	d80f      	bhi.n	8009428 <_dtoa_r+0x194>
 8009408:	9812      	ldr	r0, [sp, #72]	; 0x48
 800940a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800940c:	00da      	lsls	r2, r3, #3
 800940e:	4b84      	ldr	r3, [pc, #528]	; (8009620 <_dtoa_r+0x38c>)
 8009410:	189b      	adds	r3, r3, r2
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	f7f7 f81f 	bl	8000458 <__aeabi_dcmplt>
 800941a:	2800      	cmp	r0, #0
 800941c:	d049      	beq.n	80094b2 <_dtoa_r+0x21e>
 800941e:	9b02      	ldr	r3, [sp, #8]
 8009420:	3b01      	subs	r3, #1
 8009422:	9302      	str	r3, [sp, #8]
 8009424:	2300      	movs	r3, #0
 8009426:	9316      	str	r3, [sp, #88]	; 0x58
 8009428:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800942a:	1b9e      	subs	r6, r3, r6
 800942c:	2300      	movs	r3, #0
 800942e:	930a      	str	r3, [sp, #40]	; 0x28
 8009430:	0033      	movs	r3, r6
 8009432:	3b01      	subs	r3, #1
 8009434:	930d      	str	r3, [sp, #52]	; 0x34
 8009436:	d504      	bpl.n	8009442 <_dtoa_r+0x1ae>
 8009438:	2301      	movs	r3, #1
 800943a:	1b9b      	subs	r3, r3, r6
 800943c:	930a      	str	r3, [sp, #40]	; 0x28
 800943e:	2300      	movs	r3, #0
 8009440:	930d      	str	r3, [sp, #52]	; 0x34
 8009442:	9b02      	ldr	r3, [sp, #8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	db36      	blt.n	80094b6 <_dtoa_r+0x222>
 8009448:	9a02      	ldr	r2, [sp, #8]
 800944a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800944c:	4694      	mov	ip, r2
 800944e:	4463      	add	r3, ip
 8009450:	930d      	str	r3, [sp, #52]	; 0x34
 8009452:	2300      	movs	r3, #0
 8009454:	9215      	str	r2, [sp, #84]	; 0x54
 8009456:	930e      	str	r3, [sp, #56]	; 0x38
 8009458:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800945a:	2401      	movs	r4, #1
 800945c:	2b09      	cmp	r3, #9
 800945e:	d864      	bhi.n	800952a <_dtoa_r+0x296>
 8009460:	2b05      	cmp	r3, #5
 8009462:	dd02      	ble.n	800946a <_dtoa_r+0x1d6>
 8009464:	2400      	movs	r4, #0
 8009466:	3b04      	subs	r3, #4
 8009468:	9322      	str	r3, [sp, #136]	; 0x88
 800946a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800946c:	1e98      	subs	r0, r3, #2
 800946e:	2803      	cmp	r0, #3
 8009470:	d864      	bhi.n	800953c <_dtoa_r+0x2a8>
 8009472:	f7f6 fe51 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009476:	3829      	.short	0x3829
 8009478:	5836      	.short	0x5836
 800947a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800947c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800947e:	189e      	adds	r6, r3, r2
 8009480:	4b68      	ldr	r3, [pc, #416]	; (8009624 <_dtoa_r+0x390>)
 8009482:	18f2      	adds	r2, r6, r3
 8009484:	2a20      	cmp	r2, #32
 8009486:	dd0f      	ble.n	80094a8 <_dtoa_r+0x214>
 8009488:	2340      	movs	r3, #64	; 0x40
 800948a:	1a9b      	subs	r3, r3, r2
 800948c:	409d      	lsls	r5, r3
 800948e:	4b66      	ldr	r3, [pc, #408]	; (8009628 <_dtoa_r+0x394>)
 8009490:	9802      	ldr	r0, [sp, #8]
 8009492:	18f3      	adds	r3, r6, r3
 8009494:	40d8      	lsrs	r0, r3
 8009496:	4328      	orrs	r0, r5
 8009498:	f7f9 face 	bl	8002a38 <__aeabi_ui2d>
 800949c:	2301      	movs	r3, #1
 800949e:	4c63      	ldr	r4, [pc, #396]	; (800962c <_dtoa_r+0x398>)
 80094a0:	3e01      	subs	r6, #1
 80094a2:	1909      	adds	r1, r1, r4
 80094a4:	9318      	str	r3, [sp, #96]	; 0x60
 80094a6:	e776      	b.n	8009396 <_dtoa_r+0x102>
 80094a8:	2320      	movs	r3, #32
 80094aa:	9802      	ldr	r0, [sp, #8]
 80094ac:	1a9b      	subs	r3, r3, r2
 80094ae:	4098      	lsls	r0, r3
 80094b0:	e7f2      	b.n	8009498 <_dtoa_r+0x204>
 80094b2:	9016      	str	r0, [sp, #88]	; 0x58
 80094b4:	e7b8      	b.n	8009428 <_dtoa_r+0x194>
 80094b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094b8:	9a02      	ldr	r2, [sp, #8]
 80094ba:	1a9b      	subs	r3, r3, r2
 80094bc:	930a      	str	r3, [sp, #40]	; 0x28
 80094be:	4253      	negs	r3, r2
 80094c0:	930e      	str	r3, [sp, #56]	; 0x38
 80094c2:	2300      	movs	r3, #0
 80094c4:	9315      	str	r3, [sp, #84]	; 0x54
 80094c6:	e7c7      	b.n	8009458 <_dtoa_r+0x1c4>
 80094c8:	2300      	movs	r3, #0
 80094ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80094cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80094ce:	930c      	str	r3, [sp, #48]	; 0x30
 80094d0:	9307      	str	r3, [sp, #28]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	dc13      	bgt.n	80094fe <_dtoa_r+0x26a>
 80094d6:	2301      	movs	r3, #1
 80094d8:	001a      	movs	r2, r3
 80094da:	930c      	str	r3, [sp, #48]	; 0x30
 80094dc:	9307      	str	r3, [sp, #28]
 80094de:	9223      	str	r2, [sp, #140]	; 0x8c
 80094e0:	e00d      	b.n	80094fe <_dtoa_r+0x26a>
 80094e2:	2301      	movs	r3, #1
 80094e4:	e7f1      	b.n	80094ca <_dtoa_r+0x236>
 80094e6:	2300      	movs	r3, #0
 80094e8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80094ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80094ec:	4694      	mov	ip, r2
 80094ee:	9b02      	ldr	r3, [sp, #8]
 80094f0:	4463      	add	r3, ip
 80094f2:	930c      	str	r3, [sp, #48]	; 0x30
 80094f4:	3301      	adds	r3, #1
 80094f6:	9307      	str	r3, [sp, #28]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	dc00      	bgt.n	80094fe <_dtoa_r+0x26a>
 80094fc:	2301      	movs	r3, #1
 80094fe:	2200      	movs	r2, #0
 8009500:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009502:	6042      	str	r2, [r0, #4]
 8009504:	3204      	adds	r2, #4
 8009506:	0015      	movs	r5, r2
 8009508:	3514      	adds	r5, #20
 800950a:	6841      	ldr	r1, [r0, #4]
 800950c:	429d      	cmp	r5, r3
 800950e:	d919      	bls.n	8009544 <_dtoa_r+0x2b0>
 8009510:	0038      	movs	r0, r7
 8009512:	f000 fcf3 	bl	8009efc <_Balloc>
 8009516:	9006      	str	r0, [sp, #24]
 8009518:	2800      	cmp	r0, #0
 800951a:	d117      	bne.n	800954c <_dtoa_r+0x2b8>
 800951c:	21d5      	movs	r1, #213	; 0xd5
 800951e:	0002      	movs	r2, r0
 8009520:	4b43      	ldr	r3, [pc, #268]	; (8009630 <_dtoa_r+0x39c>)
 8009522:	0049      	lsls	r1, r1, #1
 8009524:	e6cb      	b.n	80092be <_dtoa_r+0x2a>
 8009526:	2301      	movs	r3, #1
 8009528:	e7de      	b.n	80094e8 <_dtoa_r+0x254>
 800952a:	2300      	movs	r3, #0
 800952c:	940f      	str	r4, [sp, #60]	; 0x3c
 800952e:	9322      	str	r3, [sp, #136]	; 0x88
 8009530:	3b01      	subs	r3, #1
 8009532:	930c      	str	r3, [sp, #48]	; 0x30
 8009534:	9307      	str	r3, [sp, #28]
 8009536:	2200      	movs	r2, #0
 8009538:	3313      	adds	r3, #19
 800953a:	e7d0      	b.n	80094de <_dtoa_r+0x24a>
 800953c:	2301      	movs	r3, #1
 800953e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009540:	3b02      	subs	r3, #2
 8009542:	e7f6      	b.n	8009532 <_dtoa_r+0x29e>
 8009544:	3101      	adds	r1, #1
 8009546:	6041      	str	r1, [r0, #4]
 8009548:	0052      	lsls	r2, r2, #1
 800954a:	e7dc      	b.n	8009506 <_dtoa_r+0x272>
 800954c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954e:	9a06      	ldr	r2, [sp, #24]
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	9b07      	ldr	r3, [sp, #28]
 8009554:	2b0e      	cmp	r3, #14
 8009556:	d900      	bls.n	800955a <_dtoa_r+0x2c6>
 8009558:	e0eb      	b.n	8009732 <_dtoa_r+0x49e>
 800955a:	2c00      	cmp	r4, #0
 800955c:	d100      	bne.n	8009560 <_dtoa_r+0x2cc>
 800955e:	e0e8      	b.n	8009732 <_dtoa_r+0x49e>
 8009560:	9b02      	ldr	r3, [sp, #8]
 8009562:	2b00      	cmp	r3, #0
 8009564:	dd68      	ble.n	8009638 <_dtoa_r+0x3a4>
 8009566:	001a      	movs	r2, r3
 8009568:	210f      	movs	r1, #15
 800956a:	4b2d      	ldr	r3, [pc, #180]	; (8009620 <_dtoa_r+0x38c>)
 800956c:	400a      	ands	r2, r1
 800956e:	00d2      	lsls	r2, r2, #3
 8009570:	189b      	adds	r3, r3, r2
 8009572:	681d      	ldr	r5, [r3, #0]
 8009574:	685e      	ldr	r6, [r3, #4]
 8009576:	9b02      	ldr	r3, [sp, #8]
 8009578:	111c      	asrs	r4, r3, #4
 800957a:	2302      	movs	r3, #2
 800957c:	9310      	str	r3, [sp, #64]	; 0x40
 800957e:	9b02      	ldr	r3, [sp, #8]
 8009580:	05db      	lsls	r3, r3, #23
 8009582:	d50b      	bpl.n	800959c <_dtoa_r+0x308>
 8009584:	4b2b      	ldr	r3, [pc, #172]	; (8009634 <_dtoa_r+0x3a0>)
 8009586:	400c      	ands	r4, r1
 8009588:	6a1a      	ldr	r2, [r3, #32]
 800958a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800958e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009590:	f7f7 ffce 	bl	8001530 <__aeabi_ddiv>
 8009594:	2303      	movs	r3, #3
 8009596:	9008      	str	r0, [sp, #32]
 8009598:	9109      	str	r1, [sp, #36]	; 0x24
 800959a:	9310      	str	r3, [sp, #64]	; 0x40
 800959c:	4b25      	ldr	r3, [pc, #148]	; (8009634 <_dtoa_r+0x3a0>)
 800959e:	9314      	str	r3, [sp, #80]	; 0x50
 80095a0:	2c00      	cmp	r4, #0
 80095a2:	d108      	bne.n	80095b6 <_dtoa_r+0x322>
 80095a4:	9808      	ldr	r0, [sp, #32]
 80095a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095a8:	002a      	movs	r2, r5
 80095aa:	0033      	movs	r3, r6
 80095ac:	f7f7 ffc0 	bl	8001530 <__aeabi_ddiv>
 80095b0:	9008      	str	r0, [sp, #32]
 80095b2:	9109      	str	r1, [sp, #36]	; 0x24
 80095b4:	e05c      	b.n	8009670 <_dtoa_r+0x3dc>
 80095b6:	2301      	movs	r3, #1
 80095b8:	421c      	tst	r4, r3
 80095ba:	d00b      	beq.n	80095d4 <_dtoa_r+0x340>
 80095bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095be:	0028      	movs	r0, r5
 80095c0:	3301      	adds	r3, #1
 80095c2:	9310      	str	r3, [sp, #64]	; 0x40
 80095c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095c6:	0031      	movs	r1, r6
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	f7f8 fbb2 	bl	8001d34 <__aeabi_dmul>
 80095d0:	0005      	movs	r5, r0
 80095d2:	000e      	movs	r6, r1
 80095d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095d6:	1064      	asrs	r4, r4, #1
 80095d8:	3308      	adds	r3, #8
 80095da:	e7e0      	b.n	800959e <_dtoa_r+0x30a>
 80095dc:	0800b9c5 	.word	0x0800b9c5
 80095e0:	0800b9dc 	.word	0x0800b9dc
 80095e4:	7ff00000 	.word	0x7ff00000
 80095e8:	0000270f 	.word	0x0000270f
 80095ec:	0800b9c1 	.word	0x0800b9c1
 80095f0:	0800b9c4 	.word	0x0800b9c4
 80095f4:	0800b994 	.word	0x0800b994
 80095f8:	0800b995 	.word	0x0800b995
 80095fc:	3ff00000 	.word	0x3ff00000
 8009600:	fffffc01 	.word	0xfffffc01
 8009604:	3ff80000 	.word	0x3ff80000
 8009608:	636f4361 	.word	0x636f4361
 800960c:	3fd287a7 	.word	0x3fd287a7
 8009610:	8b60c8b3 	.word	0x8b60c8b3
 8009614:	3fc68a28 	.word	0x3fc68a28
 8009618:	509f79fb 	.word	0x509f79fb
 800961c:	3fd34413 	.word	0x3fd34413
 8009620:	0800bad0 	.word	0x0800bad0
 8009624:	00000432 	.word	0x00000432
 8009628:	00000412 	.word	0x00000412
 800962c:	fe100000 	.word	0xfe100000
 8009630:	0800ba37 	.word	0x0800ba37
 8009634:	0800baa8 	.word	0x0800baa8
 8009638:	2302      	movs	r3, #2
 800963a:	9310      	str	r3, [sp, #64]	; 0x40
 800963c:	9b02      	ldr	r3, [sp, #8]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d016      	beq.n	8009670 <_dtoa_r+0x3dc>
 8009642:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009644:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009646:	425c      	negs	r4, r3
 8009648:	230f      	movs	r3, #15
 800964a:	4ab6      	ldr	r2, [pc, #728]	; (8009924 <_dtoa_r+0x690>)
 800964c:	4023      	ands	r3, r4
 800964e:	00db      	lsls	r3, r3, #3
 8009650:	18d3      	adds	r3, r2, r3
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	f7f8 fb6d 	bl	8001d34 <__aeabi_dmul>
 800965a:	2601      	movs	r6, #1
 800965c:	2300      	movs	r3, #0
 800965e:	9008      	str	r0, [sp, #32]
 8009660:	9109      	str	r1, [sp, #36]	; 0x24
 8009662:	4db1      	ldr	r5, [pc, #708]	; (8009928 <_dtoa_r+0x694>)
 8009664:	1124      	asrs	r4, r4, #4
 8009666:	2c00      	cmp	r4, #0
 8009668:	d000      	beq.n	800966c <_dtoa_r+0x3d8>
 800966a:	e094      	b.n	8009796 <_dtoa_r+0x502>
 800966c:	2b00      	cmp	r3, #0
 800966e:	d19f      	bne.n	80095b0 <_dtoa_r+0x31c>
 8009670:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009672:	2b00      	cmp	r3, #0
 8009674:	d100      	bne.n	8009678 <_dtoa_r+0x3e4>
 8009676:	e09b      	b.n	80097b0 <_dtoa_r+0x51c>
 8009678:	9c08      	ldr	r4, [sp, #32]
 800967a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800967c:	2200      	movs	r2, #0
 800967e:	0020      	movs	r0, r4
 8009680:	0029      	movs	r1, r5
 8009682:	4baa      	ldr	r3, [pc, #680]	; (800992c <_dtoa_r+0x698>)
 8009684:	f7f6 fee8 	bl	8000458 <__aeabi_dcmplt>
 8009688:	2800      	cmp	r0, #0
 800968a:	d100      	bne.n	800968e <_dtoa_r+0x3fa>
 800968c:	e090      	b.n	80097b0 <_dtoa_r+0x51c>
 800968e:	9b07      	ldr	r3, [sp, #28]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d100      	bne.n	8009696 <_dtoa_r+0x402>
 8009694:	e08c      	b.n	80097b0 <_dtoa_r+0x51c>
 8009696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009698:	2b00      	cmp	r3, #0
 800969a:	dd46      	ble.n	800972a <_dtoa_r+0x496>
 800969c:	9b02      	ldr	r3, [sp, #8]
 800969e:	2200      	movs	r2, #0
 80096a0:	0020      	movs	r0, r4
 80096a2:	0029      	movs	r1, r5
 80096a4:	1e5e      	subs	r6, r3, #1
 80096a6:	4ba2      	ldr	r3, [pc, #648]	; (8009930 <_dtoa_r+0x69c>)
 80096a8:	f7f8 fb44 	bl	8001d34 <__aeabi_dmul>
 80096ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096ae:	9008      	str	r0, [sp, #32]
 80096b0:	9109      	str	r1, [sp, #36]	; 0x24
 80096b2:	3301      	adds	r3, #1
 80096b4:	9310      	str	r3, [sp, #64]	; 0x40
 80096b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80096ba:	9c08      	ldr	r4, [sp, #32]
 80096bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80096be:	9314      	str	r3, [sp, #80]	; 0x50
 80096c0:	f7f9 f98a 	bl	80029d8 <__aeabi_i2d>
 80096c4:	0022      	movs	r2, r4
 80096c6:	002b      	movs	r3, r5
 80096c8:	f7f8 fb34 	bl	8001d34 <__aeabi_dmul>
 80096cc:	2200      	movs	r2, #0
 80096ce:	4b99      	ldr	r3, [pc, #612]	; (8009934 <_dtoa_r+0x6a0>)
 80096d0:	f7f7 fbf2 	bl	8000eb8 <__aeabi_dadd>
 80096d4:	9010      	str	r0, [sp, #64]	; 0x40
 80096d6:	9111      	str	r1, [sp, #68]	; 0x44
 80096d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80096da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096dc:	9208      	str	r2, [sp, #32]
 80096de:	9309      	str	r3, [sp, #36]	; 0x24
 80096e0:	4a95      	ldr	r2, [pc, #596]	; (8009938 <_dtoa_r+0x6a4>)
 80096e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096e4:	4694      	mov	ip, r2
 80096e6:	4463      	add	r3, ip
 80096e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80096ea:	9309      	str	r3, [sp, #36]	; 0x24
 80096ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d161      	bne.n	80097b6 <_dtoa_r+0x522>
 80096f2:	2200      	movs	r2, #0
 80096f4:	0020      	movs	r0, r4
 80096f6:	0029      	movs	r1, r5
 80096f8:	4b90      	ldr	r3, [pc, #576]	; (800993c <_dtoa_r+0x6a8>)
 80096fa:	f7f8 fd87 	bl	800220c <__aeabi_dsub>
 80096fe:	9a08      	ldr	r2, [sp, #32]
 8009700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009702:	0004      	movs	r4, r0
 8009704:	000d      	movs	r5, r1
 8009706:	f7f6 febb 	bl	8000480 <__aeabi_dcmpgt>
 800970a:	2800      	cmp	r0, #0
 800970c:	d000      	beq.n	8009710 <_dtoa_r+0x47c>
 800970e:	e2af      	b.n	8009c70 <_dtoa_r+0x9dc>
 8009710:	488b      	ldr	r0, [pc, #556]	; (8009940 <_dtoa_r+0x6ac>)
 8009712:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009714:	4684      	mov	ip, r0
 8009716:	4461      	add	r1, ip
 8009718:	000b      	movs	r3, r1
 800971a:	0020      	movs	r0, r4
 800971c:	0029      	movs	r1, r5
 800971e:	9a08      	ldr	r2, [sp, #32]
 8009720:	f7f6 fe9a 	bl	8000458 <__aeabi_dcmplt>
 8009724:	2800      	cmp	r0, #0
 8009726:	d000      	beq.n	800972a <_dtoa_r+0x496>
 8009728:	e29f      	b.n	8009c6a <_dtoa_r+0x9d6>
 800972a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800972c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800972e:	9308      	str	r3, [sp, #32]
 8009730:	9409      	str	r4, [sp, #36]	; 0x24
 8009732:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009734:	2b00      	cmp	r3, #0
 8009736:	da00      	bge.n	800973a <_dtoa_r+0x4a6>
 8009738:	e172      	b.n	8009a20 <_dtoa_r+0x78c>
 800973a:	9a02      	ldr	r2, [sp, #8]
 800973c:	2a0e      	cmp	r2, #14
 800973e:	dd00      	ble.n	8009742 <_dtoa_r+0x4ae>
 8009740:	e16e      	b.n	8009a20 <_dtoa_r+0x78c>
 8009742:	4b78      	ldr	r3, [pc, #480]	; (8009924 <_dtoa_r+0x690>)
 8009744:	00d2      	lsls	r2, r2, #3
 8009746:	189b      	adds	r3, r3, r2
 8009748:	685c      	ldr	r4, [r3, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	930a      	str	r3, [sp, #40]	; 0x28
 800974e:	940b      	str	r4, [sp, #44]	; 0x2c
 8009750:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009752:	2b00      	cmp	r3, #0
 8009754:	db00      	blt.n	8009758 <_dtoa_r+0x4c4>
 8009756:	e0f7      	b.n	8009948 <_dtoa_r+0x6b4>
 8009758:	9b07      	ldr	r3, [sp, #28]
 800975a:	2b00      	cmp	r3, #0
 800975c:	dd00      	ble.n	8009760 <_dtoa_r+0x4cc>
 800975e:	e0f3      	b.n	8009948 <_dtoa_r+0x6b4>
 8009760:	d000      	beq.n	8009764 <_dtoa_r+0x4d0>
 8009762:	e282      	b.n	8009c6a <_dtoa_r+0x9d6>
 8009764:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009766:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009768:	2200      	movs	r2, #0
 800976a:	4b74      	ldr	r3, [pc, #464]	; (800993c <_dtoa_r+0x6a8>)
 800976c:	f7f8 fae2 	bl	8001d34 <__aeabi_dmul>
 8009770:	9a08      	ldr	r2, [sp, #32]
 8009772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009774:	f7f6 fe8e 	bl	8000494 <__aeabi_dcmpge>
 8009778:	9e07      	ldr	r6, [sp, #28]
 800977a:	0035      	movs	r5, r6
 800977c:	2800      	cmp	r0, #0
 800977e:	d000      	beq.n	8009782 <_dtoa_r+0x4ee>
 8009780:	e259      	b.n	8009c36 <_dtoa_r+0x9a2>
 8009782:	9b06      	ldr	r3, [sp, #24]
 8009784:	9a06      	ldr	r2, [sp, #24]
 8009786:	3301      	adds	r3, #1
 8009788:	9308      	str	r3, [sp, #32]
 800978a:	2331      	movs	r3, #49	; 0x31
 800978c:	7013      	strb	r3, [r2, #0]
 800978e:	9b02      	ldr	r3, [sp, #8]
 8009790:	3301      	adds	r3, #1
 8009792:	9302      	str	r3, [sp, #8]
 8009794:	e254      	b.n	8009c40 <_dtoa_r+0x9ac>
 8009796:	4234      	tst	r4, r6
 8009798:	d007      	beq.n	80097aa <_dtoa_r+0x516>
 800979a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800979c:	3301      	adds	r3, #1
 800979e:	9310      	str	r3, [sp, #64]	; 0x40
 80097a0:	682a      	ldr	r2, [r5, #0]
 80097a2:	686b      	ldr	r3, [r5, #4]
 80097a4:	f7f8 fac6 	bl	8001d34 <__aeabi_dmul>
 80097a8:	0033      	movs	r3, r6
 80097aa:	1064      	asrs	r4, r4, #1
 80097ac:	3508      	adds	r5, #8
 80097ae:	e75a      	b.n	8009666 <_dtoa_r+0x3d2>
 80097b0:	9e02      	ldr	r6, [sp, #8]
 80097b2:	9b07      	ldr	r3, [sp, #28]
 80097b4:	e780      	b.n	80096b8 <_dtoa_r+0x424>
 80097b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80097ba:	1e5a      	subs	r2, r3, #1
 80097bc:	4b59      	ldr	r3, [pc, #356]	; (8009924 <_dtoa_r+0x690>)
 80097be:	00d2      	lsls	r2, r2, #3
 80097c0:	189b      	adds	r3, r3, r2
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	2900      	cmp	r1, #0
 80097c8:	d051      	beq.n	800986e <_dtoa_r+0x5da>
 80097ca:	2000      	movs	r0, #0
 80097cc:	495d      	ldr	r1, [pc, #372]	; (8009944 <_dtoa_r+0x6b0>)
 80097ce:	f7f7 feaf 	bl	8001530 <__aeabi_ddiv>
 80097d2:	9a08      	ldr	r2, [sp, #32]
 80097d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097d6:	f7f8 fd19 	bl	800220c <__aeabi_dsub>
 80097da:	9a06      	ldr	r2, [sp, #24]
 80097dc:	9b06      	ldr	r3, [sp, #24]
 80097de:	4694      	mov	ip, r2
 80097e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80097e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097e4:	9010      	str	r0, [sp, #64]	; 0x40
 80097e6:	9111      	str	r1, [sp, #68]	; 0x44
 80097e8:	4463      	add	r3, ip
 80097ea:	9319      	str	r3, [sp, #100]	; 0x64
 80097ec:	0029      	movs	r1, r5
 80097ee:	0020      	movs	r0, r4
 80097f0:	f7f9 f8bc 	bl	800296c <__aeabi_d2iz>
 80097f4:	9014      	str	r0, [sp, #80]	; 0x50
 80097f6:	f7f9 f8ef 	bl	80029d8 <__aeabi_i2d>
 80097fa:	0002      	movs	r2, r0
 80097fc:	000b      	movs	r3, r1
 80097fe:	0020      	movs	r0, r4
 8009800:	0029      	movs	r1, r5
 8009802:	f7f8 fd03 	bl	800220c <__aeabi_dsub>
 8009806:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009808:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800980a:	3301      	adds	r3, #1
 800980c:	9308      	str	r3, [sp, #32]
 800980e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009810:	0004      	movs	r4, r0
 8009812:	3330      	adds	r3, #48	; 0x30
 8009814:	7013      	strb	r3, [r2, #0]
 8009816:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009818:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800981a:	000d      	movs	r5, r1
 800981c:	f7f6 fe1c 	bl	8000458 <__aeabi_dcmplt>
 8009820:	2800      	cmp	r0, #0
 8009822:	d175      	bne.n	8009910 <_dtoa_r+0x67c>
 8009824:	0022      	movs	r2, r4
 8009826:	002b      	movs	r3, r5
 8009828:	2000      	movs	r0, #0
 800982a:	4940      	ldr	r1, [pc, #256]	; (800992c <_dtoa_r+0x698>)
 800982c:	f7f8 fcee 	bl	800220c <__aeabi_dsub>
 8009830:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009832:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009834:	f7f6 fe10 	bl	8000458 <__aeabi_dcmplt>
 8009838:	2800      	cmp	r0, #0
 800983a:	d000      	beq.n	800983e <_dtoa_r+0x5aa>
 800983c:	e0d2      	b.n	80099e4 <_dtoa_r+0x750>
 800983e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009840:	9a08      	ldr	r2, [sp, #32]
 8009842:	4293      	cmp	r3, r2
 8009844:	d100      	bne.n	8009848 <_dtoa_r+0x5b4>
 8009846:	e770      	b.n	800972a <_dtoa_r+0x496>
 8009848:	9810      	ldr	r0, [sp, #64]	; 0x40
 800984a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800984c:	2200      	movs	r2, #0
 800984e:	4b38      	ldr	r3, [pc, #224]	; (8009930 <_dtoa_r+0x69c>)
 8009850:	f7f8 fa70 	bl	8001d34 <__aeabi_dmul>
 8009854:	4b36      	ldr	r3, [pc, #216]	; (8009930 <_dtoa_r+0x69c>)
 8009856:	9010      	str	r0, [sp, #64]	; 0x40
 8009858:	9111      	str	r1, [sp, #68]	; 0x44
 800985a:	2200      	movs	r2, #0
 800985c:	0020      	movs	r0, r4
 800985e:	0029      	movs	r1, r5
 8009860:	f7f8 fa68 	bl	8001d34 <__aeabi_dmul>
 8009864:	9b08      	ldr	r3, [sp, #32]
 8009866:	0004      	movs	r4, r0
 8009868:	000d      	movs	r5, r1
 800986a:	9317      	str	r3, [sp, #92]	; 0x5c
 800986c:	e7be      	b.n	80097ec <_dtoa_r+0x558>
 800986e:	9808      	ldr	r0, [sp, #32]
 8009870:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009872:	f7f8 fa5f 	bl	8001d34 <__aeabi_dmul>
 8009876:	9a06      	ldr	r2, [sp, #24]
 8009878:	9b06      	ldr	r3, [sp, #24]
 800987a:	4694      	mov	ip, r2
 800987c:	9308      	str	r3, [sp, #32]
 800987e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009880:	9010      	str	r0, [sp, #64]	; 0x40
 8009882:	9111      	str	r1, [sp, #68]	; 0x44
 8009884:	4463      	add	r3, ip
 8009886:	9319      	str	r3, [sp, #100]	; 0x64
 8009888:	0029      	movs	r1, r5
 800988a:	0020      	movs	r0, r4
 800988c:	f7f9 f86e 	bl	800296c <__aeabi_d2iz>
 8009890:	9017      	str	r0, [sp, #92]	; 0x5c
 8009892:	f7f9 f8a1 	bl	80029d8 <__aeabi_i2d>
 8009896:	0002      	movs	r2, r0
 8009898:	000b      	movs	r3, r1
 800989a:	0020      	movs	r0, r4
 800989c:	0029      	movs	r1, r5
 800989e:	f7f8 fcb5 	bl	800220c <__aeabi_dsub>
 80098a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098a4:	9a08      	ldr	r2, [sp, #32]
 80098a6:	3330      	adds	r3, #48	; 0x30
 80098a8:	7013      	strb	r3, [r2, #0]
 80098aa:	0013      	movs	r3, r2
 80098ac:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80098ae:	3301      	adds	r3, #1
 80098b0:	0004      	movs	r4, r0
 80098b2:	000d      	movs	r5, r1
 80098b4:	9308      	str	r3, [sp, #32]
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d12c      	bne.n	8009914 <_dtoa_r+0x680>
 80098ba:	9810      	ldr	r0, [sp, #64]	; 0x40
 80098bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80098be:	9a06      	ldr	r2, [sp, #24]
 80098c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80098c2:	4694      	mov	ip, r2
 80098c4:	4463      	add	r3, ip
 80098c6:	2200      	movs	r2, #0
 80098c8:	9308      	str	r3, [sp, #32]
 80098ca:	4b1e      	ldr	r3, [pc, #120]	; (8009944 <_dtoa_r+0x6b0>)
 80098cc:	f7f7 faf4 	bl	8000eb8 <__aeabi_dadd>
 80098d0:	0002      	movs	r2, r0
 80098d2:	000b      	movs	r3, r1
 80098d4:	0020      	movs	r0, r4
 80098d6:	0029      	movs	r1, r5
 80098d8:	f7f6 fdd2 	bl	8000480 <__aeabi_dcmpgt>
 80098dc:	2800      	cmp	r0, #0
 80098de:	d000      	beq.n	80098e2 <_dtoa_r+0x64e>
 80098e0:	e080      	b.n	80099e4 <_dtoa_r+0x750>
 80098e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80098e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098e6:	2000      	movs	r0, #0
 80098e8:	4916      	ldr	r1, [pc, #88]	; (8009944 <_dtoa_r+0x6b0>)
 80098ea:	f7f8 fc8f 	bl	800220c <__aeabi_dsub>
 80098ee:	0002      	movs	r2, r0
 80098f0:	000b      	movs	r3, r1
 80098f2:	0020      	movs	r0, r4
 80098f4:	0029      	movs	r1, r5
 80098f6:	f7f6 fdaf 	bl	8000458 <__aeabi_dcmplt>
 80098fa:	2800      	cmp	r0, #0
 80098fc:	d100      	bne.n	8009900 <_dtoa_r+0x66c>
 80098fe:	e714      	b.n	800972a <_dtoa_r+0x496>
 8009900:	9b08      	ldr	r3, [sp, #32]
 8009902:	001a      	movs	r2, r3
 8009904:	3a01      	subs	r2, #1
 8009906:	9208      	str	r2, [sp, #32]
 8009908:	7812      	ldrb	r2, [r2, #0]
 800990a:	2a30      	cmp	r2, #48	; 0x30
 800990c:	d0f8      	beq.n	8009900 <_dtoa_r+0x66c>
 800990e:	9308      	str	r3, [sp, #32]
 8009910:	9602      	str	r6, [sp, #8]
 8009912:	e055      	b.n	80099c0 <_dtoa_r+0x72c>
 8009914:	2200      	movs	r2, #0
 8009916:	4b06      	ldr	r3, [pc, #24]	; (8009930 <_dtoa_r+0x69c>)
 8009918:	f7f8 fa0c 	bl	8001d34 <__aeabi_dmul>
 800991c:	0004      	movs	r4, r0
 800991e:	000d      	movs	r5, r1
 8009920:	e7b2      	b.n	8009888 <_dtoa_r+0x5f4>
 8009922:	46c0      	nop			; (mov r8, r8)
 8009924:	0800bad0 	.word	0x0800bad0
 8009928:	0800baa8 	.word	0x0800baa8
 800992c:	3ff00000 	.word	0x3ff00000
 8009930:	40240000 	.word	0x40240000
 8009934:	401c0000 	.word	0x401c0000
 8009938:	fcc00000 	.word	0xfcc00000
 800993c:	40140000 	.word	0x40140000
 8009940:	7cc00000 	.word	0x7cc00000
 8009944:	3fe00000 	.word	0x3fe00000
 8009948:	9b07      	ldr	r3, [sp, #28]
 800994a:	9e06      	ldr	r6, [sp, #24]
 800994c:	3b01      	subs	r3, #1
 800994e:	199b      	adds	r3, r3, r6
 8009950:	930c      	str	r3, [sp, #48]	; 0x30
 8009952:	9c08      	ldr	r4, [sp, #32]
 8009954:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009956:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800995a:	0020      	movs	r0, r4
 800995c:	0029      	movs	r1, r5
 800995e:	f7f7 fde7 	bl	8001530 <__aeabi_ddiv>
 8009962:	f7f9 f803 	bl	800296c <__aeabi_d2iz>
 8009966:	9007      	str	r0, [sp, #28]
 8009968:	f7f9 f836 	bl	80029d8 <__aeabi_i2d>
 800996c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800996e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009970:	f7f8 f9e0 	bl	8001d34 <__aeabi_dmul>
 8009974:	0002      	movs	r2, r0
 8009976:	000b      	movs	r3, r1
 8009978:	0020      	movs	r0, r4
 800997a:	0029      	movs	r1, r5
 800997c:	f7f8 fc46 	bl	800220c <__aeabi_dsub>
 8009980:	0033      	movs	r3, r6
 8009982:	9a07      	ldr	r2, [sp, #28]
 8009984:	3601      	adds	r6, #1
 8009986:	3230      	adds	r2, #48	; 0x30
 8009988:	701a      	strb	r2, [r3, #0]
 800998a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800998c:	9608      	str	r6, [sp, #32]
 800998e:	429a      	cmp	r2, r3
 8009990:	d139      	bne.n	8009a06 <_dtoa_r+0x772>
 8009992:	0002      	movs	r2, r0
 8009994:	000b      	movs	r3, r1
 8009996:	f7f7 fa8f 	bl	8000eb8 <__aeabi_dadd>
 800999a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800999c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800999e:	0004      	movs	r4, r0
 80099a0:	000d      	movs	r5, r1
 80099a2:	f7f6 fd6d 	bl	8000480 <__aeabi_dcmpgt>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d11b      	bne.n	80099e2 <_dtoa_r+0x74e>
 80099aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099ae:	0020      	movs	r0, r4
 80099b0:	0029      	movs	r1, r5
 80099b2:	f7f6 fd4b 	bl	800044c <__aeabi_dcmpeq>
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d002      	beq.n	80099c0 <_dtoa_r+0x72c>
 80099ba:	9b07      	ldr	r3, [sp, #28]
 80099bc:	07db      	lsls	r3, r3, #31
 80099be:	d410      	bmi.n	80099e2 <_dtoa_r+0x74e>
 80099c0:	0038      	movs	r0, r7
 80099c2:	9905      	ldr	r1, [sp, #20]
 80099c4:	f000 fade 	bl	8009f84 <_Bfree>
 80099c8:	2300      	movs	r3, #0
 80099ca:	9a08      	ldr	r2, [sp, #32]
 80099cc:	9802      	ldr	r0, [sp, #8]
 80099ce:	7013      	strb	r3, [r2, #0]
 80099d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80099d2:	3001      	adds	r0, #1
 80099d4:	6018      	str	r0, [r3, #0]
 80099d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d100      	bne.n	80099de <_dtoa_r+0x74a>
 80099dc:	e4a6      	b.n	800932c <_dtoa_r+0x98>
 80099de:	601a      	str	r2, [r3, #0]
 80099e0:	e4a4      	b.n	800932c <_dtoa_r+0x98>
 80099e2:	9e02      	ldr	r6, [sp, #8]
 80099e4:	9b08      	ldr	r3, [sp, #32]
 80099e6:	9308      	str	r3, [sp, #32]
 80099e8:	3b01      	subs	r3, #1
 80099ea:	781a      	ldrb	r2, [r3, #0]
 80099ec:	2a39      	cmp	r2, #57	; 0x39
 80099ee:	d106      	bne.n	80099fe <_dtoa_r+0x76a>
 80099f0:	9a06      	ldr	r2, [sp, #24]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d1f7      	bne.n	80099e6 <_dtoa_r+0x752>
 80099f6:	2230      	movs	r2, #48	; 0x30
 80099f8:	9906      	ldr	r1, [sp, #24]
 80099fa:	3601      	adds	r6, #1
 80099fc:	700a      	strb	r2, [r1, #0]
 80099fe:	781a      	ldrb	r2, [r3, #0]
 8009a00:	3201      	adds	r2, #1
 8009a02:	701a      	strb	r2, [r3, #0]
 8009a04:	e784      	b.n	8009910 <_dtoa_r+0x67c>
 8009a06:	2200      	movs	r2, #0
 8009a08:	4baa      	ldr	r3, [pc, #680]	; (8009cb4 <_dtoa_r+0xa20>)
 8009a0a:	f7f8 f993 	bl	8001d34 <__aeabi_dmul>
 8009a0e:	2200      	movs	r2, #0
 8009a10:	2300      	movs	r3, #0
 8009a12:	0004      	movs	r4, r0
 8009a14:	000d      	movs	r5, r1
 8009a16:	f7f6 fd19 	bl	800044c <__aeabi_dcmpeq>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d09b      	beq.n	8009956 <_dtoa_r+0x6c2>
 8009a1e:	e7cf      	b.n	80099c0 <_dtoa_r+0x72c>
 8009a20:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009a22:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009a24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	d012      	beq.n	8009a50 <_dtoa_r+0x7bc>
 8009a2a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009a2c:	2a01      	cmp	r2, #1
 8009a2e:	dc66      	bgt.n	8009afe <_dtoa_r+0x86a>
 8009a30:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009a32:	2a00      	cmp	r2, #0
 8009a34:	d05d      	beq.n	8009af2 <_dtoa_r+0x85e>
 8009a36:	4aa0      	ldr	r2, [pc, #640]	; (8009cb8 <_dtoa_r+0xa24>)
 8009a38:	189b      	adds	r3, r3, r2
 8009a3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	18d2      	adds	r2, r2, r3
 8009a40:	920a      	str	r2, [sp, #40]	; 0x28
 8009a42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a44:	0038      	movs	r0, r7
 8009a46:	18d3      	adds	r3, r2, r3
 8009a48:	930d      	str	r3, [sp, #52]	; 0x34
 8009a4a:	f000 fb4b 	bl	800a0e4 <__i2b>
 8009a4e:	0005      	movs	r5, r0
 8009a50:	2c00      	cmp	r4, #0
 8009a52:	dd0e      	ble.n	8009a72 <_dtoa_r+0x7de>
 8009a54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	dd0b      	ble.n	8009a72 <_dtoa_r+0x7de>
 8009a5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a5c:	0023      	movs	r3, r4
 8009a5e:	4294      	cmp	r4, r2
 8009a60:	dd00      	ble.n	8009a64 <_dtoa_r+0x7d0>
 8009a62:	0013      	movs	r3, r2
 8009a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a66:	1ae4      	subs	r4, r4, r3
 8009a68:	1ad2      	subs	r2, r2, r3
 8009a6a:	920a      	str	r2, [sp, #40]	; 0x28
 8009a6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	930d      	str	r3, [sp, #52]	; 0x34
 8009a72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d01f      	beq.n	8009ab8 <_dtoa_r+0x824>
 8009a78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d054      	beq.n	8009b28 <_dtoa_r+0x894>
 8009a7e:	2e00      	cmp	r6, #0
 8009a80:	dd11      	ble.n	8009aa6 <_dtoa_r+0x812>
 8009a82:	0029      	movs	r1, r5
 8009a84:	0032      	movs	r2, r6
 8009a86:	0038      	movs	r0, r7
 8009a88:	f000 fbf2 	bl	800a270 <__pow5mult>
 8009a8c:	9a05      	ldr	r2, [sp, #20]
 8009a8e:	0001      	movs	r1, r0
 8009a90:	0005      	movs	r5, r0
 8009a92:	0038      	movs	r0, r7
 8009a94:	f000 fb3c 	bl	800a110 <__multiply>
 8009a98:	9905      	ldr	r1, [sp, #20]
 8009a9a:	9014      	str	r0, [sp, #80]	; 0x50
 8009a9c:	0038      	movs	r0, r7
 8009a9e:	f000 fa71 	bl	8009f84 <_Bfree>
 8009aa2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009aa4:	9305      	str	r3, [sp, #20]
 8009aa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009aa8:	1b9a      	subs	r2, r3, r6
 8009aaa:	42b3      	cmp	r3, r6
 8009aac:	d004      	beq.n	8009ab8 <_dtoa_r+0x824>
 8009aae:	0038      	movs	r0, r7
 8009ab0:	9905      	ldr	r1, [sp, #20]
 8009ab2:	f000 fbdd 	bl	800a270 <__pow5mult>
 8009ab6:	9005      	str	r0, [sp, #20]
 8009ab8:	2101      	movs	r1, #1
 8009aba:	0038      	movs	r0, r7
 8009abc:	f000 fb12 	bl	800a0e4 <__i2b>
 8009ac0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ac2:	0006      	movs	r6, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	dd31      	ble.n	8009b2c <_dtoa_r+0x898>
 8009ac8:	001a      	movs	r2, r3
 8009aca:	0001      	movs	r1, r0
 8009acc:	0038      	movs	r0, r7
 8009ace:	f000 fbcf 	bl	800a270 <__pow5mult>
 8009ad2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ad4:	0006      	movs	r6, r0
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	dd2d      	ble.n	8009b36 <_dtoa_r+0x8a2>
 8009ada:	2300      	movs	r3, #0
 8009adc:	930e      	str	r3, [sp, #56]	; 0x38
 8009ade:	6933      	ldr	r3, [r6, #16]
 8009ae0:	3303      	adds	r3, #3
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	18f3      	adds	r3, r6, r3
 8009ae6:	6858      	ldr	r0, [r3, #4]
 8009ae8:	f000 fab4 	bl	800a054 <__hi0bits>
 8009aec:	2320      	movs	r3, #32
 8009aee:	1a18      	subs	r0, r3, r0
 8009af0:	e039      	b.n	8009b66 <_dtoa_r+0x8d2>
 8009af2:	2336      	movs	r3, #54	; 0x36
 8009af4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009af6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009af8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009afa:	1a9b      	subs	r3, r3, r2
 8009afc:	e79d      	b.n	8009a3a <_dtoa_r+0x7a6>
 8009afe:	9b07      	ldr	r3, [sp, #28]
 8009b00:	1e5e      	subs	r6, r3, #1
 8009b02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b04:	42b3      	cmp	r3, r6
 8009b06:	db07      	blt.n	8009b18 <_dtoa_r+0x884>
 8009b08:	1b9e      	subs	r6, r3, r6
 8009b0a:	9b07      	ldr	r3, [sp, #28]
 8009b0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	da93      	bge.n	8009a3a <_dtoa_r+0x7a6>
 8009b12:	1ae4      	subs	r4, r4, r3
 8009b14:	2300      	movs	r3, #0
 8009b16:	e790      	b.n	8009a3a <_dtoa_r+0x7a6>
 8009b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009b1c:	1af3      	subs	r3, r6, r3
 8009b1e:	18d3      	adds	r3, r2, r3
 8009b20:	960e      	str	r6, [sp, #56]	; 0x38
 8009b22:	9315      	str	r3, [sp, #84]	; 0x54
 8009b24:	2600      	movs	r6, #0
 8009b26:	e7f0      	b.n	8009b0a <_dtoa_r+0x876>
 8009b28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b2a:	e7c0      	b.n	8009aae <_dtoa_r+0x81a>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	930e      	str	r3, [sp, #56]	; 0x38
 8009b30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	dc13      	bgt.n	8009b5e <_dtoa_r+0x8ca>
 8009b36:	2300      	movs	r3, #0
 8009b38:	930e      	str	r3, [sp, #56]	; 0x38
 8009b3a:	9b08      	ldr	r3, [sp, #32]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d10e      	bne.n	8009b5e <_dtoa_r+0x8ca>
 8009b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b42:	031b      	lsls	r3, r3, #12
 8009b44:	d10b      	bne.n	8009b5e <_dtoa_r+0x8ca>
 8009b46:	4b5d      	ldr	r3, [pc, #372]	; (8009cbc <_dtoa_r+0xa28>)
 8009b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b4a:	4213      	tst	r3, r2
 8009b4c:	d007      	beq.n	8009b5e <_dtoa_r+0x8ca>
 8009b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b50:	3301      	adds	r3, #1
 8009b52:	930a      	str	r3, [sp, #40]	; 0x28
 8009b54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b56:	3301      	adds	r3, #1
 8009b58:	930d      	str	r3, [sp, #52]	; 0x34
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	930e      	str	r3, [sp, #56]	; 0x38
 8009b5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b60:	2001      	movs	r0, #1
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1bb      	bne.n	8009ade <_dtoa_r+0x84a>
 8009b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b68:	221f      	movs	r2, #31
 8009b6a:	1818      	adds	r0, r3, r0
 8009b6c:	0003      	movs	r3, r0
 8009b6e:	4013      	ands	r3, r2
 8009b70:	4210      	tst	r0, r2
 8009b72:	d046      	beq.n	8009c02 <_dtoa_r+0x96e>
 8009b74:	3201      	adds	r2, #1
 8009b76:	1ad2      	subs	r2, r2, r3
 8009b78:	2a04      	cmp	r2, #4
 8009b7a:	dd3f      	ble.n	8009bfc <_dtoa_r+0x968>
 8009b7c:	221c      	movs	r2, #28
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b82:	18e4      	adds	r4, r4, r3
 8009b84:	18d2      	adds	r2, r2, r3
 8009b86:	920a      	str	r2, [sp, #40]	; 0x28
 8009b88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b8a:	18d3      	adds	r3, r2, r3
 8009b8c:	930d      	str	r3, [sp, #52]	; 0x34
 8009b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	dd05      	ble.n	8009ba0 <_dtoa_r+0x90c>
 8009b94:	001a      	movs	r2, r3
 8009b96:	0038      	movs	r0, r7
 8009b98:	9905      	ldr	r1, [sp, #20]
 8009b9a:	f000 fbc5 	bl	800a328 <__lshift>
 8009b9e:	9005      	str	r0, [sp, #20]
 8009ba0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	dd05      	ble.n	8009bb2 <_dtoa_r+0x91e>
 8009ba6:	0031      	movs	r1, r6
 8009ba8:	001a      	movs	r2, r3
 8009baa:	0038      	movs	r0, r7
 8009bac:	f000 fbbc 	bl	800a328 <__lshift>
 8009bb0:	0006      	movs	r6, r0
 8009bb2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d026      	beq.n	8009c06 <_dtoa_r+0x972>
 8009bb8:	0031      	movs	r1, r6
 8009bba:	9805      	ldr	r0, [sp, #20]
 8009bbc:	f000 fc22 	bl	800a404 <__mcmp>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	da20      	bge.n	8009c06 <_dtoa_r+0x972>
 8009bc4:	9b02      	ldr	r3, [sp, #8]
 8009bc6:	220a      	movs	r2, #10
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	9302      	str	r3, [sp, #8]
 8009bcc:	0038      	movs	r0, r7
 8009bce:	2300      	movs	r3, #0
 8009bd0:	9905      	ldr	r1, [sp, #20]
 8009bd2:	f000 f9fb 	bl	8009fcc <__multadd>
 8009bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bd8:	9005      	str	r0, [sp, #20]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d100      	bne.n	8009be0 <_dtoa_r+0x94c>
 8009bde:	e166      	b.n	8009eae <_dtoa_r+0xc1a>
 8009be0:	2300      	movs	r3, #0
 8009be2:	0029      	movs	r1, r5
 8009be4:	220a      	movs	r2, #10
 8009be6:	0038      	movs	r0, r7
 8009be8:	f000 f9f0 	bl	8009fcc <__multadd>
 8009bec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bee:	0005      	movs	r5, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	dc47      	bgt.n	8009c84 <_dtoa_r+0x9f0>
 8009bf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	dc0d      	bgt.n	8009c16 <_dtoa_r+0x982>
 8009bfa:	e043      	b.n	8009c84 <_dtoa_r+0x9f0>
 8009bfc:	2a04      	cmp	r2, #4
 8009bfe:	d0c6      	beq.n	8009b8e <_dtoa_r+0x8fa>
 8009c00:	0013      	movs	r3, r2
 8009c02:	331c      	adds	r3, #28
 8009c04:	e7bc      	b.n	8009b80 <_dtoa_r+0x8ec>
 8009c06:	9b07      	ldr	r3, [sp, #28]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	dc35      	bgt.n	8009c78 <_dtoa_r+0x9e4>
 8009c0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	dd32      	ble.n	8009c78 <_dtoa_r+0x9e4>
 8009c12:	9b07      	ldr	r3, [sp, #28]
 8009c14:	930c      	str	r3, [sp, #48]	; 0x30
 8009c16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10c      	bne.n	8009c36 <_dtoa_r+0x9a2>
 8009c1c:	0031      	movs	r1, r6
 8009c1e:	2205      	movs	r2, #5
 8009c20:	0038      	movs	r0, r7
 8009c22:	f000 f9d3 	bl	8009fcc <__multadd>
 8009c26:	0006      	movs	r6, r0
 8009c28:	0001      	movs	r1, r0
 8009c2a:	9805      	ldr	r0, [sp, #20]
 8009c2c:	f000 fbea 	bl	800a404 <__mcmp>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	dd00      	ble.n	8009c36 <_dtoa_r+0x9a2>
 8009c34:	e5a5      	b.n	8009782 <_dtoa_r+0x4ee>
 8009c36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c38:	43db      	mvns	r3, r3
 8009c3a:	9302      	str	r3, [sp, #8]
 8009c3c:	9b06      	ldr	r3, [sp, #24]
 8009c3e:	9308      	str	r3, [sp, #32]
 8009c40:	2400      	movs	r4, #0
 8009c42:	0031      	movs	r1, r6
 8009c44:	0038      	movs	r0, r7
 8009c46:	f000 f99d 	bl	8009f84 <_Bfree>
 8009c4a:	2d00      	cmp	r5, #0
 8009c4c:	d100      	bne.n	8009c50 <_dtoa_r+0x9bc>
 8009c4e:	e6b7      	b.n	80099c0 <_dtoa_r+0x72c>
 8009c50:	2c00      	cmp	r4, #0
 8009c52:	d005      	beq.n	8009c60 <_dtoa_r+0x9cc>
 8009c54:	42ac      	cmp	r4, r5
 8009c56:	d003      	beq.n	8009c60 <_dtoa_r+0x9cc>
 8009c58:	0021      	movs	r1, r4
 8009c5a:	0038      	movs	r0, r7
 8009c5c:	f000 f992 	bl	8009f84 <_Bfree>
 8009c60:	0029      	movs	r1, r5
 8009c62:	0038      	movs	r0, r7
 8009c64:	f000 f98e 	bl	8009f84 <_Bfree>
 8009c68:	e6aa      	b.n	80099c0 <_dtoa_r+0x72c>
 8009c6a:	2600      	movs	r6, #0
 8009c6c:	0035      	movs	r5, r6
 8009c6e:	e7e2      	b.n	8009c36 <_dtoa_r+0x9a2>
 8009c70:	9602      	str	r6, [sp, #8]
 8009c72:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009c74:	0035      	movs	r5, r6
 8009c76:	e584      	b.n	8009782 <_dtoa_r+0x4ee>
 8009c78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d100      	bne.n	8009c80 <_dtoa_r+0x9ec>
 8009c7e:	e0ce      	b.n	8009e1e <_dtoa_r+0xb8a>
 8009c80:	9b07      	ldr	r3, [sp, #28]
 8009c82:	930c      	str	r3, [sp, #48]	; 0x30
 8009c84:	2c00      	cmp	r4, #0
 8009c86:	dd05      	ble.n	8009c94 <_dtoa_r+0xa00>
 8009c88:	0029      	movs	r1, r5
 8009c8a:	0022      	movs	r2, r4
 8009c8c:	0038      	movs	r0, r7
 8009c8e:	f000 fb4b 	bl	800a328 <__lshift>
 8009c92:	0005      	movs	r5, r0
 8009c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c96:	0028      	movs	r0, r5
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d022      	beq.n	8009ce2 <_dtoa_r+0xa4e>
 8009c9c:	0038      	movs	r0, r7
 8009c9e:	6869      	ldr	r1, [r5, #4]
 8009ca0:	f000 f92c 	bl	8009efc <_Balloc>
 8009ca4:	1e04      	subs	r4, r0, #0
 8009ca6:	d10f      	bne.n	8009cc8 <_dtoa_r+0xa34>
 8009ca8:	0002      	movs	r2, r0
 8009caa:	4b05      	ldr	r3, [pc, #20]	; (8009cc0 <_dtoa_r+0xa2c>)
 8009cac:	4905      	ldr	r1, [pc, #20]	; (8009cc4 <_dtoa_r+0xa30>)
 8009cae:	f7ff fb06 	bl	80092be <_dtoa_r+0x2a>
 8009cb2:	46c0      	nop			; (mov r8, r8)
 8009cb4:	40240000 	.word	0x40240000
 8009cb8:	00000433 	.word	0x00000433
 8009cbc:	7ff00000 	.word	0x7ff00000
 8009cc0:	0800ba37 	.word	0x0800ba37
 8009cc4:	000002ea 	.word	0x000002ea
 8009cc8:	0029      	movs	r1, r5
 8009cca:	692b      	ldr	r3, [r5, #16]
 8009ccc:	310c      	adds	r1, #12
 8009cce:	1c9a      	adds	r2, r3, #2
 8009cd0:	0092      	lsls	r2, r2, #2
 8009cd2:	300c      	adds	r0, #12
 8009cd4:	f7fe fd9e 	bl	8008814 <memcpy>
 8009cd8:	2201      	movs	r2, #1
 8009cda:	0021      	movs	r1, r4
 8009cdc:	0038      	movs	r0, r7
 8009cde:	f000 fb23 	bl	800a328 <__lshift>
 8009ce2:	9b06      	ldr	r3, [sp, #24]
 8009ce4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	189b      	adds	r3, r3, r2
 8009cec:	2201      	movs	r2, #1
 8009cee:	002c      	movs	r4, r5
 8009cf0:	0005      	movs	r5, r0
 8009cf2:	9314      	str	r3, [sp, #80]	; 0x50
 8009cf4:	9b08      	ldr	r3, [sp, #32]
 8009cf6:	4013      	ands	r3, r2
 8009cf8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cfa:	0031      	movs	r1, r6
 8009cfc:	9805      	ldr	r0, [sp, #20]
 8009cfe:	f7ff fa3e 	bl	800917e <quorem>
 8009d02:	0003      	movs	r3, r0
 8009d04:	0021      	movs	r1, r4
 8009d06:	3330      	adds	r3, #48	; 0x30
 8009d08:	900d      	str	r0, [sp, #52]	; 0x34
 8009d0a:	9805      	ldr	r0, [sp, #20]
 8009d0c:	9307      	str	r3, [sp, #28]
 8009d0e:	f000 fb79 	bl	800a404 <__mcmp>
 8009d12:	002a      	movs	r2, r5
 8009d14:	900e      	str	r0, [sp, #56]	; 0x38
 8009d16:	0031      	movs	r1, r6
 8009d18:	0038      	movs	r0, r7
 8009d1a:	f000 fb8f 	bl	800a43c <__mdiff>
 8009d1e:	68c3      	ldr	r3, [r0, #12]
 8009d20:	9008      	str	r0, [sp, #32]
 8009d22:	9310      	str	r3, [sp, #64]	; 0x40
 8009d24:	2301      	movs	r3, #1
 8009d26:	930c      	str	r3, [sp, #48]	; 0x30
 8009d28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d104      	bne.n	8009d38 <_dtoa_r+0xaa4>
 8009d2e:	0001      	movs	r1, r0
 8009d30:	9805      	ldr	r0, [sp, #20]
 8009d32:	f000 fb67 	bl	800a404 <__mcmp>
 8009d36:	900c      	str	r0, [sp, #48]	; 0x30
 8009d38:	0038      	movs	r0, r7
 8009d3a:	9908      	ldr	r1, [sp, #32]
 8009d3c:	f000 f922 	bl	8009f84 <_Bfree>
 8009d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d44:	3301      	adds	r3, #1
 8009d46:	9308      	str	r3, [sp, #32]
 8009d48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	d10c      	bne.n	8009d6c <_dtoa_r+0xad8>
 8009d52:	9b07      	ldr	r3, [sp, #28]
 8009d54:	2b39      	cmp	r3, #57	; 0x39
 8009d56:	d026      	beq.n	8009da6 <_dtoa_r+0xb12>
 8009d58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	dd02      	ble.n	8009d64 <_dtoa_r+0xad0>
 8009d5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d60:	3331      	adds	r3, #49	; 0x31
 8009d62:	9307      	str	r3, [sp, #28]
 8009d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d66:	9a07      	ldr	r2, [sp, #28]
 8009d68:	701a      	strb	r2, [r3, #0]
 8009d6a:	e76a      	b.n	8009c42 <_dtoa_r+0x9ae>
 8009d6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	db04      	blt.n	8009d7c <_dtoa_r+0xae8>
 8009d72:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009d74:	4313      	orrs	r3, r2
 8009d76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	d11f      	bne.n	8009dbc <_dtoa_r+0xb28>
 8009d7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	ddf0      	ble.n	8009d64 <_dtoa_r+0xad0>
 8009d82:	9905      	ldr	r1, [sp, #20]
 8009d84:	2201      	movs	r2, #1
 8009d86:	0038      	movs	r0, r7
 8009d88:	f000 face 	bl	800a328 <__lshift>
 8009d8c:	0031      	movs	r1, r6
 8009d8e:	9005      	str	r0, [sp, #20]
 8009d90:	f000 fb38 	bl	800a404 <__mcmp>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	dc03      	bgt.n	8009da0 <_dtoa_r+0xb0c>
 8009d98:	d1e4      	bne.n	8009d64 <_dtoa_r+0xad0>
 8009d9a:	9b07      	ldr	r3, [sp, #28]
 8009d9c:	07db      	lsls	r3, r3, #31
 8009d9e:	d5e1      	bpl.n	8009d64 <_dtoa_r+0xad0>
 8009da0:	9b07      	ldr	r3, [sp, #28]
 8009da2:	2b39      	cmp	r3, #57	; 0x39
 8009da4:	d1db      	bne.n	8009d5e <_dtoa_r+0xaca>
 8009da6:	2339      	movs	r3, #57	; 0x39
 8009da8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009daa:	7013      	strb	r3, [r2, #0]
 8009dac:	9b08      	ldr	r3, [sp, #32]
 8009dae:	9308      	str	r3, [sp, #32]
 8009db0:	3b01      	subs	r3, #1
 8009db2:	781a      	ldrb	r2, [r3, #0]
 8009db4:	2a39      	cmp	r2, #57	; 0x39
 8009db6:	d068      	beq.n	8009e8a <_dtoa_r+0xbf6>
 8009db8:	3201      	adds	r2, #1
 8009dba:	e7d5      	b.n	8009d68 <_dtoa_r+0xad4>
 8009dbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	dd07      	ble.n	8009dd2 <_dtoa_r+0xb3e>
 8009dc2:	9b07      	ldr	r3, [sp, #28]
 8009dc4:	2b39      	cmp	r3, #57	; 0x39
 8009dc6:	d0ee      	beq.n	8009da6 <_dtoa_r+0xb12>
 8009dc8:	9b07      	ldr	r3, [sp, #28]
 8009dca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dcc:	3301      	adds	r3, #1
 8009dce:	7013      	strb	r3, [r2, #0]
 8009dd0:	e737      	b.n	8009c42 <_dtoa_r+0x9ae>
 8009dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dd4:	9a07      	ldr	r2, [sp, #28]
 8009dd6:	701a      	strb	r2, [r3, #0]
 8009dd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d03e      	beq.n	8009e5e <_dtoa_r+0xbca>
 8009de0:	2300      	movs	r3, #0
 8009de2:	220a      	movs	r2, #10
 8009de4:	9905      	ldr	r1, [sp, #20]
 8009de6:	0038      	movs	r0, r7
 8009de8:	f000 f8f0 	bl	8009fcc <__multadd>
 8009dec:	2300      	movs	r3, #0
 8009dee:	9005      	str	r0, [sp, #20]
 8009df0:	220a      	movs	r2, #10
 8009df2:	0021      	movs	r1, r4
 8009df4:	0038      	movs	r0, r7
 8009df6:	42ac      	cmp	r4, r5
 8009df8:	d106      	bne.n	8009e08 <_dtoa_r+0xb74>
 8009dfa:	f000 f8e7 	bl	8009fcc <__multadd>
 8009dfe:	0004      	movs	r4, r0
 8009e00:	0005      	movs	r5, r0
 8009e02:	9b08      	ldr	r3, [sp, #32]
 8009e04:	930a      	str	r3, [sp, #40]	; 0x28
 8009e06:	e778      	b.n	8009cfa <_dtoa_r+0xa66>
 8009e08:	f000 f8e0 	bl	8009fcc <__multadd>
 8009e0c:	0029      	movs	r1, r5
 8009e0e:	0004      	movs	r4, r0
 8009e10:	2300      	movs	r3, #0
 8009e12:	220a      	movs	r2, #10
 8009e14:	0038      	movs	r0, r7
 8009e16:	f000 f8d9 	bl	8009fcc <__multadd>
 8009e1a:	0005      	movs	r5, r0
 8009e1c:	e7f1      	b.n	8009e02 <_dtoa_r+0xb6e>
 8009e1e:	9b07      	ldr	r3, [sp, #28]
 8009e20:	930c      	str	r3, [sp, #48]	; 0x30
 8009e22:	2400      	movs	r4, #0
 8009e24:	0031      	movs	r1, r6
 8009e26:	9805      	ldr	r0, [sp, #20]
 8009e28:	f7ff f9a9 	bl	800917e <quorem>
 8009e2c:	9b06      	ldr	r3, [sp, #24]
 8009e2e:	3030      	adds	r0, #48	; 0x30
 8009e30:	5518      	strb	r0, [r3, r4]
 8009e32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e34:	3401      	adds	r4, #1
 8009e36:	9007      	str	r0, [sp, #28]
 8009e38:	42a3      	cmp	r3, r4
 8009e3a:	dd07      	ble.n	8009e4c <_dtoa_r+0xbb8>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	220a      	movs	r2, #10
 8009e40:	0038      	movs	r0, r7
 8009e42:	9905      	ldr	r1, [sp, #20]
 8009e44:	f000 f8c2 	bl	8009fcc <__multadd>
 8009e48:	9005      	str	r0, [sp, #20]
 8009e4a:	e7eb      	b.n	8009e24 <_dtoa_r+0xb90>
 8009e4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e4e:	2001      	movs	r0, #1
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	dd00      	ble.n	8009e56 <_dtoa_r+0xbc2>
 8009e54:	0018      	movs	r0, r3
 8009e56:	2400      	movs	r4, #0
 8009e58:	9b06      	ldr	r3, [sp, #24]
 8009e5a:	181b      	adds	r3, r3, r0
 8009e5c:	9308      	str	r3, [sp, #32]
 8009e5e:	9905      	ldr	r1, [sp, #20]
 8009e60:	2201      	movs	r2, #1
 8009e62:	0038      	movs	r0, r7
 8009e64:	f000 fa60 	bl	800a328 <__lshift>
 8009e68:	0031      	movs	r1, r6
 8009e6a:	9005      	str	r0, [sp, #20]
 8009e6c:	f000 faca 	bl	800a404 <__mcmp>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	dc9b      	bgt.n	8009dac <_dtoa_r+0xb18>
 8009e74:	d102      	bne.n	8009e7c <_dtoa_r+0xbe8>
 8009e76:	9b07      	ldr	r3, [sp, #28]
 8009e78:	07db      	lsls	r3, r3, #31
 8009e7a:	d497      	bmi.n	8009dac <_dtoa_r+0xb18>
 8009e7c:	9b08      	ldr	r3, [sp, #32]
 8009e7e:	9308      	str	r3, [sp, #32]
 8009e80:	3b01      	subs	r3, #1
 8009e82:	781a      	ldrb	r2, [r3, #0]
 8009e84:	2a30      	cmp	r2, #48	; 0x30
 8009e86:	d0fa      	beq.n	8009e7e <_dtoa_r+0xbea>
 8009e88:	e6db      	b.n	8009c42 <_dtoa_r+0x9ae>
 8009e8a:	9a06      	ldr	r2, [sp, #24]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d18e      	bne.n	8009dae <_dtoa_r+0xb1a>
 8009e90:	9b02      	ldr	r3, [sp, #8]
 8009e92:	3301      	adds	r3, #1
 8009e94:	9302      	str	r3, [sp, #8]
 8009e96:	2331      	movs	r3, #49	; 0x31
 8009e98:	e799      	b.n	8009dce <_dtoa_r+0xb3a>
 8009e9a:	4b09      	ldr	r3, [pc, #36]	; (8009ec0 <_dtoa_r+0xc2c>)
 8009e9c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009e9e:	9306      	str	r3, [sp, #24]
 8009ea0:	4b08      	ldr	r3, [pc, #32]	; (8009ec4 <_dtoa_r+0xc30>)
 8009ea2:	2a00      	cmp	r2, #0
 8009ea4:	d001      	beq.n	8009eaa <_dtoa_r+0xc16>
 8009ea6:	f7ff fa3f 	bl	8009328 <_dtoa_r+0x94>
 8009eaa:	f7ff fa3f 	bl	800932c <_dtoa_r+0x98>
 8009eae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	dcb6      	bgt.n	8009e22 <_dtoa_r+0xb8e>
 8009eb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	dd00      	ble.n	8009ebc <_dtoa_r+0xc28>
 8009eba:	e6ac      	b.n	8009c16 <_dtoa_r+0x982>
 8009ebc:	e7b1      	b.n	8009e22 <_dtoa_r+0xb8e>
 8009ebe:	46c0      	nop			; (mov r8, r8)
 8009ec0:	0800b9b8 	.word	0x0800b9b8
 8009ec4:	0800b9c0 	.word	0x0800b9c0

08009ec8 <_localeconv_r>:
 8009ec8:	4800      	ldr	r0, [pc, #0]	; (8009ecc <_localeconv_r+0x4>)
 8009eca:	4770      	bx	lr
 8009ecc:	20000164 	.word	0x20000164

08009ed0 <malloc>:
 8009ed0:	b510      	push	{r4, lr}
 8009ed2:	4b03      	ldr	r3, [pc, #12]	; (8009ee0 <malloc+0x10>)
 8009ed4:	0001      	movs	r1, r0
 8009ed6:	6818      	ldr	r0, [r3, #0]
 8009ed8:	f000 fc44 	bl	800a764 <_malloc_r>
 8009edc:	bd10      	pop	{r4, pc}
 8009ede:	46c0      	nop			; (mov r8, r8)
 8009ee0:	20000010 	.word	0x20000010

08009ee4 <memchr>:
 8009ee4:	b2c9      	uxtb	r1, r1
 8009ee6:	1882      	adds	r2, r0, r2
 8009ee8:	4290      	cmp	r0, r2
 8009eea:	d101      	bne.n	8009ef0 <memchr+0xc>
 8009eec:	2000      	movs	r0, #0
 8009eee:	4770      	bx	lr
 8009ef0:	7803      	ldrb	r3, [r0, #0]
 8009ef2:	428b      	cmp	r3, r1
 8009ef4:	d0fb      	beq.n	8009eee <memchr+0xa>
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	e7f6      	b.n	8009ee8 <memchr+0x4>
	...

08009efc <_Balloc>:
 8009efc:	b570      	push	{r4, r5, r6, lr}
 8009efe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f00:	0006      	movs	r6, r0
 8009f02:	000c      	movs	r4, r1
 8009f04:	2d00      	cmp	r5, #0
 8009f06:	d10e      	bne.n	8009f26 <_Balloc+0x2a>
 8009f08:	2010      	movs	r0, #16
 8009f0a:	f7ff ffe1 	bl	8009ed0 <malloc>
 8009f0e:	1e02      	subs	r2, r0, #0
 8009f10:	6270      	str	r0, [r6, #36]	; 0x24
 8009f12:	d104      	bne.n	8009f1e <_Balloc+0x22>
 8009f14:	2166      	movs	r1, #102	; 0x66
 8009f16:	4b19      	ldr	r3, [pc, #100]	; (8009f7c <_Balloc+0x80>)
 8009f18:	4819      	ldr	r0, [pc, #100]	; (8009f80 <_Balloc+0x84>)
 8009f1a:	f000 fe0d 	bl	800ab38 <__assert_func>
 8009f1e:	6045      	str	r5, [r0, #4]
 8009f20:	6085      	str	r5, [r0, #8]
 8009f22:	6005      	str	r5, [r0, #0]
 8009f24:	60c5      	str	r5, [r0, #12]
 8009f26:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009f28:	68eb      	ldr	r3, [r5, #12]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d013      	beq.n	8009f56 <_Balloc+0x5a>
 8009f2e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009f30:	00a2      	lsls	r2, r4, #2
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	189b      	adds	r3, r3, r2
 8009f36:	6818      	ldr	r0, [r3, #0]
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d118      	bne.n	8009f6e <_Balloc+0x72>
 8009f3c:	2101      	movs	r1, #1
 8009f3e:	000d      	movs	r5, r1
 8009f40:	40a5      	lsls	r5, r4
 8009f42:	1d6a      	adds	r2, r5, #5
 8009f44:	0030      	movs	r0, r6
 8009f46:	0092      	lsls	r2, r2, #2
 8009f48:	f000 fb74 	bl	800a634 <_calloc_r>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d00c      	beq.n	8009f6a <_Balloc+0x6e>
 8009f50:	6044      	str	r4, [r0, #4]
 8009f52:	6085      	str	r5, [r0, #8]
 8009f54:	e00d      	b.n	8009f72 <_Balloc+0x76>
 8009f56:	2221      	movs	r2, #33	; 0x21
 8009f58:	2104      	movs	r1, #4
 8009f5a:	0030      	movs	r0, r6
 8009f5c:	f000 fb6a 	bl	800a634 <_calloc_r>
 8009f60:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009f62:	60e8      	str	r0, [r5, #12]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1e1      	bne.n	8009f2e <_Balloc+0x32>
 8009f6a:	2000      	movs	r0, #0
 8009f6c:	bd70      	pop	{r4, r5, r6, pc}
 8009f6e:	6802      	ldr	r2, [r0, #0]
 8009f70:	601a      	str	r2, [r3, #0]
 8009f72:	2300      	movs	r3, #0
 8009f74:	6103      	str	r3, [r0, #16]
 8009f76:	60c3      	str	r3, [r0, #12]
 8009f78:	e7f8      	b.n	8009f6c <_Balloc+0x70>
 8009f7a:	46c0      	nop			; (mov r8, r8)
 8009f7c:	0800b9c5 	.word	0x0800b9c5
 8009f80:	0800ba48 	.word	0x0800ba48

08009f84 <_Bfree>:
 8009f84:	b570      	push	{r4, r5, r6, lr}
 8009f86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f88:	0005      	movs	r5, r0
 8009f8a:	000c      	movs	r4, r1
 8009f8c:	2e00      	cmp	r6, #0
 8009f8e:	d10e      	bne.n	8009fae <_Bfree+0x2a>
 8009f90:	2010      	movs	r0, #16
 8009f92:	f7ff ff9d 	bl	8009ed0 <malloc>
 8009f96:	1e02      	subs	r2, r0, #0
 8009f98:	6268      	str	r0, [r5, #36]	; 0x24
 8009f9a:	d104      	bne.n	8009fa6 <_Bfree+0x22>
 8009f9c:	218a      	movs	r1, #138	; 0x8a
 8009f9e:	4b09      	ldr	r3, [pc, #36]	; (8009fc4 <_Bfree+0x40>)
 8009fa0:	4809      	ldr	r0, [pc, #36]	; (8009fc8 <_Bfree+0x44>)
 8009fa2:	f000 fdc9 	bl	800ab38 <__assert_func>
 8009fa6:	6046      	str	r6, [r0, #4]
 8009fa8:	6086      	str	r6, [r0, #8]
 8009faa:	6006      	str	r6, [r0, #0]
 8009fac:	60c6      	str	r6, [r0, #12]
 8009fae:	2c00      	cmp	r4, #0
 8009fb0:	d007      	beq.n	8009fc2 <_Bfree+0x3e>
 8009fb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009fb4:	6862      	ldr	r2, [r4, #4]
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	0092      	lsls	r2, r2, #2
 8009fba:	189b      	adds	r3, r3, r2
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	6022      	str	r2, [r4, #0]
 8009fc0:	601c      	str	r4, [r3, #0]
 8009fc2:	bd70      	pop	{r4, r5, r6, pc}
 8009fc4:	0800b9c5 	.word	0x0800b9c5
 8009fc8:	0800ba48 	.word	0x0800ba48

08009fcc <__multadd>:
 8009fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fce:	000e      	movs	r6, r1
 8009fd0:	9001      	str	r0, [sp, #4]
 8009fd2:	000c      	movs	r4, r1
 8009fd4:	001d      	movs	r5, r3
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	690f      	ldr	r7, [r1, #16]
 8009fda:	3614      	adds	r6, #20
 8009fdc:	6833      	ldr	r3, [r6, #0]
 8009fde:	3001      	adds	r0, #1
 8009fe0:	b299      	uxth	r1, r3
 8009fe2:	4351      	muls	r1, r2
 8009fe4:	0c1b      	lsrs	r3, r3, #16
 8009fe6:	4353      	muls	r3, r2
 8009fe8:	1949      	adds	r1, r1, r5
 8009fea:	0c0d      	lsrs	r5, r1, #16
 8009fec:	195b      	adds	r3, r3, r5
 8009fee:	0c1d      	lsrs	r5, r3, #16
 8009ff0:	b289      	uxth	r1, r1
 8009ff2:	041b      	lsls	r3, r3, #16
 8009ff4:	185b      	adds	r3, r3, r1
 8009ff6:	c608      	stmia	r6!, {r3}
 8009ff8:	4287      	cmp	r7, r0
 8009ffa:	dcef      	bgt.n	8009fdc <__multadd+0x10>
 8009ffc:	2d00      	cmp	r5, #0
 8009ffe:	d022      	beq.n	800a046 <__multadd+0x7a>
 800a000:	68a3      	ldr	r3, [r4, #8]
 800a002:	42bb      	cmp	r3, r7
 800a004:	dc19      	bgt.n	800a03a <__multadd+0x6e>
 800a006:	6863      	ldr	r3, [r4, #4]
 800a008:	9801      	ldr	r0, [sp, #4]
 800a00a:	1c59      	adds	r1, r3, #1
 800a00c:	f7ff ff76 	bl	8009efc <_Balloc>
 800a010:	1e06      	subs	r6, r0, #0
 800a012:	d105      	bne.n	800a020 <__multadd+0x54>
 800a014:	0002      	movs	r2, r0
 800a016:	21b5      	movs	r1, #181	; 0xb5
 800a018:	4b0c      	ldr	r3, [pc, #48]	; (800a04c <__multadd+0x80>)
 800a01a:	480d      	ldr	r0, [pc, #52]	; (800a050 <__multadd+0x84>)
 800a01c:	f000 fd8c 	bl	800ab38 <__assert_func>
 800a020:	0021      	movs	r1, r4
 800a022:	6923      	ldr	r3, [r4, #16]
 800a024:	310c      	adds	r1, #12
 800a026:	1c9a      	adds	r2, r3, #2
 800a028:	0092      	lsls	r2, r2, #2
 800a02a:	300c      	adds	r0, #12
 800a02c:	f7fe fbf2 	bl	8008814 <memcpy>
 800a030:	0021      	movs	r1, r4
 800a032:	9801      	ldr	r0, [sp, #4]
 800a034:	f7ff ffa6 	bl	8009f84 <_Bfree>
 800a038:	0034      	movs	r4, r6
 800a03a:	1d3b      	adds	r3, r7, #4
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	18e3      	adds	r3, r4, r3
 800a040:	605d      	str	r5, [r3, #4]
 800a042:	1c7b      	adds	r3, r7, #1
 800a044:	6123      	str	r3, [r4, #16]
 800a046:	0020      	movs	r0, r4
 800a048:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a04a:	46c0      	nop			; (mov r8, r8)
 800a04c:	0800ba37 	.word	0x0800ba37
 800a050:	0800ba48 	.word	0x0800ba48

0800a054 <__hi0bits>:
 800a054:	0003      	movs	r3, r0
 800a056:	0c02      	lsrs	r2, r0, #16
 800a058:	2000      	movs	r0, #0
 800a05a:	4282      	cmp	r2, r0
 800a05c:	d101      	bne.n	800a062 <__hi0bits+0xe>
 800a05e:	041b      	lsls	r3, r3, #16
 800a060:	3010      	adds	r0, #16
 800a062:	0e1a      	lsrs	r2, r3, #24
 800a064:	d101      	bne.n	800a06a <__hi0bits+0x16>
 800a066:	3008      	adds	r0, #8
 800a068:	021b      	lsls	r3, r3, #8
 800a06a:	0f1a      	lsrs	r2, r3, #28
 800a06c:	d101      	bne.n	800a072 <__hi0bits+0x1e>
 800a06e:	3004      	adds	r0, #4
 800a070:	011b      	lsls	r3, r3, #4
 800a072:	0f9a      	lsrs	r2, r3, #30
 800a074:	d101      	bne.n	800a07a <__hi0bits+0x26>
 800a076:	3002      	adds	r0, #2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	db03      	blt.n	800a086 <__hi0bits+0x32>
 800a07e:	3001      	adds	r0, #1
 800a080:	005b      	lsls	r3, r3, #1
 800a082:	d400      	bmi.n	800a086 <__hi0bits+0x32>
 800a084:	2020      	movs	r0, #32
 800a086:	4770      	bx	lr

0800a088 <__lo0bits>:
 800a088:	6803      	ldr	r3, [r0, #0]
 800a08a:	0002      	movs	r2, r0
 800a08c:	2107      	movs	r1, #7
 800a08e:	0018      	movs	r0, r3
 800a090:	4008      	ands	r0, r1
 800a092:	420b      	tst	r3, r1
 800a094:	d00d      	beq.n	800a0b2 <__lo0bits+0x2a>
 800a096:	3906      	subs	r1, #6
 800a098:	2000      	movs	r0, #0
 800a09a:	420b      	tst	r3, r1
 800a09c:	d105      	bne.n	800a0aa <__lo0bits+0x22>
 800a09e:	3002      	adds	r0, #2
 800a0a0:	4203      	tst	r3, r0
 800a0a2:	d003      	beq.n	800a0ac <__lo0bits+0x24>
 800a0a4:	40cb      	lsrs	r3, r1
 800a0a6:	0008      	movs	r0, r1
 800a0a8:	6013      	str	r3, [r2, #0]
 800a0aa:	4770      	bx	lr
 800a0ac:	089b      	lsrs	r3, r3, #2
 800a0ae:	6013      	str	r3, [r2, #0]
 800a0b0:	e7fb      	b.n	800a0aa <__lo0bits+0x22>
 800a0b2:	b299      	uxth	r1, r3
 800a0b4:	2900      	cmp	r1, #0
 800a0b6:	d101      	bne.n	800a0bc <__lo0bits+0x34>
 800a0b8:	2010      	movs	r0, #16
 800a0ba:	0c1b      	lsrs	r3, r3, #16
 800a0bc:	b2d9      	uxtb	r1, r3
 800a0be:	2900      	cmp	r1, #0
 800a0c0:	d101      	bne.n	800a0c6 <__lo0bits+0x3e>
 800a0c2:	3008      	adds	r0, #8
 800a0c4:	0a1b      	lsrs	r3, r3, #8
 800a0c6:	0719      	lsls	r1, r3, #28
 800a0c8:	d101      	bne.n	800a0ce <__lo0bits+0x46>
 800a0ca:	3004      	adds	r0, #4
 800a0cc:	091b      	lsrs	r3, r3, #4
 800a0ce:	0799      	lsls	r1, r3, #30
 800a0d0:	d101      	bne.n	800a0d6 <__lo0bits+0x4e>
 800a0d2:	3002      	adds	r0, #2
 800a0d4:	089b      	lsrs	r3, r3, #2
 800a0d6:	07d9      	lsls	r1, r3, #31
 800a0d8:	d4e9      	bmi.n	800a0ae <__lo0bits+0x26>
 800a0da:	3001      	adds	r0, #1
 800a0dc:	085b      	lsrs	r3, r3, #1
 800a0de:	d1e6      	bne.n	800a0ae <__lo0bits+0x26>
 800a0e0:	2020      	movs	r0, #32
 800a0e2:	e7e2      	b.n	800a0aa <__lo0bits+0x22>

0800a0e4 <__i2b>:
 800a0e4:	b510      	push	{r4, lr}
 800a0e6:	000c      	movs	r4, r1
 800a0e8:	2101      	movs	r1, #1
 800a0ea:	f7ff ff07 	bl	8009efc <_Balloc>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d106      	bne.n	800a100 <__i2b+0x1c>
 800a0f2:	21a0      	movs	r1, #160	; 0xa0
 800a0f4:	0002      	movs	r2, r0
 800a0f6:	4b04      	ldr	r3, [pc, #16]	; (800a108 <__i2b+0x24>)
 800a0f8:	4804      	ldr	r0, [pc, #16]	; (800a10c <__i2b+0x28>)
 800a0fa:	0049      	lsls	r1, r1, #1
 800a0fc:	f000 fd1c 	bl	800ab38 <__assert_func>
 800a100:	2301      	movs	r3, #1
 800a102:	6144      	str	r4, [r0, #20]
 800a104:	6103      	str	r3, [r0, #16]
 800a106:	bd10      	pop	{r4, pc}
 800a108:	0800ba37 	.word	0x0800ba37
 800a10c:	0800ba48 	.word	0x0800ba48

0800a110 <__multiply>:
 800a110:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a112:	690b      	ldr	r3, [r1, #16]
 800a114:	0014      	movs	r4, r2
 800a116:	6912      	ldr	r2, [r2, #16]
 800a118:	000d      	movs	r5, r1
 800a11a:	b089      	sub	sp, #36	; 0x24
 800a11c:	4293      	cmp	r3, r2
 800a11e:	da01      	bge.n	800a124 <__multiply+0x14>
 800a120:	0025      	movs	r5, r4
 800a122:	000c      	movs	r4, r1
 800a124:	692f      	ldr	r7, [r5, #16]
 800a126:	6926      	ldr	r6, [r4, #16]
 800a128:	6869      	ldr	r1, [r5, #4]
 800a12a:	19bb      	adds	r3, r7, r6
 800a12c:	9302      	str	r3, [sp, #8]
 800a12e:	68ab      	ldr	r3, [r5, #8]
 800a130:	19ba      	adds	r2, r7, r6
 800a132:	4293      	cmp	r3, r2
 800a134:	da00      	bge.n	800a138 <__multiply+0x28>
 800a136:	3101      	adds	r1, #1
 800a138:	f7ff fee0 	bl	8009efc <_Balloc>
 800a13c:	9001      	str	r0, [sp, #4]
 800a13e:	2800      	cmp	r0, #0
 800a140:	d106      	bne.n	800a150 <__multiply+0x40>
 800a142:	215e      	movs	r1, #94	; 0x5e
 800a144:	0002      	movs	r2, r0
 800a146:	4b48      	ldr	r3, [pc, #288]	; (800a268 <__multiply+0x158>)
 800a148:	4848      	ldr	r0, [pc, #288]	; (800a26c <__multiply+0x15c>)
 800a14a:	31ff      	adds	r1, #255	; 0xff
 800a14c:	f000 fcf4 	bl	800ab38 <__assert_func>
 800a150:	9b01      	ldr	r3, [sp, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	3314      	adds	r3, #20
 800a156:	469c      	mov	ip, r3
 800a158:	19bb      	adds	r3, r7, r6
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4463      	add	r3, ip
 800a15e:	9303      	str	r3, [sp, #12]
 800a160:	4663      	mov	r3, ip
 800a162:	9903      	ldr	r1, [sp, #12]
 800a164:	428b      	cmp	r3, r1
 800a166:	d32c      	bcc.n	800a1c2 <__multiply+0xb2>
 800a168:	002b      	movs	r3, r5
 800a16a:	0022      	movs	r2, r4
 800a16c:	3314      	adds	r3, #20
 800a16e:	00bf      	lsls	r7, r7, #2
 800a170:	3214      	adds	r2, #20
 800a172:	9306      	str	r3, [sp, #24]
 800a174:	00b6      	lsls	r6, r6, #2
 800a176:	19db      	adds	r3, r3, r7
 800a178:	9304      	str	r3, [sp, #16]
 800a17a:	1993      	adds	r3, r2, r6
 800a17c:	9307      	str	r3, [sp, #28]
 800a17e:	2304      	movs	r3, #4
 800a180:	9305      	str	r3, [sp, #20]
 800a182:	002b      	movs	r3, r5
 800a184:	9904      	ldr	r1, [sp, #16]
 800a186:	3315      	adds	r3, #21
 800a188:	9200      	str	r2, [sp, #0]
 800a18a:	4299      	cmp	r1, r3
 800a18c:	d305      	bcc.n	800a19a <__multiply+0x8a>
 800a18e:	1b4b      	subs	r3, r1, r5
 800a190:	3b15      	subs	r3, #21
 800a192:	089b      	lsrs	r3, r3, #2
 800a194:	3301      	adds	r3, #1
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	9305      	str	r3, [sp, #20]
 800a19a:	9b07      	ldr	r3, [sp, #28]
 800a19c:	9a00      	ldr	r2, [sp, #0]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d311      	bcc.n	800a1c6 <__multiply+0xb6>
 800a1a2:	9b02      	ldr	r3, [sp, #8]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	dd06      	ble.n	800a1b6 <__multiply+0xa6>
 800a1a8:	9b03      	ldr	r3, [sp, #12]
 800a1aa:	3b04      	subs	r3, #4
 800a1ac:	9303      	str	r3, [sp, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d053      	beq.n	800a25e <__multiply+0x14e>
 800a1b6:	9b01      	ldr	r3, [sp, #4]
 800a1b8:	9a02      	ldr	r2, [sp, #8]
 800a1ba:	0018      	movs	r0, r3
 800a1bc:	611a      	str	r2, [r3, #16]
 800a1be:	b009      	add	sp, #36	; 0x24
 800a1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1c2:	c304      	stmia	r3!, {r2}
 800a1c4:	e7cd      	b.n	800a162 <__multiply+0x52>
 800a1c6:	9b00      	ldr	r3, [sp, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	b298      	uxth	r0, r3
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d01b      	beq.n	800a208 <__multiply+0xf8>
 800a1d0:	4667      	mov	r7, ip
 800a1d2:	2400      	movs	r4, #0
 800a1d4:	9e06      	ldr	r6, [sp, #24]
 800a1d6:	ce02      	ldmia	r6!, {r1}
 800a1d8:	683a      	ldr	r2, [r7, #0]
 800a1da:	b28b      	uxth	r3, r1
 800a1dc:	4343      	muls	r3, r0
 800a1de:	b292      	uxth	r2, r2
 800a1e0:	189b      	adds	r3, r3, r2
 800a1e2:	191b      	adds	r3, r3, r4
 800a1e4:	0c0c      	lsrs	r4, r1, #16
 800a1e6:	4344      	muls	r4, r0
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	0c11      	lsrs	r1, r2, #16
 800a1ec:	1861      	adds	r1, r4, r1
 800a1ee:	0c1c      	lsrs	r4, r3, #16
 800a1f0:	1909      	adds	r1, r1, r4
 800a1f2:	0c0c      	lsrs	r4, r1, #16
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	0409      	lsls	r1, r1, #16
 800a1f8:	430b      	orrs	r3, r1
 800a1fa:	c708      	stmia	r7!, {r3}
 800a1fc:	9b04      	ldr	r3, [sp, #16]
 800a1fe:	42b3      	cmp	r3, r6
 800a200:	d8e9      	bhi.n	800a1d6 <__multiply+0xc6>
 800a202:	4663      	mov	r3, ip
 800a204:	9a05      	ldr	r2, [sp, #20]
 800a206:	509c      	str	r4, [r3, r2]
 800a208:	9b00      	ldr	r3, [sp, #0]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	0c1e      	lsrs	r6, r3, #16
 800a20e:	d020      	beq.n	800a252 <__multiply+0x142>
 800a210:	4663      	mov	r3, ip
 800a212:	002c      	movs	r4, r5
 800a214:	4660      	mov	r0, ip
 800a216:	2700      	movs	r7, #0
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	3414      	adds	r4, #20
 800a21c:	6822      	ldr	r2, [r4, #0]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	b291      	uxth	r1, r2
 800a222:	4371      	muls	r1, r6
 800a224:	6802      	ldr	r2, [r0, #0]
 800a226:	0c12      	lsrs	r2, r2, #16
 800a228:	1889      	adds	r1, r1, r2
 800a22a:	19cf      	adds	r7, r1, r7
 800a22c:	0439      	lsls	r1, r7, #16
 800a22e:	430b      	orrs	r3, r1
 800a230:	6003      	str	r3, [r0, #0]
 800a232:	cc02      	ldmia	r4!, {r1}
 800a234:	6843      	ldr	r3, [r0, #4]
 800a236:	0c09      	lsrs	r1, r1, #16
 800a238:	4371      	muls	r1, r6
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	0c3f      	lsrs	r7, r7, #16
 800a23e:	18cb      	adds	r3, r1, r3
 800a240:	9a04      	ldr	r2, [sp, #16]
 800a242:	19db      	adds	r3, r3, r7
 800a244:	0c1f      	lsrs	r7, r3, #16
 800a246:	3004      	adds	r0, #4
 800a248:	42a2      	cmp	r2, r4
 800a24a:	d8e7      	bhi.n	800a21c <__multiply+0x10c>
 800a24c:	4662      	mov	r2, ip
 800a24e:	9905      	ldr	r1, [sp, #20]
 800a250:	5053      	str	r3, [r2, r1]
 800a252:	9b00      	ldr	r3, [sp, #0]
 800a254:	3304      	adds	r3, #4
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	2304      	movs	r3, #4
 800a25a:	449c      	add	ip, r3
 800a25c:	e79d      	b.n	800a19a <__multiply+0x8a>
 800a25e:	9b02      	ldr	r3, [sp, #8]
 800a260:	3b01      	subs	r3, #1
 800a262:	9302      	str	r3, [sp, #8]
 800a264:	e79d      	b.n	800a1a2 <__multiply+0x92>
 800a266:	46c0      	nop			; (mov r8, r8)
 800a268:	0800ba37 	.word	0x0800ba37
 800a26c:	0800ba48 	.word	0x0800ba48

0800a270 <__pow5mult>:
 800a270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a272:	2303      	movs	r3, #3
 800a274:	0015      	movs	r5, r2
 800a276:	0007      	movs	r7, r0
 800a278:	000e      	movs	r6, r1
 800a27a:	401a      	ands	r2, r3
 800a27c:	421d      	tst	r5, r3
 800a27e:	d008      	beq.n	800a292 <__pow5mult+0x22>
 800a280:	4925      	ldr	r1, [pc, #148]	; (800a318 <__pow5mult+0xa8>)
 800a282:	3a01      	subs	r2, #1
 800a284:	0092      	lsls	r2, r2, #2
 800a286:	5852      	ldr	r2, [r2, r1]
 800a288:	2300      	movs	r3, #0
 800a28a:	0031      	movs	r1, r6
 800a28c:	f7ff fe9e 	bl	8009fcc <__multadd>
 800a290:	0006      	movs	r6, r0
 800a292:	10ad      	asrs	r5, r5, #2
 800a294:	d03d      	beq.n	800a312 <__pow5mult+0xa2>
 800a296:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a298:	2c00      	cmp	r4, #0
 800a29a:	d10f      	bne.n	800a2bc <__pow5mult+0x4c>
 800a29c:	2010      	movs	r0, #16
 800a29e:	f7ff fe17 	bl	8009ed0 <malloc>
 800a2a2:	1e02      	subs	r2, r0, #0
 800a2a4:	6278      	str	r0, [r7, #36]	; 0x24
 800a2a6:	d105      	bne.n	800a2b4 <__pow5mult+0x44>
 800a2a8:	21d7      	movs	r1, #215	; 0xd7
 800a2aa:	4b1c      	ldr	r3, [pc, #112]	; (800a31c <__pow5mult+0xac>)
 800a2ac:	481c      	ldr	r0, [pc, #112]	; (800a320 <__pow5mult+0xb0>)
 800a2ae:	0049      	lsls	r1, r1, #1
 800a2b0:	f000 fc42 	bl	800ab38 <__assert_func>
 800a2b4:	6044      	str	r4, [r0, #4]
 800a2b6:	6084      	str	r4, [r0, #8]
 800a2b8:	6004      	str	r4, [r0, #0]
 800a2ba:	60c4      	str	r4, [r0, #12]
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2be:	689c      	ldr	r4, [r3, #8]
 800a2c0:	9301      	str	r3, [sp, #4]
 800a2c2:	2c00      	cmp	r4, #0
 800a2c4:	d108      	bne.n	800a2d8 <__pow5mult+0x68>
 800a2c6:	0038      	movs	r0, r7
 800a2c8:	4916      	ldr	r1, [pc, #88]	; (800a324 <__pow5mult+0xb4>)
 800a2ca:	f7ff ff0b 	bl	800a0e4 <__i2b>
 800a2ce:	9b01      	ldr	r3, [sp, #4]
 800a2d0:	0004      	movs	r4, r0
 800a2d2:	6098      	str	r0, [r3, #8]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	6003      	str	r3, [r0, #0]
 800a2d8:	2301      	movs	r3, #1
 800a2da:	421d      	tst	r5, r3
 800a2dc:	d00a      	beq.n	800a2f4 <__pow5mult+0x84>
 800a2de:	0031      	movs	r1, r6
 800a2e0:	0022      	movs	r2, r4
 800a2e2:	0038      	movs	r0, r7
 800a2e4:	f7ff ff14 	bl	800a110 <__multiply>
 800a2e8:	0031      	movs	r1, r6
 800a2ea:	9001      	str	r0, [sp, #4]
 800a2ec:	0038      	movs	r0, r7
 800a2ee:	f7ff fe49 	bl	8009f84 <_Bfree>
 800a2f2:	9e01      	ldr	r6, [sp, #4]
 800a2f4:	106d      	asrs	r5, r5, #1
 800a2f6:	d00c      	beq.n	800a312 <__pow5mult+0xa2>
 800a2f8:	6820      	ldr	r0, [r4, #0]
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d107      	bne.n	800a30e <__pow5mult+0x9e>
 800a2fe:	0022      	movs	r2, r4
 800a300:	0021      	movs	r1, r4
 800a302:	0038      	movs	r0, r7
 800a304:	f7ff ff04 	bl	800a110 <__multiply>
 800a308:	2300      	movs	r3, #0
 800a30a:	6020      	str	r0, [r4, #0]
 800a30c:	6003      	str	r3, [r0, #0]
 800a30e:	0004      	movs	r4, r0
 800a310:	e7e2      	b.n	800a2d8 <__pow5mult+0x68>
 800a312:	0030      	movs	r0, r6
 800a314:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a316:	46c0      	nop			; (mov r8, r8)
 800a318:	0800bb98 	.word	0x0800bb98
 800a31c:	0800b9c5 	.word	0x0800b9c5
 800a320:	0800ba48 	.word	0x0800ba48
 800a324:	00000271 	.word	0x00000271

0800a328 <__lshift>:
 800a328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a32a:	000c      	movs	r4, r1
 800a32c:	0017      	movs	r7, r2
 800a32e:	6923      	ldr	r3, [r4, #16]
 800a330:	1155      	asrs	r5, r2, #5
 800a332:	b087      	sub	sp, #28
 800a334:	18eb      	adds	r3, r5, r3
 800a336:	9302      	str	r3, [sp, #8]
 800a338:	3301      	adds	r3, #1
 800a33a:	9301      	str	r3, [sp, #4]
 800a33c:	6849      	ldr	r1, [r1, #4]
 800a33e:	68a3      	ldr	r3, [r4, #8]
 800a340:	9004      	str	r0, [sp, #16]
 800a342:	9a01      	ldr	r2, [sp, #4]
 800a344:	4293      	cmp	r3, r2
 800a346:	db10      	blt.n	800a36a <__lshift+0x42>
 800a348:	9804      	ldr	r0, [sp, #16]
 800a34a:	f7ff fdd7 	bl	8009efc <_Balloc>
 800a34e:	2300      	movs	r3, #0
 800a350:	0002      	movs	r2, r0
 800a352:	0006      	movs	r6, r0
 800a354:	0019      	movs	r1, r3
 800a356:	3214      	adds	r2, #20
 800a358:	4298      	cmp	r0, r3
 800a35a:	d10c      	bne.n	800a376 <__lshift+0x4e>
 800a35c:	21da      	movs	r1, #218	; 0xda
 800a35e:	0002      	movs	r2, r0
 800a360:	4b26      	ldr	r3, [pc, #152]	; (800a3fc <__lshift+0xd4>)
 800a362:	4827      	ldr	r0, [pc, #156]	; (800a400 <__lshift+0xd8>)
 800a364:	31ff      	adds	r1, #255	; 0xff
 800a366:	f000 fbe7 	bl	800ab38 <__assert_func>
 800a36a:	3101      	adds	r1, #1
 800a36c:	005b      	lsls	r3, r3, #1
 800a36e:	e7e8      	b.n	800a342 <__lshift+0x1a>
 800a370:	0098      	lsls	r0, r3, #2
 800a372:	5011      	str	r1, [r2, r0]
 800a374:	3301      	adds	r3, #1
 800a376:	42ab      	cmp	r3, r5
 800a378:	dbfa      	blt.n	800a370 <__lshift+0x48>
 800a37a:	43eb      	mvns	r3, r5
 800a37c:	17db      	asrs	r3, r3, #31
 800a37e:	401d      	ands	r5, r3
 800a380:	211f      	movs	r1, #31
 800a382:	0023      	movs	r3, r4
 800a384:	0038      	movs	r0, r7
 800a386:	00ad      	lsls	r5, r5, #2
 800a388:	1955      	adds	r5, r2, r5
 800a38a:	6922      	ldr	r2, [r4, #16]
 800a38c:	3314      	adds	r3, #20
 800a38e:	0092      	lsls	r2, r2, #2
 800a390:	4008      	ands	r0, r1
 800a392:	4684      	mov	ip, r0
 800a394:	189a      	adds	r2, r3, r2
 800a396:	420f      	tst	r7, r1
 800a398:	d02a      	beq.n	800a3f0 <__lshift+0xc8>
 800a39a:	3101      	adds	r1, #1
 800a39c:	1a09      	subs	r1, r1, r0
 800a39e:	9105      	str	r1, [sp, #20]
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	9503      	str	r5, [sp, #12]
 800a3a4:	4667      	mov	r7, ip
 800a3a6:	6818      	ldr	r0, [r3, #0]
 800a3a8:	40b8      	lsls	r0, r7
 800a3aa:	4301      	orrs	r1, r0
 800a3ac:	9803      	ldr	r0, [sp, #12]
 800a3ae:	c002      	stmia	r0!, {r1}
 800a3b0:	cb02      	ldmia	r3!, {r1}
 800a3b2:	9003      	str	r0, [sp, #12]
 800a3b4:	9805      	ldr	r0, [sp, #20]
 800a3b6:	40c1      	lsrs	r1, r0
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d8f3      	bhi.n	800a3a4 <__lshift+0x7c>
 800a3bc:	0020      	movs	r0, r4
 800a3be:	3015      	adds	r0, #21
 800a3c0:	2304      	movs	r3, #4
 800a3c2:	4282      	cmp	r2, r0
 800a3c4:	d304      	bcc.n	800a3d0 <__lshift+0xa8>
 800a3c6:	1b13      	subs	r3, r2, r4
 800a3c8:	3b15      	subs	r3, #21
 800a3ca:	089b      	lsrs	r3, r3, #2
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	50e9      	str	r1, [r5, r3]
 800a3d2:	2900      	cmp	r1, #0
 800a3d4:	d002      	beq.n	800a3dc <__lshift+0xb4>
 800a3d6:	9b02      	ldr	r3, [sp, #8]
 800a3d8:	3302      	adds	r3, #2
 800a3da:	9301      	str	r3, [sp, #4]
 800a3dc:	9b01      	ldr	r3, [sp, #4]
 800a3de:	9804      	ldr	r0, [sp, #16]
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	0021      	movs	r1, r4
 800a3e4:	6133      	str	r3, [r6, #16]
 800a3e6:	f7ff fdcd 	bl	8009f84 <_Bfree>
 800a3ea:	0030      	movs	r0, r6
 800a3ec:	b007      	add	sp, #28
 800a3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3f0:	cb02      	ldmia	r3!, {r1}
 800a3f2:	c502      	stmia	r5!, {r1}
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d8fb      	bhi.n	800a3f0 <__lshift+0xc8>
 800a3f8:	e7f0      	b.n	800a3dc <__lshift+0xb4>
 800a3fa:	46c0      	nop			; (mov r8, r8)
 800a3fc:	0800ba37 	.word	0x0800ba37
 800a400:	0800ba48 	.word	0x0800ba48

0800a404 <__mcmp>:
 800a404:	6902      	ldr	r2, [r0, #16]
 800a406:	690b      	ldr	r3, [r1, #16]
 800a408:	b530      	push	{r4, r5, lr}
 800a40a:	0004      	movs	r4, r0
 800a40c:	1ad0      	subs	r0, r2, r3
 800a40e:	429a      	cmp	r2, r3
 800a410:	d10d      	bne.n	800a42e <__mcmp+0x2a>
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	3414      	adds	r4, #20
 800a416:	3114      	adds	r1, #20
 800a418:	18e2      	adds	r2, r4, r3
 800a41a:	18c9      	adds	r1, r1, r3
 800a41c:	3a04      	subs	r2, #4
 800a41e:	3904      	subs	r1, #4
 800a420:	6815      	ldr	r5, [r2, #0]
 800a422:	680b      	ldr	r3, [r1, #0]
 800a424:	429d      	cmp	r5, r3
 800a426:	d003      	beq.n	800a430 <__mcmp+0x2c>
 800a428:	2001      	movs	r0, #1
 800a42a:	429d      	cmp	r5, r3
 800a42c:	d303      	bcc.n	800a436 <__mcmp+0x32>
 800a42e:	bd30      	pop	{r4, r5, pc}
 800a430:	4294      	cmp	r4, r2
 800a432:	d3f3      	bcc.n	800a41c <__mcmp+0x18>
 800a434:	e7fb      	b.n	800a42e <__mcmp+0x2a>
 800a436:	4240      	negs	r0, r0
 800a438:	e7f9      	b.n	800a42e <__mcmp+0x2a>
	...

0800a43c <__mdiff>:
 800a43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a43e:	000e      	movs	r6, r1
 800a440:	0007      	movs	r7, r0
 800a442:	0011      	movs	r1, r2
 800a444:	0030      	movs	r0, r6
 800a446:	b087      	sub	sp, #28
 800a448:	0014      	movs	r4, r2
 800a44a:	f7ff ffdb 	bl	800a404 <__mcmp>
 800a44e:	1e05      	subs	r5, r0, #0
 800a450:	d110      	bne.n	800a474 <__mdiff+0x38>
 800a452:	0001      	movs	r1, r0
 800a454:	0038      	movs	r0, r7
 800a456:	f7ff fd51 	bl	8009efc <_Balloc>
 800a45a:	1e02      	subs	r2, r0, #0
 800a45c:	d104      	bne.n	800a468 <__mdiff+0x2c>
 800a45e:	4b40      	ldr	r3, [pc, #256]	; (800a560 <__mdiff+0x124>)
 800a460:	4940      	ldr	r1, [pc, #256]	; (800a564 <__mdiff+0x128>)
 800a462:	4841      	ldr	r0, [pc, #260]	; (800a568 <__mdiff+0x12c>)
 800a464:	f000 fb68 	bl	800ab38 <__assert_func>
 800a468:	2301      	movs	r3, #1
 800a46a:	6145      	str	r5, [r0, #20]
 800a46c:	6103      	str	r3, [r0, #16]
 800a46e:	0010      	movs	r0, r2
 800a470:	b007      	add	sp, #28
 800a472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a474:	2301      	movs	r3, #1
 800a476:	9301      	str	r3, [sp, #4]
 800a478:	2800      	cmp	r0, #0
 800a47a:	db04      	blt.n	800a486 <__mdiff+0x4a>
 800a47c:	0023      	movs	r3, r4
 800a47e:	0034      	movs	r4, r6
 800a480:	001e      	movs	r6, r3
 800a482:	2300      	movs	r3, #0
 800a484:	9301      	str	r3, [sp, #4]
 800a486:	0038      	movs	r0, r7
 800a488:	6861      	ldr	r1, [r4, #4]
 800a48a:	f7ff fd37 	bl	8009efc <_Balloc>
 800a48e:	1e02      	subs	r2, r0, #0
 800a490:	d103      	bne.n	800a49a <__mdiff+0x5e>
 800a492:	2190      	movs	r1, #144	; 0x90
 800a494:	4b32      	ldr	r3, [pc, #200]	; (800a560 <__mdiff+0x124>)
 800a496:	0089      	lsls	r1, r1, #2
 800a498:	e7e3      	b.n	800a462 <__mdiff+0x26>
 800a49a:	9b01      	ldr	r3, [sp, #4]
 800a49c:	2700      	movs	r7, #0
 800a49e:	60c3      	str	r3, [r0, #12]
 800a4a0:	6920      	ldr	r0, [r4, #16]
 800a4a2:	3414      	adds	r4, #20
 800a4a4:	9401      	str	r4, [sp, #4]
 800a4a6:	9b01      	ldr	r3, [sp, #4]
 800a4a8:	0084      	lsls	r4, r0, #2
 800a4aa:	191b      	adds	r3, r3, r4
 800a4ac:	0034      	movs	r4, r6
 800a4ae:	9302      	str	r3, [sp, #8]
 800a4b0:	6933      	ldr	r3, [r6, #16]
 800a4b2:	3414      	adds	r4, #20
 800a4b4:	0099      	lsls	r1, r3, #2
 800a4b6:	1863      	adds	r3, r4, r1
 800a4b8:	9303      	str	r3, [sp, #12]
 800a4ba:	0013      	movs	r3, r2
 800a4bc:	3314      	adds	r3, #20
 800a4be:	469c      	mov	ip, r3
 800a4c0:	9305      	str	r3, [sp, #20]
 800a4c2:	9b01      	ldr	r3, [sp, #4]
 800a4c4:	9304      	str	r3, [sp, #16]
 800a4c6:	9b04      	ldr	r3, [sp, #16]
 800a4c8:	cc02      	ldmia	r4!, {r1}
 800a4ca:	cb20      	ldmia	r3!, {r5}
 800a4cc:	9304      	str	r3, [sp, #16]
 800a4ce:	b2ab      	uxth	r3, r5
 800a4d0:	19df      	adds	r7, r3, r7
 800a4d2:	b28b      	uxth	r3, r1
 800a4d4:	1afb      	subs	r3, r7, r3
 800a4d6:	0c09      	lsrs	r1, r1, #16
 800a4d8:	0c2d      	lsrs	r5, r5, #16
 800a4da:	1a6d      	subs	r5, r5, r1
 800a4dc:	1419      	asrs	r1, r3, #16
 800a4de:	186d      	adds	r5, r5, r1
 800a4e0:	4661      	mov	r1, ip
 800a4e2:	142f      	asrs	r7, r5, #16
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	042d      	lsls	r5, r5, #16
 800a4e8:	432b      	orrs	r3, r5
 800a4ea:	c108      	stmia	r1!, {r3}
 800a4ec:	9b03      	ldr	r3, [sp, #12]
 800a4ee:	468c      	mov	ip, r1
 800a4f0:	42a3      	cmp	r3, r4
 800a4f2:	d8e8      	bhi.n	800a4c6 <__mdiff+0x8a>
 800a4f4:	0031      	movs	r1, r6
 800a4f6:	9c03      	ldr	r4, [sp, #12]
 800a4f8:	3115      	adds	r1, #21
 800a4fa:	2304      	movs	r3, #4
 800a4fc:	428c      	cmp	r4, r1
 800a4fe:	d304      	bcc.n	800a50a <__mdiff+0xce>
 800a500:	1ba3      	subs	r3, r4, r6
 800a502:	3b15      	subs	r3, #21
 800a504:	089b      	lsrs	r3, r3, #2
 800a506:	3301      	adds	r3, #1
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	9901      	ldr	r1, [sp, #4]
 800a50c:	18cc      	adds	r4, r1, r3
 800a50e:	9905      	ldr	r1, [sp, #20]
 800a510:	0026      	movs	r6, r4
 800a512:	18cb      	adds	r3, r1, r3
 800a514:	469c      	mov	ip, r3
 800a516:	9902      	ldr	r1, [sp, #8]
 800a518:	428e      	cmp	r6, r1
 800a51a:	d310      	bcc.n	800a53e <__mdiff+0x102>
 800a51c:	9e02      	ldr	r6, [sp, #8]
 800a51e:	1ee1      	subs	r1, r4, #3
 800a520:	2500      	movs	r5, #0
 800a522:	428e      	cmp	r6, r1
 800a524:	d304      	bcc.n	800a530 <__mdiff+0xf4>
 800a526:	0031      	movs	r1, r6
 800a528:	3103      	adds	r1, #3
 800a52a:	1b0c      	subs	r4, r1, r4
 800a52c:	08a4      	lsrs	r4, r4, #2
 800a52e:	00a5      	lsls	r5, r4, #2
 800a530:	195b      	adds	r3, r3, r5
 800a532:	3b04      	subs	r3, #4
 800a534:	6819      	ldr	r1, [r3, #0]
 800a536:	2900      	cmp	r1, #0
 800a538:	d00f      	beq.n	800a55a <__mdiff+0x11e>
 800a53a:	6110      	str	r0, [r2, #16]
 800a53c:	e797      	b.n	800a46e <__mdiff+0x32>
 800a53e:	ce02      	ldmia	r6!, {r1}
 800a540:	b28d      	uxth	r5, r1
 800a542:	19ed      	adds	r5, r5, r7
 800a544:	0c0f      	lsrs	r7, r1, #16
 800a546:	1429      	asrs	r1, r5, #16
 800a548:	1879      	adds	r1, r7, r1
 800a54a:	140f      	asrs	r7, r1, #16
 800a54c:	b2ad      	uxth	r5, r5
 800a54e:	0409      	lsls	r1, r1, #16
 800a550:	430d      	orrs	r5, r1
 800a552:	4661      	mov	r1, ip
 800a554:	c120      	stmia	r1!, {r5}
 800a556:	468c      	mov	ip, r1
 800a558:	e7dd      	b.n	800a516 <__mdiff+0xda>
 800a55a:	3801      	subs	r0, #1
 800a55c:	e7e9      	b.n	800a532 <__mdiff+0xf6>
 800a55e:	46c0      	nop			; (mov r8, r8)
 800a560:	0800ba37 	.word	0x0800ba37
 800a564:	00000232 	.word	0x00000232
 800a568:	0800ba48 	.word	0x0800ba48

0800a56c <__d2b>:
 800a56c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a56e:	2101      	movs	r1, #1
 800a570:	0014      	movs	r4, r2
 800a572:	001e      	movs	r6, r3
 800a574:	9f08      	ldr	r7, [sp, #32]
 800a576:	f7ff fcc1 	bl	8009efc <_Balloc>
 800a57a:	1e05      	subs	r5, r0, #0
 800a57c:	d105      	bne.n	800a58a <__d2b+0x1e>
 800a57e:	0002      	movs	r2, r0
 800a580:	4b26      	ldr	r3, [pc, #152]	; (800a61c <__d2b+0xb0>)
 800a582:	4927      	ldr	r1, [pc, #156]	; (800a620 <__d2b+0xb4>)
 800a584:	4827      	ldr	r0, [pc, #156]	; (800a624 <__d2b+0xb8>)
 800a586:	f000 fad7 	bl	800ab38 <__assert_func>
 800a58a:	0333      	lsls	r3, r6, #12
 800a58c:	0076      	lsls	r6, r6, #1
 800a58e:	0b1b      	lsrs	r3, r3, #12
 800a590:	0d76      	lsrs	r6, r6, #21
 800a592:	d124      	bne.n	800a5de <__d2b+0x72>
 800a594:	9301      	str	r3, [sp, #4]
 800a596:	2c00      	cmp	r4, #0
 800a598:	d027      	beq.n	800a5ea <__d2b+0x7e>
 800a59a:	4668      	mov	r0, sp
 800a59c:	9400      	str	r4, [sp, #0]
 800a59e:	f7ff fd73 	bl	800a088 <__lo0bits>
 800a5a2:	9c00      	ldr	r4, [sp, #0]
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d01e      	beq.n	800a5e6 <__d2b+0x7a>
 800a5a8:	9b01      	ldr	r3, [sp, #4]
 800a5aa:	2120      	movs	r1, #32
 800a5ac:	001a      	movs	r2, r3
 800a5ae:	1a09      	subs	r1, r1, r0
 800a5b0:	408a      	lsls	r2, r1
 800a5b2:	40c3      	lsrs	r3, r0
 800a5b4:	4322      	orrs	r2, r4
 800a5b6:	616a      	str	r2, [r5, #20]
 800a5b8:	9301      	str	r3, [sp, #4]
 800a5ba:	9c01      	ldr	r4, [sp, #4]
 800a5bc:	61ac      	str	r4, [r5, #24]
 800a5be:	1e63      	subs	r3, r4, #1
 800a5c0:	419c      	sbcs	r4, r3
 800a5c2:	3401      	adds	r4, #1
 800a5c4:	612c      	str	r4, [r5, #16]
 800a5c6:	2e00      	cmp	r6, #0
 800a5c8:	d018      	beq.n	800a5fc <__d2b+0x90>
 800a5ca:	4b17      	ldr	r3, [pc, #92]	; (800a628 <__d2b+0xbc>)
 800a5cc:	18f6      	adds	r6, r6, r3
 800a5ce:	2335      	movs	r3, #53	; 0x35
 800a5d0:	1836      	adds	r6, r6, r0
 800a5d2:	1a18      	subs	r0, r3, r0
 800a5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d6:	603e      	str	r6, [r7, #0]
 800a5d8:	6018      	str	r0, [r3, #0]
 800a5da:	0028      	movs	r0, r5
 800a5dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5de:	2280      	movs	r2, #128	; 0x80
 800a5e0:	0352      	lsls	r2, r2, #13
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	e7d6      	b.n	800a594 <__d2b+0x28>
 800a5e6:	616c      	str	r4, [r5, #20]
 800a5e8:	e7e7      	b.n	800a5ba <__d2b+0x4e>
 800a5ea:	a801      	add	r0, sp, #4
 800a5ec:	f7ff fd4c 	bl	800a088 <__lo0bits>
 800a5f0:	2401      	movs	r4, #1
 800a5f2:	9b01      	ldr	r3, [sp, #4]
 800a5f4:	612c      	str	r4, [r5, #16]
 800a5f6:	616b      	str	r3, [r5, #20]
 800a5f8:	3020      	adds	r0, #32
 800a5fa:	e7e4      	b.n	800a5c6 <__d2b+0x5a>
 800a5fc:	4b0b      	ldr	r3, [pc, #44]	; (800a62c <__d2b+0xc0>)
 800a5fe:	18c0      	adds	r0, r0, r3
 800a600:	4b0b      	ldr	r3, [pc, #44]	; (800a630 <__d2b+0xc4>)
 800a602:	6038      	str	r0, [r7, #0]
 800a604:	18e3      	adds	r3, r4, r3
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	18eb      	adds	r3, r5, r3
 800a60a:	6958      	ldr	r0, [r3, #20]
 800a60c:	f7ff fd22 	bl	800a054 <__hi0bits>
 800a610:	0164      	lsls	r4, r4, #5
 800a612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a614:	1a24      	subs	r4, r4, r0
 800a616:	601c      	str	r4, [r3, #0]
 800a618:	e7df      	b.n	800a5da <__d2b+0x6e>
 800a61a:	46c0      	nop			; (mov r8, r8)
 800a61c:	0800ba37 	.word	0x0800ba37
 800a620:	0000030a 	.word	0x0000030a
 800a624:	0800ba48 	.word	0x0800ba48
 800a628:	fffffbcd 	.word	0xfffffbcd
 800a62c:	fffffbce 	.word	0xfffffbce
 800a630:	3fffffff 	.word	0x3fffffff

0800a634 <_calloc_r>:
 800a634:	b570      	push	{r4, r5, r6, lr}
 800a636:	0c13      	lsrs	r3, r2, #16
 800a638:	0c0d      	lsrs	r5, r1, #16
 800a63a:	d11e      	bne.n	800a67a <_calloc_r+0x46>
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d10c      	bne.n	800a65a <_calloc_r+0x26>
 800a640:	b289      	uxth	r1, r1
 800a642:	b294      	uxth	r4, r2
 800a644:	434c      	muls	r4, r1
 800a646:	0021      	movs	r1, r4
 800a648:	f000 f88c 	bl	800a764 <_malloc_r>
 800a64c:	1e05      	subs	r5, r0, #0
 800a64e:	d01b      	beq.n	800a688 <_calloc_r+0x54>
 800a650:	0022      	movs	r2, r4
 800a652:	2100      	movs	r1, #0
 800a654:	f7fe f8e7 	bl	8008826 <memset>
 800a658:	e016      	b.n	800a688 <_calloc_r+0x54>
 800a65a:	1c1d      	adds	r5, r3, #0
 800a65c:	1c0b      	adds	r3, r1, #0
 800a65e:	b292      	uxth	r2, r2
 800a660:	b289      	uxth	r1, r1
 800a662:	b29c      	uxth	r4, r3
 800a664:	4351      	muls	r1, r2
 800a666:	b2ab      	uxth	r3, r5
 800a668:	4363      	muls	r3, r4
 800a66a:	0c0c      	lsrs	r4, r1, #16
 800a66c:	191c      	adds	r4, r3, r4
 800a66e:	0c22      	lsrs	r2, r4, #16
 800a670:	d107      	bne.n	800a682 <_calloc_r+0x4e>
 800a672:	0424      	lsls	r4, r4, #16
 800a674:	b289      	uxth	r1, r1
 800a676:	430c      	orrs	r4, r1
 800a678:	e7e5      	b.n	800a646 <_calloc_r+0x12>
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <_calloc_r+0x4e>
 800a67e:	1c13      	adds	r3, r2, #0
 800a680:	e7ed      	b.n	800a65e <_calloc_r+0x2a>
 800a682:	230c      	movs	r3, #12
 800a684:	2500      	movs	r5, #0
 800a686:	6003      	str	r3, [r0, #0]
 800a688:	0028      	movs	r0, r5
 800a68a:	bd70      	pop	{r4, r5, r6, pc}

0800a68c <_free_r>:
 800a68c:	b570      	push	{r4, r5, r6, lr}
 800a68e:	0005      	movs	r5, r0
 800a690:	2900      	cmp	r1, #0
 800a692:	d010      	beq.n	800a6b6 <_free_r+0x2a>
 800a694:	1f0c      	subs	r4, r1, #4
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	da00      	bge.n	800a69e <_free_r+0x12>
 800a69c:	18e4      	adds	r4, r4, r3
 800a69e:	0028      	movs	r0, r5
 800a6a0:	f000 fa9e 	bl	800abe0 <__malloc_lock>
 800a6a4:	4a1d      	ldr	r2, [pc, #116]	; (800a71c <_free_r+0x90>)
 800a6a6:	6813      	ldr	r3, [r2, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d105      	bne.n	800a6b8 <_free_r+0x2c>
 800a6ac:	6063      	str	r3, [r4, #4]
 800a6ae:	6014      	str	r4, [r2, #0]
 800a6b0:	0028      	movs	r0, r5
 800a6b2:	f000 fa9d 	bl	800abf0 <__malloc_unlock>
 800a6b6:	bd70      	pop	{r4, r5, r6, pc}
 800a6b8:	42a3      	cmp	r3, r4
 800a6ba:	d908      	bls.n	800a6ce <_free_r+0x42>
 800a6bc:	6821      	ldr	r1, [r4, #0]
 800a6be:	1860      	adds	r0, r4, r1
 800a6c0:	4283      	cmp	r3, r0
 800a6c2:	d1f3      	bne.n	800a6ac <_free_r+0x20>
 800a6c4:	6818      	ldr	r0, [r3, #0]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	1841      	adds	r1, r0, r1
 800a6ca:	6021      	str	r1, [r4, #0]
 800a6cc:	e7ee      	b.n	800a6ac <_free_r+0x20>
 800a6ce:	001a      	movs	r2, r3
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d001      	beq.n	800a6da <_free_r+0x4e>
 800a6d6:	42a3      	cmp	r3, r4
 800a6d8:	d9f9      	bls.n	800a6ce <_free_r+0x42>
 800a6da:	6811      	ldr	r1, [r2, #0]
 800a6dc:	1850      	adds	r0, r2, r1
 800a6de:	42a0      	cmp	r0, r4
 800a6e0:	d10b      	bne.n	800a6fa <_free_r+0x6e>
 800a6e2:	6820      	ldr	r0, [r4, #0]
 800a6e4:	1809      	adds	r1, r1, r0
 800a6e6:	1850      	adds	r0, r2, r1
 800a6e8:	6011      	str	r1, [r2, #0]
 800a6ea:	4283      	cmp	r3, r0
 800a6ec:	d1e0      	bne.n	800a6b0 <_free_r+0x24>
 800a6ee:	6818      	ldr	r0, [r3, #0]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	1841      	adds	r1, r0, r1
 800a6f4:	6011      	str	r1, [r2, #0]
 800a6f6:	6053      	str	r3, [r2, #4]
 800a6f8:	e7da      	b.n	800a6b0 <_free_r+0x24>
 800a6fa:	42a0      	cmp	r0, r4
 800a6fc:	d902      	bls.n	800a704 <_free_r+0x78>
 800a6fe:	230c      	movs	r3, #12
 800a700:	602b      	str	r3, [r5, #0]
 800a702:	e7d5      	b.n	800a6b0 <_free_r+0x24>
 800a704:	6821      	ldr	r1, [r4, #0]
 800a706:	1860      	adds	r0, r4, r1
 800a708:	4283      	cmp	r3, r0
 800a70a:	d103      	bne.n	800a714 <_free_r+0x88>
 800a70c:	6818      	ldr	r0, [r3, #0]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	1841      	adds	r1, r0, r1
 800a712:	6021      	str	r1, [r4, #0]
 800a714:	6063      	str	r3, [r4, #4]
 800a716:	6054      	str	r4, [r2, #4]
 800a718:	e7ca      	b.n	800a6b0 <_free_r+0x24>
 800a71a:	46c0      	nop			; (mov r8, r8)
 800a71c:	20000458 	.word	0x20000458

0800a720 <sbrk_aligned>:
 800a720:	b570      	push	{r4, r5, r6, lr}
 800a722:	4e0f      	ldr	r6, [pc, #60]	; (800a760 <sbrk_aligned+0x40>)
 800a724:	000d      	movs	r5, r1
 800a726:	6831      	ldr	r1, [r6, #0]
 800a728:	0004      	movs	r4, r0
 800a72a:	2900      	cmp	r1, #0
 800a72c:	d102      	bne.n	800a734 <sbrk_aligned+0x14>
 800a72e:	f000 f9f1 	bl	800ab14 <_sbrk_r>
 800a732:	6030      	str	r0, [r6, #0]
 800a734:	0029      	movs	r1, r5
 800a736:	0020      	movs	r0, r4
 800a738:	f000 f9ec 	bl	800ab14 <_sbrk_r>
 800a73c:	1c43      	adds	r3, r0, #1
 800a73e:	d00a      	beq.n	800a756 <sbrk_aligned+0x36>
 800a740:	2303      	movs	r3, #3
 800a742:	1cc5      	adds	r5, r0, #3
 800a744:	439d      	bics	r5, r3
 800a746:	42a8      	cmp	r0, r5
 800a748:	d007      	beq.n	800a75a <sbrk_aligned+0x3a>
 800a74a:	1a29      	subs	r1, r5, r0
 800a74c:	0020      	movs	r0, r4
 800a74e:	f000 f9e1 	bl	800ab14 <_sbrk_r>
 800a752:	1c43      	adds	r3, r0, #1
 800a754:	d101      	bne.n	800a75a <sbrk_aligned+0x3a>
 800a756:	2501      	movs	r5, #1
 800a758:	426d      	negs	r5, r5
 800a75a:	0028      	movs	r0, r5
 800a75c:	bd70      	pop	{r4, r5, r6, pc}
 800a75e:	46c0      	nop			; (mov r8, r8)
 800a760:	2000045c 	.word	0x2000045c

0800a764 <_malloc_r>:
 800a764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a766:	2203      	movs	r2, #3
 800a768:	1ccb      	adds	r3, r1, #3
 800a76a:	4393      	bics	r3, r2
 800a76c:	3308      	adds	r3, #8
 800a76e:	0006      	movs	r6, r0
 800a770:	001f      	movs	r7, r3
 800a772:	2b0c      	cmp	r3, #12
 800a774:	d232      	bcs.n	800a7dc <_malloc_r+0x78>
 800a776:	270c      	movs	r7, #12
 800a778:	42b9      	cmp	r1, r7
 800a77a:	d831      	bhi.n	800a7e0 <_malloc_r+0x7c>
 800a77c:	0030      	movs	r0, r6
 800a77e:	f000 fa2f 	bl	800abe0 <__malloc_lock>
 800a782:	4d32      	ldr	r5, [pc, #200]	; (800a84c <_malloc_r+0xe8>)
 800a784:	682b      	ldr	r3, [r5, #0]
 800a786:	001c      	movs	r4, r3
 800a788:	2c00      	cmp	r4, #0
 800a78a:	d12e      	bne.n	800a7ea <_malloc_r+0x86>
 800a78c:	0039      	movs	r1, r7
 800a78e:	0030      	movs	r0, r6
 800a790:	f7ff ffc6 	bl	800a720 <sbrk_aligned>
 800a794:	0004      	movs	r4, r0
 800a796:	1c43      	adds	r3, r0, #1
 800a798:	d11e      	bne.n	800a7d8 <_malloc_r+0x74>
 800a79a:	682c      	ldr	r4, [r5, #0]
 800a79c:	0025      	movs	r5, r4
 800a79e:	2d00      	cmp	r5, #0
 800a7a0:	d14a      	bne.n	800a838 <_malloc_r+0xd4>
 800a7a2:	6823      	ldr	r3, [r4, #0]
 800a7a4:	0029      	movs	r1, r5
 800a7a6:	18e3      	adds	r3, r4, r3
 800a7a8:	0030      	movs	r0, r6
 800a7aa:	9301      	str	r3, [sp, #4]
 800a7ac:	f000 f9b2 	bl	800ab14 <_sbrk_r>
 800a7b0:	9b01      	ldr	r3, [sp, #4]
 800a7b2:	4283      	cmp	r3, r0
 800a7b4:	d143      	bne.n	800a83e <_malloc_r+0xda>
 800a7b6:	6823      	ldr	r3, [r4, #0]
 800a7b8:	3703      	adds	r7, #3
 800a7ba:	1aff      	subs	r7, r7, r3
 800a7bc:	2303      	movs	r3, #3
 800a7be:	439f      	bics	r7, r3
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	2f0c      	cmp	r7, #12
 800a7c4:	d200      	bcs.n	800a7c8 <_malloc_r+0x64>
 800a7c6:	270c      	movs	r7, #12
 800a7c8:	0039      	movs	r1, r7
 800a7ca:	0030      	movs	r0, r6
 800a7cc:	f7ff ffa8 	bl	800a720 <sbrk_aligned>
 800a7d0:	1c43      	adds	r3, r0, #1
 800a7d2:	d034      	beq.n	800a83e <_malloc_r+0xda>
 800a7d4:	6823      	ldr	r3, [r4, #0]
 800a7d6:	19df      	adds	r7, r3, r7
 800a7d8:	6027      	str	r7, [r4, #0]
 800a7da:	e013      	b.n	800a804 <_malloc_r+0xa0>
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	dacb      	bge.n	800a778 <_malloc_r+0x14>
 800a7e0:	230c      	movs	r3, #12
 800a7e2:	2500      	movs	r5, #0
 800a7e4:	6033      	str	r3, [r6, #0]
 800a7e6:	0028      	movs	r0, r5
 800a7e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a7ea:	6822      	ldr	r2, [r4, #0]
 800a7ec:	1bd1      	subs	r1, r2, r7
 800a7ee:	d420      	bmi.n	800a832 <_malloc_r+0xce>
 800a7f0:	290b      	cmp	r1, #11
 800a7f2:	d917      	bls.n	800a824 <_malloc_r+0xc0>
 800a7f4:	19e2      	adds	r2, r4, r7
 800a7f6:	6027      	str	r7, [r4, #0]
 800a7f8:	42a3      	cmp	r3, r4
 800a7fa:	d111      	bne.n	800a820 <_malloc_r+0xbc>
 800a7fc:	602a      	str	r2, [r5, #0]
 800a7fe:	6863      	ldr	r3, [r4, #4]
 800a800:	6011      	str	r1, [r2, #0]
 800a802:	6053      	str	r3, [r2, #4]
 800a804:	0030      	movs	r0, r6
 800a806:	0025      	movs	r5, r4
 800a808:	f000 f9f2 	bl	800abf0 <__malloc_unlock>
 800a80c:	2207      	movs	r2, #7
 800a80e:	350b      	adds	r5, #11
 800a810:	1d23      	adds	r3, r4, #4
 800a812:	4395      	bics	r5, r2
 800a814:	1aea      	subs	r2, r5, r3
 800a816:	429d      	cmp	r5, r3
 800a818:	d0e5      	beq.n	800a7e6 <_malloc_r+0x82>
 800a81a:	1b5b      	subs	r3, r3, r5
 800a81c:	50a3      	str	r3, [r4, r2]
 800a81e:	e7e2      	b.n	800a7e6 <_malloc_r+0x82>
 800a820:	605a      	str	r2, [r3, #4]
 800a822:	e7ec      	b.n	800a7fe <_malloc_r+0x9a>
 800a824:	6862      	ldr	r2, [r4, #4]
 800a826:	42a3      	cmp	r3, r4
 800a828:	d101      	bne.n	800a82e <_malloc_r+0xca>
 800a82a:	602a      	str	r2, [r5, #0]
 800a82c:	e7ea      	b.n	800a804 <_malloc_r+0xa0>
 800a82e:	605a      	str	r2, [r3, #4]
 800a830:	e7e8      	b.n	800a804 <_malloc_r+0xa0>
 800a832:	0023      	movs	r3, r4
 800a834:	6864      	ldr	r4, [r4, #4]
 800a836:	e7a7      	b.n	800a788 <_malloc_r+0x24>
 800a838:	002c      	movs	r4, r5
 800a83a:	686d      	ldr	r5, [r5, #4]
 800a83c:	e7af      	b.n	800a79e <_malloc_r+0x3a>
 800a83e:	230c      	movs	r3, #12
 800a840:	0030      	movs	r0, r6
 800a842:	6033      	str	r3, [r6, #0]
 800a844:	f000 f9d4 	bl	800abf0 <__malloc_unlock>
 800a848:	e7cd      	b.n	800a7e6 <_malloc_r+0x82>
 800a84a:	46c0      	nop			; (mov r8, r8)
 800a84c:	20000458 	.word	0x20000458

0800a850 <__ssputs_r>:
 800a850:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a852:	688e      	ldr	r6, [r1, #8]
 800a854:	b085      	sub	sp, #20
 800a856:	0007      	movs	r7, r0
 800a858:	000c      	movs	r4, r1
 800a85a:	9203      	str	r2, [sp, #12]
 800a85c:	9301      	str	r3, [sp, #4]
 800a85e:	429e      	cmp	r6, r3
 800a860:	d83c      	bhi.n	800a8dc <__ssputs_r+0x8c>
 800a862:	2390      	movs	r3, #144	; 0x90
 800a864:	898a      	ldrh	r2, [r1, #12]
 800a866:	00db      	lsls	r3, r3, #3
 800a868:	421a      	tst	r2, r3
 800a86a:	d034      	beq.n	800a8d6 <__ssputs_r+0x86>
 800a86c:	6909      	ldr	r1, [r1, #16]
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	6960      	ldr	r0, [r4, #20]
 800a872:	1a5b      	subs	r3, r3, r1
 800a874:	9302      	str	r3, [sp, #8]
 800a876:	2303      	movs	r3, #3
 800a878:	4343      	muls	r3, r0
 800a87a:	0fdd      	lsrs	r5, r3, #31
 800a87c:	18ed      	adds	r5, r5, r3
 800a87e:	9b01      	ldr	r3, [sp, #4]
 800a880:	9802      	ldr	r0, [sp, #8]
 800a882:	3301      	adds	r3, #1
 800a884:	181b      	adds	r3, r3, r0
 800a886:	106d      	asrs	r5, r5, #1
 800a888:	42ab      	cmp	r3, r5
 800a88a:	d900      	bls.n	800a88e <__ssputs_r+0x3e>
 800a88c:	001d      	movs	r5, r3
 800a88e:	0553      	lsls	r3, r2, #21
 800a890:	d532      	bpl.n	800a8f8 <__ssputs_r+0xa8>
 800a892:	0029      	movs	r1, r5
 800a894:	0038      	movs	r0, r7
 800a896:	f7ff ff65 	bl	800a764 <_malloc_r>
 800a89a:	1e06      	subs	r6, r0, #0
 800a89c:	d109      	bne.n	800a8b2 <__ssputs_r+0x62>
 800a89e:	230c      	movs	r3, #12
 800a8a0:	603b      	str	r3, [r7, #0]
 800a8a2:	2340      	movs	r3, #64	; 0x40
 800a8a4:	2001      	movs	r0, #1
 800a8a6:	89a2      	ldrh	r2, [r4, #12]
 800a8a8:	4240      	negs	r0, r0
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	81a3      	strh	r3, [r4, #12]
 800a8ae:	b005      	add	sp, #20
 800a8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8b2:	9a02      	ldr	r2, [sp, #8]
 800a8b4:	6921      	ldr	r1, [r4, #16]
 800a8b6:	f7fd ffad 	bl	8008814 <memcpy>
 800a8ba:	89a3      	ldrh	r3, [r4, #12]
 800a8bc:	4a14      	ldr	r2, [pc, #80]	; (800a910 <__ssputs_r+0xc0>)
 800a8be:	401a      	ands	r2, r3
 800a8c0:	2380      	movs	r3, #128	; 0x80
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	81a3      	strh	r3, [r4, #12]
 800a8c6:	9b02      	ldr	r3, [sp, #8]
 800a8c8:	6126      	str	r6, [r4, #16]
 800a8ca:	18f6      	adds	r6, r6, r3
 800a8cc:	6026      	str	r6, [r4, #0]
 800a8ce:	6165      	str	r5, [r4, #20]
 800a8d0:	9e01      	ldr	r6, [sp, #4]
 800a8d2:	1aed      	subs	r5, r5, r3
 800a8d4:	60a5      	str	r5, [r4, #8]
 800a8d6:	9b01      	ldr	r3, [sp, #4]
 800a8d8:	429e      	cmp	r6, r3
 800a8da:	d900      	bls.n	800a8de <__ssputs_r+0x8e>
 800a8dc:	9e01      	ldr	r6, [sp, #4]
 800a8de:	0032      	movs	r2, r6
 800a8e0:	9903      	ldr	r1, [sp, #12]
 800a8e2:	6820      	ldr	r0, [r4, #0]
 800a8e4:	f000 f968 	bl	800abb8 <memmove>
 800a8e8:	68a3      	ldr	r3, [r4, #8]
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	1b9b      	subs	r3, r3, r6
 800a8ee:	60a3      	str	r3, [r4, #8]
 800a8f0:	6823      	ldr	r3, [r4, #0]
 800a8f2:	199e      	adds	r6, r3, r6
 800a8f4:	6026      	str	r6, [r4, #0]
 800a8f6:	e7da      	b.n	800a8ae <__ssputs_r+0x5e>
 800a8f8:	002a      	movs	r2, r5
 800a8fa:	0038      	movs	r0, r7
 800a8fc:	f000 f980 	bl	800ac00 <_realloc_r>
 800a900:	1e06      	subs	r6, r0, #0
 800a902:	d1e0      	bne.n	800a8c6 <__ssputs_r+0x76>
 800a904:	0038      	movs	r0, r7
 800a906:	6921      	ldr	r1, [r4, #16]
 800a908:	f7ff fec0 	bl	800a68c <_free_r>
 800a90c:	e7c7      	b.n	800a89e <__ssputs_r+0x4e>
 800a90e:	46c0      	nop			; (mov r8, r8)
 800a910:	fffffb7f 	.word	0xfffffb7f

0800a914 <_svfiprintf_r>:
 800a914:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a916:	b0a1      	sub	sp, #132	; 0x84
 800a918:	9003      	str	r0, [sp, #12]
 800a91a:	001d      	movs	r5, r3
 800a91c:	898b      	ldrh	r3, [r1, #12]
 800a91e:	000f      	movs	r7, r1
 800a920:	0016      	movs	r6, r2
 800a922:	061b      	lsls	r3, r3, #24
 800a924:	d511      	bpl.n	800a94a <_svfiprintf_r+0x36>
 800a926:	690b      	ldr	r3, [r1, #16]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10e      	bne.n	800a94a <_svfiprintf_r+0x36>
 800a92c:	2140      	movs	r1, #64	; 0x40
 800a92e:	f7ff ff19 	bl	800a764 <_malloc_r>
 800a932:	6038      	str	r0, [r7, #0]
 800a934:	6138      	str	r0, [r7, #16]
 800a936:	2800      	cmp	r0, #0
 800a938:	d105      	bne.n	800a946 <_svfiprintf_r+0x32>
 800a93a:	230c      	movs	r3, #12
 800a93c:	9a03      	ldr	r2, [sp, #12]
 800a93e:	3801      	subs	r0, #1
 800a940:	6013      	str	r3, [r2, #0]
 800a942:	b021      	add	sp, #132	; 0x84
 800a944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a946:	2340      	movs	r3, #64	; 0x40
 800a948:	617b      	str	r3, [r7, #20]
 800a94a:	2300      	movs	r3, #0
 800a94c:	ac08      	add	r4, sp, #32
 800a94e:	6163      	str	r3, [r4, #20]
 800a950:	3320      	adds	r3, #32
 800a952:	7663      	strb	r3, [r4, #25]
 800a954:	3310      	adds	r3, #16
 800a956:	76a3      	strb	r3, [r4, #26]
 800a958:	9507      	str	r5, [sp, #28]
 800a95a:	0035      	movs	r5, r6
 800a95c:	782b      	ldrb	r3, [r5, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d001      	beq.n	800a966 <_svfiprintf_r+0x52>
 800a962:	2b25      	cmp	r3, #37	; 0x25
 800a964:	d147      	bne.n	800a9f6 <_svfiprintf_r+0xe2>
 800a966:	1bab      	subs	r3, r5, r6
 800a968:	9305      	str	r3, [sp, #20]
 800a96a:	42b5      	cmp	r5, r6
 800a96c:	d00c      	beq.n	800a988 <_svfiprintf_r+0x74>
 800a96e:	0032      	movs	r2, r6
 800a970:	0039      	movs	r1, r7
 800a972:	9803      	ldr	r0, [sp, #12]
 800a974:	f7ff ff6c 	bl	800a850 <__ssputs_r>
 800a978:	1c43      	adds	r3, r0, #1
 800a97a:	d100      	bne.n	800a97e <_svfiprintf_r+0x6a>
 800a97c:	e0ae      	b.n	800aadc <_svfiprintf_r+0x1c8>
 800a97e:	6962      	ldr	r2, [r4, #20]
 800a980:	9b05      	ldr	r3, [sp, #20]
 800a982:	4694      	mov	ip, r2
 800a984:	4463      	add	r3, ip
 800a986:	6163      	str	r3, [r4, #20]
 800a988:	782b      	ldrb	r3, [r5, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d100      	bne.n	800a990 <_svfiprintf_r+0x7c>
 800a98e:	e0a5      	b.n	800aadc <_svfiprintf_r+0x1c8>
 800a990:	2201      	movs	r2, #1
 800a992:	2300      	movs	r3, #0
 800a994:	4252      	negs	r2, r2
 800a996:	6062      	str	r2, [r4, #4]
 800a998:	a904      	add	r1, sp, #16
 800a99a:	3254      	adds	r2, #84	; 0x54
 800a99c:	1852      	adds	r2, r2, r1
 800a99e:	1c6e      	adds	r6, r5, #1
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	60e3      	str	r3, [r4, #12]
 800a9a4:	60a3      	str	r3, [r4, #8]
 800a9a6:	7013      	strb	r3, [r2, #0]
 800a9a8:	65a3      	str	r3, [r4, #88]	; 0x58
 800a9aa:	2205      	movs	r2, #5
 800a9ac:	7831      	ldrb	r1, [r6, #0]
 800a9ae:	4854      	ldr	r0, [pc, #336]	; (800ab00 <_svfiprintf_r+0x1ec>)
 800a9b0:	f7ff fa98 	bl	8009ee4 <memchr>
 800a9b4:	1c75      	adds	r5, r6, #1
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	d11f      	bne.n	800a9fa <_svfiprintf_r+0xe6>
 800a9ba:	6822      	ldr	r2, [r4, #0]
 800a9bc:	06d3      	lsls	r3, r2, #27
 800a9be:	d504      	bpl.n	800a9ca <_svfiprintf_r+0xb6>
 800a9c0:	2353      	movs	r3, #83	; 0x53
 800a9c2:	a904      	add	r1, sp, #16
 800a9c4:	185b      	adds	r3, r3, r1
 800a9c6:	2120      	movs	r1, #32
 800a9c8:	7019      	strb	r1, [r3, #0]
 800a9ca:	0713      	lsls	r3, r2, #28
 800a9cc:	d504      	bpl.n	800a9d8 <_svfiprintf_r+0xc4>
 800a9ce:	2353      	movs	r3, #83	; 0x53
 800a9d0:	a904      	add	r1, sp, #16
 800a9d2:	185b      	adds	r3, r3, r1
 800a9d4:	212b      	movs	r1, #43	; 0x2b
 800a9d6:	7019      	strb	r1, [r3, #0]
 800a9d8:	7833      	ldrb	r3, [r6, #0]
 800a9da:	2b2a      	cmp	r3, #42	; 0x2a
 800a9dc:	d016      	beq.n	800aa0c <_svfiprintf_r+0xf8>
 800a9de:	0035      	movs	r5, r6
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	200a      	movs	r0, #10
 800a9e4:	68e3      	ldr	r3, [r4, #12]
 800a9e6:	782a      	ldrb	r2, [r5, #0]
 800a9e8:	1c6e      	adds	r6, r5, #1
 800a9ea:	3a30      	subs	r2, #48	; 0x30
 800a9ec:	2a09      	cmp	r2, #9
 800a9ee:	d94e      	bls.n	800aa8e <_svfiprintf_r+0x17a>
 800a9f0:	2900      	cmp	r1, #0
 800a9f2:	d111      	bne.n	800aa18 <_svfiprintf_r+0x104>
 800a9f4:	e017      	b.n	800aa26 <_svfiprintf_r+0x112>
 800a9f6:	3501      	adds	r5, #1
 800a9f8:	e7b0      	b.n	800a95c <_svfiprintf_r+0x48>
 800a9fa:	4b41      	ldr	r3, [pc, #260]	; (800ab00 <_svfiprintf_r+0x1ec>)
 800a9fc:	6822      	ldr	r2, [r4, #0]
 800a9fe:	1ac0      	subs	r0, r0, r3
 800aa00:	2301      	movs	r3, #1
 800aa02:	4083      	lsls	r3, r0
 800aa04:	4313      	orrs	r3, r2
 800aa06:	002e      	movs	r6, r5
 800aa08:	6023      	str	r3, [r4, #0]
 800aa0a:	e7ce      	b.n	800a9aa <_svfiprintf_r+0x96>
 800aa0c:	9b07      	ldr	r3, [sp, #28]
 800aa0e:	1d19      	adds	r1, r3, #4
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	9107      	str	r1, [sp, #28]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	db01      	blt.n	800aa1c <_svfiprintf_r+0x108>
 800aa18:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa1a:	e004      	b.n	800aa26 <_svfiprintf_r+0x112>
 800aa1c:	425b      	negs	r3, r3
 800aa1e:	60e3      	str	r3, [r4, #12]
 800aa20:	2302      	movs	r3, #2
 800aa22:	4313      	orrs	r3, r2
 800aa24:	6023      	str	r3, [r4, #0]
 800aa26:	782b      	ldrb	r3, [r5, #0]
 800aa28:	2b2e      	cmp	r3, #46	; 0x2e
 800aa2a:	d10a      	bne.n	800aa42 <_svfiprintf_r+0x12e>
 800aa2c:	786b      	ldrb	r3, [r5, #1]
 800aa2e:	2b2a      	cmp	r3, #42	; 0x2a
 800aa30:	d135      	bne.n	800aa9e <_svfiprintf_r+0x18a>
 800aa32:	9b07      	ldr	r3, [sp, #28]
 800aa34:	3502      	adds	r5, #2
 800aa36:	1d1a      	adds	r2, r3, #4
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	9207      	str	r2, [sp, #28]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	db2b      	blt.n	800aa98 <_svfiprintf_r+0x184>
 800aa40:	9309      	str	r3, [sp, #36]	; 0x24
 800aa42:	4e30      	ldr	r6, [pc, #192]	; (800ab04 <_svfiprintf_r+0x1f0>)
 800aa44:	2203      	movs	r2, #3
 800aa46:	0030      	movs	r0, r6
 800aa48:	7829      	ldrb	r1, [r5, #0]
 800aa4a:	f7ff fa4b 	bl	8009ee4 <memchr>
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	d006      	beq.n	800aa60 <_svfiprintf_r+0x14c>
 800aa52:	2340      	movs	r3, #64	; 0x40
 800aa54:	1b80      	subs	r0, r0, r6
 800aa56:	4083      	lsls	r3, r0
 800aa58:	6822      	ldr	r2, [r4, #0]
 800aa5a:	3501      	adds	r5, #1
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	6023      	str	r3, [r4, #0]
 800aa60:	7829      	ldrb	r1, [r5, #0]
 800aa62:	2206      	movs	r2, #6
 800aa64:	4828      	ldr	r0, [pc, #160]	; (800ab08 <_svfiprintf_r+0x1f4>)
 800aa66:	1c6e      	adds	r6, r5, #1
 800aa68:	7621      	strb	r1, [r4, #24]
 800aa6a:	f7ff fa3b 	bl	8009ee4 <memchr>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d03c      	beq.n	800aaec <_svfiprintf_r+0x1d8>
 800aa72:	4b26      	ldr	r3, [pc, #152]	; (800ab0c <_svfiprintf_r+0x1f8>)
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d125      	bne.n	800aac4 <_svfiprintf_r+0x1b0>
 800aa78:	2207      	movs	r2, #7
 800aa7a:	9b07      	ldr	r3, [sp, #28]
 800aa7c:	3307      	adds	r3, #7
 800aa7e:	4393      	bics	r3, r2
 800aa80:	3308      	adds	r3, #8
 800aa82:	9307      	str	r3, [sp, #28]
 800aa84:	6963      	ldr	r3, [r4, #20]
 800aa86:	9a04      	ldr	r2, [sp, #16]
 800aa88:	189b      	adds	r3, r3, r2
 800aa8a:	6163      	str	r3, [r4, #20]
 800aa8c:	e765      	b.n	800a95a <_svfiprintf_r+0x46>
 800aa8e:	4343      	muls	r3, r0
 800aa90:	0035      	movs	r5, r6
 800aa92:	2101      	movs	r1, #1
 800aa94:	189b      	adds	r3, r3, r2
 800aa96:	e7a6      	b.n	800a9e6 <_svfiprintf_r+0xd2>
 800aa98:	2301      	movs	r3, #1
 800aa9a:	425b      	negs	r3, r3
 800aa9c:	e7d0      	b.n	800aa40 <_svfiprintf_r+0x12c>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	200a      	movs	r0, #10
 800aaa2:	001a      	movs	r2, r3
 800aaa4:	3501      	adds	r5, #1
 800aaa6:	6063      	str	r3, [r4, #4]
 800aaa8:	7829      	ldrb	r1, [r5, #0]
 800aaaa:	1c6e      	adds	r6, r5, #1
 800aaac:	3930      	subs	r1, #48	; 0x30
 800aaae:	2909      	cmp	r1, #9
 800aab0:	d903      	bls.n	800aaba <_svfiprintf_r+0x1a6>
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d0c5      	beq.n	800aa42 <_svfiprintf_r+0x12e>
 800aab6:	9209      	str	r2, [sp, #36]	; 0x24
 800aab8:	e7c3      	b.n	800aa42 <_svfiprintf_r+0x12e>
 800aaba:	4342      	muls	r2, r0
 800aabc:	0035      	movs	r5, r6
 800aabe:	2301      	movs	r3, #1
 800aac0:	1852      	adds	r2, r2, r1
 800aac2:	e7f1      	b.n	800aaa8 <_svfiprintf_r+0x194>
 800aac4:	ab07      	add	r3, sp, #28
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	003a      	movs	r2, r7
 800aaca:	0021      	movs	r1, r4
 800aacc:	4b10      	ldr	r3, [pc, #64]	; (800ab10 <_svfiprintf_r+0x1fc>)
 800aace:	9803      	ldr	r0, [sp, #12]
 800aad0:	f7fd ff5c 	bl	800898c <_printf_float>
 800aad4:	9004      	str	r0, [sp, #16]
 800aad6:	9b04      	ldr	r3, [sp, #16]
 800aad8:	3301      	adds	r3, #1
 800aada:	d1d3      	bne.n	800aa84 <_svfiprintf_r+0x170>
 800aadc:	89bb      	ldrh	r3, [r7, #12]
 800aade:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aae0:	065b      	lsls	r3, r3, #25
 800aae2:	d400      	bmi.n	800aae6 <_svfiprintf_r+0x1d2>
 800aae4:	e72d      	b.n	800a942 <_svfiprintf_r+0x2e>
 800aae6:	2001      	movs	r0, #1
 800aae8:	4240      	negs	r0, r0
 800aaea:	e72a      	b.n	800a942 <_svfiprintf_r+0x2e>
 800aaec:	ab07      	add	r3, sp, #28
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	003a      	movs	r2, r7
 800aaf2:	0021      	movs	r1, r4
 800aaf4:	4b06      	ldr	r3, [pc, #24]	; (800ab10 <_svfiprintf_r+0x1fc>)
 800aaf6:	9803      	ldr	r0, [sp, #12]
 800aaf8:	f7fe f9fa 	bl	8008ef0 <_printf_i>
 800aafc:	e7ea      	b.n	800aad4 <_svfiprintf_r+0x1c0>
 800aafe:	46c0      	nop			; (mov r8, r8)
 800ab00:	0800bba4 	.word	0x0800bba4
 800ab04:	0800bbaa 	.word	0x0800bbaa
 800ab08:	0800bbae 	.word	0x0800bbae
 800ab0c:	0800898d 	.word	0x0800898d
 800ab10:	0800a851 	.word	0x0800a851

0800ab14 <_sbrk_r>:
 800ab14:	2300      	movs	r3, #0
 800ab16:	b570      	push	{r4, r5, r6, lr}
 800ab18:	4d06      	ldr	r5, [pc, #24]	; (800ab34 <_sbrk_r+0x20>)
 800ab1a:	0004      	movs	r4, r0
 800ab1c:	0008      	movs	r0, r1
 800ab1e:	602b      	str	r3, [r5, #0]
 800ab20:	f7f9 ffe6 	bl	8004af0 <_sbrk>
 800ab24:	1c43      	adds	r3, r0, #1
 800ab26:	d103      	bne.n	800ab30 <_sbrk_r+0x1c>
 800ab28:	682b      	ldr	r3, [r5, #0]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d000      	beq.n	800ab30 <_sbrk_r+0x1c>
 800ab2e:	6023      	str	r3, [r4, #0]
 800ab30:	bd70      	pop	{r4, r5, r6, pc}
 800ab32:	46c0      	nop			; (mov r8, r8)
 800ab34:	20000460 	.word	0x20000460

0800ab38 <__assert_func>:
 800ab38:	b530      	push	{r4, r5, lr}
 800ab3a:	0014      	movs	r4, r2
 800ab3c:	001a      	movs	r2, r3
 800ab3e:	4b09      	ldr	r3, [pc, #36]	; (800ab64 <__assert_func+0x2c>)
 800ab40:	0005      	movs	r5, r0
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	b085      	sub	sp, #20
 800ab46:	68d8      	ldr	r0, [r3, #12]
 800ab48:	4b07      	ldr	r3, [pc, #28]	; (800ab68 <__assert_func+0x30>)
 800ab4a:	2c00      	cmp	r4, #0
 800ab4c:	d101      	bne.n	800ab52 <__assert_func+0x1a>
 800ab4e:	4b07      	ldr	r3, [pc, #28]	; (800ab6c <__assert_func+0x34>)
 800ab50:	001c      	movs	r4, r3
 800ab52:	9301      	str	r3, [sp, #4]
 800ab54:	9100      	str	r1, [sp, #0]
 800ab56:	002b      	movs	r3, r5
 800ab58:	4905      	ldr	r1, [pc, #20]	; (800ab70 <__assert_func+0x38>)
 800ab5a:	9402      	str	r4, [sp, #8]
 800ab5c:	f000 f80a 	bl	800ab74 <fiprintf>
 800ab60:	f000 faba 	bl	800b0d8 <abort>
 800ab64:	20000010 	.word	0x20000010
 800ab68:	0800bbb5 	.word	0x0800bbb5
 800ab6c:	0800bbf0 	.word	0x0800bbf0
 800ab70:	0800bbc2 	.word	0x0800bbc2

0800ab74 <fiprintf>:
 800ab74:	b40e      	push	{r1, r2, r3}
 800ab76:	b503      	push	{r0, r1, lr}
 800ab78:	0001      	movs	r1, r0
 800ab7a:	ab03      	add	r3, sp, #12
 800ab7c:	4804      	ldr	r0, [pc, #16]	; (800ab90 <fiprintf+0x1c>)
 800ab7e:	cb04      	ldmia	r3!, {r2}
 800ab80:	6800      	ldr	r0, [r0, #0]
 800ab82:	9301      	str	r3, [sp, #4]
 800ab84:	f000 f892 	bl	800acac <_vfiprintf_r>
 800ab88:	b002      	add	sp, #8
 800ab8a:	bc08      	pop	{r3}
 800ab8c:	b003      	add	sp, #12
 800ab8e:	4718      	bx	r3
 800ab90:	20000010 	.word	0x20000010

0800ab94 <__ascii_mbtowc>:
 800ab94:	b082      	sub	sp, #8
 800ab96:	2900      	cmp	r1, #0
 800ab98:	d100      	bne.n	800ab9c <__ascii_mbtowc+0x8>
 800ab9a:	a901      	add	r1, sp, #4
 800ab9c:	1e10      	subs	r0, r2, #0
 800ab9e:	d006      	beq.n	800abae <__ascii_mbtowc+0x1a>
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d006      	beq.n	800abb2 <__ascii_mbtowc+0x1e>
 800aba4:	7813      	ldrb	r3, [r2, #0]
 800aba6:	600b      	str	r3, [r1, #0]
 800aba8:	7810      	ldrb	r0, [r2, #0]
 800abaa:	1e43      	subs	r3, r0, #1
 800abac:	4198      	sbcs	r0, r3
 800abae:	b002      	add	sp, #8
 800abb0:	4770      	bx	lr
 800abb2:	2002      	movs	r0, #2
 800abb4:	4240      	negs	r0, r0
 800abb6:	e7fa      	b.n	800abae <__ascii_mbtowc+0x1a>

0800abb8 <memmove>:
 800abb8:	b510      	push	{r4, lr}
 800abba:	4288      	cmp	r0, r1
 800abbc:	d902      	bls.n	800abc4 <memmove+0xc>
 800abbe:	188b      	adds	r3, r1, r2
 800abc0:	4298      	cmp	r0, r3
 800abc2:	d303      	bcc.n	800abcc <memmove+0x14>
 800abc4:	2300      	movs	r3, #0
 800abc6:	e007      	b.n	800abd8 <memmove+0x20>
 800abc8:	5c8b      	ldrb	r3, [r1, r2]
 800abca:	5483      	strb	r3, [r0, r2]
 800abcc:	3a01      	subs	r2, #1
 800abce:	d2fb      	bcs.n	800abc8 <memmove+0x10>
 800abd0:	bd10      	pop	{r4, pc}
 800abd2:	5ccc      	ldrb	r4, [r1, r3]
 800abd4:	54c4      	strb	r4, [r0, r3]
 800abd6:	3301      	adds	r3, #1
 800abd8:	429a      	cmp	r2, r3
 800abda:	d1fa      	bne.n	800abd2 <memmove+0x1a>
 800abdc:	e7f8      	b.n	800abd0 <memmove+0x18>
	...

0800abe0 <__malloc_lock>:
 800abe0:	b510      	push	{r4, lr}
 800abe2:	4802      	ldr	r0, [pc, #8]	; (800abec <__malloc_lock+0xc>)
 800abe4:	f000 fc4f 	bl	800b486 <__retarget_lock_acquire_recursive>
 800abe8:	bd10      	pop	{r4, pc}
 800abea:	46c0      	nop			; (mov r8, r8)
 800abec:	20000464 	.word	0x20000464

0800abf0 <__malloc_unlock>:
 800abf0:	b510      	push	{r4, lr}
 800abf2:	4802      	ldr	r0, [pc, #8]	; (800abfc <__malloc_unlock+0xc>)
 800abf4:	f000 fc48 	bl	800b488 <__retarget_lock_release_recursive>
 800abf8:	bd10      	pop	{r4, pc}
 800abfa:	46c0      	nop			; (mov r8, r8)
 800abfc:	20000464 	.word	0x20000464

0800ac00 <_realloc_r>:
 800ac00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac02:	0007      	movs	r7, r0
 800ac04:	000e      	movs	r6, r1
 800ac06:	0014      	movs	r4, r2
 800ac08:	2900      	cmp	r1, #0
 800ac0a:	d105      	bne.n	800ac18 <_realloc_r+0x18>
 800ac0c:	0011      	movs	r1, r2
 800ac0e:	f7ff fda9 	bl	800a764 <_malloc_r>
 800ac12:	0005      	movs	r5, r0
 800ac14:	0028      	movs	r0, r5
 800ac16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac18:	2a00      	cmp	r2, #0
 800ac1a:	d103      	bne.n	800ac24 <_realloc_r+0x24>
 800ac1c:	f7ff fd36 	bl	800a68c <_free_r>
 800ac20:	0025      	movs	r5, r4
 800ac22:	e7f7      	b.n	800ac14 <_realloc_r+0x14>
 800ac24:	f000 fc9e 	bl	800b564 <_malloc_usable_size_r>
 800ac28:	9001      	str	r0, [sp, #4]
 800ac2a:	4284      	cmp	r4, r0
 800ac2c:	d803      	bhi.n	800ac36 <_realloc_r+0x36>
 800ac2e:	0035      	movs	r5, r6
 800ac30:	0843      	lsrs	r3, r0, #1
 800ac32:	42a3      	cmp	r3, r4
 800ac34:	d3ee      	bcc.n	800ac14 <_realloc_r+0x14>
 800ac36:	0021      	movs	r1, r4
 800ac38:	0038      	movs	r0, r7
 800ac3a:	f7ff fd93 	bl	800a764 <_malloc_r>
 800ac3e:	1e05      	subs	r5, r0, #0
 800ac40:	d0e8      	beq.n	800ac14 <_realloc_r+0x14>
 800ac42:	9b01      	ldr	r3, [sp, #4]
 800ac44:	0022      	movs	r2, r4
 800ac46:	429c      	cmp	r4, r3
 800ac48:	d900      	bls.n	800ac4c <_realloc_r+0x4c>
 800ac4a:	001a      	movs	r2, r3
 800ac4c:	0031      	movs	r1, r6
 800ac4e:	0028      	movs	r0, r5
 800ac50:	f7fd fde0 	bl	8008814 <memcpy>
 800ac54:	0031      	movs	r1, r6
 800ac56:	0038      	movs	r0, r7
 800ac58:	f7ff fd18 	bl	800a68c <_free_r>
 800ac5c:	e7da      	b.n	800ac14 <_realloc_r+0x14>

0800ac5e <__sfputc_r>:
 800ac5e:	6893      	ldr	r3, [r2, #8]
 800ac60:	b510      	push	{r4, lr}
 800ac62:	3b01      	subs	r3, #1
 800ac64:	6093      	str	r3, [r2, #8]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	da04      	bge.n	800ac74 <__sfputc_r+0x16>
 800ac6a:	6994      	ldr	r4, [r2, #24]
 800ac6c:	42a3      	cmp	r3, r4
 800ac6e:	db07      	blt.n	800ac80 <__sfputc_r+0x22>
 800ac70:	290a      	cmp	r1, #10
 800ac72:	d005      	beq.n	800ac80 <__sfputc_r+0x22>
 800ac74:	6813      	ldr	r3, [r2, #0]
 800ac76:	1c58      	adds	r0, r3, #1
 800ac78:	6010      	str	r0, [r2, #0]
 800ac7a:	7019      	strb	r1, [r3, #0]
 800ac7c:	0008      	movs	r0, r1
 800ac7e:	bd10      	pop	{r4, pc}
 800ac80:	f000 f94e 	bl	800af20 <__swbuf_r>
 800ac84:	0001      	movs	r1, r0
 800ac86:	e7f9      	b.n	800ac7c <__sfputc_r+0x1e>

0800ac88 <__sfputs_r>:
 800ac88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8a:	0006      	movs	r6, r0
 800ac8c:	000f      	movs	r7, r1
 800ac8e:	0014      	movs	r4, r2
 800ac90:	18d5      	adds	r5, r2, r3
 800ac92:	42ac      	cmp	r4, r5
 800ac94:	d101      	bne.n	800ac9a <__sfputs_r+0x12>
 800ac96:	2000      	movs	r0, #0
 800ac98:	e007      	b.n	800acaa <__sfputs_r+0x22>
 800ac9a:	7821      	ldrb	r1, [r4, #0]
 800ac9c:	003a      	movs	r2, r7
 800ac9e:	0030      	movs	r0, r6
 800aca0:	f7ff ffdd 	bl	800ac5e <__sfputc_r>
 800aca4:	3401      	adds	r4, #1
 800aca6:	1c43      	adds	r3, r0, #1
 800aca8:	d1f3      	bne.n	800ac92 <__sfputs_r+0xa>
 800acaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800acac <_vfiprintf_r>:
 800acac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acae:	b0a1      	sub	sp, #132	; 0x84
 800acb0:	0006      	movs	r6, r0
 800acb2:	000c      	movs	r4, r1
 800acb4:	001f      	movs	r7, r3
 800acb6:	9203      	str	r2, [sp, #12]
 800acb8:	2800      	cmp	r0, #0
 800acba:	d004      	beq.n	800acc6 <_vfiprintf_r+0x1a>
 800acbc:	6983      	ldr	r3, [r0, #24]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d101      	bne.n	800acc6 <_vfiprintf_r+0x1a>
 800acc2:	f000 fb3f 	bl	800b344 <__sinit>
 800acc6:	4b8e      	ldr	r3, [pc, #568]	; (800af00 <_vfiprintf_r+0x254>)
 800acc8:	429c      	cmp	r4, r3
 800acca:	d11c      	bne.n	800ad06 <_vfiprintf_r+0x5a>
 800accc:	6874      	ldr	r4, [r6, #4]
 800acce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acd0:	07db      	lsls	r3, r3, #31
 800acd2:	d405      	bmi.n	800ace0 <_vfiprintf_r+0x34>
 800acd4:	89a3      	ldrh	r3, [r4, #12]
 800acd6:	059b      	lsls	r3, r3, #22
 800acd8:	d402      	bmi.n	800ace0 <_vfiprintf_r+0x34>
 800acda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acdc:	f000 fbd3 	bl	800b486 <__retarget_lock_acquire_recursive>
 800ace0:	89a3      	ldrh	r3, [r4, #12]
 800ace2:	071b      	lsls	r3, r3, #28
 800ace4:	d502      	bpl.n	800acec <_vfiprintf_r+0x40>
 800ace6:	6923      	ldr	r3, [r4, #16]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d11d      	bne.n	800ad28 <_vfiprintf_r+0x7c>
 800acec:	0021      	movs	r1, r4
 800acee:	0030      	movs	r0, r6
 800acf0:	f000 f97a 	bl	800afe8 <__swsetup_r>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d017      	beq.n	800ad28 <_vfiprintf_r+0x7c>
 800acf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acfa:	07db      	lsls	r3, r3, #31
 800acfc:	d50d      	bpl.n	800ad1a <_vfiprintf_r+0x6e>
 800acfe:	2001      	movs	r0, #1
 800ad00:	4240      	negs	r0, r0
 800ad02:	b021      	add	sp, #132	; 0x84
 800ad04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad06:	4b7f      	ldr	r3, [pc, #508]	; (800af04 <_vfiprintf_r+0x258>)
 800ad08:	429c      	cmp	r4, r3
 800ad0a:	d101      	bne.n	800ad10 <_vfiprintf_r+0x64>
 800ad0c:	68b4      	ldr	r4, [r6, #8]
 800ad0e:	e7de      	b.n	800acce <_vfiprintf_r+0x22>
 800ad10:	4b7d      	ldr	r3, [pc, #500]	; (800af08 <_vfiprintf_r+0x25c>)
 800ad12:	429c      	cmp	r4, r3
 800ad14:	d1db      	bne.n	800acce <_vfiprintf_r+0x22>
 800ad16:	68f4      	ldr	r4, [r6, #12]
 800ad18:	e7d9      	b.n	800acce <_vfiprintf_r+0x22>
 800ad1a:	89a3      	ldrh	r3, [r4, #12]
 800ad1c:	059b      	lsls	r3, r3, #22
 800ad1e:	d4ee      	bmi.n	800acfe <_vfiprintf_r+0x52>
 800ad20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad22:	f000 fbb1 	bl	800b488 <__retarget_lock_release_recursive>
 800ad26:	e7ea      	b.n	800acfe <_vfiprintf_r+0x52>
 800ad28:	2300      	movs	r3, #0
 800ad2a:	ad08      	add	r5, sp, #32
 800ad2c:	616b      	str	r3, [r5, #20]
 800ad2e:	3320      	adds	r3, #32
 800ad30:	766b      	strb	r3, [r5, #25]
 800ad32:	3310      	adds	r3, #16
 800ad34:	76ab      	strb	r3, [r5, #26]
 800ad36:	9707      	str	r7, [sp, #28]
 800ad38:	9f03      	ldr	r7, [sp, #12]
 800ad3a:	783b      	ldrb	r3, [r7, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d001      	beq.n	800ad44 <_vfiprintf_r+0x98>
 800ad40:	2b25      	cmp	r3, #37	; 0x25
 800ad42:	d14e      	bne.n	800ade2 <_vfiprintf_r+0x136>
 800ad44:	9b03      	ldr	r3, [sp, #12]
 800ad46:	1afb      	subs	r3, r7, r3
 800ad48:	9305      	str	r3, [sp, #20]
 800ad4a:	9b03      	ldr	r3, [sp, #12]
 800ad4c:	429f      	cmp	r7, r3
 800ad4e:	d00d      	beq.n	800ad6c <_vfiprintf_r+0xc0>
 800ad50:	9b05      	ldr	r3, [sp, #20]
 800ad52:	0021      	movs	r1, r4
 800ad54:	0030      	movs	r0, r6
 800ad56:	9a03      	ldr	r2, [sp, #12]
 800ad58:	f7ff ff96 	bl	800ac88 <__sfputs_r>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	d100      	bne.n	800ad62 <_vfiprintf_r+0xb6>
 800ad60:	e0b5      	b.n	800aece <_vfiprintf_r+0x222>
 800ad62:	696a      	ldr	r2, [r5, #20]
 800ad64:	9b05      	ldr	r3, [sp, #20]
 800ad66:	4694      	mov	ip, r2
 800ad68:	4463      	add	r3, ip
 800ad6a:	616b      	str	r3, [r5, #20]
 800ad6c:	783b      	ldrb	r3, [r7, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d100      	bne.n	800ad74 <_vfiprintf_r+0xc8>
 800ad72:	e0ac      	b.n	800aece <_vfiprintf_r+0x222>
 800ad74:	2201      	movs	r2, #1
 800ad76:	1c7b      	adds	r3, r7, #1
 800ad78:	9303      	str	r3, [sp, #12]
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	4252      	negs	r2, r2
 800ad7e:	606a      	str	r2, [r5, #4]
 800ad80:	a904      	add	r1, sp, #16
 800ad82:	3254      	adds	r2, #84	; 0x54
 800ad84:	1852      	adds	r2, r2, r1
 800ad86:	602b      	str	r3, [r5, #0]
 800ad88:	60eb      	str	r3, [r5, #12]
 800ad8a:	60ab      	str	r3, [r5, #8]
 800ad8c:	7013      	strb	r3, [r2, #0]
 800ad8e:	65ab      	str	r3, [r5, #88]	; 0x58
 800ad90:	9b03      	ldr	r3, [sp, #12]
 800ad92:	2205      	movs	r2, #5
 800ad94:	7819      	ldrb	r1, [r3, #0]
 800ad96:	485d      	ldr	r0, [pc, #372]	; (800af0c <_vfiprintf_r+0x260>)
 800ad98:	f7ff f8a4 	bl	8009ee4 <memchr>
 800ad9c:	9b03      	ldr	r3, [sp, #12]
 800ad9e:	1c5f      	adds	r7, r3, #1
 800ada0:	2800      	cmp	r0, #0
 800ada2:	d120      	bne.n	800ade6 <_vfiprintf_r+0x13a>
 800ada4:	682a      	ldr	r2, [r5, #0]
 800ada6:	06d3      	lsls	r3, r2, #27
 800ada8:	d504      	bpl.n	800adb4 <_vfiprintf_r+0x108>
 800adaa:	2353      	movs	r3, #83	; 0x53
 800adac:	a904      	add	r1, sp, #16
 800adae:	185b      	adds	r3, r3, r1
 800adb0:	2120      	movs	r1, #32
 800adb2:	7019      	strb	r1, [r3, #0]
 800adb4:	0713      	lsls	r3, r2, #28
 800adb6:	d504      	bpl.n	800adc2 <_vfiprintf_r+0x116>
 800adb8:	2353      	movs	r3, #83	; 0x53
 800adba:	a904      	add	r1, sp, #16
 800adbc:	185b      	adds	r3, r3, r1
 800adbe:	212b      	movs	r1, #43	; 0x2b
 800adc0:	7019      	strb	r1, [r3, #0]
 800adc2:	9b03      	ldr	r3, [sp, #12]
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	2b2a      	cmp	r3, #42	; 0x2a
 800adc8:	d016      	beq.n	800adf8 <_vfiprintf_r+0x14c>
 800adca:	2100      	movs	r1, #0
 800adcc:	68eb      	ldr	r3, [r5, #12]
 800adce:	9f03      	ldr	r7, [sp, #12]
 800add0:	783a      	ldrb	r2, [r7, #0]
 800add2:	1c78      	adds	r0, r7, #1
 800add4:	3a30      	subs	r2, #48	; 0x30
 800add6:	4684      	mov	ip, r0
 800add8:	2a09      	cmp	r2, #9
 800adda:	d94f      	bls.n	800ae7c <_vfiprintf_r+0x1d0>
 800addc:	2900      	cmp	r1, #0
 800adde:	d111      	bne.n	800ae04 <_vfiprintf_r+0x158>
 800ade0:	e017      	b.n	800ae12 <_vfiprintf_r+0x166>
 800ade2:	3701      	adds	r7, #1
 800ade4:	e7a9      	b.n	800ad3a <_vfiprintf_r+0x8e>
 800ade6:	4b49      	ldr	r3, [pc, #292]	; (800af0c <_vfiprintf_r+0x260>)
 800ade8:	682a      	ldr	r2, [r5, #0]
 800adea:	1ac0      	subs	r0, r0, r3
 800adec:	2301      	movs	r3, #1
 800adee:	4083      	lsls	r3, r0
 800adf0:	4313      	orrs	r3, r2
 800adf2:	602b      	str	r3, [r5, #0]
 800adf4:	9703      	str	r7, [sp, #12]
 800adf6:	e7cb      	b.n	800ad90 <_vfiprintf_r+0xe4>
 800adf8:	9b07      	ldr	r3, [sp, #28]
 800adfa:	1d19      	adds	r1, r3, #4
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	9107      	str	r1, [sp, #28]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	db01      	blt.n	800ae08 <_vfiprintf_r+0x15c>
 800ae04:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae06:	e004      	b.n	800ae12 <_vfiprintf_r+0x166>
 800ae08:	425b      	negs	r3, r3
 800ae0a:	60eb      	str	r3, [r5, #12]
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	602b      	str	r3, [r5, #0]
 800ae12:	783b      	ldrb	r3, [r7, #0]
 800ae14:	2b2e      	cmp	r3, #46	; 0x2e
 800ae16:	d10a      	bne.n	800ae2e <_vfiprintf_r+0x182>
 800ae18:	787b      	ldrb	r3, [r7, #1]
 800ae1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae1c:	d137      	bne.n	800ae8e <_vfiprintf_r+0x1e2>
 800ae1e:	9b07      	ldr	r3, [sp, #28]
 800ae20:	3702      	adds	r7, #2
 800ae22:	1d1a      	adds	r2, r3, #4
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	9207      	str	r2, [sp, #28]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	db2d      	blt.n	800ae88 <_vfiprintf_r+0x1dc>
 800ae2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae2e:	2203      	movs	r2, #3
 800ae30:	7839      	ldrb	r1, [r7, #0]
 800ae32:	4837      	ldr	r0, [pc, #220]	; (800af10 <_vfiprintf_r+0x264>)
 800ae34:	f7ff f856 	bl	8009ee4 <memchr>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	d007      	beq.n	800ae4c <_vfiprintf_r+0x1a0>
 800ae3c:	4b34      	ldr	r3, [pc, #208]	; (800af10 <_vfiprintf_r+0x264>)
 800ae3e:	682a      	ldr	r2, [r5, #0]
 800ae40:	1ac0      	subs	r0, r0, r3
 800ae42:	2340      	movs	r3, #64	; 0x40
 800ae44:	4083      	lsls	r3, r0
 800ae46:	4313      	orrs	r3, r2
 800ae48:	3701      	adds	r7, #1
 800ae4a:	602b      	str	r3, [r5, #0]
 800ae4c:	7839      	ldrb	r1, [r7, #0]
 800ae4e:	1c7b      	adds	r3, r7, #1
 800ae50:	2206      	movs	r2, #6
 800ae52:	4830      	ldr	r0, [pc, #192]	; (800af14 <_vfiprintf_r+0x268>)
 800ae54:	9303      	str	r3, [sp, #12]
 800ae56:	7629      	strb	r1, [r5, #24]
 800ae58:	f7ff f844 	bl	8009ee4 <memchr>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d045      	beq.n	800aeec <_vfiprintf_r+0x240>
 800ae60:	4b2d      	ldr	r3, [pc, #180]	; (800af18 <_vfiprintf_r+0x26c>)
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d127      	bne.n	800aeb6 <_vfiprintf_r+0x20a>
 800ae66:	2207      	movs	r2, #7
 800ae68:	9b07      	ldr	r3, [sp, #28]
 800ae6a:	3307      	adds	r3, #7
 800ae6c:	4393      	bics	r3, r2
 800ae6e:	3308      	adds	r3, #8
 800ae70:	9307      	str	r3, [sp, #28]
 800ae72:	696b      	ldr	r3, [r5, #20]
 800ae74:	9a04      	ldr	r2, [sp, #16]
 800ae76:	189b      	adds	r3, r3, r2
 800ae78:	616b      	str	r3, [r5, #20]
 800ae7a:	e75d      	b.n	800ad38 <_vfiprintf_r+0x8c>
 800ae7c:	210a      	movs	r1, #10
 800ae7e:	434b      	muls	r3, r1
 800ae80:	4667      	mov	r7, ip
 800ae82:	189b      	adds	r3, r3, r2
 800ae84:	3909      	subs	r1, #9
 800ae86:	e7a3      	b.n	800add0 <_vfiprintf_r+0x124>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	425b      	negs	r3, r3
 800ae8c:	e7ce      	b.n	800ae2c <_vfiprintf_r+0x180>
 800ae8e:	2300      	movs	r3, #0
 800ae90:	001a      	movs	r2, r3
 800ae92:	3701      	adds	r7, #1
 800ae94:	606b      	str	r3, [r5, #4]
 800ae96:	7839      	ldrb	r1, [r7, #0]
 800ae98:	1c78      	adds	r0, r7, #1
 800ae9a:	3930      	subs	r1, #48	; 0x30
 800ae9c:	4684      	mov	ip, r0
 800ae9e:	2909      	cmp	r1, #9
 800aea0:	d903      	bls.n	800aeaa <_vfiprintf_r+0x1fe>
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d0c3      	beq.n	800ae2e <_vfiprintf_r+0x182>
 800aea6:	9209      	str	r2, [sp, #36]	; 0x24
 800aea8:	e7c1      	b.n	800ae2e <_vfiprintf_r+0x182>
 800aeaa:	230a      	movs	r3, #10
 800aeac:	435a      	muls	r2, r3
 800aeae:	4667      	mov	r7, ip
 800aeb0:	1852      	adds	r2, r2, r1
 800aeb2:	3b09      	subs	r3, #9
 800aeb4:	e7ef      	b.n	800ae96 <_vfiprintf_r+0x1ea>
 800aeb6:	ab07      	add	r3, sp, #28
 800aeb8:	9300      	str	r3, [sp, #0]
 800aeba:	0022      	movs	r2, r4
 800aebc:	0029      	movs	r1, r5
 800aebe:	0030      	movs	r0, r6
 800aec0:	4b16      	ldr	r3, [pc, #88]	; (800af1c <_vfiprintf_r+0x270>)
 800aec2:	f7fd fd63 	bl	800898c <_printf_float>
 800aec6:	9004      	str	r0, [sp, #16]
 800aec8:	9b04      	ldr	r3, [sp, #16]
 800aeca:	3301      	adds	r3, #1
 800aecc:	d1d1      	bne.n	800ae72 <_vfiprintf_r+0x1c6>
 800aece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aed0:	07db      	lsls	r3, r3, #31
 800aed2:	d405      	bmi.n	800aee0 <_vfiprintf_r+0x234>
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	059b      	lsls	r3, r3, #22
 800aed8:	d402      	bmi.n	800aee0 <_vfiprintf_r+0x234>
 800aeda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aedc:	f000 fad4 	bl	800b488 <__retarget_lock_release_recursive>
 800aee0:	89a3      	ldrh	r3, [r4, #12]
 800aee2:	065b      	lsls	r3, r3, #25
 800aee4:	d500      	bpl.n	800aee8 <_vfiprintf_r+0x23c>
 800aee6:	e70a      	b.n	800acfe <_vfiprintf_r+0x52>
 800aee8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aeea:	e70a      	b.n	800ad02 <_vfiprintf_r+0x56>
 800aeec:	ab07      	add	r3, sp, #28
 800aeee:	9300      	str	r3, [sp, #0]
 800aef0:	0022      	movs	r2, r4
 800aef2:	0029      	movs	r1, r5
 800aef4:	0030      	movs	r0, r6
 800aef6:	4b09      	ldr	r3, [pc, #36]	; (800af1c <_vfiprintf_r+0x270>)
 800aef8:	f7fd fffa 	bl	8008ef0 <_printf_i>
 800aefc:	e7e3      	b.n	800aec6 <_vfiprintf_r+0x21a>
 800aefe:	46c0      	nop			; (mov r8, r8)
 800af00:	0800bd1c 	.word	0x0800bd1c
 800af04:	0800bd3c 	.word	0x0800bd3c
 800af08:	0800bcfc 	.word	0x0800bcfc
 800af0c:	0800bba4 	.word	0x0800bba4
 800af10:	0800bbaa 	.word	0x0800bbaa
 800af14:	0800bbae 	.word	0x0800bbae
 800af18:	0800898d 	.word	0x0800898d
 800af1c:	0800ac89 	.word	0x0800ac89

0800af20 <__swbuf_r>:
 800af20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af22:	0005      	movs	r5, r0
 800af24:	000e      	movs	r6, r1
 800af26:	0014      	movs	r4, r2
 800af28:	2800      	cmp	r0, #0
 800af2a:	d004      	beq.n	800af36 <__swbuf_r+0x16>
 800af2c:	6983      	ldr	r3, [r0, #24]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d101      	bne.n	800af36 <__swbuf_r+0x16>
 800af32:	f000 fa07 	bl	800b344 <__sinit>
 800af36:	4b22      	ldr	r3, [pc, #136]	; (800afc0 <__swbuf_r+0xa0>)
 800af38:	429c      	cmp	r4, r3
 800af3a:	d12e      	bne.n	800af9a <__swbuf_r+0x7a>
 800af3c:	686c      	ldr	r4, [r5, #4]
 800af3e:	69a3      	ldr	r3, [r4, #24]
 800af40:	60a3      	str	r3, [r4, #8]
 800af42:	89a3      	ldrh	r3, [r4, #12]
 800af44:	071b      	lsls	r3, r3, #28
 800af46:	d532      	bpl.n	800afae <__swbuf_r+0x8e>
 800af48:	6923      	ldr	r3, [r4, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d02f      	beq.n	800afae <__swbuf_r+0x8e>
 800af4e:	6823      	ldr	r3, [r4, #0]
 800af50:	6922      	ldr	r2, [r4, #16]
 800af52:	b2f7      	uxtb	r7, r6
 800af54:	1a98      	subs	r0, r3, r2
 800af56:	6963      	ldr	r3, [r4, #20]
 800af58:	b2f6      	uxtb	r6, r6
 800af5a:	4283      	cmp	r3, r0
 800af5c:	dc05      	bgt.n	800af6a <__swbuf_r+0x4a>
 800af5e:	0021      	movs	r1, r4
 800af60:	0028      	movs	r0, r5
 800af62:	f000 f94d 	bl	800b200 <_fflush_r>
 800af66:	2800      	cmp	r0, #0
 800af68:	d127      	bne.n	800afba <__swbuf_r+0x9a>
 800af6a:	68a3      	ldr	r3, [r4, #8]
 800af6c:	3001      	adds	r0, #1
 800af6e:	3b01      	subs	r3, #1
 800af70:	60a3      	str	r3, [r4, #8]
 800af72:	6823      	ldr	r3, [r4, #0]
 800af74:	1c5a      	adds	r2, r3, #1
 800af76:	6022      	str	r2, [r4, #0]
 800af78:	701f      	strb	r7, [r3, #0]
 800af7a:	6963      	ldr	r3, [r4, #20]
 800af7c:	4283      	cmp	r3, r0
 800af7e:	d004      	beq.n	800af8a <__swbuf_r+0x6a>
 800af80:	89a3      	ldrh	r3, [r4, #12]
 800af82:	07db      	lsls	r3, r3, #31
 800af84:	d507      	bpl.n	800af96 <__swbuf_r+0x76>
 800af86:	2e0a      	cmp	r6, #10
 800af88:	d105      	bne.n	800af96 <__swbuf_r+0x76>
 800af8a:	0021      	movs	r1, r4
 800af8c:	0028      	movs	r0, r5
 800af8e:	f000 f937 	bl	800b200 <_fflush_r>
 800af92:	2800      	cmp	r0, #0
 800af94:	d111      	bne.n	800afba <__swbuf_r+0x9a>
 800af96:	0030      	movs	r0, r6
 800af98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af9a:	4b0a      	ldr	r3, [pc, #40]	; (800afc4 <__swbuf_r+0xa4>)
 800af9c:	429c      	cmp	r4, r3
 800af9e:	d101      	bne.n	800afa4 <__swbuf_r+0x84>
 800afa0:	68ac      	ldr	r4, [r5, #8]
 800afa2:	e7cc      	b.n	800af3e <__swbuf_r+0x1e>
 800afa4:	4b08      	ldr	r3, [pc, #32]	; (800afc8 <__swbuf_r+0xa8>)
 800afa6:	429c      	cmp	r4, r3
 800afa8:	d1c9      	bne.n	800af3e <__swbuf_r+0x1e>
 800afaa:	68ec      	ldr	r4, [r5, #12]
 800afac:	e7c7      	b.n	800af3e <__swbuf_r+0x1e>
 800afae:	0021      	movs	r1, r4
 800afb0:	0028      	movs	r0, r5
 800afb2:	f000 f819 	bl	800afe8 <__swsetup_r>
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d0c9      	beq.n	800af4e <__swbuf_r+0x2e>
 800afba:	2601      	movs	r6, #1
 800afbc:	4276      	negs	r6, r6
 800afbe:	e7ea      	b.n	800af96 <__swbuf_r+0x76>
 800afc0:	0800bd1c 	.word	0x0800bd1c
 800afc4:	0800bd3c 	.word	0x0800bd3c
 800afc8:	0800bcfc 	.word	0x0800bcfc

0800afcc <__ascii_wctomb>:
 800afcc:	0003      	movs	r3, r0
 800afce:	1e08      	subs	r0, r1, #0
 800afd0:	d005      	beq.n	800afde <__ascii_wctomb+0x12>
 800afd2:	2aff      	cmp	r2, #255	; 0xff
 800afd4:	d904      	bls.n	800afe0 <__ascii_wctomb+0x14>
 800afd6:	228a      	movs	r2, #138	; 0x8a
 800afd8:	2001      	movs	r0, #1
 800afda:	601a      	str	r2, [r3, #0]
 800afdc:	4240      	negs	r0, r0
 800afde:	4770      	bx	lr
 800afe0:	2001      	movs	r0, #1
 800afe2:	700a      	strb	r2, [r1, #0]
 800afe4:	e7fb      	b.n	800afde <__ascii_wctomb+0x12>
	...

0800afe8 <__swsetup_r>:
 800afe8:	4b37      	ldr	r3, [pc, #220]	; (800b0c8 <__swsetup_r+0xe0>)
 800afea:	b570      	push	{r4, r5, r6, lr}
 800afec:	681d      	ldr	r5, [r3, #0]
 800afee:	0006      	movs	r6, r0
 800aff0:	000c      	movs	r4, r1
 800aff2:	2d00      	cmp	r5, #0
 800aff4:	d005      	beq.n	800b002 <__swsetup_r+0x1a>
 800aff6:	69ab      	ldr	r3, [r5, #24]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d102      	bne.n	800b002 <__swsetup_r+0x1a>
 800affc:	0028      	movs	r0, r5
 800affe:	f000 f9a1 	bl	800b344 <__sinit>
 800b002:	4b32      	ldr	r3, [pc, #200]	; (800b0cc <__swsetup_r+0xe4>)
 800b004:	429c      	cmp	r4, r3
 800b006:	d10f      	bne.n	800b028 <__swsetup_r+0x40>
 800b008:	686c      	ldr	r4, [r5, #4]
 800b00a:	230c      	movs	r3, #12
 800b00c:	5ee2      	ldrsh	r2, [r4, r3]
 800b00e:	b293      	uxth	r3, r2
 800b010:	0711      	lsls	r1, r2, #28
 800b012:	d42d      	bmi.n	800b070 <__swsetup_r+0x88>
 800b014:	06d9      	lsls	r1, r3, #27
 800b016:	d411      	bmi.n	800b03c <__swsetup_r+0x54>
 800b018:	2309      	movs	r3, #9
 800b01a:	2001      	movs	r0, #1
 800b01c:	6033      	str	r3, [r6, #0]
 800b01e:	3337      	adds	r3, #55	; 0x37
 800b020:	4313      	orrs	r3, r2
 800b022:	81a3      	strh	r3, [r4, #12]
 800b024:	4240      	negs	r0, r0
 800b026:	bd70      	pop	{r4, r5, r6, pc}
 800b028:	4b29      	ldr	r3, [pc, #164]	; (800b0d0 <__swsetup_r+0xe8>)
 800b02a:	429c      	cmp	r4, r3
 800b02c:	d101      	bne.n	800b032 <__swsetup_r+0x4a>
 800b02e:	68ac      	ldr	r4, [r5, #8]
 800b030:	e7eb      	b.n	800b00a <__swsetup_r+0x22>
 800b032:	4b28      	ldr	r3, [pc, #160]	; (800b0d4 <__swsetup_r+0xec>)
 800b034:	429c      	cmp	r4, r3
 800b036:	d1e8      	bne.n	800b00a <__swsetup_r+0x22>
 800b038:	68ec      	ldr	r4, [r5, #12]
 800b03a:	e7e6      	b.n	800b00a <__swsetup_r+0x22>
 800b03c:	075b      	lsls	r3, r3, #29
 800b03e:	d513      	bpl.n	800b068 <__swsetup_r+0x80>
 800b040:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b042:	2900      	cmp	r1, #0
 800b044:	d008      	beq.n	800b058 <__swsetup_r+0x70>
 800b046:	0023      	movs	r3, r4
 800b048:	3344      	adds	r3, #68	; 0x44
 800b04a:	4299      	cmp	r1, r3
 800b04c:	d002      	beq.n	800b054 <__swsetup_r+0x6c>
 800b04e:	0030      	movs	r0, r6
 800b050:	f7ff fb1c 	bl	800a68c <_free_r>
 800b054:	2300      	movs	r3, #0
 800b056:	6363      	str	r3, [r4, #52]	; 0x34
 800b058:	2224      	movs	r2, #36	; 0x24
 800b05a:	89a3      	ldrh	r3, [r4, #12]
 800b05c:	4393      	bics	r3, r2
 800b05e:	81a3      	strh	r3, [r4, #12]
 800b060:	2300      	movs	r3, #0
 800b062:	6063      	str	r3, [r4, #4]
 800b064:	6923      	ldr	r3, [r4, #16]
 800b066:	6023      	str	r3, [r4, #0]
 800b068:	2308      	movs	r3, #8
 800b06a:	89a2      	ldrh	r2, [r4, #12]
 800b06c:	4313      	orrs	r3, r2
 800b06e:	81a3      	strh	r3, [r4, #12]
 800b070:	6923      	ldr	r3, [r4, #16]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d10b      	bne.n	800b08e <__swsetup_r+0xa6>
 800b076:	21a0      	movs	r1, #160	; 0xa0
 800b078:	2280      	movs	r2, #128	; 0x80
 800b07a:	89a3      	ldrh	r3, [r4, #12]
 800b07c:	0089      	lsls	r1, r1, #2
 800b07e:	0092      	lsls	r2, r2, #2
 800b080:	400b      	ands	r3, r1
 800b082:	4293      	cmp	r3, r2
 800b084:	d003      	beq.n	800b08e <__swsetup_r+0xa6>
 800b086:	0021      	movs	r1, r4
 800b088:	0030      	movs	r0, r6
 800b08a:	f000 fa27 	bl	800b4dc <__smakebuf_r>
 800b08e:	220c      	movs	r2, #12
 800b090:	5ea3      	ldrsh	r3, [r4, r2]
 800b092:	2001      	movs	r0, #1
 800b094:	001a      	movs	r2, r3
 800b096:	b299      	uxth	r1, r3
 800b098:	4002      	ands	r2, r0
 800b09a:	4203      	tst	r3, r0
 800b09c:	d00f      	beq.n	800b0be <__swsetup_r+0xd6>
 800b09e:	2200      	movs	r2, #0
 800b0a0:	60a2      	str	r2, [r4, #8]
 800b0a2:	6962      	ldr	r2, [r4, #20]
 800b0a4:	4252      	negs	r2, r2
 800b0a6:	61a2      	str	r2, [r4, #24]
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	6922      	ldr	r2, [r4, #16]
 800b0ac:	4282      	cmp	r2, r0
 800b0ae:	d1ba      	bne.n	800b026 <__swsetup_r+0x3e>
 800b0b0:	060a      	lsls	r2, r1, #24
 800b0b2:	d5b8      	bpl.n	800b026 <__swsetup_r+0x3e>
 800b0b4:	2240      	movs	r2, #64	; 0x40
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	81a3      	strh	r3, [r4, #12]
 800b0ba:	3801      	subs	r0, #1
 800b0bc:	e7b3      	b.n	800b026 <__swsetup_r+0x3e>
 800b0be:	0788      	lsls	r0, r1, #30
 800b0c0:	d400      	bmi.n	800b0c4 <__swsetup_r+0xdc>
 800b0c2:	6962      	ldr	r2, [r4, #20]
 800b0c4:	60a2      	str	r2, [r4, #8]
 800b0c6:	e7ef      	b.n	800b0a8 <__swsetup_r+0xc0>
 800b0c8:	20000010 	.word	0x20000010
 800b0cc:	0800bd1c 	.word	0x0800bd1c
 800b0d0:	0800bd3c 	.word	0x0800bd3c
 800b0d4:	0800bcfc 	.word	0x0800bcfc

0800b0d8 <abort>:
 800b0d8:	2006      	movs	r0, #6
 800b0da:	b510      	push	{r4, lr}
 800b0dc:	f000 fa74 	bl	800b5c8 <raise>
 800b0e0:	2001      	movs	r0, #1
 800b0e2:	f7f9 fc93 	bl	8004a0c <_exit>
	...

0800b0e8 <__sflush_r>:
 800b0e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0ea:	898b      	ldrh	r3, [r1, #12]
 800b0ec:	0005      	movs	r5, r0
 800b0ee:	000c      	movs	r4, r1
 800b0f0:	071a      	lsls	r2, r3, #28
 800b0f2:	d45f      	bmi.n	800b1b4 <__sflush_r+0xcc>
 800b0f4:	684a      	ldr	r2, [r1, #4]
 800b0f6:	2a00      	cmp	r2, #0
 800b0f8:	dc04      	bgt.n	800b104 <__sflush_r+0x1c>
 800b0fa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b0fc:	2a00      	cmp	r2, #0
 800b0fe:	dc01      	bgt.n	800b104 <__sflush_r+0x1c>
 800b100:	2000      	movs	r0, #0
 800b102:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b104:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b106:	2f00      	cmp	r7, #0
 800b108:	d0fa      	beq.n	800b100 <__sflush_r+0x18>
 800b10a:	2200      	movs	r2, #0
 800b10c:	2180      	movs	r1, #128	; 0x80
 800b10e:	682e      	ldr	r6, [r5, #0]
 800b110:	602a      	str	r2, [r5, #0]
 800b112:	001a      	movs	r2, r3
 800b114:	0149      	lsls	r1, r1, #5
 800b116:	400a      	ands	r2, r1
 800b118:	420b      	tst	r3, r1
 800b11a:	d034      	beq.n	800b186 <__sflush_r+0x9e>
 800b11c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b11e:	89a3      	ldrh	r3, [r4, #12]
 800b120:	075b      	lsls	r3, r3, #29
 800b122:	d506      	bpl.n	800b132 <__sflush_r+0x4a>
 800b124:	6863      	ldr	r3, [r4, #4]
 800b126:	1ac0      	subs	r0, r0, r3
 800b128:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d001      	beq.n	800b132 <__sflush_r+0x4a>
 800b12e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b130:	1ac0      	subs	r0, r0, r3
 800b132:	0002      	movs	r2, r0
 800b134:	6a21      	ldr	r1, [r4, #32]
 800b136:	2300      	movs	r3, #0
 800b138:	0028      	movs	r0, r5
 800b13a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b13c:	47b8      	blx	r7
 800b13e:	89a1      	ldrh	r1, [r4, #12]
 800b140:	1c43      	adds	r3, r0, #1
 800b142:	d106      	bne.n	800b152 <__sflush_r+0x6a>
 800b144:	682b      	ldr	r3, [r5, #0]
 800b146:	2b1d      	cmp	r3, #29
 800b148:	d831      	bhi.n	800b1ae <__sflush_r+0xc6>
 800b14a:	4a2c      	ldr	r2, [pc, #176]	; (800b1fc <__sflush_r+0x114>)
 800b14c:	40da      	lsrs	r2, r3
 800b14e:	07d3      	lsls	r3, r2, #31
 800b150:	d52d      	bpl.n	800b1ae <__sflush_r+0xc6>
 800b152:	2300      	movs	r3, #0
 800b154:	6063      	str	r3, [r4, #4]
 800b156:	6923      	ldr	r3, [r4, #16]
 800b158:	6023      	str	r3, [r4, #0]
 800b15a:	04cb      	lsls	r3, r1, #19
 800b15c:	d505      	bpl.n	800b16a <__sflush_r+0x82>
 800b15e:	1c43      	adds	r3, r0, #1
 800b160:	d102      	bne.n	800b168 <__sflush_r+0x80>
 800b162:	682b      	ldr	r3, [r5, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d100      	bne.n	800b16a <__sflush_r+0x82>
 800b168:	6560      	str	r0, [r4, #84]	; 0x54
 800b16a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b16c:	602e      	str	r6, [r5, #0]
 800b16e:	2900      	cmp	r1, #0
 800b170:	d0c6      	beq.n	800b100 <__sflush_r+0x18>
 800b172:	0023      	movs	r3, r4
 800b174:	3344      	adds	r3, #68	; 0x44
 800b176:	4299      	cmp	r1, r3
 800b178:	d002      	beq.n	800b180 <__sflush_r+0x98>
 800b17a:	0028      	movs	r0, r5
 800b17c:	f7ff fa86 	bl	800a68c <_free_r>
 800b180:	2000      	movs	r0, #0
 800b182:	6360      	str	r0, [r4, #52]	; 0x34
 800b184:	e7bd      	b.n	800b102 <__sflush_r+0x1a>
 800b186:	2301      	movs	r3, #1
 800b188:	0028      	movs	r0, r5
 800b18a:	6a21      	ldr	r1, [r4, #32]
 800b18c:	47b8      	blx	r7
 800b18e:	1c43      	adds	r3, r0, #1
 800b190:	d1c5      	bne.n	800b11e <__sflush_r+0x36>
 800b192:	682b      	ldr	r3, [r5, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d0c2      	beq.n	800b11e <__sflush_r+0x36>
 800b198:	2b1d      	cmp	r3, #29
 800b19a:	d001      	beq.n	800b1a0 <__sflush_r+0xb8>
 800b19c:	2b16      	cmp	r3, #22
 800b19e:	d101      	bne.n	800b1a4 <__sflush_r+0xbc>
 800b1a0:	602e      	str	r6, [r5, #0]
 800b1a2:	e7ad      	b.n	800b100 <__sflush_r+0x18>
 800b1a4:	2340      	movs	r3, #64	; 0x40
 800b1a6:	89a2      	ldrh	r2, [r4, #12]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	81a3      	strh	r3, [r4, #12]
 800b1ac:	e7a9      	b.n	800b102 <__sflush_r+0x1a>
 800b1ae:	2340      	movs	r3, #64	; 0x40
 800b1b0:	430b      	orrs	r3, r1
 800b1b2:	e7fa      	b.n	800b1aa <__sflush_r+0xc2>
 800b1b4:	690f      	ldr	r7, [r1, #16]
 800b1b6:	2f00      	cmp	r7, #0
 800b1b8:	d0a2      	beq.n	800b100 <__sflush_r+0x18>
 800b1ba:	680a      	ldr	r2, [r1, #0]
 800b1bc:	600f      	str	r7, [r1, #0]
 800b1be:	1bd2      	subs	r2, r2, r7
 800b1c0:	9201      	str	r2, [sp, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	079b      	lsls	r3, r3, #30
 800b1c6:	d100      	bne.n	800b1ca <__sflush_r+0xe2>
 800b1c8:	694a      	ldr	r2, [r1, #20]
 800b1ca:	60a2      	str	r2, [r4, #8]
 800b1cc:	9b01      	ldr	r3, [sp, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	dc00      	bgt.n	800b1d4 <__sflush_r+0xec>
 800b1d2:	e795      	b.n	800b100 <__sflush_r+0x18>
 800b1d4:	003a      	movs	r2, r7
 800b1d6:	0028      	movs	r0, r5
 800b1d8:	9b01      	ldr	r3, [sp, #4]
 800b1da:	6a21      	ldr	r1, [r4, #32]
 800b1dc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b1de:	47b0      	blx	r6
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	dc06      	bgt.n	800b1f2 <__sflush_r+0x10a>
 800b1e4:	2340      	movs	r3, #64	; 0x40
 800b1e6:	2001      	movs	r0, #1
 800b1e8:	89a2      	ldrh	r2, [r4, #12]
 800b1ea:	4240      	negs	r0, r0
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	81a3      	strh	r3, [r4, #12]
 800b1f0:	e787      	b.n	800b102 <__sflush_r+0x1a>
 800b1f2:	9b01      	ldr	r3, [sp, #4]
 800b1f4:	183f      	adds	r7, r7, r0
 800b1f6:	1a1b      	subs	r3, r3, r0
 800b1f8:	9301      	str	r3, [sp, #4]
 800b1fa:	e7e7      	b.n	800b1cc <__sflush_r+0xe4>
 800b1fc:	20400001 	.word	0x20400001

0800b200 <_fflush_r>:
 800b200:	690b      	ldr	r3, [r1, #16]
 800b202:	b570      	push	{r4, r5, r6, lr}
 800b204:	0005      	movs	r5, r0
 800b206:	000c      	movs	r4, r1
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d102      	bne.n	800b212 <_fflush_r+0x12>
 800b20c:	2500      	movs	r5, #0
 800b20e:	0028      	movs	r0, r5
 800b210:	bd70      	pop	{r4, r5, r6, pc}
 800b212:	2800      	cmp	r0, #0
 800b214:	d004      	beq.n	800b220 <_fflush_r+0x20>
 800b216:	6983      	ldr	r3, [r0, #24]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d101      	bne.n	800b220 <_fflush_r+0x20>
 800b21c:	f000 f892 	bl	800b344 <__sinit>
 800b220:	4b14      	ldr	r3, [pc, #80]	; (800b274 <_fflush_r+0x74>)
 800b222:	429c      	cmp	r4, r3
 800b224:	d11b      	bne.n	800b25e <_fflush_r+0x5e>
 800b226:	686c      	ldr	r4, [r5, #4]
 800b228:	220c      	movs	r2, #12
 800b22a:	5ea3      	ldrsh	r3, [r4, r2]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d0ed      	beq.n	800b20c <_fflush_r+0xc>
 800b230:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b232:	07d2      	lsls	r2, r2, #31
 800b234:	d404      	bmi.n	800b240 <_fflush_r+0x40>
 800b236:	059b      	lsls	r3, r3, #22
 800b238:	d402      	bmi.n	800b240 <_fflush_r+0x40>
 800b23a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b23c:	f000 f923 	bl	800b486 <__retarget_lock_acquire_recursive>
 800b240:	0028      	movs	r0, r5
 800b242:	0021      	movs	r1, r4
 800b244:	f7ff ff50 	bl	800b0e8 <__sflush_r>
 800b248:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b24a:	0005      	movs	r5, r0
 800b24c:	07db      	lsls	r3, r3, #31
 800b24e:	d4de      	bmi.n	800b20e <_fflush_r+0xe>
 800b250:	89a3      	ldrh	r3, [r4, #12]
 800b252:	059b      	lsls	r3, r3, #22
 800b254:	d4db      	bmi.n	800b20e <_fflush_r+0xe>
 800b256:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b258:	f000 f916 	bl	800b488 <__retarget_lock_release_recursive>
 800b25c:	e7d7      	b.n	800b20e <_fflush_r+0xe>
 800b25e:	4b06      	ldr	r3, [pc, #24]	; (800b278 <_fflush_r+0x78>)
 800b260:	429c      	cmp	r4, r3
 800b262:	d101      	bne.n	800b268 <_fflush_r+0x68>
 800b264:	68ac      	ldr	r4, [r5, #8]
 800b266:	e7df      	b.n	800b228 <_fflush_r+0x28>
 800b268:	4b04      	ldr	r3, [pc, #16]	; (800b27c <_fflush_r+0x7c>)
 800b26a:	429c      	cmp	r4, r3
 800b26c:	d1dc      	bne.n	800b228 <_fflush_r+0x28>
 800b26e:	68ec      	ldr	r4, [r5, #12]
 800b270:	e7da      	b.n	800b228 <_fflush_r+0x28>
 800b272:	46c0      	nop			; (mov r8, r8)
 800b274:	0800bd1c 	.word	0x0800bd1c
 800b278:	0800bd3c 	.word	0x0800bd3c
 800b27c:	0800bcfc 	.word	0x0800bcfc

0800b280 <std>:
 800b280:	2300      	movs	r3, #0
 800b282:	b510      	push	{r4, lr}
 800b284:	0004      	movs	r4, r0
 800b286:	6003      	str	r3, [r0, #0]
 800b288:	6043      	str	r3, [r0, #4]
 800b28a:	6083      	str	r3, [r0, #8]
 800b28c:	8181      	strh	r1, [r0, #12]
 800b28e:	6643      	str	r3, [r0, #100]	; 0x64
 800b290:	0019      	movs	r1, r3
 800b292:	81c2      	strh	r2, [r0, #14]
 800b294:	6103      	str	r3, [r0, #16]
 800b296:	6143      	str	r3, [r0, #20]
 800b298:	6183      	str	r3, [r0, #24]
 800b29a:	2208      	movs	r2, #8
 800b29c:	305c      	adds	r0, #92	; 0x5c
 800b29e:	f7fd fac2 	bl	8008826 <memset>
 800b2a2:	4b05      	ldr	r3, [pc, #20]	; (800b2b8 <std+0x38>)
 800b2a4:	6224      	str	r4, [r4, #32]
 800b2a6:	6263      	str	r3, [r4, #36]	; 0x24
 800b2a8:	4b04      	ldr	r3, [pc, #16]	; (800b2bc <std+0x3c>)
 800b2aa:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2ac:	4b04      	ldr	r3, [pc, #16]	; (800b2c0 <std+0x40>)
 800b2ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2b0:	4b04      	ldr	r3, [pc, #16]	; (800b2c4 <std+0x44>)
 800b2b2:	6323      	str	r3, [r4, #48]	; 0x30
 800b2b4:	bd10      	pop	{r4, pc}
 800b2b6:	46c0      	nop			; (mov r8, r8)
 800b2b8:	0800b609 	.word	0x0800b609
 800b2bc:	0800b631 	.word	0x0800b631
 800b2c0:	0800b669 	.word	0x0800b669
 800b2c4:	0800b695 	.word	0x0800b695

0800b2c8 <_cleanup_r>:
 800b2c8:	b510      	push	{r4, lr}
 800b2ca:	4902      	ldr	r1, [pc, #8]	; (800b2d4 <_cleanup_r+0xc>)
 800b2cc:	f000 f8ba 	bl	800b444 <_fwalk_reent>
 800b2d0:	bd10      	pop	{r4, pc}
 800b2d2:	46c0      	nop			; (mov r8, r8)
 800b2d4:	0800b201 	.word	0x0800b201

0800b2d8 <__sfmoreglue>:
 800b2d8:	b570      	push	{r4, r5, r6, lr}
 800b2da:	2568      	movs	r5, #104	; 0x68
 800b2dc:	1e4a      	subs	r2, r1, #1
 800b2de:	4355      	muls	r5, r2
 800b2e0:	000e      	movs	r6, r1
 800b2e2:	0029      	movs	r1, r5
 800b2e4:	3174      	adds	r1, #116	; 0x74
 800b2e6:	f7ff fa3d 	bl	800a764 <_malloc_r>
 800b2ea:	1e04      	subs	r4, r0, #0
 800b2ec:	d008      	beq.n	800b300 <__sfmoreglue+0x28>
 800b2ee:	2100      	movs	r1, #0
 800b2f0:	002a      	movs	r2, r5
 800b2f2:	6001      	str	r1, [r0, #0]
 800b2f4:	6046      	str	r6, [r0, #4]
 800b2f6:	300c      	adds	r0, #12
 800b2f8:	60a0      	str	r0, [r4, #8]
 800b2fa:	3268      	adds	r2, #104	; 0x68
 800b2fc:	f7fd fa93 	bl	8008826 <memset>
 800b300:	0020      	movs	r0, r4
 800b302:	bd70      	pop	{r4, r5, r6, pc}

0800b304 <__sfp_lock_acquire>:
 800b304:	b510      	push	{r4, lr}
 800b306:	4802      	ldr	r0, [pc, #8]	; (800b310 <__sfp_lock_acquire+0xc>)
 800b308:	f000 f8bd 	bl	800b486 <__retarget_lock_acquire_recursive>
 800b30c:	bd10      	pop	{r4, pc}
 800b30e:	46c0      	nop			; (mov r8, r8)
 800b310:	20000465 	.word	0x20000465

0800b314 <__sfp_lock_release>:
 800b314:	b510      	push	{r4, lr}
 800b316:	4802      	ldr	r0, [pc, #8]	; (800b320 <__sfp_lock_release+0xc>)
 800b318:	f000 f8b6 	bl	800b488 <__retarget_lock_release_recursive>
 800b31c:	bd10      	pop	{r4, pc}
 800b31e:	46c0      	nop			; (mov r8, r8)
 800b320:	20000465 	.word	0x20000465

0800b324 <__sinit_lock_acquire>:
 800b324:	b510      	push	{r4, lr}
 800b326:	4802      	ldr	r0, [pc, #8]	; (800b330 <__sinit_lock_acquire+0xc>)
 800b328:	f000 f8ad 	bl	800b486 <__retarget_lock_acquire_recursive>
 800b32c:	bd10      	pop	{r4, pc}
 800b32e:	46c0      	nop			; (mov r8, r8)
 800b330:	20000466 	.word	0x20000466

0800b334 <__sinit_lock_release>:
 800b334:	b510      	push	{r4, lr}
 800b336:	4802      	ldr	r0, [pc, #8]	; (800b340 <__sinit_lock_release+0xc>)
 800b338:	f000 f8a6 	bl	800b488 <__retarget_lock_release_recursive>
 800b33c:	bd10      	pop	{r4, pc}
 800b33e:	46c0      	nop			; (mov r8, r8)
 800b340:	20000466 	.word	0x20000466

0800b344 <__sinit>:
 800b344:	b513      	push	{r0, r1, r4, lr}
 800b346:	0004      	movs	r4, r0
 800b348:	f7ff ffec 	bl	800b324 <__sinit_lock_acquire>
 800b34c:	69a3      	ldr	r3, [r4, #24]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d002      	beq.n	800b358 <__sinit+0x14>
 800b352:	f7ff ffef 	bl	800b334 <__sinit_lock_release>
 800b356:	bd13      	pop	{r0, r1, r4, pc}
 800b358:	64a3      	str	r3, [r4, #72]	; 0x48
 800b35a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b35c:	6523      	str	r3, [r4, #80]	; 0x50
 800b35e:	4b13      	ldr	r3, [pc, #76]	; (800b3ac <__sinit+0x68>)
 800b360:	4a13      	ldr	r2, [pc, #76]	; (800b3b0 <__sinit+0x6c>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	62a2      	str	r2, [r4, #40]	; 0x28
 800b366:	9301      	str	r3, [sp, #4]
 800b368:	42a3      	cmp	r3, r4
 800b36a:	d101      	bne.n	800b370 <__sinit+0x2c>
 800b36c:	2301      	movs	r3, #1
 800b36e:	61a3      	str	r3, [r4, #24]
 800b370:	0020      	movs	r0, r4
 800b372:	f000 f81f 	bl	800b3b4 <__sfp>
 800b376:	6060      	str	r0, [r4, #4]
 800b378:	0020      	movs	r0, r4
 800b37a:	f000 f81b 	bl	800b3b4 <__sfp>
 800b37e:	60a0      	str	r0, [r4, #8]
 800b380:	0020      	movs	r0, r4
 800b382:	f000 f817 	bl	800b3b4 <__sfp>
 800b386:	2200      	movs	r2, #0
 800b388:	2104      	movs	r1, #4
 800b38a:	60e0      	str	r0, [r4, #12]
 800b38c:	6860      	ldr	r0, [r4, #4]
 800b38e:	f7ff ff77 	bl	800b280 <std>
 800b392:	2201      	movs	r2, #1
 800b394:	2109      	movs	r1, #9
 800b396:	68a0      	ldr	r0, [r4, #8]
 800b398:	f7ff ff72 	bl	800b280 <std>
 800b39c:	2202      	movs	r2, #2
 800b39e:	2112      	movs	r1, #18
 800b3a0:	68e0      	ldr	r0, [r4, #12]
 800b3a2:	f7ff ff6d 	bl	800b280 <std>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	61a3      	str	r3, [r4, #24]
 800b3aa:	e7d2      	b.n	800b352 <__sinit+0xe>
 800b3ac:	0800b980 	.word	0x0800b980
 800b3b0:	0800b2c9 	.word	0x0800b2c9

0800b3b4 <__sfp>:
 800b3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b6:	0007      	movs	r7, r0
 800b3b8:	f7ff ffa4 	bl	800b304 <__sfp_lock_acquire>
 800b3bc:	4b1f      	ldr	r3, [pc, #124]	; (800b43c <__sfp+0x88>)
 800b3be:	681e      	ldr	r6, [r3, #0]
 800b3c0:	69b3      	ldr	r3, [r6, #24]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d102      	bne.n	800b3cc <__sfp+0x18>
 800b3c6:	0030      	movs	r0, r6
 800b3c8:	f7ff ffbc 	bl	800b344 <__sinit>
 800b3cc:	3648      	adds	r6, #72	; 0x48
 800b3ce:	68b4      	ldr	r4, [r6, #8]
 800b3d0:	6873      	ldr	r3, [r6, #4]
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	d504      	bpl.n	800b3e0 <__sfp+0x2c>
 800b3d6:	6833      	ldr	r3, [r6, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d022      	beq.n	800b422 <__sfp+0x6e>
 800b3dc:	6836      	ldr	r6, [r6, #0]
 800b3de:	e7f6      	b.n	800b3ce <__sfp+0x1a>
 800b3e0:	220c      	movs	r2, #12
 800b3e2:	5ea5      	ldrsh	r5, [r4, r2]
 800b3e4:	2d00      	cmp	r5, #0
 800b3e6:	d11a      	bne.n	800b41e <__sfp+0x6a>
 800b3e8:	0020      	movs	r0, r4
 800b3ea:	4b15      	ldr	r3, [pc, #84]	; (800b440 <__sfp+0x8c>)
 800b3ec:	3058      	adds	r0, #88	; 0x58
 800b3ee:	60e3      	str	r3, [r4, #12]
 800b3f0:	6665      	str	r5, [r4, #100]	; 0x64
 800b3f2:	f000 f847 	bl	800b484 <__retarget_lock_init_recursive>
 800b3f6:	f7ff ff8d 	bl	800b314 <__sfp_lock_release>
 800b3fa:	0020      	movs	r0, r4
 800b3fc:	2208      	movs	r2, #8
 800b3fe:	0029      	movs	r1, r5
 800b400:	6025      	str	r5, [r4, #0]
 800b402:	60a5      	str	r5, [r4, #8]
 800b404:	6065      	str	r5, [r4, #4]
 800b406:	6125      	str	r5, [r4, #16]
 800b408:	6165      	str	r5, [r4, #20]
 800b40a:	61a5      	str	r5, [r4, #24]
 800b40c:	305c      	adds	r0, #92	; 0x5c
 800b40e:	f7fd fa0a 	bl	8008826 <memset>
 800b412:	6365      	str	r5, [r4, #52]	; 0x34
 800b414:	63a5      	str	r5, [r4, #56]	; 0x38
 800b416:	64a5      	str	r5, [r4, #72]	; 0x48
 800b418:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b41a:	0020      	movs	r0, r4
 800b41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b41e:	3468      	adds	r4, #104	; 0x68
 800b420:	e7d7      	b.n	800b3d2 <__sfp+0x1e>
 800b422:	2104      	movs	r1, #4
 800b424:	0038      	movs	r0, r7
 800b426:	f7ff ff57 	bl	800b2d8 <__sfmoreglue>
 800b42a:	1e04      	subs	r4, r0, #0
 800b42c:	6030      	str	r0, [r6, #0]
 800b42e:	d1d5      	bne.n	800b3dc <__sfp+0x28>
 800b430:	f7ff ff70 	bl	800b314 <__sfp_lock_release>
 800b434:	230c      	movs	r3, #12
 800b436:	603b      	str	r3, [r7, #0]
 800b438:	e7ef      	b.n	800b41a <__sfp+0x66>
 800b43a:	46c0      	nop			; (mov r8, r8)
 800b43c:	0800b980 	.word	0x0800b980
 800b440:	ffff0001 	.word	0xffff0001

0800b444 <_fwalk_reent>:
 800b444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b446:	0004      	movs	r4, r0
 800b448:	0006      	movs	r6, r0
 800b44a:	2700      	movs	r7, #0
 800b44c:	9101      	str	r1, [sp, #4]
 800b44e:	3448      	adds	r4, #72	; 0x48
 800b450:	6863      	ldr	r3, [r4, #4]
 800b452:	68a5      	ldr	r5, [r4, #8]
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	9b00      	ldr	r3, [sp, #0]
 800b458:	3b01      	subs	r3, #1
 800b45a:	9300      	str	r3, [sp, #0]
 800b45c:	d504      	bpl.n	800b468 <_fwalk_reent+0x24>
 800b45e:	6824      	ldr	r4, [r4, #0]
 800b460:	2c00      	cmp	r4, #0
 800b462:	d1f5      	bne.n	800b450 <_fwalk_reent+0xc>
 800b464:	0038      	movs	r0, r7
 800b466:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b468:	89ab      	ldrh	r3, [r5, #12]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d908      	bls.n	800b480 <_fwalk_reent+0x3c>
 800b46e:	220e      	movs	r2, #14
 800b470:	5eab      	ldrsh	r3, [r5, r2]
 800b472:	3301      	adds	r3, #1
 800b474:	d004      	beq.n	800b480 <_fwalk_reent+0x3c>
 800b476:	0029      	movs	r1, r5
 800b478:	0030      	movs	r0, r6
 800b47a:	9b01      	ldr	r3, [sp, #4]
 800b47c:	4798      	blx	r3
 800b47e:	4307      	orrs	r7, r0
 800b480:	3568      	adds	r5, #104	; 0x68
 800b482:	e7e8      	b.n	800b456 <_fwalk_reent+0x12>

0800b484 <__retarget_lock_init_recursive>:
 800b484:	4770      	bx	lr

0800b486 <__retarget_lock_acquire_recursive>:
 800b486:	4770      	bx	lr

0800b488 <__retarget_lock_release_recursive>:
 800b488:	4770      	bx	lr
	...

0800b48c <__swhatbuf_r>:
 800b48c:	b570      	push	{r4, r5, r6, lr}
 800b48e:	000e      	movs	r6, r1
 800b490:	001d      	movs	r5, r3
 800b492:	230e      	movs	r3, #14
 800b494:	5ec9      	ldrsh	r1, [r1, r3]
 800b496:	0014      	movs	r4, r2
 800b498:	b096      	sub	sp, #88	; 0x58
 800b49a:	2900      	cmp	r1, #0
 800b49c:	da08      	bge.n	800b4b0 <__swhatbuf_r+0x24>
 800b49e:	220c      	movs	r2, #12
 800b4a0:	5eb3      	ldrsh	r3, [r6, r2]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	602a      	str	r2, [r5, #0]
 800b4a6:	061b      	lsls	r3, r3, #24
 800b4a8:	d411      	bmi.n	800b4ce <__swhatbuf_r+0x42>
 800b4aa:	2380      	movs	r3, #128	; 0x80
 800b4ac:	00db      	lsls	r3, r3, #3
 800b4ae:	e00f      	b.n	800b4d0 <__swhatbuf_r+0x44>
 800b4b0:	466a      	mov	r2, sp
 800b4b2:	f000 f91b 	bl	800b6ec <_fstat_r>
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	dbf1      	blt.n	800b49e <__swhatbuf_r+0x12>
 800b4ba:	23f0      	movs	r3, #240	; 0xf0
 800b4bc:	9901      	ldr	r1, [sp, #4]
 800b4be:	021b      	lsls	r3, r3, #8
 800b4c0:	4019      	ands	r1, r3
 800b4c2:	4b05      	ldr	r3, [pc, #20]	; (800b4d8 <__swhatbuf_r+0x4c>)
 800b4c4:	18c9      	adds	r1, r1, r3
 800b4c6:	424b      	negs	r3, r1
 800b4c8:	4159      	adcs	r1, r3
 800b4ca:	6029      	str	r1, [r5, #0]
 800b4cc:	e7ed      	b.n	800b4aa <__swhatbuf_r+0x1e>
 800b4ce:	2340      	movs	r3, #64	; 0x40
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	6023      	str	r3, [r4, #0]
 800b4d4:	b016      	add	sp, #88	; 0x58
 800b4d6:	bd70      	pop	{r4, r5, r6, pc}
 800b4d8:	ffffe000 	.word	0xffffe000

0800b4dc <__smakebuf_r>:
 800b4dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4de:	2602      	movs	r6, #2
 800b4e0:	898b      	ldrh	r3, [r1, #12]
 800b4e2:	0005      	movs	r5, r0
 800b4e4:	000c      	movs	r4, r1
 800b4e6:	4233      	tst	r3, r6
 800b4e8:	d006      	beq.n	800b4f8 <__smakebuf_r+0x1c>
 800b4ea:	0023      	movs	r3, r4
 800b4ec:	3347      	adds	r3, #71	; 0x47
 800b4ee:	6023      	str	r3, [r4, #0]
 800b4f0:	6123      	str	r3, [r4, #16]
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	6163      	str	r3, [r4, #20]
 800b4f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b4f8:	466a      	mov	r2, sp
 800b4fa:	ab01      	add	r3, sp, #4
 800b4fc:	f7ff ffc6 	bl	800b48c <__swhatbuf_r>
 800b500:	9900      	ldr	r1, [sp, #0]
 800b502:	0007      	movs	r7, r0
 800b504:	0028      	movs	r0, r5
 800b506:	f7ff f92d 	bl	800a764 <_malloc_r>
 800b50a:	2800      	cmp	r0, #0
 800b50c:	d108      	bne.n	800b520 <__smakebuf_r+0x44>
 800b50e:	220c      	movs	r2, #12
 800b510:	5ea3      	ldrsh	r3, [r4, r2]
 800b512:	059a      	lsls	r2, r3, #22
 800b514:	d4ef      	bmi.n	800b4f6 <__smakebuf_r+0x1a>
 800b516:	2203      	movs	r2, #3
 800b518:	4393      	bics	r3, r2
 800b51a:	431e      	orrs	r6, r3
 800b51c:	81a6      	strh	r6, [r4, #12]
 800b51e:	e7e4      	b.n	800b4ea <__smakebuf_r+0xe>
 800b520:	4b0f      	ldr	r3, [pc, #60]	; (800b560 <__smakebuf_r+0x84>)
 800b522:	62ab      	str	r3, [r5, #40]	; 0x28
 800b524:	2380      	movs	r3, #128	; 0x80
 800b526:	89a2      	ldrh	r2, [r4, #12]
 800b528:	6020      	str	r0, [r4, #0]
 800b52a:	4313      	orrs	r3, r2
 800b52c:	81a3      	strh	r3, [r4, #12]
 800b52e:	9b00      	ldr	r3, [sp, #0]
 800b530:	6120      	str	r0, [r4, #16]
 800b532:	6163      	str	r3, [r4, #20]
 800b534:	9b01      	ldr	r3, [sp, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00d      	beq.n	800b556 <__smakebuf_r+0x7a>
 800b53a:	0028      	movs	r0, r5
 800b53c:	230e      	movs	r3, #14
 800b53e:	5ee1      	ldrsh	r1, [r4, r3]
 800b540:	f000 f8e6 	bl	800b710 <_isatty_r>
 800b544:	2800      	cmp	r0, #0
 800b546:	d006      	beq.n	800b556 <__smakebuf_r+0x7a>
 800b548:	2203      	movs	r2, #3
 800b54a:	89a3      	ldrh	r3, [r4, #12]
 800b54c:	4393      	bics	r3, r2
 800b54e:	001a      	movs	r2, r3
 800b550:	2301      	movs	r3, #1
 800b552:	4313      	orrs	r3, r2
 800b554:	81a3      	strh	r3, [r4, #12]
 800b556:	89a0      	ldrh	r0, [r4, #12]
 800b558:	4307      	orrs	r7, r0
 800b55a:	81a7      	strh	r7, [r4, #12]
 800b55c:	e7cb      	b.n	800b4f6 <__smakebuf_r+0x1a>
 800b55e:	46c0      	nop			; (mov r8, r8)
 800b560:	0800b2c9 	.word	0x0800b2c9

0800b564 <_malloc_usable_size_r>:
 800b564:	1f0b      	subs	r3, r1, #4
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	1f18      	subs	r0, r3, #4
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	da01      	bge.n	800b572 <_malloc_usable_size_r+0xe>
 800b56e:	580b      	ldr	r3, [r1, r0]
 800b570:	18c0      	adds	r0, r0, r3
 800b572:	4770      	bx	lr

0800b574 <_raise_r>:
 800b574:	b570      	push	{r4, r5, r6, lr}
 800b576:	0004      	movs	r4, r0
 800b578:	000d      	movs	r5, r1
 800b57a:	291f      	cmp	r1, #31
 800b57c:	d904      	bls.n	800b588 <_raise_r+0x14>
 800b57e:	2316      	movs	r3, #22
 800b580:	6003      	str	r3, [r0, #0]
 800b582:	2001      	movs	r0, #1
 800b584:	4240      	negs	r0, r0
 800b586:	bd70      	pop	{r4, r5, r6, pc}
 800b588:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d004      	beq.n	800b598 <_raise_r+0x24>
 800b58e:	008a      	lsls	r2, r1, #2
 800b590:	189b      	adds	r3, r3, r2
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	2a00      	cmp	r2, #0
 800b596:	d108      	bne.n	800b5aa <_raise_r+0x36>
 800b598:	0020      	movs	r0, r4
 800b59a:	f000 f831 	bl	800b600 <_getpid_r>
 800b59e:	002a      	movs	r2, r5
 800b5a0:	0001      	movs	r1, r0
 800b5a2:	0020      	movs	r0, r4
 800b5a4:	f000 f81a 	bl	800b5dc <_kill_r>
 800b5a8:	e7ed      	b.n	800b586 <_raise_r+0x12>
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	2a01      	cmp	r2, #1
 800b5ae:	d0ea      	beq.n	800b586 <_raise_r+0x12>
 800b5b0:	1c51      	adds	r1, r2, #1
 800b5b2:	d103      	bne.n	800b5bc <_raise_r+0x48>
 800b5b4:	2316      	movs	r3, #22
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	6023      	str	r3, [r4, #0]
 800b5ba:	e7e4      	b.n	800b586 <_raise_r+0x12>
 800b5bc:	2400      	movs	r4, #0
 800b5be:	0028      	movs	r0, r5
 800b5c0:	601c      	str	r4, [r3, #0]
 800b5c2:	4790      	blx	r2
 800b5c4:	0020      	movs	r0, r4
 800b5c6:	e7de      	b.n	800b586 <_raise_r+0x12>

0800b5c8 <raise>:
 800b5c8:	b510      	push	{r4, lr}
 800b5ca:	4b03      	ldr	r3, [pc, #12]	; (800b5d8 <raise+0x10>)
 800b5cc:	0001      	movs	r1, r0
 800b5ce:	6818      	ldr	r0, [r3, #0]
 800b5d0:	f7ff ffd0 	bl	800b574 <_raise_r>
 800b5d4:	bd10      	pop	{r4, pc}
 800b5d6:	46c0      	nop			; (mov r8, r8)
 800b5d8:	20000010 	.word	0x20000010

0800b5dc <_kill_r>:
 800b5dc:	2300      	movs	r3, #0
 800b5de:	b570      	push	{r4, r5, r6, lr}
 800b5e0:	4d06      	ldr	r5, [pc, #24]	; (800b5fc <_kill_r+0x20>)
 800b5e2:	0004      	movs	r4, r0
 800b5e4:	0008      	movs	r0, r1
 800b5e6:	0011      	movs	r1, r2
 800b5e8:	602b      	str	r3, [r5, #0]
 800b5ea:	f7f9 f9ff 	bl	80049ec <_kill>
 800b5ee:	1c43      	adds	r3, r0, #1
 800b5f0:	d103      	bne.n	800b5fa <_kill_r+0x1e>
 800b5f2:	682b      	ldr	r3, [r5, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d000      	beq.n	800b5fa <_kill_r+0x1e>
 800b5f8:	6023      	str	r3, [r4, #0]
 800b5fa:	bd70      	pop	{r4, r5, r6, pc}
 800b5fc:	20000460 	.word	0x20000460

0800b600 <_getpid_r>:
 800b600:	b510      	push	{r4, lr}
 800b602:	f7f9 f9ed 	bl	80049e0 <_getpid>
 800b606:	bd10      	pop	{r4, pc}

0800b608 <__sread>:
 800b608:	b570      	push	{r4, r5, r6, lr}
 800b60a:	000c      	movs	r4, r1
 800b60c:	250e      	movs	r5, #14
 800b60e:	5f49      	ldrsh	r1, [r1, r5]
 800b610:	f000 f8a4 	bl	800b75c <_read_r>
 800b614:	2800      	cmp	r0, #0
 800b616:	db03      	blt.n	800b620 <__sread+0x18>
 800b618:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b61a:	181b      	adds	r3, r3, r0
 800b61c:	6563      	str	r3, [r4, #84]	; 0x54
 800b61e:	bd70      	pop	{r4, r5, r6, pc}
 800b620:	89a3      	ldrh	r3, [r4, #12]
 800b622:	4a02      	ldr	r2, [pc, #8]	; (800b62c <__sread+0x24>)
 800b624:	4013      	ands	r3, r2
 800b626:	81a3      	strh	r3, [r4, #12]
 800b628:	e7f9      	b.n	800b61e <__sread+0x16>
 800b62a:	46c0      	nop			; (mov r8, r8)
 800b62c:	ffffefff 	.word	0xffffefff

0800b630 <__swrite>:
 800b630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b632:	001f      	movs	r7, r3
 800b634:	898b      	ldrh	r3, [r1, #12]
 800b636:	0005      	movs	r5, r0
 800b638:	000c      	movs	r4, r1
 800b63a:	0016      	movs	r6, r2
 800b63c:	05db      	lsls	r3, r3, #23
 800b63e:	d505      	bpl.n	800b64c <__swrite+0x1c>
 800b640:	230e      	movs	r3, #14
 800b642:	5ec9      	ldrsh	r1, [r1, r3]
 800b644:	2200      	movs	r2, #0
 800b646:	2302      	movs	r3, #2
 800b648:	f000 f874 	bl	800b734 <_lseek_r>
 800b64c:	89a3      	ldrh	r3, [r4, #12]
 800b64e:	4a05      	ldr	r2, [pc, #20]	; (800b664 <__swrite+0x34>)
 800b650:	0028      	movs	r0, r5
 800b652:	4013      	ands	r3, r2
 800b654:	81a3      	strh	r3, [r4, #12]
 800b656:	0032      	movs	r2, r6
 800b658:	230e      	movs	r3, #14
 800b65a:	5ee1      	ldrsh	r1, [r4, r3]
 800b65c:	003b      	movs	r3, r7
 800b65e:	f000 f81f 	bl	800b6a0 <_write_r>
 800b662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b664:	ffffefff 	.word	0xffffefff

0800b668 <__sseek>:
 800b668:	b570      	push	{r4, r5, r6, lr}
 800b66a:	000c      	movs	r4, r1
 800b66c:	250e      	movs	r5, #14
 800b66e:	5f49      	ldrsh	r1, [r1, r5]
 800b670:	f000 f860 	bl	800b734 <_lseek_r>
 800b674:	89a3      	ldrh	r3, [r4, #12]
 800b676:	1c42      	adds	r2, r0, #1
 800b678:	d103      	bne.n	800b682 <__sseek+0x1a>
 800b67a:	4a05      	ldr	r2, [pc, #20]	; (800b690 <__sseek+0x28>)
 800b67c:	4013      	ands	r3, r2
 800b67e:	81a3      	strh	r3, [r4, #12]
 800b680:	bd70      	pop	{r4, r5, r6, pc}
 800b682:	2280      	movs	r2, #128	; 0x80
 800b684:	0152      	lsls	r2, r2, #5
 800b686:	4313      	orrs	r3, r2
 800b688:	81a3      	strh	r3, [r4, #12]
 800b68a:	6560      	str	r0, [r4, #84]	; 0x54
 800b68c:	e7f8      	b.n	800b680 <__sseek+0x18>
 800b68e:	46c0      	nop			; (mov r8, r8)
 800b690:	ffffefff 	.word	0xffffefff

0800b694 <__sclose>:
 800b694:	b510      	push	{r4, lr}
 800b696:	230e      	movs	r3, #14
 800b698:	5ec9      	ldrsh	r1, [r1, r3]
 800b69a:	f000 f815 	bl	800b6c8 <_close_r>
 800b69e:	bd10      	pop	{r4, pc}

0800b6a0 <_write_r>:
 800b6a0:	b570      	push	{r4, r5, r6, lr}
 800b6a2:	0004      	movs	r4, r0
 800b6a4:	0008      	movs	r0, r1
 800b6a6:	0011      	movs	r1, r2
 800b6a8:	001a      	movs	r2, r3
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	4d05      	ldr	r5, [pc, #20]	; (800b6c4 <_write_r+0x24>)
 800b6ae:	602b      	str	r3, [r5, #0]
 800b6b0:	f7f9 f9d5 	bl	8004a5e <_write>
 800b6b4:	1c43      	adds	r3, r0, #1
 800b6b6:	d103      	bne.n	800b6c0 <_write_r+0x20>
 800b6b8:	682b      	ldr	r3, [r5, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d000      	beq.n	800b6c0 <_write_r+0x20>
 800b6be:	6023      	str	r3, [r4, #0]
 800b6c0:	bd70      	pop	{r4, r5, r6, pc}
 800b6c2:	46c0      	nop			; (mov r8, r8)
 800b6c4:	20000460 	.word	0x20000460

0800b6c8 <_close_r>:
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	b570      	push	{r4, r5, r6, lr}
 800b6cc:	4d06      	ldr	r5, [pc, #24]	; (800b6e8 <_close_r+0x20>)
 800b6ce:	0004      	movs	r4, r0
 800b6d0:	0008      	movs	r0, r1
 800b6d2:	602b      	str	r3, [r5, #0]
 800b6d4:	f7f9 f9df 	bl	8004a96 <_close>
 800b6d8:	1c43      	adds	r3, r0, #1
 800b6da:	d103      	bne.n	800b6e4 <_close_r+0x1c>
 800b6dc:	682b      	ldr	r3, [r5, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d000      	beq.n	800b6e4 <_close_r+0x1c>
 800b6e2:	6023      	str	r3, [r4, #0]
 800b6e4:	bd70      	pop	{r4, r5, r6, pc}
 800b6e6:	46c0      	nop			; (mov r8, r8)
 800b6e8:	20000460 	.word	0x20000460

0800b6ec <_fstat_r>:
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	b570      	push	{r4, r5, r6, lr}
 800b6f0:	4d06      	ldr	r5, [pc, #24]	; (800b70c <_fstat_r+0x20>)
 800b6f2:	0004      	movs	r4, r0
 800b6f4:	0008      	movs	r0, r1
 800b6f6:	0011      	movs	r1, r2
 800b6f8:	602b      	str	r3, [r5, #0]
 800b6fa:	f7f9 f9d6 	bl	8004aaa <_fstat>
 800b6fe:	1c43      	adds	r3, r0, #1
 800b700:	d103      	bne.n	800b70a <_fstat_r+0x1e>
 800b702:	682b      	ldr	r3, [r5, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d000      	beq.n	800b70a <_fstat_r+0x1e>
 800b708:	6023      	str	r3, [r4, #0]
 800b70a:	bd70      	pop	{r4, r5, r6, pc}
 800b70c:	20000460 	.word	0x20000460

0800b710 <_isatty_r>:
 800b710:	2300      	movs	r3, #0
 800b712:	b570      	push	{r4, r5, r6, lr}
 800b714:	4d06      	ldr	r5, [pc, #24]	; (800b730 <_isatty_r+0x20>)
 800b716:	0004      	movs	r4, r0
 800b718:	0008      	movs	r0, r1
 800b71a:	602b      	str	r3, [r5, #0]
 800b71c:	f7f9 f9d3 	bl	8004ac6 <_isatty>
 800b720:	1c43      	adds	r3, r0, #1
 800b722:	d103      	bne.n	800b72c <_isatty_r+0x1c>
 800b724:	682b      	ldr	r3, [r5, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d000      	beq.n	800b72c <_isatty_r+0x1c>
 800b72a:	6023      	str	r3, [r4, #0]
 800b72c:	bd70      	pop	{r4, r5, r6, pc}
 800b72e:	46c0      	nop			; (mov r8, r8)
 800b730:	20000460 	.word	0x20000460

0800b734 <_lseek_r>:
 800b734:	b570      	push	{r4, r5, r6, lr}
 800b736:	0004      	movs	r4, r0
 800b738:	0008      	movs	r0, r1
 800b73a:	0011      	movs	r1, r2
 800b73c:	001a      	movs	r2, r3
 800b73e:	2300      	movs	r3, #0
 800b740:	4d05      	ldr	r5, [pc, #20]	; (800b758 <_lseek_r+0x24>)
 800b742:	602b      	str	r3, [r5, #0]
 800b744:	f7f9 f9c8 	bl	8004ad8 <_lseek>
 800b748:	1c43      	adds	r3, r0, #1
 800b74a:	d103      	bne.n	800b754 <_lseek_r+0x20>
 800b74c:	682b      	ldr	r3, [r5, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d000      	beq.n	800b754 <_lseek_r+0x20>
 800b752:	6023      	str	r3, [r4, #0]
 800b754:	bd70      	pop	{r4, r5, r6, pc}
 800b756:	46c0      	nop			; (mov r8, r8)
 800b758:	20000460 	.word	0x20000460

0800b75c <_read_r>:
 800b75c:	b570      	push	{r4, r5, r6, lr}
 800b75e:	0004      	movs	r4, r0
 800b760:	0008      	movs	r0, r1
 800b762:	0011      	movs	r1, r2
 800b764:	001a      	movs	r2, r3
 800b766:	2300      	movs	r3, #0
 800b768:	4d05      	ldr	r5, [pc, #20]	; (800b780 <_read_r+0x24>)
 800b76a:	602b      	str	r3, [r5, #0]
 800b76c:	f7f9 f95a 	bl	8004a24 <_read>
 800b770:	1c43      	adds	r3, r0, #1
 800b772:	d103      	bne.n	800b77c <_read_r+0x20>
 800b774:	682b      	ldr	r3, [r5, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d000      	beq.n	800b77c <_read_r+0x20>
 800b77a:	6023      	str	r3, [r4, #0]
 800b77c:	bd70      	pop	{r4, r5, r6, pc}
 800b77e:	46c0      	nop			; (mov r8, r8)
 800b780:	20000460 	.word	0x20000460

0800b784 <_init>:
 800b784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b786:	46c0      	nop			; (mov r8, r8)
 800b788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b78a:	bc08      	pop	{r3}
 800b78c:	469e      	mov	lr, r3
 800b78e:	4770      	bx	lr

0800b790 <_fini>:
 800b790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b792:	46c0      	nop			; (mov r8, r8)
 800b794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b796:	bc08      	pop	{r3}
 800b798:	469e      	mov	lr, r3
 800b79a:	4770      	bx	lr
