
TESTY_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005540  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08005720  08005720  00015720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058ec  080058ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080058ec  080058ec  000158ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058f4  080058f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058f4  080058f4  000158f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058f8  080058f8  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080058fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000070  0800596c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  0800596c  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc28  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd5  00000000  00000000  0002dcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002fca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  00030758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001daea  00000000  00000000  00031148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0ab  00000000  00000000  0004ec32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8192  00000000  00000000  0005bcdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00113e6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032f0  00000000  00000000  00113ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005708 	.word	0x08005708

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08005708 	.word	0x08005708

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <__io_putchar>:
/* USER CODE BEGIN 0 */
//uint8_t RxBuf[RxBuf_SIZE];
//uint8_t MainBuf[MainBuf_SIZE];
//HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallbackTypeDef pCallback)
int __io_putchar(int ch)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005dc:	1d39      	adds	r1, r7, #4
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	2201      	movs	r2, #1
 80005e4:	4803      	ldr	r0, [pc, #12]	; (80005f4 <__io_putchar+0x20>)
 80005e6:	f002 f85b 	bl	80026a0 <HAL_UART_Transmit>
	return 1;
 80005ea:	2301      	movs	r3, #1
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000011c 	.word	0x2000011c

080005f8 <SendMSG>:
void SendMSG(char* cmd){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	  ble_msg_len= strlen(cmd);
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f7ff fe0d 	bl	8000220 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	b29a      	uxth	r2, r3
 800060a:	4b16      	ldr	r3, [pc, #88]	; (8000664 <SendMSG+0x6c>)
 800060c:	801a      	strh	r2, [r3, #0]

	  strcpy(ATcommand,cmd);
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	4815      	ldr	r0, [pc, #84]	; (8000668 <SendMSG+0x70>)
 8000612:	f004 f8fb 	bl	800480c <strcpy>
	  ATcommand[ble_msg_len++]='\r';
 8000616:	4b13      	ldr	r3, [pc, #76]	; (8000664 <SendMSG+0x6c>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	b291      	uxth	r1, r2
 800061e:	4a11      	ldr	r2, [pc, #68]	; (8000664 <SendMSG+0x6c>)
 8000620:	8011      	strh	r1, [r2, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	4b10      	ldr	r3, [pc, #64]	; (8000668 <SendMSG+0x70>)
 8000626:	210d      	movs	r1, #13
 8000628:	5499      	strb	r1, [r3, r2]
//

//      received_byte[9] = '\0'; // Null-terminate the buffer
//	  memset( received_byte, 0, 10);
	  HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,ble_msg_len,1000);
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <SendMSG+0x6c>)
 800062c:	881a      	ldrh	r2, [r3, #0]
 800062e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000632:	490d      	ldr	r1, [pc, #52]	; (8000668 <SendMSG+0x70>)
 8000634:	480d      	ldr	r0, [pc, #52]	; (800066c <SendMSG+0x74>)
 8000636:	f002 f833 	bl	80026a0 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800063a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063e:	f000 fc93 	bl	8000f68 <HAL_Delay>
	  for(uint8_t u; u<64; u++){
 8000642:	e006      	b.n	8000652 <SendMSG+0x5a>
		  ATcommand[u]=0;
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	4a08      	ldr	r2, [pc, #32]	; (8000668 <SendMSG+0x70>)
 8000648:	2100      	movs	r1, #0
 800064a:	54d1      	strb	r1, [r2, r3]
	  for(uint8_t u; u<64; u++){
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	3301      	adds	r3, #1
 8000650:	73fb      	strb	r3, [r7, #15]
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	2b3f      	cmp	r3, #63	; 0x3f
 8000656:	d9f5      	bls.n	8000644 <SendMSG+0x4c>
	  }


}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200001ec 	.word	0x200001ec
 8000668:	200001ac 	.word	0x200001ac
 800066c:	2000008c 	.word	0x2000008c

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 fc06 	bl	8000e86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f8e9 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 f9bf 	bl	8000a00 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000682:	f000 f925 	bl	80008d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000686:	f000 f96f 	bl	8000968 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuf , RxBuf_SIZE);
  //HAL_UART_Receive_DMA(&huart1, (uint8_t *) dataOut, 64);
  HAL_Delay(800);
 800068a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800068e:	f000 fc6b 	bl	8000f68 <HAL_Delay>
  HAL_UART_Receive_IT(&huart1,  received_byte,2);
 8000692:	2202      	movs	r2, #2
 8000694:	4958      	ldr	r1, [pc, #352]	; (80007f8 <main+0x188>)
 8000696:	4859      	ldr	r0, [pc, #356]	; (80007fc <main+0x18c>)
 8000698:	f002 f898 	bl	80027cc <HAL_UART_Receive_IT>
  //HAL_UART_IRQHandler(&huart1);
  HAL_Delay(800);
 800069c:	f44f 7048 	mov.w	r0, #800	; 0x320
 80006a0:	f000 fc62 	bl	8000f68 <HAL_Delay>
  printf("Test UART\r\n");
 80006a4:	4856      	ldr	r0, [pc, #344]	; (8000800 <main+0x190>)
 80006a6:	f004 f8a9 	bl	80047fc <puts>
  uint8_t status;
  SendMSG("AT");
 80006aa:	4856      	ldr	r0, [pc, #344]	; (8000804 <main+0x194>)
 80006ac:	f7ff ffa4 	bl	80005f8 <SendMSG>

  ReadBuffer();
 80006b0:	f000 f9f6 	bl	8000aa0 <ReadBuffer>
  HAL_Delay(1000);
 80006b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b8:	f000 fc56 	bl	8000f68 <HAL_Delay>
  SendMSG("AT%S 0=\"Cuk\""); // ustawienie device name
 80006bc:	4852      	ldr	r0, [pc, #328]	; (8000808 <main+0x198>)
 80006be:	f7ff ff9b 	bl	80005f8 <SendMSG>

  ReadBuffer();
 80006c2:	f000 f9ed 	bl	8000aa0 <ReadBuffer>
  HAL_Delay(1000);
 80006c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ca:	f000 fc4d 	bl	8000f68 <HAL_Delay>
  SendMSG("AT%S 1=\"2154657374776961646F6D6F73636921\""); //UUID
 80006ce:	484f      	ldr	r0, [pc, #316]	; (800080c <main+0x19c>)
 80006d0:	f7ff ff92 	bl	80005f8 <SendMSG>

  ReadBuffer();
 80006d4:	f000 f9e4 	bl	8000aa0 <ReadBuffer>
  HAL_Delay(1000);
 80006d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006dc:	f000 fc44 	bl	8000f68 <HAL_Delay>
  SendMSG("ATS 100=1"); // VSP And start advertow
 80006e0:	484b      	ldr	r0, [pc, #300]	; (8000810 <main+0x1a0>)
 80006e2:	f7ff ff89 	bl	80005f8 <SendMSG>

  ReadBuffer();
 80006e6:	f000 f9db 	bl	8000aa0 <ReadBuffer>
  HAL_Delay(1000);
 80006ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ee:	f000 fc3b 	bl	8000f68 <HAL_Delay>
  SendMSG("ATS 100?"); // VSP And start advertow
 80006f2:	4848      	ldr	r0, [pc, #288]	; (8000814 <main+0x1a4>)
 80006f4:	f7ff ff80 	bl	80005f8 <SendMSG>

  ReadBuffer();
 80006f8:	f000 f9d2 	bl	8000aa0 <ReadBuffer>
  HAL_Delay(1000);
 80006fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000700:	f000 fc32 	bl	8000f68 <HAL_Delay>
  ReadBuffer();
 8000704:	f000 f9cc 	bl	8000aa0 <ReadBuffer>
  SendMSG("ATS 101=4"); // 4dBm
 8000708:	4843      	ldr	r0, [pc, #268]	; (8000818 <main+0x1a8>)
 800070a:	f7ff ff75 	bl	80005f8 <SendMSG>

  ReadBuffer();
 800070e:	f000 f9c7 	bl	8000aa0 <ReadBuffer>
  HAL_Delay(800);
 8000712:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000716:	f000 fc27 	bl	8000f68 <HAL_Delay>
  SendMSG("ATS 103=0"); // nazwe ustawia na ta wczesniej wpisana
 800071a:	4840      	ldr	r0, [pc, #256]	; (800081c <main+0x1ac>)
 800071c:	f7ff ff6c 	bl	80005f8 <SendMSG>

  ReadBuffer();
 8000720:	f000 f9be 	bl	8000aa0 <ReadBuffer>
  HAL_Delay(1000);
 8000724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000728:	f000 fc1e 	bl	8000f68 <HAL_Delay>
  SendMSG("ATS 106=100"); // ustawia 100 sekund na skanowanie
 800072c:	483c      	ldr	r0, [pc, #240]	; (8000820 <main+0x1b0>)
 800072e:	f7ff ff63 	bl	80005f8 <SendMSG>
//  HAL_Delay(800);
//  SendMSG("ATS 108=3"); // ustawia tryb advertow dla nonvsp



  ReadBuffer();
 8000732:	f000 f9b5 	bl	8000aa0 <ReadBuffer>
  HAL_Delay(1000);
 8000736:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800073a:	f000 fc15 	bl	8000f68 <HAL_Delay>
  SendMSG("ATS 109=1");
 800073e:	4839      	ldr	r0, [pc, #228]	; (8000824 <main+0x1b4>)
 8000740:	f7ff ff5a 	bl	80005f8 <SendMSG>

  HAL_Delay(1000);
 8000744:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000748:	f000 fc0e 	bl	8000f68 <HAL_Delay>
  ReadBuffer();
 800074c:	f000 f9a8 	bl	8000aa0 <ReadBuffer>
  SendMSG("ATS 201=200");  // interwal advertow vsp
 8000750:	4835      	ldr	r0, [pc, #212]	; (8000828 <main+0x1b8>)
 8000752:	f7ff ff51 	bl	80005f8 <SendMSG>

  HAL_Delay(1000);
 8000756:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800075a:	f000 fc05 	bl	8000f68 <HAL_Delay>
  ReadBuffer();
 800075e:	f000 f99f 	bl	8000aa0 <ReadBuffer>
  SendMSG("ATS 204=256");  // tx bufor vsp
 8000762:	4832      	ldr	r0, [pc, #200]	; (800082c <main+0x1bc>)
 8000764:	f7ff ff48 	bl	80005f8 <SendMSG>

  HAL_Delay(1000);
 8000768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076c:	f000 fbfc 	bl	8000f68 <HAL_Delay>
  ReadBuffer();
 8000770:	f000 f996 	bl	8000aa0 <ReadBuffer>
  SendMSG("ATS 205=256");  // rx bufor vsp
 8000774:	482e      	ldr	r0, [pc, #184]	; (8000830 <main+0x1c0>)
 8000776:	f7ff ff3f 	bl	80005f8 <SendMSG>

  HAL_Delay(1000);
 800077a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077e:	f000 fbf3 	bl	8000f68 <HAL_Delay>
  ReadBuffer();
 8000782:	f000 f98d 	bl	8000aa0 <ReadBuffer>
  SendMSG("ATS 301=7500");  //vsp connection interval
 8000786:	482b      	ldr	r0, [pc, #172]	; (8000834 <main+0x1c4>)
 8000788:	f7ff ff36 	bl	80005f8 <SendMSG>

  HAL_Delay(1000);
 800078c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000790:	f000 fbea 	bl	8000f68 <HAL_Delay>

  ReadBuffer();
 8000794:	f000 f984 	bl	8000aa0 <ReadBuffer>
  SendMSG("AT&W"); // zapis rejestru S
 8000798:	4827      	ldr	r0, [pc, #156]	; (8000838 <main+0x1c8>)
 800079a:	f7ff ff2d 	bl	80005f8 <SendMSG>
  HAL_Delay(1000);
 800079e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a2:	f000 fbe1 	bl	8000f68 <HAL_Delay>


  ReadBuffer();
 80007a6:	f000 f97b 	bl	8000aa0 <ReadBuffer>

  SendMSG("ATZ"); //restart
 80007aa:	4824      	ldr	r0, [pc, #144]	; (800083c <main+0x1cc>)
 80007ac:	f7ff ff24 	bl	80005f8 <SendMSG>
  HAL_Delay(1000);
 80007b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b4:	f000 fbd8 	bl	8000f68 <HAL_Delay>
  ReadBuffer();
 80007b8:	f000 f972 	bl	8000aa0 <ReadBuffer>

  printf("Kuniec \r\n");
 80007bc:	4820      	ldr	r0, [pc, #128]	; (8000840 <main+0x1d0>)
 80007be:	f004 f81d 	bl	80047fc <puts>
  //SendMSG("AT+LSCN, 500"); //start scanowania do vsp z limitem 500 sekund

  HAL_Delay(800);
 80007c2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80007c6:	f000 fbcf 	bl	8000f68 <HAL_Delay>

  ReadBuffer();
 80007ca:	f000 f969 	bl	8000aa0 <ReadBuffer>
//  StartAdverts();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t Test[10] = "testowy";
 80007ce:	4a1d      	ldr	r2, [pc, #116]	; (8000844 <main+0x1d4>)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80007da:	2300      	movs	r3, #0
 80007dc:	81bb      	strh	r3, [r7, #12]
  HAL_UART_Transmit(&huart1,(uint8_t *)Test,10,1000);
 80007de:	1d39      	adds	r1, r7, #4
 80007e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e4:	220a      	movs	r2, #10
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <main+0x18c>)
 80007e8:	f001 ff5a 	bl	80026a0 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("%s", buffer);
 80007ec:	4916      	ldr	r1, [pc, #88]	; (8000848 <main+0x1d8>)
 80007ee:	4817      	ldr	r0, [pc, #92]	; (800084c <main+0x1dc>)
 80007f0:	f003 ff7e 	bl	80046f0 <iprintf>
 80007f4:	e7fa      	b.n	80007ec <main+0x17c>
 80007f6:	bf00      	nop
 80007f8:	20000274 	.word	0x20000274
 80007fc:	2000008c 	.word	0x2000008c
 8000800:	08005720 	.word	0x08005720
 8000804:	0800572c 	.word	0x0800572c
 8000808:	08005730 	.word	0x08005730
 800080c:	08005740 	.word	0x08005740
 8000810:	0800576c 	.word	0x0800576c
 8000814:	08005778 	.word	0x08005778
 8000818:	08005784 	.word	0x08005784
 800081c:	08005790 	.word	0x08005790
 8000820:	0800579c 	.word	0x0800579c
 8000824:	080057a8 	.word	0x080057a8
 8000828:	080057b4 	.word	0x080057b4
 800082c:	080057c0 	.word	0x080057c0
 8000830:	080057cc 	.word	0x080057cc
 8000834:	080057d8 	.word	0x080057d8
 8000838:	080057e8 	.word	0x080057e8
 800083c:	080057f0 	.word	0x080057f0
 8000840:	080057f4 	.word	0x080057f4
 8000844:	08005804 	.word	0x08005804
 8000848:	200001f0 	.word	0x200001f0
 800084c:	08005800 	.word	0x08005800

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	; 0x50
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0318 	add.w	r3, r7, #24
 800085a:	2238      	movs	r2, #56	; 0x38
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f003 ff3e 	bl	80046e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000872:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000876:	f000 feeb 	bl	8001650 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800087a:	2302      	movs	r3, #2
 800087c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000884:	2340      	movs	r3, #64	; 0x40
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000888:	2300      	movs	r3, #0
 800088a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088c:	f107 0318 	add.w	r3, r7, #24
 8000890:	4618      	mov	r0, r3
 8000892:	f000 ff91 	bl	80017b8 <HAL_RCC_OscConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800089c:	f000 f916 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a0:	230f      	movs	r3, #15
 80008a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008a4:	2301      	movs	r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 fa95 	bl	8001de8 <HAL_RCC_ClockConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80008c4:	f000 f902 	bl	8000acc <Error_Handler>
  }
}
 80008c8:	bf00      	nop
 80008ca:	3750      	adds	r7, #80	; 0x50
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d4:	4b22      	ldr	r3, [pc, #136]	; (8000960 <MX_USART1_UART_Init+0x90>)
 80008d6:	4a23      	ldr	r2, [pc, #140]	; (8000964 <MX_USART1_UART_Init+0x94>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <MX_USART1_UART_Init+0x90>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_USART1_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_USART1_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <MX_USART1_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_USART1_UART_Init+0x90>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <MX_USART1_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_USART1_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_USART1_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_USART1_UART_Init+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_USART1_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000918:	4811      	ldr	r0, [pc, #68]	; (8000960 <MX_USART1_UART_Init+0x90>)
 800091a:	f001 fe71 	bl	8002600 <HAL_UART_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000924:	f000 f8d2 	bl	8000acc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <MX_USART1_UART_Init+0x90>)
 800092c:	f003 fde3 	bl	80044f6 <HAL_UARTEx_SetTxFifoThreshold>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000936:	f000 f8c9 	bl	8000acc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4808      	ldr	r0, [pc, #32]	; (8000960 <MX_USART1_UART_Init+0x90>)
 800093e:	f003 fe18 	bl	8004572 <HAL_UARTEx_SetRxFifoThreshold>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000948:	f000 f8c0 	bl	8000acc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_USART1_UART_Init+0x90>)
 800094e:	f003 fd99 	bl	8004484 <HAL_UARTEx_DisableFifoMode>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000958:	f000 f8b8 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000008c 	.word	0x2000008c
 8000964:	40013800 	.word	0x40013800

08000968 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <MX_USART2_UART_Init+0x90>)
 800096e:	4a23      	ldr	r2, [pc, #140]	; (80009fc <MX_USART2_UART_Init+0x94>)
 8000970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_USART2_UART_Init+0x90>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <MX_USART2_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_USART2_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_USART2_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_USART2_UART_Init+0x90>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_USART2_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_USART2_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_USART2_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_USART2_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_USART2_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b0:	4811      	ldr	r0, [pc, #68]	; (80009f8 <MX_USART2_UART_Init+0x90>)
 80009b2:	f001 fe25 	bl	8002600 <HAL_UART_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009bc:	f000 f886 	bl	8000acc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c0:	2100      	movs	r1, #0
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <MX_USART2_UART_Init+0x90>)
 80009c4:	f003 fd97 	bl	80044f6 <HAL_UARTEx_SetTxFifoThreshold>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009ce:	f000 f87d 	bl	8000acc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d2:	2100      	movs	r1, #0
 80009d4:	4808      	ldr	r0, [pc, #32]	; (80009f8 <MX_USART2_UART_Init+0x90>)
 80009d6:	f003 fdcc 	bl	8004572 <HAL_UARTEx_SetRxFifoThreshold>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009e0:	f000 f874 	bl	8000acc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_USART2_UART_Init+0x90>)
 80009e6:	f003 fd4d 	bl	8004484 <HAL_UARTEx_DisableFifoMode>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009f0:	f000 f86c 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000011c 	.word	0x2000011c
 80009fc:	40004400 	.word	0x40004400

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_GPIO_Init+0x44>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <MX_GPIO_Init+0x44>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_GPIO_Init+0x44>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_GPIO_Init+0x44>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <MX_GPIO_Init+0x44>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_GPIO_Init+0x44>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_IT(&huart1,received_byte,2);
 8000a50:	2202      	movs	r2, #2
 8000a52:	490f      	ldr	r1, [pc, #60]	; (8000a90 <HAL_UART_RxCpltCallback+0x48>)
 8000a54:	480f      	ldr	r0, [pc, #60]	; (8000a94 <HAL_UART_RxCpltCallback+0x4c>)
 8000a56:	f001 feb9 	bl	80027cc <HAL_UART_Receive_IT>

	buffer[bufferIndex] = received_byte[0];
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <HAL_UART_RxCpltCallback+0x50>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <HAL_UART_RxCpltCallback+0x48>)
 8000a60:	7811      	ldrb	r1, [r2, #0]
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_UART_RxCpltCallback+0x54>)
 8000a64:	54d1      	strb	r1, [r2, r3]
	bufferIndex++;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_UART_RxCpltCallback+0x50>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <HAL_UART_RxCpltCallback+0x50>)
 8000a6e:	6013      	str	r3, [r2, #0]
	buffer[bufferIndex] = received_byte[1];
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <HAL_UART_RxCpltCallback+0x50>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <HAL_UART_RxCpltCallback+0x48>)
 8000a76:	7851      	ldrb	r1, [r2, #1]
 8000a78:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_UART_RxCpltCallback+0x54>)
 8000a7a:	54d1      	strb	r1, [r2, r3]
	bufferIndex++;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_UART_RxCpltCallback+0x50>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <HAL_UART_RxCpltCallback+0x50>)
 8000a84:	6013      	str	r3, [r2, #0]
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000274 	.word	0x20000274
 8000a94:	2000008c 	.word	0x2000008c
 8000a98:	20000270 	.word	0x20000270
 8000a9c:	200001f0 	.word	0x200001f0

08000aa0 <ReadBuffer>:
//
//
//	      }
//	    }
int o = 1;
void ReadBuffer(void){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	//printf("%d.", o);
	printf(" %s", buffer);
 8000aa4:	4906      	ldr	r1, [pc, #24]	; (8000ac0 <ReadBuffer+0x20>)
 8000aa6:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <ReadBuffer+0x24>)
 8000aa8:	f003 fe22 	bl	80046f0 <iprintf>
	memset(buffer, 0, 127);
 8000aac:	227f      	movs	r2, #127	; 0x7f
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <ReadBuffer+0x20>)
 8000ab2:	f003 fe15 	bl	80046e0 <memset>
	bufferIndex = 0;
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <ReadBuffer+0x28>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
	//o++;
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200001f0 	.word	0x200001f0
 8000ac4:	08005810 	.word	0x08005810
 8000ac8:	20000270 	.word	0x20000270

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_MspInit+0x44>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_MspInit+0x44>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_MspInit+0x44>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_MspInit+0x44>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_MspInit+0x44>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b00:	6593      	str	r3, [r2, #88]	; 0x58
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x44>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b0e:	f000 fe43 	bl	8001798 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b09c      	sub	sp, #112	; 0x70
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	2244      	movs	r2, #68	; 0x44
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f003 fdcd 	bl	80046e0 <memset>
  if(huart->Instance==USART1)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a41      	ldr	r2, [pc, #260]	; (8000c50 <HAL_UART_MspInit+0x130>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d13e      	bne.n	8000bce <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b58:	f107 0318 	add.w	r3, r7, #24
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f001 fb5f 	bl	8002220 <HAL_RCCEx_PeriphCLKConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b68:	f7ff ffb0 	bl	8000acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b6c:	4b39      	ldr	r3, [pc, #228]	; (8000c54 <HAL_UART_MspInit+0x134>)
 8000b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b70:	4a38      	ldr	r2, [pc, #224]	; (8000c54 <HAL_UART_MspInit+0x134>)
 8000b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b76:	6613      	str	r3, [r2, #96]	; 0x60
 8000b78:	4b36      	ldr	r3, [pc, #216]	; (8000c54 <HAL_UART_MspInit+0x134>)
 8000b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b84:	4b33      	ldr	r3, [pc, #204]	; (8000c54 <HAL_UART_MspInit+0x134>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b88:	4a32      	ldr	r2, [pc, #200]	; (8000c54 <HAL_UART_MspInit+0x134>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b90:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <HAL_UART_MspInit+0x134>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b9c:	2330      	movs	r3, #48	; 0x30
 8000b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bac:	2307      	movs	r3, #7
 8000bae:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4828      	ldr	r0, [pc, #160]	; (8000c58 <HAL_UART_MspInit+0x138>)
 8000bb8:	f000 fbc8 	bl	800134c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2025      	movs	r0, #37	; 0x25
 8000bc2:	f000 face 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bc6:	2025      	movs	r0, #37	; 0x25
 8000bc8:	f000 fae5 	bl	8001196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bcc:	e03b      	b.n	8000c46 <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART2)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a22      	ldr	r2, [pc, #136]	; (8000c5c <HAL_UART_MspInit+0x13c>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d136      	bne.n	8000c46 <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be0:	f107 0318 	add.w	r3, r7, #24
 8000be4:	4618      	mov	r0, r3
 8000be6:	f001 fb1b 	bl	8002220 <HAL_RCCEx_PeriphCLKConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000bf0:	f7ff ff6c 	bl	8000acc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_UART_MspInit+0x134>)
 8000bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf8:	4a16      	ldr	r2, [pc, #88]	; (8000c54 <HAL_UART_MspInit+0x134>)
 8000bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <HAL_UART_MspInit+0x134>)
 8000c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <HAL_UART_MspInit+0x134>)
 8000c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c10:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <HAL_UART_MspInit+0x134>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_UART_MspInit+0x134>)
 8000c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c24:	230c      	movs	r3, #12
 8000c26:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c34:	2307      	movs	r3, #7
 8000c36:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c42:	f000 fb83 	bl	800134c <HAL_GPIO_Init>
}
 8000c46:	bf00      	nop
 8000c48:	3770      	adds	r7, #112	; 0x70
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40013800 	.word	0x40013800
 8000c54:	40021000 	.word	0x40021000
 8000c58:	48000800 	.word	0x48000800
 8000c5c:	40004400 	.word	0x40004400

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cac:	f000 f93e 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <USART1_IRQHandler+0x10>)
 8000cba:	f001 fddd 	bl	8002878 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2000008c 	.word	0x2000008c

08000cc8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e00a      	b.n	8000cf0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cda:	f3af 8000 	nop.w
 8000cde:	4601      	mov	r1, r0
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	60ba      	str	r2, [r7, #8]
 8000ce6:	b2ca      	uxtb	r2, r1
 8000ce8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbf0      	blt.n	8000cda <_read+0x12>
	}

return len;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	e009      	b.n	8000d28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	60ba      	str	r2, [r7, #8]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fc59 	bl	80005d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbf1      	blt.n	8000d14 <_write+0x12>
	}
	return len;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_close>:

int _close(int file)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	return -1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d62:	605a      	str	r2, [r3, #4]
	return 0;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_isatty>:

int _isatty(int file)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
	return 1;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
	return 0;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dac:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <_sbrk+0x5c>)
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <_sbrk+0x60>)
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <_sbrk+0x64>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <_sbrk+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d207      	bcs.n	8000de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd4:	f003 fc5a 	bl	800468c <__errno>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	220c      	movs	r2, #12
 8000ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	e009      	b.n	8000df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <_sbrk+0x64>)
 8000df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df6:	68fb      	ldr	r3, [r7, #12]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20008000 	.word	0x20008000
 8000e04:	00000400 	.word	0x00000400
 8000e08:	20000280 	.word	0x20000280
 8000e0c:	20000298 	.word	0x20000298

08000e10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <SystemInit+0x20>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <SystemInit+0x20>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3a:	490e      	ldr	r1, [pc, #56]	; (8000e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e3c:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <LoopForever+0xe>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e50:	4c0b      	ldr	r4, [pc, #44]	; (8000e80 <LoopForever+0x16>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e5e:	f7ff ffd7 	bl	8000e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e62:	f003 fc19 	bl	8004698 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e66:	f7ff fc03 	bl	8000670 <main>

08000e6a <LoopForever>:

LoopForever:
    b LoopForever
 8000e6a:	e7fe      	b.n	8000e6a <LoopForever>
  ldr   r0, =_estack
 8000e6c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e78:	080058fc 	.word	0x080058fc
  ldr r2, =_sbss
 8000e7c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e80:	20000298 	.word	0x20000298

08000e84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC1_2_IRQHandler>

08000e86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 f95b 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e96:	200f      	movs	r0, #15
 8000e98:	f000 f80e 	bl	8000eb8 <HAL_InitTick>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d002      	beq.n	8000ea8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	71fb      	strb	r3, [r7, #7]
 8000ea6:	e001      	b.n	8000eac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea8:	f7ff fe16 	bl	8000ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eac:	79fb      	ldrb	r3, [r7, #7]

}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_InitTick+0x68>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d022      	beq.n	8000f12 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_InitTick+0x6c>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_InitTick+0x68>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ed8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 f966 	bl	80011b2 <HAL_SYSTICK_Config>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d10f      	bne.n	8000f0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b0f      	cmp	r3, #15
 8000ef0:	d809      	bhi.n	8000f06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8000efa:	f000 f932 	bl	8001162 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_InitTick+0x70>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	e007      	b.n	8000f16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	e004      	b.n	8000f16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	e001      	b.n	8000f16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000004 	.word	0x20000004

08000f2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_IncTick+0x1c>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_IncTick+0x20>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4413      	add	r3, r2
 8000f3a:	4a03      	ldr	r2, [pc, #12]	; (8000f48 <HAL_IncTick+0x1c>)
 8000f3c:	6013      	str	r3, [r2, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	20000284 	.word	0x20000284
 8000f4c:	20000008 	.word	0x20000008

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000284 	.word	0x20000284

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d004      	beq.n	8000f8c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_Delay+0x40>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	4413      	add	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f8c:	bf00      	nop
 8000f8e:	f7ff ffdf 	bl	8000f50 <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d8f7      	bhi.n	8000f8e <HAL_Delay+0x26>
  {
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	bf00      	nop
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000008 	.word	0x20000008

08000fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fde:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	60d3      	str	r3, [r2, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <__NVIC_GetPriorityGrouping+0x18>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	f003 0307 	and.w	r3, r3, #7
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0b      	blt.n	800103a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	; (8001048 <__NVIC_EnableIRQ+0x38>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	; (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	; (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f7ff ff8e 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff29 	bl	8000fac <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001170:	f7ff ff40 	bl	8000ff4 <__NVIC_GetPriorityGrouping>
 8001174:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f7ff ff90 	bl	80010a0 <NVIC_EncodePriority>
 8001180:	4602      	mov	r2, r0
 8001182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff5f 	bl	800104c <__NVIC_SetPriority>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff33 	bl	8001010 <__NVIC_EnableIRQ>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffa4 	bl	8001108 <SysTick_Config>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b085      	sub	sp, #20
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d005      	beq.n	80011ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2204      	movs	r2, #4
 80011e6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e037      	b.n	800125e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 020e 	bic.w	r2, r2, #14
 80011fc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001208:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800120c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0201 	bic.w	r2, r2, #1
 800121c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	f003 021f 	and.w	r2, r3, #31
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	2101      	movs	r1, #1
 800122c:	fa01 f202 	lsl.w	r2, r1, r2
 8001230:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800123a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00c      	beq.n	800125e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800124e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001252:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800125c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800126e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d00d      	beq.n	80012b0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2204      	movs	r2, #4
 8001298:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]
 80012ae:	e047      	b.n	8001340 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 020e 	bic.w	r2, r2, #14
 80012be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0201 	bic.w	r2, r2, #1
 80012ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e4:	f003 021f 	and.w	r2, r3, #31
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	2101      	movs	r1, #1
 80012ee:	fa01 f202 	lsl.w	r2, r1, r2
 80012f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00c      	beq.n	8001320 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001314:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800131e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	4798      	blx	r3
    }
  }
  return status;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800135a:	e15a      	b.n	8001612 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2101      	movs	r1, #1
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	4013      	ands	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 814c 	beq.w	800160c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b01      	cmp	r3, #1
 800137e:	d005      	beq.n	800138c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001388:	2b02      	cmp	r3, #2
 800138a:	d130      	bne.n	80013ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013c2:	2201      	movs	r2, #1
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	091b      	lsrs	r3, r3, #4
 80013d8:	f003 0201 	and.w	r2, r3, #1
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d017      	beq.n	800142a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	2203      	movs	r2, #3
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d123      	bne.n	800147e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	08da      	lsrs	r2, r3, #3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3208      	adds	r2, #8
 800143e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	220f      	movs	r2, #15
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	691a      	ldr	r2, [r3, #16]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	08da      	lsrs	r2, r3, #3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3208      	adds	r2, #8
 8001478:	6939      	ldr	r1, [r7, #16]
 800147a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	2203      	movs	r2, #3
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 0203 	and.w	r2, r3, #3
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 80a6 	beq.w	800160c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c0:	4b5b      	ldr	r3, [pc, #364]	; (8001630 <HAL_GPIO_Init+0x2e4>)
 80014c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c4:	4a5a      	ldr	r2, [pc, #360]	; (8001630 <HAL_GPIO_Init+0x2e4>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6613      	str	r3, [r2, #96]	; 0x60
 80014cc:	4b58      	ldr	r3, [pc, #352]	; (8001630 <HAL_GPIO_Init+0x2e4>)
 80014ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014d8:	4a56      	ldr	r2, [pc, #344]	; (8001634 <HAL_GPIO_Init+0x2e8>)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	3302      	adds	r3, #2
 80014e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	220f      	movs	r2, #15
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001502:	d01f      	beq.n	8001544 <HAL_GPIO_Init+0x1f8>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a4c      	ldr	r2, [pc, #304]	; (8001638 <HAL_GPIO_Init+0x2ec>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d019      	beq.n	8001540 <HAL_GPIO_Init+0x1f4>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a4b      	ldr	r2, [pc, #300]	; (800163c <HAL_GPIO_Init+0x2f0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d013      	beq.n	800153c <HAL_GPIO_Init+0x1f0>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a4a      	ldr	r2, [pc, #296]	; (8001640 <HAL_GPIO_Init+0x2f4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d00d      	beq.n	8001538 <HAL_GPIO_Init+0x1ec>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a49      	ldr	r2, [pc, #292]	; (8001644 <HAL_GPIO_Init+0x2f8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d007      	beq.n	8001534 <HAL_GPIO_Init+0x1e8>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a48      	ldr	r2, [pc, #288]	; (8001648 <HAL_GPIO_Init+0x2fc>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d101      	bne.n	8001530 <HAL_GPIO_Init+0x1e4>
 800152c:	2305      	movs	r3, #5
 800152e:	e00a      	b.n	8001546 <HAL_GPIO_Init+0x1fa>
 8001530:	2306      	movs	r3, #6
 8001532:	e008      	b.n	8001546 <HAL_GPIO_Init+0x1fa>
 8001534:	2304      	movs	r3, #4
 8001536:	e006      	b.n	8001546 <HAL_GPIO_Init+0x1fa>
 8001538:	2303      	movs	r3, #3
 800153a:	e004      	b.n	8001546 <HAL_GPIO_Init+0x1fa>
 800153c:	2302      	movs	r3, #2
 800153e:	e002      	b.n	8001546 <HAL_GPIO_Init+0x1fa>
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <HAL_GPIO_Init+0x1fa>
 8001544:	2300      	movs	r3, #0
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	f002 0203 	and.w	r2, r2, #3
 800154c:	0092      	lsls	r2, r2, #2
 800154e:	4093      	lsls	r3, r2
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001556:	4937      	ldr	r1, [pc, #220]	; (8001634 <HAL_GPIO_Init+0x2e8>)
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	3302      	adds	r3, #2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001564:	4b39      	ldr	r3, [pc, #228]	; (800164c <HAL_GPIO_Init+0x300>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	43db      	mvns	r3, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001588:	4a30      	ldr	r2, [pc, #192]	; (800164c <HAL_GPIO_Init+0x300>)
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800158e:	4b2f      	ldr	r3, [pc, #188]	; (800164c <HAL_GPIO_Init+0x300>)
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	43db      	mvns	r3, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015b2:	4a26      	ldr	r2, [pc, #152]	; (800164c <HAL_GPIO_Init+0x300>)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80015b8:	4b24      	ldr	r3, [pc, #144]	; (800164c <HAL_GPIO_Init+0x300>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015dc:	4a1b      	ldr	r2, [pc, #108]	; (800164c <HAL_GPIO_Init+0x300>)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <HAL_GPIO_Init+0x300>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4013      	ands	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001606:	4a11      	ldr	r2, [pc, #68]	; (800164c <HAL_GPIO_Init+0x300>)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	3301      	adds	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	fa22 f303 	lsr.w	r3, r2, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	f47f ae9d 	bne.w	800135c <HAL_GPIO_Init+0x10>
  }
}
 8001622:	bf00      	nop
 8001624:	bf00      	nop
 8001626:	371c      	adds	r7, #28
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	40021000 	.word	0x40021000
 8001634:	40010000 	.word	0x40010000
 8001638:	48000400 	.word	0x48000400
 800163c:	48000800 	.word	0x48000800
 8001640:	48000c00 	.word	0x48000c00
 8001644:	48001000 	.word	0x48001000
 8001648:	48001400 	.word	0x48001400
 800164c:	40010400 	.word	0x40010400

08001650 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d141      	bne.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800165e:	4b4b      	ldr	r3, [pc, #300]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166a:	d131      	bne.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800166c:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001672:	4a46      	ldr	r2, [pc, #280]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001678:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800167c:	4b43      	ldr	r3, [pc, #268]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001684:	4a41      	ldr	r2, [pc, #260]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800168c:	4b40      	ldr	r3, [pc, #256]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2232      	movs	r2, #50	; 0x32
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	4a3f      	ldr	r2, [pc, #252]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	0c9b      	lsrs	r3, r3, #18
 800169e:	3301      	adds	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a2:	e002      	b.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016aa:	4b38      	ldr	r3, [pc, #224]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b6:	d102      	bne.n	80016be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f2      	bne.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016be:	4b33      	ldr	r3, [pc, #204]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ca:	d158      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e057      	b.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016d0:	4b2e      	ldr	r3, [pc, #184]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016d6:	4a2d      	ldr	r2, [pc, #180]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016e0:	e04d      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016e8:	d141      	bne.n	800176e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ea:	4b28      	ldr	r3, [pc, #160]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f6:	d131      	bne.n	800175c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016fe:	4a23      	ldr	r2, [pc, #140]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001704:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001710:	4a1e      	ldr	r2, [pc, #120]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001716:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2232      	movs	r2, #50	; 0x32
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	0c9b      	lsrs	r3, r3, #18
 800172a:	3301      	adds	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800172e:	e002      	b.n	8001736 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3b01      	subs	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001742:	d102      	bne.n	800174a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f2      	bne.n	8001730 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001756:	d112      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e011      	b.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800176c:	e007      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001778:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800177c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40007000 	.word	0x40007000
 8001790:	20000000 	.word	0x20000000
 8001794:	431bde83 	.word	0x431bde83

08001798 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a6:	6093      	str	r3, [r2, #8]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40007000 	.word	0x40007000

080017b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e306      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d075      	beq.n	80018c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d6:	4b97      	ldr	r3, [pc, #604]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e0:	4b94      	ldr	r3, [pc, #592]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b0c      	cmp	r3, #12
 80017ee:	d102      	bne.n	80017f6 <HAL_RCC_OscConfig+0x3e>
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d002      	beq.n	80017fc <HAL_RCC_OscConfig+0x44>
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d10b      	bne.n	8001814 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	4b8d      	ldr	r3, [pc, #564]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d05b      	beq.n	80018c0 <HAL_RCC_OscConfig+0x108>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d157      	bne.n	80018c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e2e1      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181c:	d106      	bne.n	800182c <HAL_RCC_OscConfig+0x74>
 800181e:	4b85      	ldr	r3, [pc, #532]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a84      	ldr	r2, [pc, #528]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e01d      	b.n	8001868 <HAL_RCC_OscConfig+0xb0>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001834:	d10c      	bne.n	8001850 <HAL_RCC_OscConfig+0x98>
 8001836:	4b7f      	ldr	r3, [pc, #508]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a7e      	ldr	r2, [pc, #504]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 800183c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	4b7c      	ldr	r3, [pc, #496]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a7b      	ldr	r2, [pc, #492]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e00b      	b.n	8001868 <HAL_RCC_OscConfig+0xb0>
 8001850:	4b78      	ldr	r3, [pc, #480]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a77      	ldr	r2, [pc, #476]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b75      	ldr	r3, [pc, #468]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a74      	ldr	r2, [pc, #464]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d013      	beq.n	8001898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff fb6e 	bl	8000f50 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff fb6a 	bl	8000f50 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e2a6      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188a:	4b6a      	ldr	r3, [pc, #424]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0xc0>
 8001896:	e014      	b.n	80018c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff fb5a 	bl	8000f50 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff fb56 	bl	8000f50 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	; 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e292      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b2:	4b60      	ldr	r3, [pc, #384]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0xe8>
 80018be:	e000      	b.n	80018c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d075      	beq.n	80019ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ce:	4b59      	ldr	r3, [pc, #356]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d8:	4b56      	ldr	r3, [pc, #344]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	2b0c      	cmp	r3, #12
 80018e6:	d102      	bne.n	80018ee <HAL_RCC_OscConfig+0x136>
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d002      	beq.n	80018f4 <HAL_RCC_OscConfig+0x13c>
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d11f      	bne.n	8001934 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f4:	4b4f      	ldr	r3, [pc, #316]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_OscConfig+0x154>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e265      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190c:	4b49      	ldr	r3, [pc, #292]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	061b      	lsls	r3, r3, #24
 800191a:	4946      	ldr	r1, [pc, #280]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001920:	4b45      	ldr	r3, [pc, #276]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fac7 	bl	8000eb8 <HAL_InitTick>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d043      	beq.n	80019b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e251      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d023      	beq.n	8001984 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800193c:	4b3d      	ldr	r3, [pc, #244]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a3c      	ldr	r2, [pc, #240]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff fb02 	bl	8000f50 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001950:	f7ff fafe 	bl	8000f50 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e23a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001962:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	4b31      	ldr	r3, [pc, #196]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	061b      	lsls	r3, r3, #24
 800197c:	492d      	ldr	r1, [pc, #180]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 800197e:	4313      	orrs	r3, r2
 8001980:	604b      	str	r3, [r1, #4]
 8001982:	e01a      	b.n	80019ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001984:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a2a      	ldr	r2, [pc, #168]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 800198a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800198e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff fade 	bl	8000f50 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001998:	f7ff fada 	bl	8000f50 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e216      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019aa:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x1e0>
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d041      	beq.n	8001a4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d01c      	beq.n	8001a08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ce:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80019d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d4:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019de:	f7ff fab7 	bl	8000f50 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e6:	f7ff fab3 	bl	8000f50 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e1ef      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80019fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0ef      	beq.n	80019e6 <HAL_RCC_OscConfig+0x22e>
 8001a06:	e020      	b.n	8001a4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a0e:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7ff fa9a 	bl	8000f50 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a1e:	e00d      	b.n	8001a3c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a20:	f7ff fa96 	bl	8000f50 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d906      	bls.n	8001a3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e1d2      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a3c:	4b8c      	ldr	r3, [pc, #560]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1ea      	bne.n	8001a20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 80a6 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a5c:	4b84      	ldr	r3, [pc, #528]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_OscConfig+0x2b4>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_RCC_OscConfig+0x2b6>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00d      	beq.n	8001a8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	4b7f      	ldr	r3, [pc, #508]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a76:	4a7e      	ldr	r2, [pc, #504]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7e:	4b7c      	ldr	r3, [pc, #496]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a8e:	4b79      	ldr	r3, [pc, #484]	; (8001c74 <HAL_RCC_OscConfig+0x4bc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d118      	bne.n	8001acc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a9a:	4b76      	ldr	r3, [pc, #472]	; (8001c74 <HAL_RCC_OscConfig+0x4bc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a75      	ldr	r2, [pc, #468]	; (8001c74 <HAL_RCC_OscConfig+0x4bc>)
 8001aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff fa53 	bl	8000f50 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aae:	f7ff fa4f 	bl	8000f50 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e18b      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac0:	4b6c      	ldr	r3, [pc, #432]	; (8001c74 <HAL_RCC_OscConfig+0x4bc>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d108      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x32e>
 8001ad4:	4b66      	ldr	r3, [pc, #408]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ada:	4a65      	ldr	r2, [pc, #404]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae4:	e024      	b.n	8001b30 <HAL_RCC_OscConfig+0x378>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b05      	cmp	r3, #5
 8001aec:	d110      	bne.n	8001b10 <HAL_RCC_OscConfig+0x358>
 8001aee:	4b60      	ldr	r3, [pc, #384]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af4:	4a5e      	ldr	r2, [pc, #376]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001afe:	4b5c      	ldr	r3, [pc, #368]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b04:	4a5a      	ldr	r2, [pc, #360]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b0e:	e00f      	b.n	8001b30 <HAL_RCC_OscConfig+0x378>
 8001b10:	4b57      	ldr	r3, [pc, #348]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b16:	4a56      	ldr	r2, [pc, #344]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b20:	4b53      	ldr	r3, [pc, #332]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b26:	4a52      	ldr	r2, [pc, #328]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d016      	beq.n	8001b66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b38:	f7ff fa0a 	bl	8000f50 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	f7ff fa06 	bl	8000f50 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e140      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b56:	4b46      	ldr	r3, [pc, #280]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0ed      	beq.n	8001b40 <HAL_RCC_OscConfig+0x388>
 8001b64:	e015      	b.n	8001b92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b66:	f7ff f9f3 	bl	8000f50 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7ff f9ef 	bl	8000f50 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e129      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b84:	4b3a      	ldr	r3, [pc, #232]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1ed      	bne.n	8001b6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b92:	7ffb      	ldrb	r3, [r7, #31]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b98:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	4a34      	ldr	r2, [pc, #208]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d03c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d01c      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bbe:	4a2c      	ldr	r2, [pc, #176]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc8:	f7ff f9c2 	bl	8000f50 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bd0:	f7ff f9be 	bl	8000f50 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e0fa      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001be2:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0ef      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x418>
 8001bf0:	e01b      	b.n	8001c2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bf8:	4a1d      	ldr	r2, [pc, #116]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001bfa:	f023 0301 	bic.w	r3, r3, #1
 8001bfe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c02:	f7ff f9a5 	bl	8000f50 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c0a:	f7ff f9a1 	bl	8000f50 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e0dd      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1ef      	bne.n	8001c0a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80d1 	beq.w	8001dd6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c34:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b0c      	cmp	r3, #12
 8001c3e:	f000 808b 	beq.w	8001d58 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d15e      	bne.n	8001d08 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a08      	ldr	r2, [pc, #32]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7ff f97b 	bl	8000f50 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5c:	e00c      	b.n	8001c78 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7ff f977 	bl	8000f50 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d905      	bls.n	8001c78 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e0b3      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c78:	4b59      	ldr	r3, [pc, #356]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1ec      	bne.n	8001c5e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c84:	4b56      	ldr	r3, [pc, #344]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	4b56      	ldr	r3, [pc, #344]	; (8001de4 <HAL_RCC_OscConfig+0x62c>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6a11      	ldr	r1, [r2, #32]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c94:	3a01      	subs	r2, #1
 8001c96:	0112      	lsls	r2, r2, #4
 8001c98:	4311      	orrs	r1, r2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c9e:	0212      	lsls	r2, r2, #8
 8001ca0:	4311      	orrs	r1, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ca6:	0852      	lsrs	r2, r2, #1
 8001ca8:	3a01      	subs	r2, #1
 8001caa:	0552      	lsls	r2, r2, #21
 8001cac:	4311      	orrs	r1, r2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cb2:	0852      	lsrs	r2, r2, #1
 8001cb4:	3a01      	subs	r2, #1
 8001cb6:	0652      	lsls	r2, r2, #25
 8001cb8:	4311      	orrs	r1, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cbe:	06d2      	lsls	r2, r2, #27
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	4947      	ldr	r1, [pc, #284]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc8:	4b45      	ldr	r3, [pc, #276]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a44      	ldr	r2, [pc, #272]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cd4:	4b42      	ldr	r3, [pc, #264]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4a41      	ldr	r2, [pc, #260]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cde:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff f936 	bl	8000f50 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce8:	f7ff f932 	bl	8000f50 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e06e      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfa:	4b39      	ldr	r3, [pc, #228]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x530>
 8001d06:	e066      	b.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d08:	4b35      	ldr	r3, [pc, #212]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a34      	ldr	r2, [pc, #208]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d12:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d14:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	4a31      	ldr	r2, [pc, #196]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001d1a:	f023 0303 	bic.w	r3, r3, #3
 8001d1e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d20:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	4a2e      	ldr	r2, [pc, #184]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001d26:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff f90e 	bl	8000f50 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d38:	f7ff f90a 	bl	8000f50 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e046      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4a:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x580>
 8001d56:	e03e      	b.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e039      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d64:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f003 0203 	and.w	r2, r3, #3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d12c      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	3b01      	subs	r3, #1
 8001d84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d123      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d11b      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d113      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	085b      	lsrs	r3, r3, #1
 8001db6:	3b01      	subs	r3, #1
 8001db8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d109      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc8:	085b      	lsrs	r3, r3, #1
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3720      	adds	r7, #32
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	019f800c 	.word	0x019f800c

08001de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e11e      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b91      	ldr	r3, [pc, #580]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d910      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b8e      	ldr	r3, [pc, #568]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 020f 	bic.w	r2, r3, #15
 8001e16:	498c      	ldr	r1, [pc, #560]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b8a      	ldr	r3, [pc, #552]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e106      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d073      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d129      	bne.n	8001e98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e44:	4b81      	ldr	r3, [pc, #516]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0f4      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e54:	f000 f99e 	bl	8002194 <RCC_GetSysClockFreqFromPLLSource>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4a7c      	ldr	r2, [pc, #496]	; (8002050 <HAL_RCC_ClockConfig+0x268>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d93f      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e62:	4b7a      	ldr	r3, [pc, #488]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d033      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d12f      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e82:	4b72      	ldr	r3, [pc, #456]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e8a:	4a70      	ldr	r2, [pc, #448]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e024      	b.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d107      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea0:	4b6a      	ldr	r3, [pc, #424]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0c6      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb0:	4b66      	ldr	r3, [pc, #408]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0be      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ec0:	f000 f8ce 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4a61      	ldr	r2, [pc, #388]	; (8002050 <HAL_RCC_ClockConfig+0x268>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d909      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ece:	4b5f      	ldr	r3, [pc, #380]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ed6:	4a5d      	ldr	r2, [pc, #372]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001edc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ee2:	4b5a      	ldr	r3, [pc, #360]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f023 0203 	bic.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4957      	ldr	r1, [pc, #348]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ef4:	f7ff f82c 	bl	8000f50 <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7ff f828 	bl	8000f50 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e095      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4b4e      	ldr	r3, [pc, #312]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 020c 	and.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1eb      	bne.n	8001efc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d023      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f3c:	4b43      	ldr	r3, [pc, #268]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a42      	ldr	r2, [pc, #264]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f54:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f5c:	4a3b      	ldr	r2, [pc, #236]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	4936      	ldr	r1, [pc, #216]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b80      	cmp	r3, #128	; 0x80
 8001f7c:	d105      	bne.n	8001f8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f7e:	4b33      	ldr	r3, [pc, #204]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	4a32      	ldr	r2, [pc, #200]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8a:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d21d      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f98:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f023 020f 	bic.w	r2, r3, #15
 8001fa0:	4929      	ldr	r1, [pc, #164]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fa8:	f7fe ffd2 	bl	8000f50 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb0:	f7fe ffce 	bl	8000f50 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e03b      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d1ed      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4917      	ldr	r1, [pc, #92]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	490f      	ldr	r1, [pc, #60]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002012:	f000 f825 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8002016:	4602      	mov	r2, r0
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	490c      	ldr	r1, [pc, #48]	; (8002054 <HAL_RCC_ClockConfig+0x26c>)
 8002024:	5ccb      	ldrb	r3, [r1, r3]
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <HAL_RCC_ClockConfig+0x270>)
 8002030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_RCC_ClockConfig+0x274>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe ff3e 	bl	8000eb8 <HAL_InitTick>
 800203c:	4603      	mov	r3, r0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40022000 	.word	0x40022000
 800204c:	40021000 	.word	0x40021000
 8002050:	04c4b400 	.word	0x04c4b400
 8002054:	08005814 	.word	0x08005814
 8002058:	20000000 	.word	0x20000000
 800205c:	20000004 	.word	0x20000004

08002060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002066:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b04      	cmp	r3, #4
 8002070:	d102      	bne.n	8002078 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002072:	4b2a      	ldr	r3, [pc, #168]	; (800211c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	e047      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b08      	cmp	r3, #8
 8002082:	d102      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002084:	4b26      	ldr	r3, [pc, #152]	; (8002120 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	e03e      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800208a:	4b23      	ldr	r3, [pc, #140]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b0c      	cmp	r3, #12
 8002094:	d136      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	3301      	adds	r3, #1
 80020ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d10c      	bne.n	80020ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020b4:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	4a16      	ldr	r2, [pc, #88]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020be:	68d2      	ldr	r2, [r2, #12]
 80020c0:	0a12      	lsrs	r2, r2, #8
 80020c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	617b      	str	r3, [r7, #20]
      break;
 80020cc:	e00c      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020ce:	4a13      	ldr	r2, [pc, #76]	; (800211c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	4a10      	ldr	r2, [pc, #64]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d8:	68d2      	ldr	r2, [r2, #12]
 80020da:	0a12      	lsrs	r2, r2, #8
 80020dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020e0:	fb02 f303 	mul.w	r3, r2, r3
 80020e4:	617b      	str	r3, [r7, #20]
      break;
 80020e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0e5b      	lsrs	r3, r3, #25
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	3301      	adds	r3, #1
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	e001      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002108:	693b      	ldr	r3, [r7, #16]
}
 800210a:	4618      	mov	r0, r3
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	00f42400 	.word	0x00f42400
 8002120:	007a1200 	.word	0x007a1200

08002124 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_RCC_GetHCLKFreq+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000000 	.word	0x20000000

0800213c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002140:	f7ff fff0 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002144:	4602      	mov	r2, r0
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	4904      	ldr	r1, [pc, #16]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002152:	5ccb      	ldrb	r3, [r1, r3]
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	08005824 	.word	0x08005824

08002168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800216c:	f7ff ffda 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0adb      	lsrs	r3, r3, #11
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4904      	ldr	r1, [pc, #16]	; (8002190 <HAL_RCC_GetPCLK2Freq+0x28>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	08005824 	.word	0x08005824

08002194 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800219a:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3301      	adds	r3, #1
 80021b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d10c      	bne.n	80021d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021b8:	4a17      	ldr	r2, [pc, #92]	; (8002218 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	4a14      	ldr	r2, [pc, #80]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021c2:	68d2      	ldr	r2, [r2, #12]
 80021c4:	0a12      	lsrs	r2, r2, #8
 80021c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021ca:	fb02 f303 	mul.w	r3, r2, r3
 80021ce:	617b      	str	r3, [r7, #20]
    break;
 80021d0:	e00c      	b.n	80021ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021d2:	4a12      	ldr	r2, [pc, #72]	; (800221c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021dc:	68d2      	ldr	r2, [r2, #12]
 80021de:	0a12      	lsrs	r2, r2, #8
 80021e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021e4:	fb02 f303 	mul.w	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]
    break;
 80021ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0e5b      	lsrs	r3, r3, #25
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	3301      	adds	r3, #1
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	fbb2 f3f3 	udiv	r3, r2, r3
 8002204:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002206:	687b      	ldr	r3, [r7, #4]
}
 8002208:	4618      	mov	r0, r3
 800220a:	371c      	adds	r7, #28
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	40021000 	.word	0x40021000
 8002218:	007a1200 	.word	0x007a1200
 800221c:	00f42400 	.word	0x00f42400

08002220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002228:	2300      	movs	r3, #0
 800222a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800222c:	2300      	movs	r3, #0
 800222e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8098 	beq.w	800236e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002242:	4b43      	ldr	r3, [pc, #268]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10d      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	4b40      	ldr	r3, [pc, #256]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	4a3f      	ldr	r2, [pc, #252]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	6593      	str	r3, [r2, #88]	; 0x58
 800225a:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002266:	2301      	movs	r3, #1
 8002268:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800226a:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a39      	ldr	r2, [pc, #228]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002274:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002276:	f7fe fe6b 	bl	8000f50 <HAL_GetTick>
 800227a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800227c:	e009      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227e:	f7fe fe67 	bl	8000f50 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d902      	bls.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	74fb      	strb	r3, [r7, #19]
        break;
 8002290:	e005      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002292:	4b30      	ldr	r3, [pc, #192]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0ef      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d159      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022a4:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d01e      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d019      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022cc:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d2:	4a1f      	ldr	r2, [pc, #124]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022dc:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e2:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022ec:	4a18      	ldr	r2, [pc, #96]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d016      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fe:	f7fe fe27 	bl	8000f50 <HAL_GetTick>
 8002302:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002304:	e00b      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7fe fe23 	bl	8000f50 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d902      	bls.n	800231e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	74fb      	strb	r3, [r7, #19]
            break;
 800231c:	e006      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0ec      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800232c:	7cfb      	ldrb	r3, [r7, #19]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10b      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	4903      	ldr	r1, [pc, #12]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002348:	e008      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800234a:	7cfb      	ldrb	r3, [r7, #19]
 800234c:	74bb      	strb	r3, [r7, #18]
 800234e:	e005      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002350:	40021000 	.word	0x40021000
 8002354:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800235c:	7c7b      	ldrb	r3, [r7, #17]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d105      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002362:	4ba6      	ldr	r3, [pc, #664]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	4aa5      	ldr	r2, [pc, #660]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800237a:	4ba0      	ldr	r3, [pc, #640]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	f023 0203 	bic.w	r2, r3, #3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	499c      	ldr	r1, [pc, #624]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800239c:	4b97      	ldr	r3, [pc, #604]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	f023 020c 	bic.w	r2, r3, #12
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	4994      	ldr	r1, [pc, #592]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023be:	4b8f      	ldr	r3, [pc, #572]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	498b      	ldr	r1, [pc, #556]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023e0:	4b86      	ldr	r3, [pc, #536]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	4983      	ldr	r1, [pc, #524]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002402:	4b7e      	ldr	r3, [pc, #504]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002408:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	497a      	ldr	r1, [pc, #488]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002424:	4b75      	ldr	r3, [pc, #468]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	4972      	ldr	r1, [pc, #456]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002446:	4b6d      	ldr	r3, [pc, #436]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	4969      	ldr	r1, [pc, #420]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00a      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002468:	4b64      	ldr	r3, [pc, #400]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4961      	ldr	r1, [pc, #388]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800248a:	4b5c      	ldr	r3, [pc, #368]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	4958      	ldr	r1, [pc, #352]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d015      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024ac:	4b53      	ldr	r3, [pc, #332]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	4950      	ldr	r1, [pc, #320]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024ca:	d105      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024cc:	4b4b      	ldr	r3, [pc, #300]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4a4a      	ldr	r2, [pc, #296]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d015      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024e4:	4b45      	ldr	r3, [pc, #276]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	4942      	ldr	r1, [pc, #264]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002502:	d105      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002504:	4b3d      	ldr	r3, [pc, #244]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a3c      	ldr	r2, [pc, #240]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800250a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800250e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d015      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800251c:	4b37      	ldr	r3, [pc, #220]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002522:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4934      	ldr	r1, [pc, #208]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800253a:	d105      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800253c:	4b2f      	ldr	r3, [pc, #188]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4a2e      	ldr	r2, [pc, #184]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002542:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002546:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d015      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002554:	4b29      	ldr	r3, [pc, #164]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002562:	4926      	ldr	r1, [pc, #152]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002572:	d105      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002574:	4b21      	ldr	r3, [pc, #132]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4a20      	ldr	r2, [pc, #128]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800257a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800257e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d015      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800258c:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259a:	4918      	ldr	r1, [pc, #96]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025aa:	d105      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4a12      	ldr	r2, [pc, #72]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d015      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025c4:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d2:	490a      	ldr	r1, [pc, #40]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025e2:	d105      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4a04      	ldr	r2, [pc, #16]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80025f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000

08002600 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e042      	b.n	8002698 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002618:	2b00      	cmp	r3, #0
 800261a:	d106      	bne.n	800262a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7fe fa7b 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2224      	movs	r2, #36	; 0x24
 800262e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0201 	bic.w	r2, r2, #1
 8002640:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fc50 	bl	8002ee8 <UART_SetConfig>
 8002648:	4603      	mov	r3, r0
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e022      	b.n	8002698 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 ff10 	bl	8003480 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800266e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800267e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 ff97 	bl	80035c4 <UART_CheckIdleState>
 8002696:	4603      	mov	r3, r0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	f040 8083 	bne.w	80027c2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <HAL_UART_Transmit+0x28>
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e07b      	b.n	80027c4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_UART_Transmit+0x3a>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e074      	b.n	80027c4 <HAL_UART_Transmit+0x124>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2221      	movs	r2, #33	; 0x21
 80026ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026f2:	f7fe fc2d 	bl	8000f50 <HAL_GetTick>
 80026f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	88fa      	ldrh	r2, [r7, #6]
 80026fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	88fa      	ldrh	r2, [r7, #6]
 8002704:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002710:	d108      	bne.n	8002724 <HAL_UART_Transmit+0x84>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d104      	bne.n	8002724 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	e003      	b.n	800272c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002734:	e02c      	b.n	8002790 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2200      	movs	r2, #0
 800273e:	2180      	movs	r1, #128	; 0x80
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 ff8a 	bl	800365a <UART_WaitOnFlagUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e039      	b.n	80027c4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10b      	bne.n	800276e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002764:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	3302      	adds	r3, #2
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	e007      	b.n	800277e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	781a      	ldrb	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	3301      	adds	r3, #1
 800277c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1cc      	bne.n	8002736 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2200      	movs	r2, #0
 80027a4:	2140      	movs	r1, #64	; 0x40
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 ff57 	bl	800365a <UART_WaitOnFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e006      	b.n	80027c4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80027c2:	2302      	movs	r3, #2
  }
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3720      	adds	r7, #32
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	; 0x28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	4613      	mov	r3, r2
 80027d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	2b20      	cmp	r3, #32
 80027e2:	d142      	bne.n	800286a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_UART_Receive_IT+0x24>
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e03b      	b.n	800286c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_UART_Receive_IT+0x36>
 80027fe:	2302      	movs	r3, #2
 8002800:	e034      	b.n	800286c <HAL_UART_Receive_IT+0xa0>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a17      	ldr	r2, [pc, #92]	; (8002874 <HAL_UART_Receive_IT+0xa8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d01f      	beq.n	800285a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d018      	beq.n	800285a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	e853 3f00 	ldrex	r3, [r3]
 8002834:	613b      	str	r3, [r7, #16]
   return(result);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	623b      	str	r3, [r7, #32]
 8002848:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284a:	69f9      	ldr	r1, [r7, #28]
 800284c:	6a3a      	ldr	r2, [r7, #32]
 800284e:	e841 2300 	strex	r3, r2, [r1]
 8002852:	61bb      	str	r3, [r7, #24]
   return(result);
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1e6      	bne.n	8002828 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800285a:	88fb      	ldrh	r3, [r7, #6]
 800285c:	461a      	mov	r2, r3
 800285e:	68b9      	ldr	r1, [r7, #8]
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 ffc3 	bl	80037ec <UART_Start_Receive_IT>
 8002866:	4603      	mov	r3, r0
 8002868:	e000      	b.n	800286c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800286a:	2302      	movs	r3, #2
  }
}
 800286c:	4618      	mov	r0, r3
 800286e:	3728      	adds	r7, #40	; 0x28
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40008000 	.word	0x40008000

08002878 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b0ba      	sub	sp, #232	; 0xe8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800289e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80028a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80028a6:	4013      	ands	r3, r2
 80028a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80028ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d11b      	bne.n	80028ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80028b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b8:	f003 0320 	and.w	r3, r3, #32
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d015      	beq.n	80028ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80028c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d105      	bne.n	80028d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80028cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d009      	beq.n	80028ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 82d6 	beq.w	8002e8e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	4798      	blx	r3
      }
      return;
 80028ea:	e2d0      	b.n	8002e8e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80028ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 811f 	beq.w	8002b34 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80028f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80028fa:	4b8b      	ldr	r3, [pc, #556]	; (8002b28 <HAL_UART_IRQHandler+0x2b0>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002902:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002906:	4b89      	ldr	r3, [pc, #548]	; (8002b2c <HAL_UART_IRQHandler+0x2b4>)
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 8112 	beq.w	8002b34 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d011      	beq.n	8002940 <HAL_UART_IRQHandler+0xc8>
 800291c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00b      	beq.n	8002940 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2201      	movs	r2, #1
 800292e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002936:	f043 0201 	orr.w	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d011      	beq.n	8002970 <HAL_UART_IRQHandler+0xf8>
 800294c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00b      	beq.n	8002970 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2202      	movs	r2, #2
 800295e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002966:	f043 0204 	orr.w	r2, r3, #4
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d011      	beq.n	80029a0 <HAL_UART_IRQHandler+0x128>
 800297c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00b      	beq.n	80029a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2204      	movs	r2, #4
 800298e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002996:	f043 0202 	orr.w	r2, r3, #2
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d017      	beq.n	80029dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029b0:	f003 0320 	and.w	r3, r3, #32
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d105      	bne.n	80029c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80029b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80029bc:	4b5a      	ldr	r3, [pc, #360]	; (8002b28 <HAL_UART_IRQHandler+0x2b0>)
 80029be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00b      	beq.n	80029dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2208      	movs	r2, #8
 80029ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029d2:	f043 0208 	orr.w	r2, r3, #8
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d012      	beq.n	8002a0e <HAL_UART_IRQHandler+0x196>
 80029e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00c      	beq.n	8002a0e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 823c 	beq.w	8002e92 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d013      	beq.n	8002a4e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d105      	bne.n	8002a3e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a62:	2b40      	cmp	r3, #64	; 0x40
 8002a64:	d005      	beq.n	8002a72 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d04f      	beq.n	8002b12 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 ffe4 	bl	8003a40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a82:	2b40      	cmp	r3, #64	; 0x40
 8002a84:	d141      	bne.n	8002b0a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3308      	adds	r3, #8
 8002a8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a94:	e853 3f00 	ldrex	r3, [r3]
 8002a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3308      	adds	r3, #8
 8002aae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ab2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002abe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ac2:	e841 2300 	strex	r3, r2, [r1]
 8002ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002aca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1d9      	bne.n	8002a86 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x2b8>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fbc8 	bl	800127c <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f9da 	bl	8002ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f9d6 	bl	8002ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f9d2 	bl	8002ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e1b7      	b.n	8002e92 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e1b5      	b.n	8002e92 <HAL_UART_IRQHandler+0x61a>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003b0d 	.word	0x08003b0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 814a 	bne.w	8002dd2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8143 	beq.w	8002dd2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 813c 	beq.w	8002dd2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2210      	movs	r2, #16
 8002b60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6c:	2b40      	cmp	r3, #64	; 0x40
 8002b6e:	f040 80b5 	bne.w	8002cdc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 8187 	beq.w	8002e96 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b92:	429a      	cmp	r2, r3
 8002b94:	f080 817f 	bcs.w	8002e96 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f040 8086 	bne.w	8002cc0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bc0:	e853 3f00 	ldrex	r3, [r3]
 8002bc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002bc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002be2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002bea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bee:	e841 2300 	strex	r3, r2, [r1]
 8002bf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1da      	bne.n	8002bb4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3308      	adds	r3, #8
 8002c04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c08:	e853 3f00 	ldrex	r3, [r3]
 8002c0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c2e:	e841 2300 	strex	r3, r2, [r1]
 8002c32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1e1      	bne.n	8002bfe <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3308      	adds	r3, #8
 8002c40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c44:	e853 3f00 	ldrex	r3, [r3]
 8002c48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3308      	adds	r3, #8
 8002c5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c66:	e841 2300 	strex	r3, r2, [r1]
 8002c6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1e3      	bne.n	8002c3a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c88:	e853 3f00 	ldrex	r3, [r3]
 8002c8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c90:	f023 0310 	bic.w	r3, r3, #16
 8002c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ca2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ca4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ca8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002caa:	e841 2300 	strex	r3, r2, [r1]
 8002cae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1e4      	bne.n	8002c80 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe fa85 	bl	80011ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f8fb 	bl	8002ed0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cda:	e0dc      	b.n	8002e96 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80ce 	beq.w	8002e9a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8002cfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 80c9 	beq.w	8002e9a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d10:	e853 3f00 	ldrex	r3, [r3]
 8002d14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d2c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d32:	e841 2300 	strex	r3, r2, [r1]
 8002d36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1e4      	bne.n	8002d08 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	3308      	adds	r3, #8
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	e853 3f00 	ldrex	r3, [r3]
 8002d4c:	623b      	str	r3, [r7, #32]
   return(result);
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3308      	adds	r3, #8
 8002d62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d66:	633a      	str	r2, [r7, #48]	; 0x30
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d6e:	e841 2300 	strex	r3, r2, [r1]
 8002d72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1e1      	bne.n	8002d3e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	e853 3f00 	ldrex	r3, [r3]
 8002d9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 0310 	bic.w	r3, r3, #16
 8002da2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db4:	69b9      	ldr	r1, [r7, #24]
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	e841 2300 	strex	r3, r2, [r1]
 8002dbc:	617b      	str	r3, [r7, #20]
   return(result);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1e4      	bne.n	8002d8e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002dc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dc8:	4619      	mov	r1, r3
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f880 	bl	8002ed0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002dd0:	e063      	b.n	8002e9a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00e      	beq.n	8002dfc <HAL_UART_IRQHandler+0x584>
 8002dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d008      	beq.n	8002dfc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002df2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f001 fb27 	bl	8004448 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002dfa:	e051      	b.n	8002ea0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d014      	beq.n	8002e32 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d105      	bne.n	8002e20 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d03a      	beq.n	8002e9e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	4798      	blx	r3
    }
    return;
 8002e30:	e035      	b.n	8002e9e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <HAL_UART_IRQHandler+0x5da>
 8002e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fe74 	bl	8003b38 <UART_EndTransmit_IT>
    return;
 8002e50:	e026      	b.n	8002ea0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d009      	beq.n	8002e72 <HAL_UART_IRQHandler+0x5fa>
 8002e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f001 fb00 	bl	8004470 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e70:	e016      	b.n	8002ea0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d010      	beq.n	8002ea0 <HAL_UART_IRQHandler+0x628>
 8002e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	da0c      	bge.n	8002ea0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f001 fae8 	bl	800445c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e8c:	e008      	b.n	8002ea0 <HAL_UART_IRQHandler+0x628>
      return;
 8002e8e:	bf00      	nop
 8002e90:	e006      	b.n	8002ea0 <HAL_UART_IRQHandler+0x628>
    return;
 8002e92:	bf00      	nop
 8002e94:	e004      	b.n	8002ea0 <HAL_UART_IRQHandler+0x628>
      return;
 8002e96:	bf00      	nop
 8002e98:	e002      	b.n	8002ea0 <HAL_UART_IRQHandler+0x628>
      return;
 8002e9a:	bf00      	nop
 8002e9c:	e000      	b.n	8002ea0 <HAL_UART_IRQHandler+0x628>
    return;
 8002e9e:	bf00      	nop
  }
}
 8002ea0:	37e8      	adds	r7, #232	; 0xe8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop

08002ea8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eec:	b08c      	sub	sp, #48	; 0x30
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	431a      	orrs	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4bab      	ldr	r3, [pc, #684]	; (80031c4 <UART_SetConfig+0x2dc>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4aa0      	ldr	r2, [pc, #640]	; (80031c8 <UART_SetConfig+0x2e0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d004      	beq.n	8002f54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f50:	4313      	orrs	r3, r2
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002f5e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	f023 010f 	bic.w	r1, r3, #15
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a91      	ldr	r2, [pc, #580]	; (80031cc <UART_SetConfig+0x2e4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d125      	bne.n	8002fd8 <UART_SetConfig+0xf0>
 8002f8c:	4b90      	ldr	r3, [pc, #576]	; (80031d0 <UART_SetConfig+0x2e8>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d81a      	bhi.n	8002fd0 <UART_SetConfig+0xe8>
 8002f9a:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <UART_SetConfig+0xb8>)
 8002f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa0:	08002fb1 	.word	0x08002fb1
 8002fa4:	08002fc1 	.word	0x08002fc1
 8002fa8:	08002fb9 	.word	0x08002fb9
 8002fac:	08002fc9 	.word	0x08002fc9
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fb6:	e0d6      	b.n	8003166 <UART_SetConfig+0x27e>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fbe:	e0d2      	b.n	8003166 <UART_SetConfig+0x27e>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fc6:	e0ce      	b.n	8003166 <UART_SetConfig+0x27e>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fce:	e0ca      	b.n	8003166 <UART_SetConfig+0x27e>
 8002fd0:	2310      	movs	r3, #16
 8002fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fd6:	e0c6      	b.n	8003166 <UART_SetConfig+0x27e>
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a7d      	ldr	r2, [pc, #500]	; (80031d4 <UART_SetConfig+0x2ec>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d138      	bne.n	8003054 <UART_SetConfig+0x16c>
 8002fe2:	4b7b      	ldr	r3, [pc, #492]	; (80031d0 <UART_SetConfig+0x2e8>)
 8002fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b0c      	cmp	r3, #12
 8002fee:	d82d      	bhi.n	800304c <UART_SetConfig+0x164>
 8002ff0:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <UART_SetConfig+0x110>)
 8002ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff6:	bf00      	nop
 8002ff8:	0800302d 	.word	0x0800302d
 8002ffc:	0800304d 	.word	0x0800304d
 8003000:	0800304d 	.word	0x0800304d
 8003004:	0800304d 	.word	0x0800304d
 8003008:	0800303d 	.word	0x0800303d
 800300c:	0800304d 	.word	0x0800304d
 8003010:	0800304d 	.word	0x0800304d
 8003014:	0800304d 	.word	0x0800304d
 8003018:	08003035 	.word	0x08003035
 800301c:	0800304d 	.word	0x0800304d
 8003020:	0800304d 	.word	0x0800304d
 8003024:	0800304d 	.word	0x0800304d
 8003028:	08003045 	.word	0x08003045
 800302c:	2300      	movs	r3, #0
 800302e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003032:	e098      	b.n	8003166 <UART_SetConfig+0x27e>
 8003034:	2302      	movs	r3, #2
 8003036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800303a:	e094      	b.n	8003166 <UART_SetConfig+0x27e>
 800303c:	2304      	movs	r3, #4
 800303e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003042:	e090      	b.n	8003166 <UART_SetConfig+0x27e>
 8003044:	2308      	movs	r3, #8
 8003046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800304a:	e08c      	b.n	8003166 <UART_SetConfig+0x27e>
 800304c:	2310      	movs	r3, #16
 800304e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003052:	e088      	b.n	8003166 <UART_SetConfig+0x27e>
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a5f      	ldr	r2, [pc, #380]	; (80031d8 <UART_SetConfig+0x2f0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d125      	bne.n	80030aa <UART_SetConfig+0x1c2>
 800305e:	4b5c      	ldr	r3, [pc, #368]	; (80031d0 <UART_SetConfig+0x2e8>)
 8003060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003064:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003068:	2b30      	cmp	r3, #48	; 0x30
 800306a:	d016      	beq.n	800309a <UART_SetConfig+0x1b2>
 800306c:	2b30      	cmp	r3, #48	; 0x30
 800306e:	d818      	bhi.n	80030a2 <UART_SetConfig+0x1ba>
 8003070:	2b20      	cmp	r3, #32
 8003072:	d00a      	beq.n	800308a <UART_SetConfig+0x1a2>
 8003074:	2b20      	cmp	r3, #32
 8003076:	d814      	bhi.n	80030a2 <UART_SetConfig+0x1ba>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <UART_SetConfig+0x19a>
 800307c:	2b10      	cmp	r3, #16
 800307e:	d008      	beq.n	8003092 <UART_SetConfig+0x1aa>
 8003080:	e00f      	b.n	80030a2 <UART_SetConfig+0x1ba>
 8003082:	2300      	movs	r3, #0
 8003084:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003088:	e06d      	b.n	8003166 <UART_SetConfig+0x27e>
 800308a:	2302      	movs	r3, #2
 800308c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003090:	e069      	b.n	8003166 <UART_SetConfig+0x27e>
 8003092:	2304      	movs	r3, #4
 8003094:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003098:	e065      	b.n	8003166 <UART_SetConfig+0x27e>
 800309a:	2308      	movs	r3, #8
 800309c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030a0:	e061      	b.n	8003166 <UART_SetConfig+0x27e>
 80030a2:	2310      	movs	r3, #16
 80030a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030a8:	e05d      	b.n	8003166 <UART_SetConfig+0x27e>
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a4b      	ldr	r2, [pc, #300]	; (80031dc <UART_SetConfig+0x2f4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d125      	bne.n	8003100 <UART_SetConfig+0x218>
 80030b4:	4b46      	ldr	r3, [pc, #280]	; (80031d0 <UART_SetConfig+0x2e8>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030be:	2bc0      	cmp	r3, #192	; 0xc0
 80030c0:	d016      	beq.n	80030f0 <UART_SetConfig+0x208>
 80030c2:	2bc0      	cmp	r3, #192	; 0xc0
 80030c4:	d818      	bhi.n	80030f8 <UART_SetConfig+0x210>
 80030c6:	2b80      	cmp	r3, #128	; 0x80
 80030c8:	d00a      	beq.n	80030e0 <UART_SetConfig+0x1f8>
 80030ca:	2b80      	cmp	r3, #128	; 0x80
 80030cc:	d814      	bhi.n	80030f8 <UART_SetConfig+0x210>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <UART_SetConfig+0x1f0>
 80030d2:	2b40      	cmp	r3, #64	; 0x40
 80030d4:	d008      	beq.n	80030e8 <UART_SetConfig+0x200>
 80030d6:	e00f      	b.n	80030f8 <UART_SetConfig+0x210>
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030de:	e042      	b.n	8003166 <UART_SetConfig+0x27e>
 80030e0:	2302      	movs	r3, #2
 80030e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030e6:	e03e      	b.n	8003166 <UART_SetConfig+0x27e>
 80030e8:	2304      	movs	r3, #4
 80030ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ee:	e03a      	b.n	8003166 <UART_SetConfig+0x27e>
 80030f0:	2308      	movs	r3, #8
 80030f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030f6:	e036      	b.n	8003166 <UART_SetConfig+0x27e>
 80030f8:	2310      	movs	r3, #16
 80030fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030fe:	e032      	b.n	8003166 <UART_SetConfig+0x27e>
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a30      	ldr	r2, [pc, #192]	; (80031c8 <UART_SetConfig+0x2e0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d12a      	bne.n	8003160 <UART_SetConfig+0x278>
 800310a:	4b31      	ldr	r3, [pc, #196]	; (80031d0 <UART_SetConfig+0x2e8>)
 800310c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003110:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003114:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003118:	d01a      	beq.n	8003150 <UART_SetConfig+0x268>
 800311a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800311e:	d81b      	bhi.n	8003158 <UART_SetConfig+0x270>
 8003120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003124:	d00c      	beq.n	8003140 <UART_SetConfig+0x258>
 8003126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800312a:	d815      	bhi.n	8003158 <UART_SetConfig+0x270>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <UART_SetConfig+0x250>
 8003130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003134:	d008      	beq.n	8003148 <UART_SetConfig+0x260>
 8003136:	e00f      	b.n	8003158 <UART_SetConfig+0x270>
 8003138:	2300      	movs	r3, #0
 800313a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800313e:	e012      	b.n	8003166 <UART_SetConfig+0x27e>
 8003140:	2302      	movs	r3, #2
 8003142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003146:	e00e      	b.n	8003166 <UART_SetConfig+0x27e>
 8003148:	2304      	movs	r3, #4
 800314a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800314e:	e00a      	b.n	8003166 <UART_SetConfig+0x27e>
 8003150:	2308      	movs	r3, #8
 8003152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003156:	e006      	b.n	8003166 <UART_SetConfig+0x27e>
 8003158:	2310      	movs	r3, #16
 800315a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800315e:	e002      	b.n	8003166 <UART_SetConfig+0x27e>
 8003160:	2310      	movs	r3, #16
 8003162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a17      	ldr	r2, [pc, #92]	; (80031c8 <UART_SetConfig+0x2e0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	f040 80a8 	bne.w	80032c2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003172:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003176:	2b08      	cmp	r3, #8
 8003178:	d834      	bhi.n	80031e4 <UART_SetConfig+0x2fc>
 800317a:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <UART_SetConfig+0x298>)
 800317c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003180:	080031a5 	.word	0x080031a5
 8003184:	080031e5 	.word	0x080031e5
 8003188:	080031ad 	.word	0x080031ad
 800318c:	080031e5 	.word	0x080031e5
 8003190:	080031b3 	.word	0x080031b3
 8003194:	080031e5 	.word	0x080031e5
 8003198:	080031e5 	.word	0x080031e5
 800319c:	080031e5 	.word	0x080031e5
 80031a0:	080031bb 	.word	0x080031bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a4:	f7fe ffca 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 80031a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80031aa:	e021      	b.n	80031f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <UART_SetConfig+0x2f8>)
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80031b0:	e01e      	b.n	80031f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031b2:	f7fe ff55 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 80031b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80031b8:	e01a      	b.n	80031f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80031c0:	e016      	b.n	80031f0 <UART_SetConfig+0x308>
 80031c2:	bf00      	nop
 80031c4:	cfff69f3 	.word	0xcfff69f3
 80031c8:	40008000 	.word	0x40008000
 80031cc:	40013800 	.word	0x40013800
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40004400 	.word	0x40004400
 80031d8:	40004800 	.word	0x40004800
 80031dc:	40004c00 	.word	0x40004c00
 80031e0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80031ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 812a 	beq.w	800344c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	4a9e      	ldr	r2, [pc, #632]	; (8003478 <UART_SetConfig+0x590>)
 80031fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003202:	461a      	mov	r2, r3
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	fbb3 f3f2 	udiv	r3, r3, r2
 800320a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	4413      	add	r3, r2
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	429a      	cmp	r2, r3
 800321a:	d305      	bcc.n	8003228 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	429a      	cmp	r2, r3
 8003226:	d903      	bls.n	8003230 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800322e:	e10d      	b.n	800344c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	2200      	movs	r2, #0
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	60fa      	str	r2, [r7, #12]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	4a8e      	ldr	r2, [pc, #568]	; (8003478 <UART_SetConfig+0x590>)
 800323e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003242:	b29b      	uxth	r3, r3
 8003244:	2200      	movs	r2, #0
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800324e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003252:	f7fd f83d 	bl	80002d0 <__aeabi_uldivmod>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4610      	mov	r0, r2
 800325c:	4619      	mov	r1, r3
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	020b      	lsls	r3, r1, #8
 8003268:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800326c:	0202      	lsls	r2, r0, #8
 800326e:	6979      	ldr	r1, [r7, #20]
 8003270:	6849      	ldr	r1, [r1, #4]
 8003272:	0849      	lsrs	r1, r1, #1
 8003274:	2000      	movs	r0, #0
 8003276:	460c      	mov	r4, r1
 8003278:	4605      	mov	r5, r0
 800327a:	eb12 0804 	adds.w	r8, r2, r4
 800327e:	eb43 0905 	adc.w	r9, r3, r5
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	469a      	mov	sl, r3
 800328a:	4693      	mov	fp, r2
 800328c:	4652      	mov	r2, sl
 800328e:	465b      	mov	r3, fp
 8003290:	4640      	mov	r0, r8
 8003292:	4649      	mov	r1, r9
 8003294:	f7fd f81c 	bl	80002d0 <__aeabi_uldivmod>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4613      	mov	r3, r2
 800329e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032a6:	d308      	bcc.n	80032ba <UART_SetConfig+0x3d2>
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ae:	d204      	bcs.n	80032ba <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6a3a      	ldr	r2, [r7, #32]
 80032b6:	60da      	str	r2, [r3, #12]
 80032b8:	e0c8      	b.n	800344c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80032c0:	e0c4      	b.n	800344c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ca:	d167      	bne.n	800339c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80032cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d828      	bhi.n	8003326 <UART_SetConfig+0x43e>
 80032d4:	a201      	add	r2, pc, #4	; (adr r2, 80032dc <UART_SetConfig+0x3f4>)
 80032d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032da:	bf00      	nop
 80032dc:	08003301 	.word	0x08003301
 80032e0:	08003309 	.word	0x08003309
 80032e4:	08003311 	.word	0x08003311
 80032e8:	08003327 	.word	0x08003327
 80032ec:	08003317 	.word	0x08003317
 80032f0:	08003327 	.word	0x08003327
 80032f4:	08003327 	.word	0x08003327
 80032f8:	08003327 	.word	0x08003327
 80032fc:	0800331f 	.word	0x0800331f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003300:	f7fe ff1c 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8003304:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003306:	e014      	b.n	8003332 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003308:	f7fe ff2e 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 800330c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800330e:	e010      	b.n	8003332 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003310:	4b5a      	ldr	r3, [pc, #360]	; (800347c <UART_SetConfig+0x594>)
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003314:	e00d      	b.n	8003332 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003316:	f7fe fea3 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 800331a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800331c:	e009      	b.n	8003332 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800331e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003324:	e005      	b.n	8003332 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003330:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 8089 	beq.w	800344c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	4a4e      	ldr	r2, [pc, #312]	; (8003478 <UART_SetConfig+0x590>)
 8003340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003344:	461a      	mov	r2, r3
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	fbb3 f3f2 	udiv	r3, r3, r2
 800334c:	005a      	lsls	r2, r3, #1
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	085b      	lsrs	r3, r3, #1
 8003354:	441a      	add	r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	fbb2 f3f3 	udiv	r3, r2, r3
 800335e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	2b0f      	cmp	r3, #15
 8003364:	d916      	bls.n	8003394 <UART_SetConfig+0x4ac>
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d212      	bcs.n	8003394 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	b29b      	uxth	r3, r3
 8003372:	f023 030f 	bic.w	r3, r3, #15
 8003376:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	085b      	lsrs	r3, r3, #1
 800337c:	b29b      	uxth	r3, r3
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	b29a      	uxth	r2, r3
 8003384:	8bfb      	ldrh	r3, [r7, #30]
 8003386:	4313      	orrs	r3, r2
 8003388:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	8bfa      	ldrh	r2, [r7, #30]
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	e05b      	b.n	800344c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800339a:	e057      	b.n	800344c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800339c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d828      	bhi.n	80033f6 <UART_SetConfig+0x50e>
 80033a4:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <UART_SetConfig+0x4c4>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	080033d1 	.word	0x080033d1
 80033b0:	080033d9 	.word	0x080033d9
 80033b4:	080033e1 	.word	0x080033e1
 80033b8:	080033f7 	.word	0x080033f7
 80033bc:	080033e7 	.word	0x080033e7
 80033c0:	080033f7 	.word	0x080033f7
 80033c4:	080033f7 	.word	0x080033f7
 80033c8:	080033f7 	.word	0x080033f7
 80033cc:	080033ef 	.word	0x080033ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d0:	f7fe feb4 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 80033d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033d6:	e014      	b.n	8003402 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033d8:	f7fe fec6 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 80033dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033de:	e010      	b.n	8003402 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e0:	4b26      	ldr	r3, [pc, #152]	; (800347c <UART_SetConfig+0x594>)
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033e4:	e00d      	b.n	8003402 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e6:	f7fe fe3b 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 80033ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033ec:	e009      	b.n	8003402 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033f4:	e005      	b.n	8003402 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003400:	bf00      	nop
    }

    if (pclk != 0U)
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	2b00      	cmp	r3, #0
 8003406:	d021      	beq.n	800344c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	4a1a      	ldr	r2, [pc, #104]	; (8003478 <UART_SetConfig+0x590>)
 800340e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003412:	461a      	mov	r2, r3
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	fbb3 f2f2 	udiv	r2, r3, r2
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	085b      	lsrs	r3, r3, #1
 8003420:	441a      	add	r2, r3
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	fbb2 f3f3 	udiv	r3, r2, r3
 800342a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	2b0f      	cmp	r3, #15
 8003430:	d909      	bls.n	8003446 <UART_SetConfig+0x55e>
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003438:	d205      	bcs.n	8003446 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	b29a      	uxth	r2, r3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60da      	str	r2, [r3, #12]
 8003444:	e002      	b.n	800344c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2201      	movs	r2, #1
 8003450:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2201      	movs	r2, #1
 8003458:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2200      	movs	r2, #0
 8003460:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2200      	movs	r2, #0
 8003466:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003468:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800346c:	4618      	mov	r0, r3
 800346e:	3730      	adds	r7, #48	; 0x30
 8003470:	46bd      	mov	sp, r7
 8003472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003476:	bf00      	nop
 8003478:	0800582c 	.word	0x0800582c
 800347c:	00f42400 	.word	0x00f42400

08003480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d01a      	beq.n	8003596 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800357e:	d10a      	bne.n	8003596 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	605a      	str	r2, [r3, #4]
  }
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035d4:	f7fd fcbc 	bl	8000f50 <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d10e      	bne.n	8003606 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f82f 	bl	800365a <UART_WaitOnFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e025      	b.n	8003652 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b04      	cmp	r3, #4
 8003612:	d10e      	bne.n	8003632 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003614:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f819 	bl	800365a <UART_WaitOnFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e00f      	b.n	8003652 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b09c      	sub	sp, #112	; 0x70
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	603b      	str	r3, [r7, #0]
 8003666:	4613      	mov	r3, r2
 8003668:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366a:	e0a9      	b.n	80037c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800366e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003672:	f000 80a5 	beq.w	80037c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003676:	f7fd fc6b 	bl	8000f50 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003682:	429a      	cmp	r2, r3
 8003684:	d302      	bcc.n	800368c <UART_WaitOnFlagUntilTimeout+0x32>
 8003686:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003688:	2b00      	cmp	r3, #0
 800368a:	d140      	bne.n	800370e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003694:	e853 3f00 	ldrex	r3, [r3]
 8003698:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800369a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036a0:	667b      	str	r3, [r7, #100]	; 0x64
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036ac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80036b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036b2:	e841 2300 	strex	r3, r2, [r1]
 80036b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80036b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1e6      	bne.n	800368c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3308      	adds	r3, #8
 80036c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c8:	e853 3f00 	ldrex	r3, [r3]
 80036cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	663b      	str	r3, [r7, #96]	; 0x60
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3308      	adds	r3, #8
 80036dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036de:	64ba      	str	r2, [r7, #72]	; 0x48
 80036e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036e6:	e841 2300 	strex	r3, r2, [r1]
 80036ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80036ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1e5      	bne.n	80036be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e069      	b.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d051      	beq.n	80037c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800372a:	d149      	bne.n	80037c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003734:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373e:	e853 3f00 	ldrex	r3, [r3]
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800374a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003754:	637b      	str	r3, [r7, #52]	; 0x34
 8003756:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003758:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800375a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800375c:	e841 2300 	strex	r3, r2, [r1]
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e6      	bne.n	8003736 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3308      	adds	r3, #8
 800376e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	e853 3f00 	ldrex	r3, [r3]
 8003776:	613b      	str	r3, [r7, #16]
   return(result);
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f023 0301 	bic.w	r3, r3, #1
 800377e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3308      	adds	r3, #8
 8003786:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003788:	623a      	str	r2, [r7, #32]
 800378a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378c:	69f9      	ldr	r1, [r7, #28]
 800378e:	6a3a      	ldr	r2, [r7, #32]
 8003790:	e841 2300 	strex	r3, r2, [r1]
 8003794:	61bb      	str	r3, [r7, #24]
   return(result);
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e5      	bne.n	8003768 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e010      	b.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	69da      	ldr	r2, [r3, #28]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4013      	ands	r3, r2
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	429a      	cmp	r2, r3
 80037dc:	f43f af46 	beq.w	800366c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3770      	adds	r7, #112	; 0x70
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b0a3      	sub	sp, #140	; 0x8c
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	4613      	mov	r3, r2
 80037f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	88fa      	ldrh	r2, [r7, #6]
 8003804:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	88fa      	ldrh	r2, [r7, #6]
 800380c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381e:	d10e      	bne.n	800383e <UART_Start_Receive_IT+0x52>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d105      	bne.n	8003834 <UART_Start_Receive_IT+0x48>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800382e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003832:	e02d      	b.n	8003890 <UART_Start_Receive_IT+0xa4>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	22ff      	movs	r2, #255	; 0xff
 8003838:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800383c:	e028      	b.n	8003890 <UART_Start_Receive_IT+0xa4>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10d      	bne.n	8003862 <UART_Start_Receive_IT+0x76>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d104      	bne.n	8003858 <UART_Start_Receive_IT+0x6c>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	22ff      	movs	r2, #255	; 0xff
 8003852:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003856:	e01b      	b.n	8003890 <UART_Start_Receive_IT+0xa4>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	227f      	movs	r2, #127	; 0x7f
 800385c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003860:	e016      	b.n	8003890 <UART_Start_Receive_IT+0xa4>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800386a:	d10d      	bne.n	8003888 <UART_Start_Receive_IT+0x9c>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d104      	bne.n	800387e <UART_Start_Receive_IT+0x92>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	227f      	movs	r2, #127	; 0x7f
 8003878:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800387c:	e008      	b.n	8003890 <UART_Start_Receive_IT+0xa4>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	223f      	movs	r2, #63	; 0x3f
 8003882:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003886:	e003      	b.n	8003890 <UART_Start_Receive_IT+0xa4>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2222      	movs	r2, #34	; 0x22
 800389c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3308      	adds	r3, #8
 80038a6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038aa:	e853 3f00 	ldrex	r3, [r3]
 80038ae:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80038b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3308      	adds	r3, #8
 80038c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80038c4:	673a      	str	r2, [r7, #112]	; 0x70
 80038c6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80038ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80038cc:	e841 2300 	strex	r3, r2, [r1]
 80038d0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80038d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e3      	bne.n	80038a0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e0:	d153      	bne.n	800398a <UART_Start_Receive_IT+0x19e>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80038e8:	88fa      	ldrh	r2, [r7, #6]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d34d      	bcc.n	800398a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f6:	d107      	bne.n	8003908 <UART_Start_Receive_IT+0x11c>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d103      	bne.n	8003908 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4a4b      	ldr	r2, [pc, #300]	; (8003a30 <UART_Start_Receive_IT+0x244>)
 8003904:	671a      	str	r2, [r3, #112]	; 0x70
 8003906:	e002      	b.n	800390e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4a4a      	ldr	r2, [pc, #296]	; (8003a34 <UART_Start_Receive_IT+0x248>)
 800390c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d01a      	beq.n	8003954 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800392c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800392e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003932:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003940:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003942:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003946:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800394e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e4      	bne.n	800391e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3308      	adds	r3, #8
 800395a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800395e:	e853 3f00 	ldrex	r3, [r3]
 8003962:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3308      	adds	r3, #8
 8003972:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003974:	64ba      	str	r2, [r7, #72]	; 0x48
 8003976:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003978:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800397a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800397c:	e841 2300 	strex	r3, r2, [r1]
 8003980:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e5      	bne.n	8003954 <UART_Start_Receive_IT+0x168>
 8003988:	e04a      	b.n	8003a20 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003992:	d107      	bne.n	80039a4 <UART_Start_Receive_IT+0x1b8>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d103      	bne.n	80039a4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4a26      	ldr	r2, [pc, #152]	; (8003a38 <UART_Start_Receive_IT+0x24c>)
 80039a0:	671a      	str	r2, [r3, #112]	; 0x70
 80039a2:	e002      	b.n	80039aa <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a25      	ldr	r2, [pc, #148]	; (8003a3c <UART_Start_Receive_IT+0x250>)
 80039a8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d019      	beq.n	80039ee <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c2:	e853 3f00 	ldrex	r3, [r3]
 80039c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80039ce:	677b      	str	r3, [r7, #116]	; 0x74
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d8:	637b      	str	r3, [r7, #52]	; 0x34
 80039da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039e0:	e841 2300 	strex	r3, r2, [r1]
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1e6      	bne.n	80039ba <UART_Start_Receive_IT+0x1ce>
 80039ec:	e018      	b.n	8003a20 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	e853 3f00 	ldrex	r3, [r3]
 80039fa:	613b      	str	r3, [r7, #16]
   return(result);
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f043 0320 	orr.w	r3, r3, #32
 8003a02:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a0c:	623b      	str	r3, [r7, #32]
 8003a0e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a10:	69f9      	ldr	r1, [r7, #28]
 8003a12:	6a3a      	ldr	r2, [r7, #32]
 8003a14:	e841 2300 	strex	r3, r2, [r1]
 8003a18:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e6      	bne.n	80039ee <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	378c      	adds	r7, #140	; 0x8c
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	08004149 	.word	0x08004149
 8003a34:	08003e51 	.word	0x08003e51
 8003a38:	08003cef 	.word	0x08003cef
 8003a3c:	08003b8f 	.word	0x08003b8f

08003a40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b095      	sub	sp, #84	; 0x54
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a66:	643b      	str	r3, [r7, #64]	; 0x40
 8003a68:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e6      	bne.n	8003a48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3308      	adds	r3, #8
 8003a80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	e853 3f00 	ldrex	r3, [r3]
 8003a88:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aa0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e3      	bne.n	8003a7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d118      	bne.n	8003aec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	e853 3f00 	ldrex	r3, [r3]
 8003ac6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f023 0310 	bic.w	r3, r3, #16
 8003ace:	647b      	str	r3, [r7, #68]	; 0x44
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003adc:	6979      	ldr	r1, [r7, #20]
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	e841 2300 	strex	r3, r2, [r1]
 8003ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e6      	bne.n	8003aba <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003b00:	bf00      	nop
 8003b02:	3754      	adds	r7, #84	; 0x54
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7ff f9c6 	bl	8002ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	e853 3f00 	ldrex	r3, [r3]
 8003b4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b62:	6979      	ldr	r1, [r7, #20]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	e841 2300 	strex	r3, r2, [r1]
 8003b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1e6      	bne.n	8003b40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff f991 	bl	8002ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b86:	bf00      	nop
 8003b88:	3720      	adds	r7, #32
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b096      	sub	sp, #88	; 0x58
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003b9c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	2b22      	cmp	r3, #34	; 0x22
 8003ba8:	f040 8095 	bne.w	8003cd6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003bb6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003bba:	b2d9      	uxtb	r1, r3
 8003bbc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d178      	bne.n	8003ce6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c08:	653b      	str	r3, [r7, #80]	; 0x50
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c12:	647b      	str	r3, [r7, #68]	; 0x44
 8003c14:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e6      	bne.n	8003bf4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	623b      	str	r3, [r7, #32]
   return(result);
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	f023 0301 	bic.w	r3, r3, #1
 8003c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3308      	adds	r3, #8
 8003c44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c46:	633a      	str	r2, [r7, #48]	; 0x30
 8003c48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e5      	bne.n	8003c26 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d12e      	bne.n	8003cce <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0310 	bic.w	r3, r3, #16
 8003c8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c94:	61fb      	str	r3, [r7, #28]
 8003c96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	69b9      	ldr	r1, [r7, #24]
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	e841 2300 	strex	r3, r2, [r1]
 8003ca0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e6      	bne.n	8003c76 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b10      	cmp	r3, #16
 8003cb4:	d103      	bne.n	8003cbe <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2210      	movs	r2, #16
 8003cbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff f902 	bl	8002ed0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ccc:	e00b      	b.n	8003ce6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fc feba 	bl	8000a48 <HAL_UART_RxCpltCallback>
}
 8003cd4:	e007      	b.n	8003ce6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699a      	ldr	r2, [r3, #24]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0208 	orr.w	r2, r2, #8
 8003ce4:	619a      	str	r2, [r3, #24]
}
 8003ce6:	bf00      	nop
 8003ce8:	3758      	adds	r7, #88	; 0x58
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b096      	sub	sp, #88	; 0x58
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003cfc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d06:	2b22      	cmp	r3, #34	; 0x22
 8003d08:	f040 8095 	bne.w	8003e36 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003d1c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003d20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003d24:	4013      	ands	r3, r2
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d2a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d30:	1c9a      	adds	r2, r3, #2
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d178      	bne.n	8003e46 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d72:	643b      	str	r3, [r7, #64]	; 0x40
 8003d74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e6      	bne.n	8003d54 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3308      	adds	r3, #8
 8003da4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003da6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003da8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e5      	bne.n	8003d86 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d12e      	bne.n	8003e2e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	e853 3f00 	ldrex	r3, [r3]
 8003de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f023 0310 	bic.w	r3, r3, #16
 8003dea:	647b      	str	r3, [r7, #68]	; 0x44
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	6979      	ldr	r1, [r7, #20]
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	613b      	str	r3, [r7, #16]
   return(result);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e6      	bne.n	8003dd6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b10      	cmp	r3, #16
 8003e14:	d103      	bne.n	8003e1e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2210      	movs	r2, #16
 8003e1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e24:	4619      	mov	r1, r3
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff f852 	bl	8002ed0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e2c:	e00b      	b.n	8003e46 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fc fe0a 	bl	8000a48 <HAL_UART_RxCpltCallback>
}
 8003e34:	e007      	b.n	8003e46 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699a      	ldr	r2, [r3, #24]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0208 	orr.w	r2, r2, #8
 8003e44:	619a      	str	r2, [r3, #24]
}
 8003e46:	bf00      	nop
 8003e48:	3758      	adds	r7, #88	; 0x58
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b0a6      	sub	sp, #152	; 0x98
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003e5e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	2b22      	cmp	r3, #34	; 0x22
 8003e88:	f040 814f 	bne.w	800412a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003e92:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003e96:	e0f6      	b.n	8004086 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ea2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8003ea6:	b2d9      	uxtb	r1, r3
 8003ea8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	400a      	ands	r2, r1
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003ede:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d053      	beq.n	8003f92 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003eea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d011      	beq.n	8003f1a <UART_RxISR_8BIT_FIFOEN+0xca>
 8003ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2201      	movs	r2, #1
 8003f08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f10:	f043 0201 	orr.w	r2, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d011      	beq.n	8003f4a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8003f26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00b      	beq.n	8003f4a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2202      	movs	r2, #2
 8003f38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f40:	f043 0204 	orr.w	r2, r3, #4
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d011      	beq.n	8003f7a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8003f56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00b      	beq.n	8003f7a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2204      	movs	r2, #4
 8003f68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f70:	f043 0202 	orr.w	r2, r3, #2
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d006      	beq.n	8003f92 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7fe ff99 	bl	8002ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d173      	bne.n	8004086 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fa6:	e853 3f00 	ldrex	r3, [r3]
 8003faa:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8003fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fc2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003fc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fc8:	e841 2300 	strex	r3, r2, [r1]
 8003fcc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003fce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e4      	bne.n	8003f9e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3308      	adds	r3, #8
 8003fda:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fea:	f023 0301 	bic.w	r3, r3, #1
 8003fee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003ff8:	657a      	str	r2, [r7, #84]	; 0x54
 8003ffa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003ffe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e3      	bne.n	8003fd4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800401e:	2b01      	cmp	r3, #1
 8004020:	d12e      	bne.n	8004080 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	f023 0310 	bic.w	r3, r3, #16
 800403c:	67bb      	str	r3, [r7, #120]	; 0x78
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004046:	643b      	str	r3, [r7, #64]	; 0x40
 8004048:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800404c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e6      	bne.n	8004028 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	2b10      	cmp	r3, #16
 8004066:	d103      	bne.n	8004070 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2210      	movs	r2, #16
 800406e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004076:	4619      	mov	r1, r3
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7fe ff29 	bl	8002ed0 <HAL_UARTEx_RxEventCallback>
 800407e:	e002      	b.n	8004086 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7fc fce1 	bl	8000a48 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004086:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800408a:	2b00      	cmp	r3, #0
 800408c:	d006      	beq.n	800409c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800408e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	f47f aefe 	bne.w	8003e98 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80040a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80040a6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d045      	beq.n	800413a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80040b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d23e      	bcs.n	800413a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3308      	adds	r3, #8
 80040c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d2:	673b      	str	r3, [r7, #112]	; 0x70
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3308      	adds	r3, #8
 80040da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80040dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e4:	e841 2300 	strex	r3, r2, [r1]
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e5      	bne.n	80040bc <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a14      	ldr	r2, [pc, #80]	; (8004144 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80040f4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	e853 3f00 	ldrex	r3, [r3]
 8004102:	60bb      	str	r3, [r7, #8]
   return(result);
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f043 0320 	orr.w	r3, r3, #32
 800410a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004114:	61bb      	str	r3, [r7, #24]
 8004116:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004118:	6979      	ldr	r1, [r7, #20]
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	e841 2300 	strex	r3, r2, [r1]
 8004120:	613b      	str	r3, [r7, #16]
   return(result);
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1e6      	bne.n	80040f6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004128:	e007      	b.n	800413a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699a      	ldr	r2, [r3, #24]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f042 0208 	orr.w	r2, r2, #8
 8004138:	619a      	str	r2, [r3, #24]
}
 800413a:	bf00      	nop
 800413c:	3798      	adds	r7, #152	; 0x98
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	08003b8f 	.word	0x08003b8f

08004148 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b0a8      	sub	sp, #160	; 0xa0
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004156:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	2b22      	cmp	r3, #34	; 0x22
 8004180:	f040 8153 	bne.w	800442a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800418a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800418e:	e0fa      	b.n	8004386 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80041a2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80041a6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80041aa:	4013      	ands	r3, r2
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b8:	1c9a      	adds	r2, r3, #2
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80041da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d053      	beq.n	800428e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d011      	beq.n	8004216 <UART_RxISR_16BIT_FIFOEN+0xce>
 80041f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2201      	movs	r2, #1
 8004204:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800420c:	f043 0201 	orr.w	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004216:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d011      	beq.n	8004246 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004222:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00b      	beq.n	8004246 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2202      	movs	r2, #2
 8004234:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800423c:	f043 0204 	orr.w	r2, r3, #4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004246:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d011      	beq.n	8004276 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004252:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2204      	movs	r2, #4
 8004264:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800426c:	f043 0202 	orr.w	r2, r3, #2
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800427c:	2b00      	cmp	r3, #0
 800427e:	d006      	beq.n	800428e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7fe fe1b 	bl	8002ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d175      	bne.n	8004386 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042a2:	e853 3f00 	ldrex	r3, [r3]
 80042a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042be:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042c4:	e841 2300 	strex	r3, r2, [r1]
 80042c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e4      	bne.n	800429a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3308      	adds	r3, #8
 80042d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042da:	e853 3f00 	ldrex	r3, [r3]
 80042de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3308      	adds	r3, #8
 80042f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80042fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004300:	e841 2300 	strex	r3, r2, [r1]
 8004304:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e1      	bne.n	80042d0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800431e:	2b01      	cmp	r3, #1
 8004320:	d12e      	bne.n	8004380 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004338:	f023 0310 	bic.w	r3, r3, #16
 800433c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004346:	647b      	str	r3, [r7, #68]	; 0x44
 8004348:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800434c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e6      	bne.n	8004328 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b10      	cmp	r3, #16
 8004366:	d103      	bne.n	8004370 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2210      	movs	r2, #16
 800436e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004376:	4619      	mov	r1, r3
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7fe fda9 	bl	8002ed0 <HAL_UARTEx_RxEventCallback>
 800437e:	e002      	b.n	8004386 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7fc fb61 	bl	8000a48 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004386:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800438a:	2b00      	cmp	r3, #0
 800438c:	d006      	beq.n	800439c <UART_RxISR_16BIT_FIFOEN+0x254>
 800438e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	f47f aefa 	bne.w	8004190 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043a2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80043a6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d045      	beq.n	800443a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80043b4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d23e      	bcs.n	800443a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3308      	adds	r3, #8
 80043c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	623b      	str	r3, [r7, #32]
   return(result);
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d2:	677b      	str	r3, [r7, #116]	; 0x74
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3308      	adds	r3, #8
 80043da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80043dc:	633a      	str	r2, [r7, #48]	; 0x30
 80043de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e5      	bne.n	80043bc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a14      	ldr	r2, [pc, #80]	; (8004444 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80043f4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	60fb      	str	r3, [r7, #12]
   return(result);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f043 0320 	orr.w	r3, r3, #32
 800440a:	673b      	str	r3, [r7, #112]	; 0x70
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004414:	61fb      	str	r3, [r7, #28]
 8004416:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	69b9      	ldr	r1, [r7, #24]
 800441a:	69fa      	ldr	r2, [r7, #28]
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	617b      	str	r3, [r7, #20]
   return(result);
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e6      	bne.n	80043f6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004428:	e007      	b.n	800443a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699a      	ldr	r2, [r3, #24]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0208 	orr.w	r2, r2, #8
 8004438:	619a      	str	r2, [r3, #24]
}
 800443a:	bf00      	nop
 800443c:	37a0      	adds	r7, #160	; 0xa0
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	08003cef 	.word	0x08003cef

08004448 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_UARTEx_DisableFifoMode+0x16>
 8004496:	2302      	movs	r3, #2
 8004498:	e027      	b.n	80044ea <HAL_UARTEx_DisableFifoMode+0x66>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2224      	movs	r2, #36	; 0x24
 80044a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0201 	bic.w	r2, r2, #1
 80044c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80044c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2220      	movs	r2, #32
 80044dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800450a:	2302      	movs	r3, #2
 800450c:	e02d      	b.n	800456a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2224      	movs	r2, #36	; 0x24
 800451a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0201 	bic.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f850 	bl	80045f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b084      	sub	sp, #16
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004586:	2302      	movs	r3, #2
 8004588:	e02d      	b.n	80045e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2224      	movs	r2, #36	; 0x24
 8004596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0201 	bic.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f812 	bl	80045f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d108      	bne.n	8004612 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004610:	e031      	b.n	8004676 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004612:	2308      	movs	r3, #8
 8004614:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004616:	2308      	movs	r3, #8
 8004618:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	0e5b      	lsrs	r3, r3, #25
 8004622:	b2db      	uxtb	r3, r3
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	0f5b      	lsrs	r3, r3, #29
 8004632:	b2db      	uxtb	r3, r3
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800463a:	7bbb      	ldrb	r3, [r7, #14]
 800463c:	7b3a      	ldrb	r2, [r7, #12]
 800463e:	4911      	ldr	r1, [pc, #68]	; (8004684 <UARTEx_SetNbDataToProcess+0x94>)
 8004640:	5c8a      	ldrb	r2, [r1, r2]
 8004642:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004646:	7b3a      	ldrb	r2, [r7, #12]
 8004648:	490f      	ldr	r1, [pc, #60]	; (8004688 <UARTEx_SetNbDataToProcess+0x98>)
 800464a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800464c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004650:	b29a      	uxth	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	7b7a      	ldrb	r2, [r7, #13]
 800465c:	4909      	ldr	r1, [pc, #36]	; (8004684 <UARTEx_SetNbDataToProcess+0x94>)
 800465e:	5c8a      	ldrb	r2, [r1, r2]
 8004660:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004664:	7b7a      	ldrb	r2, [r7, #13]
 8004666:	4908      	ldr	r1, [pc, #32]	; (8004688 <UARTEx_SetNbDataToProcess+0x98>)
 8004668:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800466a:	fb93 f3f2 	sdiv	r3, r3, r2
 800466e:	b29a      	uxth	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	08005844 	.word	0x08005844
 8004688:	0800584c 	.word	0x0800584c

0800468c <__errno>:
 800468c:	4b01      	ldr	r3, [pc, #4]	; (8004694 <__errno+0x8>)
 800468e:	6818      	ldr	r0, [r3, #0]
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	2000000c 	.word	0x2000000c

08004698 <__libc_init_array>:
 8004698:	b570      	push	{r4, r5, r6, lr}
 800469a:	4d0d      	ldr	r5, [pc, #52]	; (80046d0 <__libc_init_array+0x38>)
 800469c:	4c0d      	ldr	r4, [pc, #52]	; (80046d4 <__libc_init_array+0x3c>)
 800469e:	1b64      	subs	r4, r4, r5
 80046a0:	10a4      	asrs	r4, r4, #2
 80046a2:	2600      	movs	r6, #0
 80046a4:	42a6      	cmp	r6, r4
 80046a6:	d109      	bne.n	80046bc <__libc_init_array+0x24>
 80046a8:	4d0b      	ldr	r5, [pc, #44]	; (80046d8 <__libc_init_array+0x40>)
 80046aa:	4c0c      	ldr	r4, [pc, #48]	; (80046dc <__libc_init_array+0x44>)
 80046ac:	f001 f82c 	bl	8005708 <_init>
 80046b0:	1b64      	subs	r4, r4, r5
 80046b2:	10a4      	asrs	r4, r4, #2
 80046b4:	2600      	movs	r6, #0
 80046b6:	42a6      	cmp	r6, r4
 80046b8:	d105      	bne.n	80046c6 <__libc_init_array+0x2e>
 80046ba:	bd70      	pop	{r4, r5, r6, pc}
 80046bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c0:	4798      	blx	r3
 80046c2:	3601      	adds	r6, #1
 80046c4:	e7ee      	b.n	80046a4 <__libc_init_array+0xc>
 80046c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ca:	4798      	blx	r3
 80046cc:	3601      	adds	r6, #1
 80046ce:	e7f2      	b.n	80046b6 <__libc_init_array+0x1e>
 80046d0:	080058f4 	.word	0x080058f4
 80046d4:	080058f4 	.word	0x080058f4
 80046d8:	080058f4 	.word	0x080058f4
 80046dc:	080058f8 	.word	0x080058f8

080046e0 <memset>:
 80046e0:	4402      	add	r2, r0
 80046e2:	4603      	mov	r3, r0
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d100      	bne.n	80046ea <memset+0xa>
 80046e8:	4770      	bx	lr
 80046ea:	f803 1b01 	strb.w	r1, [r3], #1
 80046ee:	e7f9      	b.n	80046e4 <memset+0x4>

080046f0 <iprintf>:
 80046f0:	b40f      	push	{r0, r1, r2, r3}
 80046f2:	4b0a      	ldr	r3, [pc, #40]	; (800471c <iprintf+0x2c>)
 80046f4:	b513      	push	{r0, r1, r4, lr}
 80046f6:	681c      	ldr	r4, [r3, #0]
 80046f8:	b124      	cbz	r4, 8004704 <iprintf+0x14>
 80046fa:	69a3      	ldr	r3, [r4, #24]
 80046fc:	b913      	cbnz	r3, 8004704 <iprintf+0x14>
 80046fe:	4620      	mov	r0, r4
 8004700:	f000 fa66 	bl	8004bd0 <__sinit>
 8004704:	ab05      	add	r3, sp, #20
 8004706:	9a04      	ldr	r2, [sp, #16]
 8004708:	68a1      	ldr	r1, [r4, #8]
 800470a:	9301      	str	r3, [sp, #4]
 800470c:	4620      	mov	r0, r4
 800470e:	f000 fc6f 	bl	8004ff0 <_vfiprintf_r>
 8004712:	b002      	add	sp, #8
 8004714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004718:	b004      	add	sp, #16
 800471a:	4770      	bx	lr
 800471c:	2000000c 	.word	0x2000000c

08004720 <_puts_r>:
 8004720:	b570      	push	{r4, r5, r6, lr}
 8004722:	460e      	mov	r6, r1
 8004724:	4605      	mov	r5, r0
 8004726:	b118      	cbz	r0, 8004730 <_puts_r+0x10>
 8004728:	6983      	ldr	r3, [r0, #24]
 800472a:	b90b      	cbnz	r3, 8004730 <_puts_r+0x10>
 800472c:	f000 fa50 	bl	8004bd0 <__sinit>
 8004730:	69ab      	ldr	r3, [r5, #24]
 8004732:	68ac      	ldr	r4, [r5, #8]
 8004734:	b913      	cbnz	r3, 800473c <_puts_r+0x1c>
 8004736:	4628      	mov	r0, r5
 8004738:	f000 fa4a 	bl	8004bd0 <__sinit>
 800473c:	4b2c      	ldr	r3, [pc, #176]	; (80047f0 <_puts_r+0xd0>)
 800473e:	429c      	cmp	r4, r3
 8004740:	d120      	bne.n	8004784 <_puts_r+0x64>
 8004742:	686c      	ldr	r4, [r5, #4]
 8004744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004746:	07db      	lsls	r3, r3, #31
 8004748:	d405      	bmi.n	8004756 <_puts_r+0x36>
 800474a:	89a3      	ldrh	r3, [r4, #12]
 800474c:	0598      	lsls	r0, r3, #22
 800474e:	d402      	bmi.n	8004756 <_puts_r+0x36>
 8004750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004752:	f000 fadb 	bl	8004d0c <__retarget_lock_acquire_recursive>
 8004756:	89a3      	ldrh	r3, [r4, #12]
 8004758:	0719      	lsls	r1, r3, #28
 800475a:	d51d      	bpl.n	8004798 <_puts_r+0x78>
 800475c:	6923      	ldr	r3, [r4, #16]
 800475e:	b1db      	cbz	r3, 8004798 <_puts_r+0x78>
 8004760:	3e01      	subs	r6, #1
 8004762:	68a3      	ldr	r3, [r4, #8]
 8004764:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004768:	3b01      	subs	r3, #1
 800476a:	60a3      	str	r3, [r4, #8]
 800476c:	bb39      	cbnz	r1, 80047be <_puts_r+0x9e>
 800476e:	2b00      	cmp	r3, #0
 8004770:	da38      	bge.n	80047e4 <_puts_r+0xc4>
 8004772:	4622      	mov	r2, r4
 8004774:	210a      	movs	r1, #10
 8004776:	4628      	mov	r0, r5
 8004778:	f000 f850 	bl	800481c <__swbuf_r>
 800477c:	3001      	adds	r0, #1
 800477e:	d011      	beq.n	80047a4 <_puts_r+0x84>
 8004780:	250a      	movs	r5, #10
 8004782:	e011      	b.n	80047a8 <_puts_r+0x88>
 8004784:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <_puts_r+0xd4>)
 8004786:	429c      	cmp	r4, r3
 8004788:	d101      	bne.n	800478e <_puts_r+0x6e>
 800478a:	68ac      	ldr	r4, [r5, #8]
 800478c:	e7da      	b.n	8004744 <_puts_r+0x24>
 800478e:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <_puts_r+0xd8>)
 8004790:	429c      	cmp	r4, r3
 8004792:	bf08      	it	eq
 8004794:	68ec      	ldreq	r4, [r5, #12]
 8004796:	e7d5      	b.n	8004744 <_puts_r+0x24>
 8004798:	4621      	mov	r1, r4
 800479a:	4628      	mov	r0, r5
 800479c:	f000 f890 	bl	80048c0 <__swsetup_r>
 80047a0:	2800      	cmp	r0, #0
 80047a2:	d0dd      	beq.n	8004760 <_puts_r+0x40>
 80047a4:	f04f 35ff 	mov.w	r5, #4294967295
 80047a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047aa:	07da      	lsls	r2, r3, #31
 80047ac:	d405      	bmi.n	80047ba <_puts_r+0x9a>
 80047ae:	89a3      	ldrh	r3, [r4, #12]
 80047b0:	059b      	lsls	r3, r3, #22
 80047b2:	d402      	bmi.n	80047ba <_puts_r+0x9a>
 80047b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047b6:	f000 faaa 	bl	8004d0e <__retarget_lock_release_recursive>
 80047ba:	4628      	mov	r0, r5
 80047bc:	bd70      	pop	{r4, r5, r6, pc}
 80047be:	2b00      	cmp	r3, #0
 80047c0:	da04      	bge.n	80047cc <_puts_r+0xac>
 80047c2:	69a2      	ldr	r2, [r4, #24]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	dc06      	bgt.n	80047d6 <_puts_r+0xb6>
 80047c8:	290a      	cmp	r1, #10
 80047ca:	d004      	beq.n	80047d6 <_puts_r+0xb6>
 80047cc:	6823      	ldr	r3, [r4, #0]
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	6022      	str	r2, [r4, #0]
 80047d2:	7019      	strb	r1, [r3, #0]
 80047d4:	e7c5      	b.n	8004762 <_puts_r+0x42>
 80047d6:	4622      	mov	r2, r4
 80047d8:	4628      	mov	r0, r5
 80047da:	f000 f81f 	bl	800481c <__swbuf_r>
 80047de:	3001      	adds	r0, #1
 80047e0:	d1bf      	bne.n	8004762 <_puts_r+0x42>
 80047e2:	e7df      	b.n	80047a4 <_puts_r+0x84>
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	250a      	movs	r5, #10
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	6022      	str	r2, [r4, #0]
 80047ec:	701d      	strb	r5, [r3, #0]
 80047ee:	e7db      	b.n	80047a8 <_puts_r+0x88>
 80047f0:	08005878 	.word	0x08005878
 80047f4:	08005898 	.word	0x08005898
 80047f8:	08005858 	.word	0x08005858

080047fc <puts>:
 80047fc:	4b02      	ldr	r3, [pc, #8]	; (8004808 <puts+0xc>)
 80047fe:	4601      	mov	r1, r0
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	f7ff bf8d 	b.w	8004720 <_puts_r>
 8004806:	bf00      	nop
 8004808:	2000000c 	.word	0x2000000c

0800480c <strcpy>:
 800480c:	4603      	mov	r3, r0
 800480e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004812:	f803 2b01 	strb.w	r2, [r3], #1
 8004816:	2a00      	cmp	r2, #0
 8004818:	d1f9      	bne.n	800480e <strcpy+0x2>
 800481a:	4770      	bx	lr

0800481c <__swbuf_r>:
 800481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481e:	460e      	mov	r6, r1
 8004820:	4614      	mov	r4, r2
 8004822:	4605      	mov	r5, r0
 8004824:	b118      	cbz	r0, 800482e <__swbuf_r+0x12>
 8004826:	6983      	ldr	r3, [r0, #24]
 8004828:	b90b      	cbnz	r3, 800482e <__swbuf_r+0x12>
 800482a:	f000 f9d1 	bl	8004bd0 <__sinit>
 800482e:	4b21      	ldr	r3, [pc, #132]	; (80048b4 <__swbuf_r+0x98>)
 8004830:	429c      	cmp	r4, r3
 8004832:	d12b      	bne.n	800488c <__swbuf_r+0x70>
 8004834:	686c      	ldr	r4, [r5, #4]
 8004836:	69a3      	ldr	r3, [r4, #24]
 8004838:	60a3      	str	r3, [r4, #8]
 800483a:	89a3      	ldrh	r3, [r4, #12]
 800483c:	071a      	lsls	r2, r3, #28
 800483e:	d52f      	bpl.n	80048a0 <__swbuf_r+0x84>
 8004840:	6923      	ldr	r3, [r4, #16]
 8004842:	b36b      	cbz	r3, 80048a0 <__swbuf_r+0x84>
 8004844:	6923      	ldr	r3, [r4, #16]
 8004846:	6820      	ldr	r0, [r4, #0]
 8004848:	1ac0      	subs	r0, r0, r3
 800484a:	6963      	ldr	r3, [r4, #20]
 800484c:	b2f6      	uxtb	r6, r6
 800484e:	4283      	cmp	r3, r0
 8004850:	4637      	mov	r7, r6
 8004852:	dc04      	bgt.n	800485e <__swbuf_r+0x42>
 8004854:	4621      	mov	r1, r4
 8004856:	4628      	mov	r0, r5
 8004858:	f000 f926 	bl	8004aa8 <_fflush_r>
 800485c:	bb30      	cbnz	r0, 80048ac <__swbuf_r+0x90>
 800485e:	68a3      	ldr	r3, [r4, #8]
 8004860:	3b01      	subs	r3, #1
 8004862:	60a3      	str	r3, [r4, #8]
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	6022      	str	r2, [r4, #0]
 800486a:	701e      	strb	r6, [r3, #0]
 800486c:	6963      	ldr	r3, [r4, #20]
 800486e:	3001      	adds	r0, #1
 8004870:	4283      	cmp	r3, r0
 8004872:	d004      	beq.n	800487e <__swbuf_r+0x62>
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	07db      	lsls	r3, r3, #31
 8004878:	d506      	bpl.n	8004888 <__swbuf_r+0x6c>
 800487a:	2e0a      	cmp	r6, #10
 800487c:	d104      	bne.n	8004888 <__swbuf_r+0x6c>
 800487e:	4621      	mov	r1, r4
 8004880:	4628      	mov	r0, r5
 8004882:	f000 f911 	bl	8004aa8 <_fflush_r>
 8004886:	b988      	cbnz	r0, 80048ac <__swbuf_r+0x90>
 8004888:	4638      	mov	r0, r7
 800488a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800488c:	4b0a      	ldr	r3, [pc, #40]	; (80048b8 <__swbuf_r+0x9c>)
 800488e:	429c      	cmp	r4, r3
 8004890:	d101      	bne.n	8004896 <__swbuf_r+0x7a>
 8004892:	68ac      	ldr	r4, [r5, #8]
 8004894:	e7cf      	b.n	8004836 <__swbuf_r+0x1a>
 8004896:	4b09      	ldr	r3, [pc, #36]	; (80048bc <__swbuf_r+0xa0>)
 8004898:	429c      	cmp	r4, r3
 800489a:	bf08      	it	eq
 800489c:	68ec      	ldreq	r4, [r5, #12]
 800489e:	e7ca      	b.n	8004836 <__swbuf_r+0x1a>
 80048a0:	4621      	mov	r1, r4
 80048a2:	4628      	mov	r0, r5
 80048a4:	f000 f80c 	bl	80048c0 <__swsetup_r>
 80048a8:	2800      	cmp	r0, #0
 80048aa:	d0cb      	beq.n	8004844 <__swbuf_r+0x28>
 80048ac:	f04f 37ff 	mov.w	r7, #4294967295
 80048b0:	e7ea      	b.n	8004888 <__swbuf_r+0x6c>
 80048b2:	bf00      	nop
 80048b4:	08005878 	.word	0x08005878
 80048b8:	08005898 	.word	0x08005898
 80048bc:	08005858 	.word	0x08005858

080048c0 <__swsetup_r>:
 80048c0:	4b32      	ldr	r3, [pc, #200]	; (800498c <__swsetup_r+0xcc>)
 80048c2:	b570      	push	{r4, r5, r6, lr}
 80048c4:	681d      	ldr	r5, [r3, #0]
 80048c6:	4606      	mov	r6, r0
 80048c8:	460c      	mov	r4, r1
 80048ca:	b125      	cbz	r5, 80048d6 <__swsetup_r+0x16>
 80048cc:	69ab      	ldr	r3, [r5, #24]
 80048ce:	b913      	cbnz	r3, 80048d6 <__swsetup_r+0x16>
 80048d0:	4628      	mov	r0, r5
 80048d2:	f000 f97d 	bl	8004bd0 <__sinit>
 80048d6:	4b2e      	ldr	r3, [pc, #184]	; (8004990 <__swsetup_r+0xd0>)
 80048d8:	429c      	cmp	r4, r3
 80048da:	d10f      	bne.n	80048fc <__swsetup_r+0x3c>
 80048dc:	686c      	ldr	r4, [r5, #4]
 80048de:	89a3      	ldrh	r3, [r4, #12]
 80048e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048e4:	0719      	lsls	r1, r3, #28
 80048e6:	d42c      	bmi.n	8004942 <__swsetup_r+0x82>
 80048e8:	06dd      	lsls	r5, r3, #27
 80048ea:	d411      	bmi.n	8004910 <__swsetup_r+0x50>
 80048ec:	2309      	movs	r3, #9
 80048ee:	6033      	str	r3, [r6, #0]
 80048f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048f4:	81a3      	strh	r3, [r4, #12]
 80048f6:	f04f 30ff 	mov.w	r0, #4294967295
 80048fa:	e03e      	b.n	800497a <__swsetup_r+0xba>
 80048fc:	4b25      	ldr	r3, [pc, #148]	; (8004994 <__swsetup_r+0xd4>)
 80048fe:	429c      	cmp	r4, r3
 8004900:	d101      	bne.n	8004906 <__swsetup_r+0x46>
 8004902:	68ac      	ldr	r4, [r5, #8]
 8004904:	e7eb      	b.n	80048de <__swsetup_r+0x1e>
 8004906:	4b24      	ldr	r3, [pc, #144]	; (8004998 <__swsetup_r+0xd8>)
 8004908:	429c      	cmp	r4, r3
 800490a:	bf08      	it	eq
 800490c:	68ec      	ldreq	r4, [r5, #12]
 800490e:	e7e6      	b.n	80048de <__swsetup_r+0x1e>
 8004910:	0758      	lsls	r0, r3, #29
 8004912:	d512      	bpl.n	800493a <__swsetup_r+0x7a>
 8004914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004916:	b141      	cbz	r1, 800492a <__swsetup_r+0x6a>
 8004918:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800491c:	4299      	cmp	r1, r3
 800491e:	d002      	beq.n	8004926 <__swsetup_r+0x66>
 8004920:	4630      	mov	r0, r6
 8004922:	f000 fa5b 	bl	8004ddc <_free_r>
 8004926:	2300      	movs	r3, #0
 8004928:	6363      	str	r3, [r4, #52]	; 0x34
 800492a:	89a3      	ldrh	r3, [r4, #12]
 800492c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004930:	81a3      	strh	r3, [r4, #12]
 8004932:	2300      	movs	r3, #0
 8004934:	6063      	str	r3, [r4, #4]
 8004936:	6923      	ldr	r3, [r4, #16]
 8004938:	6023      	str	r3, [r4, #0]
 800493a:	89a3      	ldrh	r3, [r4, #12]
 800493c:	f043 0308 	orr.w	r3, r3, #8
 8004940:	81a3      	strh	r3, [r4, #12]
 8004942:	6923      	ldr	r3, [r4, #16]
 8004944:	b94b      	cbnz	r3, 800495a <__swsetup_r+0x9a>
 8004946:	89a3      	ldrh	r3, [r4, #12]
 8004948:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800494c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004950:	d003      	beq.n	800495a <__swsetup_r+0x9a>
 8004952:	4621      	mov	r1, r4
 8004954:	4630      	mov	r0, r6
 8004956:	f000 fa01 	bl	8004d5c <__smakebuf_r>
 800495a:	89a0      	ldrh	r0, [r4, #12]
 800495c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004960:	f010 0301 	ands.w	r3, r0, #1
 8004964:	d00a      	beq.n	800497c <__swsetup_r+0xbc>
 8004966:	2300      	movs	r3, #0
 8004968:	60a3      	str	r3, [r4, #8]
 800496a:	6963      	ldr	r3, [r4, #20]
 800496c:	425b      	negs	r3, r3
 800496e:	61a3      	str	r3, [r4, #24]
 8004970:	6923      	ldr	r3, [r4, #16]
 8004972:	b943      	cbnz	r3, 8004986 <__swsetup_r+0xc6>
 8004974:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004978:	d1ba      	bne.n	80048f0 <__swsetup_r+0x30>
 800497a:	bd70      	pop	{r4, r5, r6, pc}
 800497c:	0781      	lsls	r1, r0, #30
 800497e:	bf58      	it	pl
 8004980:	6963      	ldrpl	r3, [r4, #20]
 8004982:	60a3      	str	r3, [r4, #8]
 8004984:	e7f4      	b.n	8004970 <__swsetup_r+0xb0>
 8004986:	2000      	movs	r0, #0
 8004988:	e7f7      	b.n	800497a <__swsetup_r+0xba>
 800498a:	bf00      	nop
 800498c:	2000000c 	.word	0x2000000c
 8004990:	08005878 	.word	0x08005878
 8004994:	08005898 	.word	0x08005898
 8004998:	08005858 	.word	0x08005858

0800499c <__sflush_r>:
 800499c:	898a      	ldrh	r2, [r1, #12]
 800499e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049a2:	4605      	mov	r5, r0
 80049a4:	0710      	lsls	r0, r2, #28
 80049a6:	460c      	mov	r4, r1
 80049a8:	d458      	bmi.n	8004a5c <__sflush_r+0xc0>
 80049aa:	684b      	ldr	r3, [r1, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	dc05      	bgt.n	80049bc <__sflush_r+0x20>
 80049b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	dc02      	bgt.n	80049bc <__sflush_r+0x20>
 80049b6:	2000      	movs	r0, #0
 80049b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049be:	2e00      	cmp	r6, #0
 80049c0:	d0f9      	beq.n	80049b6 <__sflush_r+0x1a>
 80049c2:	2300      	movs	r3, #0
 80049c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049c8:	682f      	ldr	r7, [r5, #0]
 80049ca:	602b      	str	r3, [r5, #0]
 80049cc:	d032      	beq.n	8004a34 <__sflush_r+0x98>
 80049ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	075a      	lsls	r2, r3, #29
 80049d4:	d505      	bpl.n	80049e2 <__sflush_r+0x46>
 80049d6:	6863      	ldr	r3, [r4, #4]
 80049d8:	1ac0      	subs	r0, r0, r3
 80049da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049dc:	b10b      	cbz	r3, 80049e2 <__sflush_r+0x46>
 80049de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049e0:	1ac0      	subs	r0, r0, r3
 80049e2:	2300      	movs	r3, #0
 80049e4:	4602      	mov	r2, r0
 80049e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049e8:	6a21      	ldr	r1, [r4, #32]
 80049ea:	4628      	mov	r0, r5
 80049ec:	47b0      	blx	r6
 80049ee:	1c43      	adds	r3, r0, #1
 80049f0:	89a3      	ldrh	r3, [r4, #12]
 80049f2:	d106      	bne.n	8004a02 <__sflush_r+0x66>
 80049f4:	6829      	ldr	r1, [r5, #0]
 80049f6:	291d      	cmp	r1, #29
 80049f8:	d82c      	bhi.n	8004a54 <__sflush_r+0xb8>
 80049fa:	4a2a      	ldr	r2, [pc, #168]	; (8004aa4 <__sflush_r+0x108>)
 80049fc:	40ca      	lsrs	r2, r1
 80049fe:	07d6      	lsls	r6, r2, #31
 8004a00:	d528      	bpl.n	8004a54 <__sflush_r+0xb8>
 8004a02:	2200      	movs	r2, #0
 8004a04:	6062      	str	r2, [r4, #4]
 8004a06:	04d9      	lsls	r1, r3, #19
 8004a08:	6922      	ldr	r2, [r4, #16]
 8004a0a:	6022      	str	r2, [r4, #0]
 8004a0c:	d504      	bpl.n	8004a18 <__sflush_r+0x7c>
 8004a0e:	1c42      	adds	r2, r0, #1
 8004a10:	d101      	bne.n	8004a16 <__sflush_r+0x7a>
 8004a12:	682b      	ldr	r3, [r5, #0]
 8004a14:	b903      	cbnz	r3, 8004a18 <__sflush_r+0x7c>
 8004a16:	6560      	str	r0, [r4, #84]	; 0x54
 8004a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a1a:	602f      	str	r7, [r5, #0]
 8004a1c:	2900      	cmp	r1, #0
 8004a1e:	d0ca      	beq.n	80049b6 <__sflush_r+0x1a>
 8004a20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a24:	4299      	cmp	r1, r3
 8004a26:	d002      	beq.n	8004a2e <__sflush_r+0x92>
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f000 f9d7 	bl	8004ddc <_free_r>
 8004a2e:	2000      	movs	r0, #0
 8004a30:	6360      	str	r0, [r4, #52]	; 0x34
 8004a32:	e7c1      	b.n	80049b8 <__sflush_r+0x1c>
 8004a34:	6a21      	ldr	r1, [r4, #32]
 8004a36:	2301      	movs	r3, #1
 8004a38:	4628      	mov	r0, r5
 8004a3a:	47b0      	blx	r6
 8004a3c:	1c41      	adds	r1, r0, #1
 8004a3e:	d1c7      	bne.n	80049d0 <__sflush_r+0x34>
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0c4      	beq.n	80049d0 <__sflush_r+0x34>
 8004a46:	2b1d      	cmp	r3, #29
 8004a48:	d001      	beq.n	8004a4e <__sflush_r+0xb2>
 8004a4a:	2b16      	cmp	r3, #22
 8004a4c:	d101      	bne.n	8004a52 <__sflush_r+0xb6>
 8004a4e:	602f      	str	r7, [r5, #0]
 8004a50:	e7b1      	b.n	80049b6 <__sflush_r+0x1a>
 8004a52:	89a3      	ldrh	r3, [r4, #12]
 8004a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a58:	81a3      	strh	r3, [r4, #12]
 8004a5a:	e7ad      	b.n	80049b8 <__sflush_r+0x1c>
 8004a5c:	690f      	ldr	r7, [r1, #16]
 8004a5e:	2f00      	cmp	r7, #0
 8004a60:	d0a9      	beq.n	80049b6 <__sflush_r+0x1a>
 8004a62:	0793      	lsls	r3, r2, #30
 8004a64:	680e      	ldr	r6, [r1, #0]
 8004a66:	bf08      	it	eq
 8004a68:	694b      	ldreq	r3, [r1, #20]
 8004a6a:	600f      	str	r7, [r1, #0]
 8004a6c:	bf18      	it	ne
 8004a6e:	2300      	movne	r3, #0
 8004a70:	eba6 0807 	sub.w	r8, r6, r7
 8004a74:	608b      	str	r3, [r1, #8]
 8004a76:	f1b8 0f00 	cmp.w	r8, #0
 8004a7a:	dd9c      	ble.n	80049b6 <__sflush_r+0x1a>
 8004a7c:	6a21      	ldr	r1, [r4, #32]
 8004a7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a80:	4643      	mov	r3, r8
 8004a82:	463a      	mov	r2, r7
 8004a84:	4628      	mov	r0, r5
 8004a86:	47b0      	blx	r6
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	dc06      	bgt.n	8004a9a <__sflush_r+0xfe>
 8004a8c:	89a3      	ldrh	r3, [r4, #12]
 8004a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a92:	81a3      	strh	r3, [r4, #12]
 8004a94:	f04f 30ff 	mov.w	r0, #4294967295
 8004a98:	e78e      	b.n	80049b8 <__sflush_r+0x1c>
 8004a9a:	4407      	add	r7, r0
 8004a9c:	eba8 0800 	sub.w	r8, r8, r0
 8004aa0:	e7e9      	b.n	8004a76 <__sflush_r+0xda>
 8004aa2:	bf00      	nop
 8004aa4:	20400001 	.word	0x20400001

08004aa8 <_fflush_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	690b      	ldr	r3, [r1, #16]
 8004aac:	4605      	mov	r5, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	b913      	cbnz	r3, 8004ab8 <_fflush_r+0x10>
 8004ab2:	2500      	movs	r5, #0
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	bd38      	pop	{r3, r4, r5, pc}
 8004ab8:	b118      	cbz	r0, 8004ac2 <_fflush_r+0x1a>
 8004aba:	6983      	ldr	r3, [r0, #24]
 8004abc:	b90b      	cbnz	r3, 8004ac2 <_fflush_r+0x1a>
 8004abe:	f000 f887 	bl	8004bd0 <__sinit>
 8004ac2:	4b14      	ldr	r3, [pc, #80]	; (8004b14 <_fflush_r+0x6c>)
 8004ac4:	429c      	cmp	r4, r3
 8004ac6:	d11b      	bne.n	8004b00 <_fflush_r+0x58>
 8004ac8:	686c      	ldr	r4, [r5, #4]
 8004aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0ef      	beq.n	8004ab2 <_fflush_r+0xa>
 8004ad2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ad4:	07d0      	lsls	r0, r2, #31
 8004ad6:	d404      	bmi.n	8004ae2 <_fflush_r+0x3a>
 8004ad8:	0599      	lsls	r1, r3, #22
 8004ada:	d402      	bmi.n	8004ae2 <_fflush_r+0x3a>
 8004adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ade:	f000 f915 	bl	8004d0c <__retarget_lock_acquire_recursive>
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	f7ff ff59 	bl	800499c <__sflush_r>
 8004aea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004aec:	07da      	lsls	r2, r3, #31
 8004aee:	4605      	mov	r5, r0
 8004af0:	d4e0      	bmi.n	8004ab4 <_fflush_r+0xc>
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	059b      	lsls	r3, r3, #22
 8004af6:	d4dd      	bmi.n	8004ab4 <_fflush_r+0xc>
 8004af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004afa:	f000 f908 	bl	8004d0e <__retarget_lock_release_recursive>
 8004afe:	e7d9      	b.n	8004ab4 <_fflush_r+0xc>
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <_fflush_r+0x70>)
 8004b02:	429c      	cmp	r4, r3
 8004b04:	d101      	bne.n	8004b0a <_fflush_r+0x62>
 8004b06:	68ac      	ldr	r4, [r5, #8]
 8004b08:	e7df      	b.n	8004aca <_fflush_r+0x22>
 8004b0a:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <_fflush_r+0x74>)
 8004b0c:	429c      	cmp	r4, r3
 8004b0e:	bf08      	it	eq
 8004b10:	68ec      	ldreq	r4, [r5, #12]
 8004b12:	e7da      	b.n	8004aca <_fflush_r+0x22>
 8004b14:	08005878 	.word	0x08005878
 8004b18:	08005898 	.word	0x08005898
 8004b1c:	08005858 	.word	0x08005858

08004b20 <std>:
 8004b20:	2300      	movs	r3, #0
 8004b22:	b510      	push	{r4, lr}
 8004b24:	4604      	mov	r4, r0
 8004b26:	e9c0 3300 	strd	r3, r3, [r0]
 8004b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b2e:	6083      	str	r3, [r0, #8]
 8004b30:	8181      	strh	r1, [r0, #12]
 8004b32:	6643      	str	r3, [r0, #100]	; 0x64
 8004b34:	81c2      	strh	r2, [r0, #14]
 8004b36:	6183      	str	r3, [r0, #24]
 8004b38:	4619      	mov	r1, r3
 8004b3a:	2208      	movs	r2, #8
 8004b3c:	305c      	adds	r0, #92	; 0x5c
 8004b3e:	f7ff fdcf 	bl	80046e0 <memset>
 8004b42:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <std+0x38>)
 8004b44:	6263      	str	r3, [r4, #36]	; 0x24
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <std+0x3c>)
 8004b48:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <std+0x40>)
 8004b4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <std+0x44>)
 8004b50:	6224      	str	r4, [r4, #32]
 8004b52:	6323      	str	r3, [r4, #48]	; 0x30
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	bf00      	nop
 8004b58:	08005599 	.word	0x08005599
 8004b5c:	080055bb 	.word	0x080055bb
 8004b60:	080055f3 	.word	0x080055f3
 8004b64:	08005617 	.word	0x08005617

08004b68 <_cleanup_r>:
 8004b68:	4901      	ldr	r1, [pc, #4]	; (8004b70 <_cleanup_r+0x8>)
 8004b6a:	f000 b8af 	b.w	8004ccc <_fwalk_reent>
 8004b6e:	bf00      	nop
 8004b70:	08004aa9 	.word	0x08004aa9

08004b74 <__sfmoreglue>:
 8004b74:	b570      	push	{r4, r5, r6, lr}
 8004b76:	2268      	movs	r2, #104	; 0x68
 8004b78:	1e4d      	subs	r5, r1, #1
 8004b7a:	4355      	muls	r5, r2
 8004b7c:	460e      	mov	r6, r1
 8004b7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b82:	f000 f997 	bl	8004eb4 <_malloc_r>
 8004b86:	4604      	mov	r4, r0
 8004b88:	b140      	cbz	r0, 8004b9c <__sfmoreglue+0x28>
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	e9c0 1600 	strd	r1, r6, [r0]
 8004b90:	300c      	adds	r0, #12
 8004b92:	60a0      	str	r0, [r4, #8]
 8004b94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b98:	f7ff fda2 	bl	80046e0 <memset>
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}

08004ba0 <__sfp_lock_acquire>:
 8004ba0:	4801      	ldr	r0, [pc, #4]	; (8004ba8 <__sfp_lock_acquire+0x8>)
 8004ba2:	f000 b8b3 	b.w	8004d0c <__retarget_lock_acquire_recursive>
 8004ba6:	bf00      	nop
 8004ba8:	20000289 	.word	0x20000289

08004bac <__sfp_lock_release>:
 8004bac:	4801      	ldr	r0, [pc, #4]	; (8004bb4 <__sfp_lock_release+0x8>)
 8004bae:	f000 b8ae 	b.w	8004d0e <__retarget_lock_release_recursive>
 8004bb2:	bf00      	nop
 8004bb4:	20000289 	.word	0x20000289

08004bb8 <__sinit_lock_acquire>:
 8004bb8:	4801      	ldr	r0, [pc, #4]	; (8004bc0 <__sinit_lock_acquire+0x8>)
 8004bba:	f000 b8a7 	b.w	8004d0c <__retarget_lock_acquire_recursive>
 8004bbe:	bf00      	nop
 8004bc0:	2000028a 	.word	0x2000028a

08004bc4 <__sinit_lock_release>:
 8004bc4:	4801      	ldr	r0, [pc, #4]	; (8004bcc <__sinit_lock_release+0x8>)
 8004bc6:	f000 b8a2 	b.w	8004d0e <__retarget_lock_release_recursive>
 8004bca:	bf00      	nop
 8004bcc:	2000028a 	.word	0x2000028a

08004bd0 <__sinit>:
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	f7ff fff0 	bl	8004bb8 <__sinit_lock_acquire>
 8004bd8:	69a3      	ldr	r3, [r4, #24]
 8004bda:	b11b      	cbz	r3, 8004be4 <__sinit+0x14>
 8004bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004be0:	f7ff bff0 	b.w	8004bc4 <__sinit_lock_release>
 8004be4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004be8:	6523      	str	r3, [r4, #80]	; 0x50
 8004bea:	4b13      	ldr	r3, [pc, #76]	; (8004c38 <__sinit+0x68>)
 8004bec:	4a13      	ldr	r2, [pc, #76]	; (8004c3c <__sinit+0x6c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004bf2:	42a3      	cmp	r3, r4
 8004bf4:	bf04      	itt	eq
 8004bf6:	2301      	moveq	r3, #1
 8004bf8:	61a3      	streq	r3, [r4, #24]
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f000 f820 	bl	8004c40 <__sfp>
 8004c00:	6060      	str	r0, [r4, #4]
 8004c02:	4620      	mov	r0, r4
 8004c04:	f000 f81c 	bl	8004c40 <__sfp>
 8004c08:	60a0      	str	r0, [r4, #8]
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f000 f818 	bl	8004c40 <__sfp>
 8004c10:	2200      	movs	r2, #0
 8004c12:	60e0      	str	r0, [r4, #12]
 8004c14:	2104      	movs	r1, #4
 8004c16:	6860      	ldr	r0, [r4, #4]
 8004c18:	f7ff ff82 	bl	8004b20 <std>
 8004c1c:	68a0      	ldr	r0, [r4, #8]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	2109      	movs	r1, #9
 8004c22:	f7ff ff7d 	bl	8004b20 <std>
 8004c26:	68e0      	ldr	r0, [r4, #12]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	2112      	movs	r1, #18
 8004c2c:	f7ff ff78 	bl	8004b20 <std>
 8004c30:	2301      	movs	r3, #1
 8004c32:	61a3      	str	r3, [r4, #24]
 8004c34:	e7d2      	b.n	8004bdc <__sinit+0xc>
 8004c36:	bf00      	nop
 8004c38:	08005854 	.word	0x08005854
 8004c3c:	08004b69 	.word	0x08004b69

08004c40 <__sfp>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	4607      	mov	r7, r0
 8004c44:	f7ff ffac 	bl	8004ba0 <__sfp_lock_acquire>
 8004c48:	4b1e      	ldr	r3, [pc, #120]	; (8004cc4 <__sfp+0x84>)
 8004c4a:	681e      	ldr	r6, [r3, #0]
 8004c4c:	69b3      	ldr	r3, [r6, #24]
 8004c4e:	b913      	cbnz	r3, 8004c56 <__sfp+0x16>
 8004c50:	4630      	mov	r0, r6
 8004c52:	f7ff ffbd 	bl	8004bd0 <__sinit>
 8004c56:	3648      	adds	r6, #72	; 0x48
 8004c58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	d503      	bpl.n	8004c68 <__sfp+0x28>
 8004c60:	6833      	ldr	r3, [r6, #0]
 8004c62:	b30b      	cbz	r3, 8004ca8 <__sfp+0x68>
 8004c64:	6836      	ldr	r6, [r6, #0]
 8004c66:	e7f7      	b.n	8004c58 <__sfp+0x18>
 8004c68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c6c:	b9d5      	cbnz	r5, 8004ca4 <__sfp+0x64>
 8004c6e:	4b16      	ldr	r3, [pc, #88]	; (8004cc8 <__sfp+0x88>)
 8004c70:	60e3      	str	r3, [r4, #12]
 8004c72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c76:	6665      	str	r5, [r4, #100]	; 0x64
 8004c78:	f000 f847 	bl	8004d0a <__retarget_lock_init_recursive>
 8004c7c:	f7ff ff96 	bl	8004bac <__sfp_lock_release>
 8004c80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c88:	6025      	str	r5, [r4, #0]
 8004c8a:	61a5      	str	r5, [r4, #24]
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	4629      	mov	r1, r5
 8004c90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c94:	f7ff fd24 	bl	80046e0 <memset>
 8004c98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ca4:	3468      	adds	r4, #104	; 0x68
 8004ca6:	e7d9      	b.n	8004c5c <__sfp+0x1c>
 8004ca8:	2104      	movs	r1, #4
 8004caa:	4638      	mov	r0, r7
 8004cac:	f7ff ff62 	bl	8004b74 <__sfmoreglue>
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	6030      	str	r0, [r6, #0]
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d1d5      	bne.n	8004c64 <__sfp+0x24>
 8004cb8:	f7ff ff78 	bl	8004bac <__sfp_lock_release>
 8004cbc:	230c      	movs	r3, #12
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	e7ee      	b.n	8004ca0 <__sfp+0x60>
 8004cc2:	bf00      	nop
 8004cc4:	08005854 	.word	0x08005854
 8004cc8:	ffff0001 	.word	0xffff0001

08004ccc <_fwalk_reent>:
 8004ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cd0:	4606      	mov	r6, r0
 8004cd2:	4688      	mov	r8, r1
 8004cd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004cd8:	2700      	movs	r7, #0
 8004cda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cde:	f1b9 0901 	subs.w	r9, r9, #1
 8004ce2:	d505      	bpl.n	8004cf0 <_fwalk_reent+0x24>
 8004ce4:	6824      	ldr	r4, [r4, #0]
 8004ce6:	2c00      	cmp	r4, #0
 8004ce8:	d1f7      	bne.n	8004cda <_fwalk_reent+0xe>
 8004cea:	4638      	mov	r0, r7
 8004cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cf0:	89ab      	ldrh	r3, [r5, #12]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d907      	bls.n	8004d06 <_fwalk_reent+0x3a>
 8004cf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	d003      	beq.n	8004d06 <_fwalk_reent+0x3a>
 8004cfe:	4629      	mov	r1, r5
 8004d00:	4630      	mov	r0, r6
 8004d02:	47c0      	blx	r8
 8004d04:	4307      	orrs	r7, r0
 8004d06:	3568      	adds	r5, #104	; 0x68
 8004d08:	e7e9      	b.n	8004cde <_fwalk_reent+0x12>

08004d0a <__retarget_lock_init_recursive>:
 8004d0a:	4770      	bx	lr

08004d0c <__retarget_lock_acquire_recursive>:
 8004d0c:	4770      	bx	lr

08004d0e <__retarget_lock_release_recursive>:
 8004d0e:	4770      	bx	lr

08004d10 <__swhatbuf_r>:
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	460e      	mov	r6, r1
 8004d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d18:	2900      	cmp	r1, #0
 8004d1a:	b096      	sub	sp, #88	; 0x58
 8004d1c:	4614      	mov	r4, r2
 8004d1e:	461d      	mov	r5, r3
 8004d20:	da08      	bge.n	8004d34 <__swhatbuf_r+0x24>
 8004d22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	602a      	str	r2, [r5, #0]
 8004d2a:	061a      	lsls	r2, r3, #24
 8004d2c:	d410      	bmi.n	8004d50 <__swhatbuf_r+0x40>
 8004d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d32:	e00e      	b.n	8004d52 <__swhatbuf_r+0x42>
 8004d34:	466a      	mov	r2, sp
 8004d36:	f000 fc95 	bl	8005664 <_fstat_r>
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	dbf1      	blt.n	8004d22 <__swhatbuf_r+0x12>
 8004d3e:	9a01      	ldr	r2, [sp, #4]
 8004d40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d48:	425a      	negs	r2, r3
 8004d4a:	415a      	adcs	r2, r3
 8004d4c:	602a      	str	r2, [r5, #0]
 8004d4e:	e7ee      	b.n	8004d2e <__swhatbuf_r+0x1e>
 8004d50:	2340      	movs	r3, #64	; 0x40
 8004d52:	2000      	movs	r0, #0
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	b016      	add	sp, #88	; 0x58
 8004d58:	bd70      	pop	{r4, r5, r6, pc}
	...

08004d5c <__smakebuf_r>:
 8004d5c:	898b      	ldrh	r3, [r1, #12]
 8004d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d60:	079d      	lsls	r5, r3, #30
 8004d62:	4606      	mov	r6, r0
 8004d64:	460c      	mov	r4, r1
 8004d66:	d507      	bpl.n	8004d78 <__smakebuf_r+0x1c>
 8004d68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	6123      	str	r3, [r4, #16]
 8004d70:	2301      	movs	r3, #1
 8004d72:	6163      	str	r3, [r4, #20]
 8004d74:	b002      	add	sp, #8
 8004d76:	bd70      	pop	{r4, r5, r6, pc}
 8004d78:	ab01      	add	r3, sp, #4
 8004d7a:	466a      	mov	r2, sp
 8004d7c:	f7ff ffc8 	bl	8004d10 <__swhatbuf_r>
 8004d80:	9900      	ldr	r1, [sp, #0]
 8004d82:	4605      	mov	r5, r0
 8004d84:	4630      	mov	r0, r6
 8004d86:	f000 f895 	bl	8004eb4 <_malloc_r>
 8004d8a:	b948      	cbnz	r0, 8004da0 <__smakebuf_r+0x44>
 8004d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d90:	059a      	lsls	r2, r3, #22
 8004d92:	d4ef      	bmi.n	8004d74 <__smakebuf_r+0x18>
 8004d94:	f023 0303 	bic.w	r3, r3, #3
 8004d98:	f043 0302 	orr.w	r3, r3, #2
 8004d9c:	81a3      	strh	r3, [r4, #12]
 8004d9e:	e7e3      	b.n	8004d68 <__smakebuf_r+0xc>
 8004da0:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <__smakebuf_r+0x7c>)
 8004da2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	6020      	str	r0, [r4, #0]
 8004da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dac:	81a3      	strh	r3, [r4, #12]
 8004dae:	9b00      	ldr	r3, [sp, #0]
 8004db0:	6163      	str	r3, [r4, #20]
 8004db2:	9b01      	ldr	r3, [sp, #4]
 8004db4:	6120      	str	r0, [r4, #16]
 8004db6:	b15b      	cbz	r3, 8004dd0 <__smakebuf_r+0x74>
 8004db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	f000 fc63 	bl	8005688 <_isatty_r>
 8004dc2:	b128      	cbz	r0, 8004dd0 <__smakebuf_r+0x74>
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	f023 0303 	bic.w	r3, r3, #3
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	81a3      	strh	r3, [r4, #12]
 8004dd0:	89a0      	ldrh	r0, [r4, #12]
 8004dd2:	4305      	orrs	r5, r0
 8004dd4:	81a5      	strh	r5, [r4, #12]
 8004dd6:	e7cd      	b.n	8004d74 <__smakebuf_r+0x18>
 8004dd8:	08004b69 	.word	0x08004b69

08004ddc <_free_r>:
 8004ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dde:	2900      	cmp	r1, #0
 8004de0:	d044      	beq.n	8004e6c <_free_r+0x90>
 8004de2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de6:	9001      	str	r0, [sp, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f1a1 0404 	sub.w	r4, r1, #4
 8004dee:	bfb8      	it	lt
 8004df0:	18e4      	addlt	r4, r4, r3
 8004df2:	f000 fc6b 	bl	80056cc <__malloc_lock>
 8004df6:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <_free_r+0x94>)
 8004df8:	9801      	ldr	r0, [sp, #4]
 8004dfa:	6813      	ldr	r3, [r2, #0]
 8004dfc:	b933      	cbnz	r3, 8004e0c <_free_r+0x30>
 8004dfe:	6063      	str	r3, [r4, #4]
 8004e00:	6014      	str	r4, [r2, #0]
 8004e02:	b003      	add	sp, #12
 8004e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e08:	f000 bc66 	b.w	80056d8 <__malloc_unlock>
 8004e0c:	42a3      	cmp	r3, r4
 8004e0e:	d908      	bls.n	8004e22 <_free_r+0x46>
 8004e10:	6825      	ldr	r5, [r4, #0]
 8004e12:	1961      	adds	r1, r4, r5
 8004e14:	428b      	cmp	r3, r1
 8004e16:	bf01      	itttt	eq
 8004e18:	6819      	ldreq	r1, [r3, #0]
 8004e1a:	685b      	ldreq	r3, [r3, #4]
 8004e1c:	1949      	addeq	r1, r1, r5
 8004e1e:	6021      	streq	r1, [r4, #0]
 8004e20:	e7ed      	b.n	8004dfe <_free_r+0x22>
 8004e22:	461a      	mov	r2, r3
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	b10b      	cbz	r3, 8004e2c <_free_r+0x50>
 8004e28:	42a3      	cmp	r3, r4
 8004e2a:	d9fa      	bls.n	8004e22 <_free_r+0x46>
 8004e2c:	6811      	ldr	r1, [r2, #0]
 8004e2e:	1855      	adds	r5, r2, r1
 8004e30:	42a5      	cmp	r5, r4
 8004e32:	d10b      	bne.n	8004e4c <_free_r+0x70>
 8004e34:	6824      	ldr	r4, [r4, #0]
 8004e36:	4421      	add	r1, r4
 8004e38:	1854      	adds	r4, r2, r1
 8004e3a:	42a3      	cmp	r3, r4
 8004e3c:	6011      	str	r1, [r2, #0]
 8004e3e:	d1e0      	bne.n	8004e02 <_free_r+0x26>
 8004e40:	681c      	ldr	r4, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	6053      	str	r3, [r2, #4]
 8004e46:	4421      	add	r1, r4
 8004e48:	6011      	str	r1, [r2, #0]
 8004e4a:	e7da      	b.n	8004e02 <_free_r+0x26>
 8004e4c:	d902      	bls.n	8004e54 <_free_r+0x78>
 8004e4e:	230c      	movs	r3, #12
 8004e50:	6003      	str	r3, [r0, #0]
 8004e52:	e7d6      	b.n	8004e02 <_free_r+0x26>
 8004e54:	6825      	ldr	r5, [r4, #0]
 8004e56:	1961      	adds	r1, r4, r5
 8004e58:	428b      	cmp	r3, r1
 8004e5a:	bf04      	itt	eq
 8004e5c:	6819      	ldreq	r1, [r3, #0]
 8004e5e:	685b      	ldreq	r3, [r3, #4]
 8004e60:	6063      	str	r3, [r4, #4]
 8004e62:	bf04      	itt	eq
 8004e64:	1949      	addeq	r1, r1, r5
 8004e66:	6021      	streq	r1, [r4, #0]
 8004e68:	6054      	str	r4, [r2, #4]
 8004e6a:	e7ca      	b.n	8004e02 <_free_r+0x26>
 8004e6c:	b003      	add	sp, #12
 8004e6e:	bd30      	pop	{r4, r5, pc}
 8004e70:	2000028c 	.word	0x2000028c

08004e74 <sbrk_aligned>:
 8004e74:	b570      	push	{r4, r5, r6, lr}
 8004e76:	4e0e      	ldr	r6, [pc, #56]	; (8004eb0 <sbrk_aligned+0x3c>)
 8004e78:	460c      	mov	r4, r1
 8004e7a:	6831      	ldr	r1, [r6, #0]
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	b911      	cbnz	r1, 8004e86 <sbrk_aligned+0x12>
 8004e80:	f000 fb7a 	bl	8005578 <_sbrk_r>
 8004e84:	6030      	str	r0, [r6, #0]
 8004e86:	4621      	mov	r1, r4
 8004e88:	4628      	mov	r0, r5
 8004e8a:	f000 fb75 	bl	8005578 <_sbrk_r>
 8004e8e:	1c43      	adds	r3, r0, #1
 8004e90:	d00a      	beq.n	8004ea8 <sbrk_aligned+0x34>
 8004e92:	1cc4      	adds	r4, r0, #3
 8004e94:	f024 0403 	bic.w	r4, r4, #3
 8004e98:	42a0      	cmp	r0, r4
 8004e9a:	d007      	beq.n	8004eac <sbrk_aligned+0x38>
 8004e9c:	1a21      	subs	r1, r4, r0
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f000 fb6a 	bl	8005578 <_sbrk_r>
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	d101      	bne.n	8004eac <sbrk_aligned+0x38>
 8004ea8:	f04f 34ff 	mov.w	r4, #4294967295
 8004eac:	4620      	mov	r0, r4
 8004eae:	bd70      	pop	{r4, r5, r6, pc}
 8004eb0:	20000290 	.word	0x20000290

08004eb4 <_malloc_r>:
 8004eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb8:	1ccd      	adds	r5, r1, #3
 8004eba:	f025 0503 	bic.w	r5, r5, #3
 8004ebe:	3508      	adds	r5, #8
 8004ec0:	2d0c      	cmp	r5, #12
 8004ec2:	bf38      	it	cc
 8004ec4:	250c      	movcc	r5, #12
 8004ec6:	2d00      	cmp	r5, #0
 8004ec8:	4607      	mov	r7, r0
 8004eca:	db01      	blt.n	8004ed0 <_malloc_r+0x1c>
 8004ecc:	42a9      	cmp	r1, r5
 8004ece:	d905      	bls.n	8004edc <_malloc_r+0x28>
 8004ed0:	230c      	movs	r3, #12
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	2600      	movs	r6, #0
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004edc:	4e2e      	ldr	r6, [pc, #184]	; (8004f98 <_malloc_r+0xe4>)
 8004ede:	f000 fbf5 	bl	80056cc <__malloc_lock>
 8004ee2:	6833      	ldr	r3, [r6, #0]
 8004ee4:	461c      	mov	r4, r3
 8004ee6:	bb34      	cbnz	r4, 8004f36 <_malloc_r+0x82>
 8004ee8:	4629      	mov	r1, r5
 8004eea:	4638      	mov	r0, r7
 8004eec:	f7ff ffc2 	bl	8004e74 <sbrk_aligned>
 8004ef0:	1c43      	adds	r3, r0, #1
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	d14d      	bne.n	8004f92 <_malloc_r+0xde>
 8004ef6:	6834      	ldr	r4, [r6, #0]
 8004ef8:	4626      	mov	r6, r4
 8004efa:	2e00      	cmp	r6, #0
 8004efc:	d140      	bne.n	8004f80 <_malloc_r+0xcc>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	4631      	mov	r1, r6
 8004f02:	4638      	mov	r0, r7
 8004f04:	eb04 0803 	add.w	r8, r4, r3
 8004f08:	f000 fb36 	bl	8005578 <_sbrk_r>
 8004f0c:	4580      	cmp	r8, r0
 8004f0e:	d13a      	bne.n	8004f86 <_malloc_r+0xd2>
 8004f10:	6821      	ldr	r1, [r4, #0]
 8004f12:	3503      	adds	r5, #3
 8004f14:	1a6d      	subs	r5, r5, r1
 8004f16:	f025 0503 	bic.w	r5, r5, #3
 8004f1a:	3508      	adds	r5, #8
 8004f1c:	2d0c      	cmp	r5, #12
 8004f1e:	bf38      	it	cc
 8004f20:	250c      	movcc	r5, #12
 8004f22:	4629      	mov	r1, r5
 8004f24:	4638      	mov	r0, r7
 8004f26:	f7ff ffa5 	bl	8004e74 <sbrk_aligned>
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	d02b      	beq.n	8004f86 <_malloc_r+0xd2>
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	442b      	add	r3, r5
 8004f32:	6023      	str	r3, [r4, #0]
 8004f34:	e00e      	b.n	8004f54 <_malloc_r+0xa0>
 8004f36:	6822      	ldr	r2, [r4, #0]
 8004f38:	1b52      	subs	r2, r2, r5
 8004f3a:	d41e      	bmi.n	8004f7a <_malloc_r+0xc6>
 8004f3c:	2a0b      	cmp	r2, #11
 8004f3e:	d916      	bls.n	8004f6e <_malloc_r+0xba>
 8004f40:	1961      	adds	r1, r4, r5
 8004f42:	42a3      	cmp	r3, r4
 8004f44:	6025      	str	r5, [r4, #0]
 8004f46:	bf18      	it	ne
 8004f48:	6059      	strne	r1, [r3, #4]
 8004f4a:	6863      	ldr	r3, [r4, #4]
 8004f4c:	bf08      	it	eq
 8004f4e:	6031      	streq	r1, [r6, #0]
 8004f50:	5162      	str	r2, [r4, r5]
 8004f52:	604b      	str	r3, [r1, #4]
 8004f54:	4638      	mov	r0, r7
 8004f56:	f104 060b 	add.w	r6, r4, #11
 8004f5a:	f000 fbbd 	bl	80056d8 <__malloc_unlock>
 8004f5e:	f026 0607 	bic.w	r6, r6, #7
 8004f62:	1d23      	adds	r3, r4, #4
 8004f64:	1af2      	subs	r2, r6, r3
 8004f66:	d0b6      	beq.n	8004ed6 <_malloc_r+0x22>
 8004f68:	1b9b      	subs	r3, r3, r6
 8004f6a:	50a3      	str	r3, [r4, r2]
 8004f6c:	e7b3      	b.n	8004ed6 <_malloc_r+0x22>
 8004f6e:	6862      	ldr	r2, [r4, #4]
 8004f70:	42a3      	cmp	r3, r4
 8004f72:	bf0c      	ite	eq
 8004f74:	6032      	streq	r2, [r6, #0]
 8004f76:	605a      	strne	r2, [r3, #4]
 8004f78:	e7ec      	b.n	8004f54 <_malloc_r+0xa0>
 8004f7a:	4623      	mov	r3, r4
 8004f7c:	6864      	ldr	r4, [r4, #4]
 8004f7e:	e7b2      	b.n	8004ee6 <_malloc_r+0x32>
 8004f80:	4634      	mov	r4, r6
 8004f82:	6876      	ldr	r6, [r6, #4]
 8004f84:	e7b9      	b.n	8004efa <_malloc_r+0x46>
 8004f86:	230c      	movs	r3, #12
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	4638      	mov	r0, r7
 8004f8c:	f000 fba4 	bl	80056d8 <__malloc_unlock>
 8004f90:	e7a1      	b.n	8004ed6 <_malloc_r+0x22>
 8004f92:	6025      	str	r5, [r4, #0]
 8004f94:	e7de      	b.n	8004f54 <_malloc_r+0xa0>
 8004f96:	bf00      	nop
 8004f98:	2000028c 	.word	0x2000028c

08004f9c <__sfputc_r>:
 8004f9c:	6893      	ldr	r3, [r2, #8]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	b410      	push	{r4}
 8004fa4:	6093      	str	r3, [r2, #8]
 8004fa6:	da08      	bge.n	8004fba <__sfputc_r+0x1e>
 8004fa8:	6994      	ldr	r4, [r2, #24]
 8004faa:	42a3      	cmp	r3, r4
 8004fac:	db01      	blt.n	8004fb2 <__sfputc_r+0x16>
 8004fae:	290a      	cmp	r1, #10
 8004fb0:	d103      	bne.n	8004fba <__sfputc_r+0x1e>
 8004fb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fb6:	f7ff bc31 	b.w	800481c <__swbuf_r>
 8004fba:	6813      	ldr	r3, [r2, #0]
 8004fbc:	1c58      	adds	r0, r3, #1
 8004fbe:	6010      	str	r0, [r2, #0]
 8004fc0:	7019      	strb	r1, [r3, #0]
 8004fc2:	4608      	mov	r0, r1
 8004fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <__sfputs_r>:
 8004fca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fcc:	4606      	mov	r6, r0
 8004fce:	460f      	mov	r7, r1
 8004fd0:	4614      	mov	r4, r2
 8004fd2:	18d5      	adds	r5, r2, r3
 8004fd4:	42ac      	cmp	r4, r5
 8004fd6:	d101      	bne.n	8004fdc <__sfputs_r+0x12>
 8004fd8:	2000      	movs	r0, #0
 8004fda:	e007      	b.n	8004fec <__sfputs_r+0x22>
 8004fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fe0:	463a      	mov	r2, r7
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	f7ff ffda 	bl	8004f9c <__sfputc_r>
 8004fe8:	1c43      	adds	r3, r0, #1
 8004fea:	d1f3      	bne.n	8004fd4 <__sfputs_r+0xa>
 8004fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ff0 <_vfiprintf_r>:
 8004ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff4:	460d      	mov	r5, r1
 8004ff6:	b09d      	sub	sp, #116	; 0x74
 8004ff8:	4614      	mov	r4, r2
 8004ffa:	4698      	mov	r8, r3
 8004ffc:	4606      	mov	r6, r0
 8004ffe:	b118      	cbz	r0, 8005008 <_vfiprintf_r+0x18>
 8005000:	6983      	ldr	r3, [r0, #24]
 8005002:	b90b      	cbnz	r3, 8005008 <_vfiprintf_r+0x18>
 8005004:	f7ff fde4 	bl	8004bd0 <__sinit>
 8005008:	4b89      	ldr	r3, [pc, #548]	; (8005230 <_vfiprintf_r+0x240>)
 800500a:	429d      	cmp	r5, r3
 800500c:	d11b      	bne.n	8005046 <_vfiprintf_r+0x56>
 800500e:	6875      	ldr	r5, [r6, #4]
 8005010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005012:	07d9      	lsls	r1, r3, #31
 8005014:	d405      	bmi.n	8005022 <_vfiprintf_r+0x32>
 8005016:	89ab      	ldrh	r3, [r5, #12]
 8005018:	059a      	lsls	r2, r3, #22
 800501a:	d402      	bmi.n	8005022 <_vfiprintf_r+0x32>
 800501c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800501e:	f7ff fe75 	bl	8004d0c <__retarget_lock_acquire_recursive>
 8005022:	89ab      	ldrh	r3, [r5, #12]
 8005024:	071b      	lsls	r3, r3, #28
 8005026:	d501      	bpl.n	800502c <_vfiprintf_r+0x3c>
 8005028:	692b      	ldr	r3, [r5, #16]
 800502a:	b9eb      	cbnz	r3, 8005068 <_vfiprintf_r+0x78>
 800502c:	4629      	mov	r1, r5
 800502e:	4630      	mov	r0, r6
 8005030:	f7ff fc46 	bl	80048c0 <__swsetup_r>
 8005034:	b1c0      	cbz	r0, 8005068 <_vfiprintf_r+0x78>
 8005036:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005038:	07dc      	lsls	r4, r3, #31
 800503a:	d50e      	bpl.n	800505a <_vfiprintf_r+0x6a>
 800503c:	f04f 30ff 	mov.w	r0, #4294967295
 8005040:	b01d      	add	sp, #116	; 0x74
 8005042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005046:	4b7b      	ldr	r3, [pc, #492]	; (8005234 <_vfiprintf_r+0x244>)
 8005048:	429d      	cmp	r5, r3
 800504a:	d101      	bne.n	8005050 <_vfiprintf_r+0x60>
 800504c:	68b5      	ldr	r5, [r6, #8]
 800504e:	e7df      	b.n	8005010 <_vfiprintf_r+0x20>
 8005050:	4b79      	ldr	r3, [pc, #484]	; (8005238 <_vfiprintf_r+0x248>)
 8005052:	429d      	cmp	r5, r3
 8005054:	bf08      	it	eq
 8005056:	68f5      	ldreq	r5, [r6, #12]
 8005058:	e7da      	b.n	8005010 <_vfiprintf_r+0x20>
 800505a:	89ab      	ldrh	r3, [r5, #12]
 800505c:	0598      	lsls	r0, r3, #22
 800505e:	d4ed      	bmi.n	800503c <_vfiprintf_r+0x4c>
 8005060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005062:	f7ff fe54 	bl	8004d0e <__retarget_lock_release_recursive>
 8005066:	e7e9      	b.n	800503c <_vfiprintf_r+0x4c>
 8005068:	2300      	movs	r3, #0
 800506a:	9309      	str	r3, [sp, #36]	; 0x24
 800506c:	2320      	movs	r3, #32
 800506e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005072:	f8cd 800c 	str.w	r8, [sp, #12]
 8005076:	2330      	movs	r3, #48	; 0x30
 8005078:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800523c <_vfiprintf_r+0x24c>
 800507c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005080:	f04f 0901 	mov.w	r9, #1
 8005084:	4623      	mov	r3, r4
 8005086:	469a      	mov	sl, r3
 8005088:	f813 2b01 	ldrb.w	r2, [r3], #1
 800508c:	b10a      	cbz	r2, 8005092 <_vfiprintf_r+0xa2>
 800508e:	2a25      	cmp	r2, #37	; 0x25
 8005090:	d1f9      	bne.n	8005086 <_vfiprintf_r+0x96>
 8005092:	ebba 0b04 	subs.w	fp, sl, r4
 8005096:	d00b      	beq.n	80050b0 <_vfiprintf_r+0xc0>
 8005098:	465b      	mov	r3, fp
 800509a:	4622      	mov	r2, r4
 800509c:	4629      	mov	r1, r5
 800509e:	4630      	mov	r0, r6
 80050a0:	f7ff ff93 	bl	8004fca <__sfputs_r>
 80050a4:	3001      	adds	r0, #1
 80050a6:	f000 80aa 	beq.w	80051fe <_vfiprintf_r+0x20e>
 80050aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050ac:	445a      	add	r2, fp
 80050ae:	9209      	str	r2, [sp, #36]	; 0x24
 80050b0:	f89a 3000 	ldrb.w	r3, [sl]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 80a2 	beq.w	80051fe <_vfiprintf_r+0x20e>
 80050ba:	2300      	movs	r3, #0
 80050bc:	f04f 32ff 	mov.w	r2, #4294967295
 80050c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050c4:	f10a 0a01 	add.w	sl, sl, #1
 80050c8:	9304      	str	r3, [sp, #16]
 80050ca:	9307      	str	r3, [sp, #28]
 80050cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050d0:	931a      	str	r3, [sp, #104]	; 0x68
 80050d2:	4654      	mov	r4, sl
 80050d4:	2205      	movs	r2, #5
 80050d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050da:	4858      	ldr	r0, [pc, #352]	; (800523c <_vfiprintf_r+0x24c>)
 80050dc:	f7fb f8a8 	bl	8000230 <memchr>
 80050e0:	9a04      	ldr	r2, [sp, #16]
 80050e2:	b9d8      	cbnz	r0, 800511c <_vfiprintf_r+0x12c>
 80050e4:	06d1      	lsls	r1, r2, #27
 80050e6:	bf44      	itt	mi
 80050e8:	2320      	movmi	r3, #32
 80050ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050ee:	0713      	lsls	r3, r2, #28
 80050f0:	bf44      	itt	mi
 80050f2:	232b      	movmi	r3, #43	; 0x2b
 80050f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050f8:	f89a 3000 	ldrb.w	r3, [sl]
 80050fc:	2b2a      	cmp	r3, #42	; 0x2a
 80050fe:	d015      	beq.n	800512c <_vfiprintf_r+0x13c>
 8005100:	9a07      	ldr	r2, [sp, #28]
 8005102:	4654      	mov	r4, sl
 8005104:	2000      	movs	r0, #0
 8005106:	f04f 0c0a 	mov.w	ip, #10
 800510a:	4621      	mov	r1, r4
 800510c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005110:	3b30      	subs	r3, #48	; 0x30
 8005112:	2b09      	cmp	r3, #9
 8005114:	d94e      	bls.n	80051b4 <_vfiprintf_r+0x1c4>
 8005116:	b1b0      	cbz	r0, 8005146 <_vfiprintf_r+0x156>
 8005118:	9207      	str	r2, [sp, #28]
 800511a:	e014      	b.n	8005146 <_vfiprintf_r+0x156>
 800511c:	eba0 0308 	sub.w	r3, r0, r8
 8005120:	fa09 f303 	lsl.w	r3, r9, r3
 8005124:	4313      	orrs	r3, r2
 8005126:	9304      	str	r3, [sp, #16]
 8005128:	46a2      	mov	sl, r4
 800512a:	e7d2      	b.n	80050d2 <_vfiprintf_r+0xe2>
 800512c:	9b03      	ldr	r3, [sp, #12]
 800512e:	1d19      	adds	r1, r3, #4
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	9103      	str	r1, [sp, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	bfbb      	ittet	lt
 8005138:	425b      	neglt	r3, r3
 800513a:	f042 0202 	orrlt.w	r2, r2, #2
 800513e:	9307      	strge	r3, [sp, #28]
 8005140:	9307      	strlt	r3, [sp, #28]
 8005142:	bfb8      	it	lt
 8005144:	9204      	strlt	r2, [sp, #16]
 8005146:	7823      	ldrb	r3, [r4, #0]
 8005148:	2b2e      	cmp	r3, #46	; 0x2e
 800514a:	d10c      	bne.n	8005166 <_vfiprintf_r+0x176>
 800514c:	7863      	ldrb	r3, [r4, #1]
 800514e:	2b2a      	cmp	r3, #42	; 0x2a
 8005150:	d135      	bne.n	80051be <_vfiprintf_r+0x1ce>
 8005152:	9b03      	ldr	r3, [sp, #12]
 8005154:	1d1a      	adds	r2, r3, #4
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	9203      	str	r2, [sp, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	bfb8      	it	lt
 800515e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005162:	3402      	adds	r4, #2
 8005164:	9305      	str	r3, [sp, #20]
 8005166:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800524c <_vfiprintf_r+0x25c>
 800516a:	7821      	ldrb	r1, [r4, #0]
 800516c:	2203      	movs	r2, #3
 800516e:	4650      	mov	r0, sl
 8005170:	f7fb f85e 	bl	8000230 <memchr>
 8005174:	b140      	cbz	r0, 8005188 <_vfiprintf_r+0x198>
 8005176:	2340      	movs	r3, #64	; 0x40
 8005178:	eba0 000a 	sub.w	r0, r0, sl
 800517c:	fa03 f000 	lsl.w	r0, r3, r0
 8005180:	9b04      	ldr	r3, [sp, #16]
 8005182:	4303      	orrs	r3, r0
 8005184:	3401      	adds	r4, #1
 8005186:	9304      	str	r3, [sp, #16]
 8005188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800518c:	482c      	ldr	r0, [pc, #176]	; (8005240 <_vfiprintf_r+0x250>)
 800518e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005192:	2206      	movs	r2, #6
 8005194:	f7fb f84c 	bl	8000230 <memchr>
 8005198:	2800      	cmp	r0, #0
 800519a:	d03f      	beq.n	800521c <_vfiprintf_r+0x22c>
 800519c:	4b29      	ldr	r3, [pc, #164]	; (8005244 <_vfiprintf_r+0x254>)
 800519e:	bb1b      	cbnz	r3, 80051e8 <_vfiprintf_r+0x1f8>
 80051a0:	9b03      	ldr	r3, [sp, #12]
 80051a2:	3307      	adds	r3, #7
 80051a4:	f023 0307 	bic.w	r3, r3, #7
 80051a8:	3308      	adds	r3, #8
 80051aa:	9303      	str	r3, [sp, #12]
 80051ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ae:	443b      	add	r3, r7
 80051b0:	9309      	str	r3, [sp, #36]	; 0x24
 80051b2:	e767      	b.n	8005084 <_vfiprintf_r+0x94>
 80051b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80051b8:	460c      	mov	r4, r1
 80051ba:	2001      	movs	r0, #1
 80051bc:	e7a5      	b.n	800510a <_vfiprintf_r+0x11a>
 80051be:	2300      	movs	r3, #0
 80051c0:	3401      	adds	r4, #1
 80051c2:	9305      	str	r3, [sp, #20]
 80051c4:	4619      	mov	r1, r3
 80051c6:	f04f 0c0a 	mov.w	ip, #10
 80051ca:	4620      	mov	r0, r4
 80051cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051d0:	3a30      	subs	r2, #48	; 0x30
 80051d2:	2a09      	cmp	r2, #9
 80051d4:	d903      	bls.n	80051de <_vfiprintf_r+0x1ee>
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0c5      	beq.n	8005166 <_vfiprintf_r+0x176>
 80051da:	9105      	str	r1, [sp, #20]
 80051dc:	e7c3      	b.n	8005166 <_vfiprintf_r+0x176>
 80051de:	fb0c 2101 	mla	r1, ip, r1, r2
 80051e2:	4604      	mov	r4, r0
 80051e4:	2301      	movs	r3, #1
 80051e6:	e7f0      	b.n	80051ca <_vfiprintf_r+0x1da>
 80051e8:	ab03      	add	r3, sp, #12
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	462a      	mov	r2, r5
 80051ee:	4b16      	ldr	r3, [pc, #88]	; (8005248 <_vfiprintf_r+0x258>)
 80051f0:	a904      	add	r1, sp, #16
 80051f2:	4630      	mov	r0, r6
 80051f4:	f3af 8000 	nop.w
 80051f8:	4607      	mov	r7, r0
 80051fa:	1c78      	adds	r0, r7, #1
 80051fc:	d1d6      	bne.n	80051ac <_vfiprintf_r+0x1bc>
 80051fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005200:	07d9      	lsls	r1, r3, #31
 8005202:	d405      	bmi.n	8005210 <_vfiprintf_r+0x220>
 8005204:	89ab      	ldrh	r3, [r5, #12]
 8005206:	059a      	lsls	r2, r3, #22
 8005208:	d402      	bmi.n	8005210 <_vfiprintf_r+0x220>
 800520a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800520c:	f7ff fd7f 	bl	8004d0e <__retarget_lock_release_recursive>
 8005210:	89ab      	ldrh	r3, [r5, #12]
 8005212:	065b      	lsls	r3, r3, #25
 8005214:	f53f af12 	bmi.w	800503c <_vfiprintf_r+0x4c>
 8005218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800521a:	e711      	b.n	8005040 <_vfiprintf_r+0x50>
 800521c:	ab03      	add	r3, sp, #12
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	462a      	mov	r2, r5
 8005222:	4b09      	ldr	r3, [pc, #36]	; (8005248 <_vfiprintf_r+0x258>)
 8005224:	a904      	add	r1, sp, #16
 8005226:	4630      	mov	r0, r6
 8005228:	f000 f880 	bl	800532c <_printf_i>
 800522c:	e7e4      	b.n	80051f8 <_vfiprintf_r+0x208>
 800522e:	bf00      	nop
 8005230:	08005878 	.word	0x08005878
 8005234:	08005898 	.word	0x08005898
 8005238:	08005858 	.word	0x08005858
 800523c:	080058b8 	.word	0x080058b8
 8005240:	080058c2 	.word	0x080058c2
 8005244:	00000000 	.word	0x00000000
 8005248:	08004fcb 	.word	0x08004fcb
 800524c:	080058be 	.word	0x080058be

08005250 <_printf_common>:
 8005250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005254:	4616      	mov	r6, r2
 8005256:	4699      	mov	r9, r3
 8005258:	688a      	ldr	r2, [r1, #8]
 800525a:	690b      	ldr	r3, [r1, #16]
 800525c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005260:	4293      	cmp	r3, r2
 8005262:	bfb8      	it	lt
 8005264:	4613      	movlt	r3, r2
 8005266:	6033      	str	r3, [r6, #0]
 8005268:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800526c:	4607      	mov	r7, r0
 800526e:	460c      	mov	r4, r1
 8005270:	b10a      	cbz	r2, 8005276 <_printf_common+0x26>
 8005272:	3301      	adds	r3, #1
 8005274:	6033      	str	r3, [r6, #0]
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	0699      	lsls	r1, r3, #26
 800527a:	bf42      	ittt	mi
 800527c:	6833      	ldrmi	r3, [r6, #0]
 800527e:	3302      	addmi	r3, #2
 8005280:	6033      	strmi	r3, [r6, #0]
 8005282:	6825      	ldr	r5, [r4, #0]
 8005284:	f015 0506 	ands.w	r5, r5, #6
 8005288:	d106      	bne.n	8005298 <_printf_common+0x48>
 800528a:	f104 0a19 	add.w	sl, r4, #25
 800528e:	68e3      	ldr	r3, [r4, #12]
 8005290:	6832      	ldr	r2, [r6, #0]
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	42ab      	cmp	r3, r5
 8005296:	dc26      	bgt.n	80052e6 <_printf_common+0x96>
 8005298:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800529c:	1e13      	subs	r3, r2, #0
 800529e:	6822      	ldr	r2, [r4, #0]
 80052a0:	bf18      	it	ne
 80052a2:	2301      	movne	r3, #1
 80052a4:	0692      	lsls	r2, r2, #26
 80052a6:	d42b      	bmi.n	8005300 <_printf_common+0xb0>
 80052a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052ac:	4649      	mov	r1, r9
 80052ae:	4638      	mov	r0, r7
 80052b0:	47c0      	blx	r8
 80052b2:	3001      	adds	r0, #1
 80052b4:	d01e      	beq.n	80052f4 <_printf_common+0xa4>
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	68e5      	ldr	r5, [r4, #12]
 80052ba:	6832      	ldr	r2, [r6, #0]
 80052bc:	f003 0306 	and.w	r3, r3, #6
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	bf08      	it	eq
 80052c4:	1aad      	subeq	r5, r5, r2
 80052c6:	68a3      	ldr	r3, [r4, #8]
 80052c8:	6922      	ldr	r2, [r4, #16]
 80052ca:	bf0c      	ite	eq
 80052cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052d0:	2500      	movne	r5, #0
 80052d2:	4293      	cmp	r3, r2
 80052d4:	bfc4      	itt	gt
 80052d6:	1a9b      	subgt	r3, r3, r2
 80052d8:	18ed      	addgt	r5, r5, r3
 80052da:	2600      	movs	r6, #0
 80052dc:	341a      	adds	r4, #26
 80052de:	42b5      	cmp	r5, r6
 80052e0:	d11a      	bne.n	8005318 <_printf_common+0xc8>
 80052e2:	2000      	movs	r0, #0
 80052e4:	e008      	b.n	80052f8 <_printf_common+0xa8>
 80052e6:	2301      	movs	r3, #1
 80052e8:	4652      	mov	r2, sl
 80052ea:	4649      	mov	r1, r9
 80052ec:	4638      	mov	r0, r7
 80052ee:	47c0      	blx	r8
 80052f0:	3001      	adds	r0, #1
 80052f2:	d103      	bne.n	80052fc <_printf_common+0xac>
 80052f4:	f04f 30ff 	mov.w	r0, #4294967295
 80052f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052fc:	3501      	adds	r5, #1
 80052fe:	e7c6      	b.n	800528e <_printf_common+0x3e>
 8005300:	18e1      	adds	r1, r4, r3
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	2030      	movs	r0, #48	; 0x30
 8005306:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800530a:	4422      	add	r2, r4
 800530c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005310:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005314:	3302      	adds	r3, #2
 8005316:	e7c7      	b.n	80052a8 <_printf_common+0x58>
 8005318:	2301      	movs	r3, #1
 800531a:	4622      	mov	r2, r4
 800531c:	4649      	mov	r1, r9
 800531e:	4638      	mov	r0, r7
 8005320:	47c0      	blx	r8
 8005322:	3001      	adds	r0, #1
 8005324:	d0e6      	beq.n	80052f4 <_printf_common+0xa4>
 8005326:	3601      	adds	r6, #1
 8005328:	e7d9      	b.n	80052de <_printf_common+0x8e>
	...

0800532c <_printf_i>:
 800532c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005330:	7e0f      	ldrb	r7, [r1, #24]
 8005332:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005334:	2f78      	cmp	r7, #120	; 0x78
 8005336:	4691      	mov	r9, r2
 8005338:	4680      	mov	r8, r0
 800533a:	460c      	mov	r4, r1
 800533c:	469a      	mov	sl, r3
 800533e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005342:	d807      	bhi.n	8005354 <_printf_i+0x28>
 8005344:	2f62      	cmp	r7, #98	; 0x62
 8005346:	d80a      	bhi.n	800535e <_printf_i+0x32>
 8005348:	2f00      	cmp	r7, #0
 800534a:	f000 80d8 	beq.w	80054fe <_printf_i+0x1d2>
 800534e:	2f58      	cmp	r7, #88	; 0x58
 8005350:	f000 80a3 	beq.w	800549a <_printf_i+0x16e>
 8005354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800535c:	e03a      	b.n	80053d4 <_printf_i+0xa8>
 800535e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005362:	2b15      	cmp	r3, #21
 8005364:	d8f6      	bhi.n	8005354 <_printf_i+0x28>
 8005366:	a101      	add	r1, pc, #4	; (adr r1, 800536c <_printf_i+0x40>)
 8005368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800536c:	080053c5 	.word	0x080053c5
 8005370:	080053d9 	.word	0x080053d9
 8005374:	08005355 	.word	0x08005355
 8005378:	08005355 	.word	0x08005355
 800537c:	08005355 	.word	0x08005355
 8005380:	08005355 	.word	0x08005355
 8005384:	080053d9 	.word	0x080053d9
 8005388:	08005355 	.word	0x08005355
 800538c:	08005355 	.word	0x08005355
 8005390:	08005355 	.word	0x08005355
 8005394:	08005355 	.word	0x08005355
 8005398:	080054e5 	.word	0x080054e5
 800539c:	08005409 	.word	0x08005409
 80053a0:	080054c7 	.word	0x080054c7
 80053a4:	08005355 	.word	0x08005355
 80053a8:	08005355 	.word	0x08005355
 80053ac:	08005507 	.word	0x08005507
 80053b0:	08005355 	.word	0x08005355
 80053b4:	08005409 	.word	0x08005409
 80053b8:	08005355 	.word	0x08005355
 80053bc:	08005355 	.word	0x08005355
 80053c0:	080054cf 	.word	0x080054cf
 80053c4:	682b      	ldr	r3, [r5, #0]
 80053c6:	1d1a      	adds	r2, r3, #4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	602a      	str	r2, [r5, #0]
 80053cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053d4:	2301      	movs	r3, #1
 80053d6:	e0a3      	b.n	8005520 <_printf_i+0x1f4>
 80053d8:	6820      	ldr	r0, [r4, #0]
 80053da:	6829      	ldr	r1, [r5, #0]
 80053dc:	0606      	lsls	r6, r0, #24
 80053de:	f101 0304 	add.w	r3, r1, #4
 80053e2:	d50a      	bpl.n	80053fa <_printf_i+0xce>
 80053e4:	680e      	ldr	r6, [r1, #0]
 80053e6:	602b      	str	r3, [r5, #0]
 80053e8:	2e00      	cmp	r6, #0
 80053ea:	da03      	bge.n	80053f4 <_printf_i+0xc8>
 80053ec:	232d      	movs	r3, #45	; 0x2d
 80053ee:	4276      	negs	r6, r6
 80053f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053f4:	485e      	ldr	r0, [pc, #376]	; (8005570 <_printf_i+0x244>)
 80053f6:	230a      	movs	r3, #10
 80053f8:	e019      	b.n	800542e <_printf_i+0x102>
 80053fa:	680e      	ldr	r6, [r1, #0]
 80053fc:	602b      	str	r3, [r5, #0]
 80053fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005402:	bf18      	it	ne
 8005404:	b236      	sxthne	r6, r6
 8005406:	e7ef      	b.n	80053e8 <_printf_i+0xbc>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	6820      	ldr	r0, [r4, #0]
 800540c:	1d19      	adds	r1, r3, #4
 800540e:	6029      	str	r1, [r5, #0]
 8005410:	0601      	lsls	r1, r0, #24
 8005412:	d501      	bpl.n	8005418 <_printf_i+0xec>
 8005414:	681e      	ldr	r6, [r3, #0]
 8005416:	e002      	b.n	800541e <_printf_i+0xf2>
 8005418:	0646      	lsls	r6, r0, #25
 800541a:	d5fb      	bpl.n	8005414 <_printf_i+0xe8>
 800541c:	881e      	ldrh	r6, [r3, #0]
 800541e:	4854      	ldr	r0, [pc, #336]	; (8005570 <_printf_i+0x244>)
 8005420:	2f6f      	cmp	r7, #111	; 0x6f
 8005422:	bf0c      	ite	eq
 8005424:	2308      	moveq	r3, #8
 8005426:	230a      	movne	r3, #10
 8005428:	2100      	movs	r1, #0
 800542a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800542e:	6865      	ldr	r5, [r4, #4]
 8005430:	60a5      	str	r5, [r4, #8]
 8005432:	2d00      	cmp	r5, #0
 8005434:	bfa2      	ittt	ge
 8005436:	6821      	ldrge	r1, [r4, #0]
 8005438:	f021 0104 	bicge.w	r1, r1, #4
 800543c:	6021      	strge	r1, [r4, #0]
 800543e:	b90e      	cbnz	r6, 8005444 <_printf_i+0x118>
 8005440:	2d00      	cmp	r5, #0
 8005442:	d04d      	beq.n	80054e0 <_printf_i+0x1b4>
 8005444:	4615      	mov	r5, r2
 8005446:	fbb6 f1f3 	udiv	r1, r6, r3
 800544a:	fb03 6711 	mls	r7, r3, r1, r6
 800544e:	5dc7      	ldrb	r7, [r0, r7]
 8005450:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005454:	4637      	mov	r7, r6
 8005456:	42bb      	cmp	r3, r7
 8005458:	460e      	mov	r6, r1
 800545a:	d9f4      	bls.n	8005446 <_printf_i+0x11a>
 800545c:	2b08      	cmp	r3, #8
 800545e:	d10b      	bne.n	8005478 <_printf_i+0x14c>
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	07de      	lsls	r6, r3, #31
 8005464:	d508      	bpl.n	8005478 <_printf_i+0x14c>
 8005466:	6923      	ldr	r3, [r4, #16]
 8005468:	6861      	ldr	r1, [r4, #4]
 800546a:	4299      	cmp	r1, r3
 800546c:	bfde      	ittt	le
 800546e:	2330      	movle	r3, #48	; 0x30
 8005470:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005474:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005478:	1b52      	subs	r2, r2, r5
 800547a:	6122      	str	r2, [r4, #16]
 800547c:	f8cd a000 	str.w	sl, [sp]
 8005480:	464b      	mov	r3, r9
 8005482:	aa03      	add	r2, sp, #12
 8005484:	4621      	mov	r1, r4
 8005486:	4640      	mov	r0, r8
 8005488:	f7ff fee2 	bl	8005250 <_printf_common>
 800548c:	3001      	adds	r0, #1
 800548e:	d14c      	bne.n	800552a <_printf_i+0x1fe>
 8005490:	f04f 30ff 	mov.w	r0, #4294967295
 8005494:	b004      	add	sp, #16
 8005496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800549a:	4835      	ldr	r0, [pc, #212]	; (8005570 <_printf_i+0x244>)
 800549c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80054a0:	6829      	ldr	r1, [r5, #0]
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80054a8:	6029      	str	r1, [r5, #0]
 80054aa:	061d      	lsls	r5, r3, #24
 80054ac:	d514      	bpl.n	80054d8 <_printf_i+0x1ac>
 80054ae:	07df      	lsls	r7, r3, #31
 80054b0:	bf44      	itt	mi
 80054b2:	f043 0320 	orrmi.w	r3, r3, #32
 80054b6:	6023      	strmi	r3, [r4, #0]
 80054b8:	b91e      	cbnz	r6, 80054c2 <_printf_i+0x196>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	f023 0320 	bic.w	r3, r3, #32
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	2310      	movs	r3, #16
 80054c4:	e7b0      	b.n	8005428 <_printf_i+0xfc>
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	f043 0320 	orr.w	r3, r3, #32
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	2378      	movs	r3, #120	; 0x78
 80054d0:	4828      	ldr	r0, [pc, #160]	; (8005574 <_printf_i+0x248>)
 80054d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054d6:	e7e3      	b.n	80054a0 <_printf_i+0x174>
 80054d8:	0659      	lsls	r1, r3, #25
 80054da:	bf48      	it	mi
 80054dc:	b2b6      	uxthmi	r6, r6
 80054de:	e7e6      	b.n	80054ae <_printf_i+0x182>
 80054e0:	4615      	mov	r5, r2
 80054e2:	e7bb      	b.n	800545c <_printf_i+0x130>
 80054e4:	682b      	ldr	r3, [r5, #0]
 80054e6:	6826      	ldr	r6, [r4, #0]
 80054e8:	6961      	ldr	r1, [r4, #20]
 80054ea:	1d18      	adds	r0, r3, #4
 80054ec:	6028      	str	r0, [r5, #0]
 80054ee:	0635      	lsls	r5, r6, #24
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	d501      	bpl.n	80054f8 <_printf_i+0x1cc>
 80054f4:	6019      	str	r1, [r3, #0]
 80054f6:	e002      	b.n	80054fe <_printf_i+0x1d2>
 80054f8:	0670      	lsls	r0, r6, #25
 80054fa:	d5fb      	bpl.n	80054f4 <_printf_i+0x1c8>
 80054fc:	8019      	strh	r1, [r3, #0]
 80054fe:	2300      	movs	r3, #0
 8005500:	6123      	str	r3, [r4, #16]
 8005502:	4615      	mov	r5, r2
 8005504:	e7ba      	b.n	800547c <_printf_i+0x150>
 8005506:	682b      	ldr	r3, [r5, #0]
 8005508:	1d1a      	adds	r2, r3, #4
 800550a:	602a      	str	r2, [r5, #0]
 800550c:	681d      	ldr	r5, [r3, #0]
 800550e:	6862      	ldr	r2, [r4, #4]
 8005510:	2100      	movs	r1, #0
 8005512:	4628      	mov	r0, r5
 8005514:	f7fa fe8c 	bl	8000230 <memchr>
 8005518:	b108      	cbz	r0, 800551e <_printf_i+0x1f2>
 800551a:	1b40      	subs	r0, r0, r5
 800551c:	6060      	str	r0, [r4, #4]
 800551e:	6863      	ldr	r3, [r4, #4]
 8005520:	6123      	str	r3, [r4, #16]
 8005522:	2300      	movs	r3, #0
 8005524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005528:	e7a8      	b.n	800547c <_printf_i+0x150>
 800552a:	6923      	ldr	r3, [r4, #16]
 800552c:	462a      	mov	r2, r5
 800552e:	4649      	mov	r1, r9
 8005530:	4640      	mov	r0, r8
 8005532:	47d0      	blx	sl
 8005534:	3001      	adds	r0, #1
 8005536:	d0ab      	beq.n	8005490 <_printf_i+0x164>
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	079b      	lsls	r3, r3, #30
 800553c:	d413      	bmi.n	8005566 <_printf_i+0x23a>
 800553e:	68e0      	ldr	r0, [r4, #12]
 8005540:	9b03      	ldr	r3, [sp, #12]
 8005542:	4298      	cmp	r0, r3
 8005544:	bfb8      	it	lt
 8005546:	4618      	movlt	r0, r3
 8005548:	e7a4      	b.n	8005494 <_printf_i+0x168>
 800554a:	2301      	movs	r3, #1
 800554c:	4632      	mov	r2, r6
 800554e:	4649      	mov	r1, r9
 8005550:	4640      	mov	r0, r8
 8005552:	47d0      	blx	sl
 8005554:	3001      	adds	r0, #1
 8005556:	d09b      	beq.n	8005490 <_printf_i+0x164>
 8005558:	3501      	adds	r5, #1
 800555a:	68e3      	ldr	r3, [r4, #12]
 800555c:	9903      	ldr	r1, [sp, #12]
 800555e:	1a5b      	subs	r3, r3, r1
 8005560:	42ab      	cmp	r3, r5
 8005562:	dcf2      	bgt.n	800554a <_printf_i+0x21e>
 8005564:	e7eb      	b.n	800553e <_printf_i+0x212>
 8005566:	2500      	movs	r5, #0
 8005568:	f104 0619 	add.w	r6, r4, #25
 800556c:	e7f5      	b.n	800555a <_printf_i+0x22e>
 800556e:	bf00      	nop
 8005570:	080058c9 	.word	0x080058c9
 8005574:	080058da 	.word	0x080058da

08005578 <_sbrk_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	4d06      	ldr	r5, [pc, #24]	; (8005594 <_sbrk_r+0x1c>)
 800557c:	2300      	movs	r3, #0
 800557e:	4604      	mov	r4, r0
 8005580:	4608      	mov	r0, r1
 8005582:	602b      	str	r3, [r5, #0]
 8005584:	f7fb fc0e 	bl	8000da4 <_sbrk>
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	d102      	bne.n	8005592 <_sbrk_r+0x1a>
 800558c:	682b      	ldr	r3, [r5, #0]
 800558e:	b103      	cbz	r3, 8005592 <_sbrk_r+0x1a>
 8005590:	6023      	str	r3, [r4, #0]
 8005592:	bd38      	pop	{r3, r4, r5, pc}
 8005594:	20000294 	.word	0x20000294

08005598 <__sread>:
 8005598:	b510      	push	{r4, lr}
 800559a:	460c      	mov	r4, r1
 800559c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a0:	f000 f8a0 	bl	80056e4 <_read_r>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	bfab      	itete	ge
 80055a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055aa:	89a3      	ldrhlt	r3, [r4, #12]
 80055ac:	181b      	addge	r3, r3, r0
 80055ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055b2:	bfac      	ite	ge
 80055b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80055b6:	81a3      	strhlt	r3, [r4, #12]
 80055b8:	bd10      	pop	{r4, pc}

080055ba <__swrite>:
 80055ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055be:	461f      	mov	r7, r3
 80055c0:	898b      	ldrh	r3, [r1, #12]
 80055c2:	05db      	lsls	r3, r3, #23
 80055c4:	4605      	mov	r5, r0
 80055c6:	460c      	mov	r4, r1
 80055c8:	4616      	mov	r6, r2
 80055ca:	d505      	bpl.n	80055d8 <__swrite+0x1e>
 80055cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055d0:	2302      	movs	r3, #2
 80055d2:	2200      	movs	r2, #0
 80055d4:	f000 f868 	bl	80056a8 <_lseek_r>
 80055d8:	89a3      	ldrh	r3, [r4, #12]
 80055da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055e2:	81a3      	strh	r3, [r4, #12]
 80055e4:	4632      	mov	r2, r6
 80055e6:	463b      	mov	r3, r7
 80055e8:	4628      	mov	r0, r5
 80055ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055ee:	f000 b817 	b.w	8005620 <_write_r>

080055f2 <__sseek>:
 80055f2:	b510      	push	{r4, lr}
 80055f4:	460c      	mov	r4, r1
 80055f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055fa:	f000 f855 	bl	80056a8 <_lseek_r>
 80055fe:	1c43      	adds	r3, r0, #1
 8005600:	89a3      	ldrh	r3, [r4, #12]
 8005602:	bf15      	itete	ne
 8005604:	6560      	strne	r0, [r4, #84]	; 0x54
 8005606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800560a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800560e:	81a3      	strheq	r3, [r4, #12]
 8005610:	bf18      	it	ne
 8005612:	81a3      	strhne	r3, [r4, #12]
 8005614:	bd10      	pop	{r4, pc}

08005616 <__sclose>:
 8005616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800561a:	f000 b813 	b.w	8005644 <_close_r>
	...

08005620 <_write_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4d07      	ldr	r5, [pc, #28]	; (8005640 <_write_r+0x20>)
 8005624:	4604      	mov	r4, r0
 8005626:	4608      	mov	r0, r1
 8005628:	4611      	mov	r1, r2
 800562a:	2200      	movs	r2, #0
 800562c:	602a      	str	r2, [r5, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	f7fb fb67 	bl	8000d02 <_write>
 8005634:	1c43      	adds	r3, r0, #1
 8005636:	d102      	bne.n	800563e <_write_r+0x1e>
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	b103      	cbz	r3, 800563e <_write_r+0x1e>
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	bd38      	pop	{r3, r4, r5, pc}
 8005640:	20000294 	.word	0x20000294

08005644 <_close_r>:
 8005644:	b538      	push	{r3, r4, r5, lr}
 8005646:	4d06      	ldr	r5, [pc, #24]	; (8005660 <_close_r+0x1c>)
 8005648:	2300      	movs	r3, #0
 800564a:	4604      	mov	r4, r0
 800564c:	4608      	mov	r0, r1
 800564e:	602b      	str	r3, [r5, #0]
 8005650:	f7fb fb73 	bl	8000d3a <_close>
 8005654:	1c43      	adds	r3, r0, #1
 8005656:	d102      	bne.n	800565e <_close_r+0x1a>
 8005658:	682b      	ldr	r3, [r5, #0]
 800565a:	b103      	cbz	r3, 800565e <_close_r+0x1a>
 800565c:	6023      	str	r3, [r4, #0]
 800565e:	bd38      	pop	{r3, r4, r5, pc}
 8005660:	20000294 	.word	0x20000294

08005664 <_fstat_r>:
 8005664:	b538      	push	{r3, r4, r5, lr}
 8005666:	4d07      	ldr	r5, [pc, #28]	; (8005684 <_fstat_r+0x20>)
 8005668:	2300      	movs	r3, #0
 800566a:	4604      	mov	r4, r0
 800566c:	4608      	mov	r0, r1
 800566e:	4611      	mov	r1, r2
 8005670:	602b      	str	r3, [r5, #0]
 8005672:	f7fb fb6e 	bl	8000d52 <_fstat>
 8005676:	1c43      	adds	r3, r0, #1
 8005678:	d102      	bne.n	8005680 <_fstat_r+0x1c>
 800567a:	682b      	ldr	r3, [r5, #0]
 800567c:	b103      	cbz	r3, 8005680 <_fstat_r+0x1c>
 800567e:	6023      	str	r3, [r4, #0]
 8005680:	bd38      	pop	{r3, r4, r5, pc}
 8005682:	bf00      	nop
 8005684:	20000294 	.word	0x20000294

08005688 <_isatty_r>:
 8005688:	b538      	push	{r3, r4, r5, lr}
 800568a:	4d06      	ldr	r5, [pc, #24]	; (80056a4 <_isatty_r+0x1c>)
 800568c:	2300      	movs	r3, #0
 800568e:	4604      	mov	r4, r0
 8005690:	4608      	mov	r0, r1
 8005692:	602b      	str	r3, [r5, #0]
 8005694:	f7fb fb6d 	bl	8000d72 <_isatty>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	d102      	bne.n	80056a2 <_isatty_r+0x1a>
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	b103      	cbz	r3, 80056a2 <_isatty_r+0x1a>
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	bd38      	pop	{r3, r4, r5, pc}
 80056a4:	20000294 	.word	0x20000294

080056a8 <_lseek_r>:
 80056a8:	b538      	push	{r3, r4, r5, lr}
 80056aa:	4d07      	ldr	r5, [pc, #28]	; (80056c8 <_lseek_r+0x20>)
 80056ac:	4604      	mov	r4, r0
 80056ae:	4608      	mov	r0, r1
 80056b0:	4611      	mov	r1, r2
 80056b2:	2200      	movs	r2, #0
 80056b4:	602a      	str	r2, [r5, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	f7fb fb66 	bl	8000d88 <_lseek>
 80056bc:	1c43      	adds	r3, r0, #1
 80056be:	d102      	bne.n	80056c6 <_lseek_r+0x1e>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	b103      	cbz	r3, 80056c6 <_lseek_r+0x1e>
 80056c4:	6023      	str	r3, [r4, #0]
 80056c6:	bd38      	pop	{r3, r4, r5, pc}
 80056c8:	20000294 	.word	0x20000294

080056cc <__malloc_lock>:
 80056cc:	4801      	ldr	r0, [pc, #4]	; (80056d4 <__malloc_lock+0x8>)
 80056ce:	f7ff bb1d 	b.w	8004d0c <__retarget_lock_acquire_recursive>
 80056d2:	bf00      	nop
 80056d4:	20000288 	.word	0x20000288

080056d8 <__malloc_unlock>:
 80056d8:	4801      	ldr	r0, [pc, #4]	; (80056e0 <__malloc_unlock+0x8>)
 80056da:	f7ff bb18 	b.w	8004d0e <__retarget_lock_release_recursive>
 80056de:	bf00      	nop
 80056e0:	20000288 	.word	0x20000288

080056e4 <_read_r>:
 80056e4:	b538      	push	{r3, r4, r5, lr}
 80056e6:	4d07      	ldr	r5, [pc, #28]	; (8005704 <_read_r+0x20>)
 80056e8:	4604      	mov	r4, r0
 80056ea:	4608      	mov	r0, r1
 80056ec:	4611      	mov	r1, r2
 80056ee:	2200      	movs	r2, #0
 80056f0:	602a      	str	r2, [r5, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	f7fb fae8 	bl	8000cc8 <_read>
 80056f8:	1c43      	adds	r3, r0, #1
 80056fa:	d102      	bne.n	8005702 <_read_r+0x1e>
 80056fc:	682b      	ldr	r3, [r5, #0]
 80056fe:	b103      	cbz	r3, 8005702 <_read_r+0x1e>
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	bd38      	pop	{r3, r4, r5, pc}
 8005704:	20000294 	.word	0x20000294

08005708 <_init>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	bf00      	nop
 800570c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570e:	bc08      	pop	{r3}
 8005710:	469e      	mov	lr, r3
 8005712:	4770      	bx	lr

08005714 <_fini>:
 8005714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005716:	bf00      	nop
 8005718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800571a:	bc08      	pop	{r3}
 800571c:	469e      	mov	lr, r3
 800571e:	4770      	bx	lr
